C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE BOOTLOADER
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\Bootloader.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\Bootloader.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(DEB
                    -UG) WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/Bootloader.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\Bootloader.o
                    -bj)

line level    source

   1          /*******************************************************************************
   2          * File Name: Bootloader.c
   3          * Version 1.30
   4          *
   5          *  Description:
   6          *   Provides an API for the Bootloader component. The API includes functions
   7          *   for starting boot loading operations, validating the application and
   8          *   jumping to the application.
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "Bootloader_PVT.h"
  18          
  19          #include "project.h"
  20          #include <string.h>
  21          
  22          
  23          /*******************************************************************************
  24          * The Checksum and SizeBytes are forcefully set in code. We then post process
  25          * the hex file from the linker and inject their values then. When the hex file
  26          * is loaded onto the device these two variables should have valid values.
  27          * Because the compiler can do optimizations to remove the constant
  28          * accesses, these should not be accessed directly. Instead, the variables
  29          * CyBtldr_ChecksumAccess & CyBtldr_SizeBytesAccess should be used to get the
  30          * proper values at runtime.
  31          *******************************************************************************/
  32          #if defined(__ARMCC_VERSION) || defined (__GNUC__)
                  __attribute__((section (".bootloader"), used))
              #elif defined (__ICCARM__)
                  #pragma location=".bootloader"
              #endif  /* defined(__ARMCC_VERSION) || defined (__GNUC__) */
  37          
  38          #if defined(__ARMCC_VERSION) || defined (__GNUC__) || defined (__C51__)
  39                     const uint8  CYCODE Bootloader_Checksum = 0u;
  40          #elif defined (__ICCARM__)
                  __root const uint8  CYCODE Bootloader_Checksum = 0u;
              #endif  /* defined(__ARMCC_VERSION) || defined (__GNUC__) || defined (__C51__) */
  43          const uint8  CYCODE *Bootloader_ChecksumAccess  = (const uint8  CYCODE *)(&Bootloader_Checksum);
  44          
  45          #if defined(__ARMCC_VERSION) || defined (__GNUC__)
                  __attribute__((section (".bootloader"), used))
              #elif defined (__ICCARM__)
                  #pragma location=".bootloader"
              #endif  /* defined(__ARMCC_VERSION) || defined (__GNUC__) */
  50          
  51          const uint32 CYCODE Bootloader_SizeBytes = 0xFFFFFFFFu;
  52          const uint32 CYCODE *Bootloader_SizeBytesAccess = (const uint32 CYCODE *)(&Bootloader_SizeBytes);
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 2   

  53          
  54          
  55          #if(0u != Bootloader_DUAL_APP_BOOTLOADER)
                  uint8 Bootloader_activeApp = Bootloader_MD_BTLDB_ACTIVE_NONE;
              #else
  58              #define Bootloader_activeApp      (Bootloader_MD_BTLDB_ACTIVE_0)
  59          #endif  /* (0u != Bootloader_DUAL_APP_BOOTLOADER) */
  60          
  61          
  62          /***************************************
  63          *     Function Prototypes
  64          ***************************************/
  65          static cystatus Bootloader_WritePacket(uint8 status, uint8 buffer[], uint16 size) CYSMALL \
  66                                              ;
  67          
  68          static uint16   Bootloader_CalcPacketChecksum(const uint8 buffer[], uint16 size) CYSMALL \
  69                                              ;
  70          
  71          static void     Bootloader_HostLink(uint8 timeOut) \
  72                                              ;
  73          
  74          static void     Bootloader_LaunchApplication(void) CYSMALL \
  75                                              ;
  76          
  77          #if(!CY_PSOC3)
                  /* Implementation for the PSoC 3 resides in a Bootloader_psoc3.a51 file.  */
                  static void     Bootloader_LaunchBootloadable(uint32 appAddr);
              #endif  /* (!CY_PSOC3) */
  81          
  82          
  83          /*******************************************************************************
  84          * Function Name: Bootloader_CalcPacketChecksum
  85          ********************************************************************************
  86          *
  87          * Summary:
  88          *  This computes the 16 bit checksum for the provided number of bytes contained
  89          *  in the provided buffer
  90          *
  91          * Parameters:
  92          *  buffer:
  93          *     The buffer containing the data to compute the checksum for
  94          *  size:
  95          *     The number of bytes in the buffer to compute the checksum for
  96          *
  97          * Returns:
  98          *  16 bit checksum for the provided data
  99          *
 100          *******************************************************************************/
 101          static uint16 Bootloader_CalcPacketChecksum(const uint8 buffer[], uint16 size) \
 102                              CYSMALL 
 103          {
 104   1          #if(0u != Bootloader_PACKET_CHECKSUM_CRC)
 105   1      
 106   1              uint16 CYDATA crc = Bootloader_CRC_CCITT_INITIAL_VALUE;
 107   1              uint16 CYDATA tmp;
 108   1              uint8  CYDATA i;
 109   1              uint16 CYDATA tmpIndex = size;
 110   1      
 111   1              if(0u == size)
 112   1              {
 113   2                  crc = ~crc;
 114   2              }
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 3   

 115   1              else
 116   1              {
 117   2                  do
 118   2                  {
 119   3                      tmp = buffer[tmpIndex - size];
 120   3      
 121   3                      for (i = 0u; i < 8u; i++)
 122   3                      {
 123   4                          if (0u != ((crc & 0x0001u) ^ (tmp & 0x0001u)))
 124   4                          {
 125   5                              crc = (crc >> 1u) ^ Bootloader_CRC_CCITT_POLYNOMIAL;
 126   5                          }
 127   4                          else
 128   4                          {
 129   5                              crc >>= 1u;
 130   5                          }
 131   4      
 132   4                          tmp >>= 1u;
 133   4                      }
 134   3      
 135   3                      size--;
 136   3                  }
 137   2                  while(0u != size);
 138   2      
 139   2                  crc = ~crc;
 140   2                  tmp = crc;
 141   2                  crc = ( uint16 )(crc << 8u) | (tmp >> 8u);
 142   2              }
 143   1      
 144   1              return(crc);
 145   1      
 146   1          #else
              
                      uint16 CYDATA sum = 0u;
              
                      while (size > 0u)
                      {
                          sum += buffer[size - 1u];
                          size--;
                      }
              
                      return(( uint16 )1u + ( uint16 )(~sum));
              
                  #endif /* (0u != Bootloader_PACKET_CHECKSUM_CRC) */
 159   1      }
 160          
 161          
 162          /*******************************************************************************
 163          * Function Name: Bootloader_Calc8BitSum
 164          ********************************************************************************
 165          *
 166          * Summary:
 167          *  This computes the 8 bit sum for the provided number of bytes contained in
 168          *  FLASH (if baseAddr equals CY_FLASH_BASE) or EEPROM (if baseAddr equals
 169          *  CY_EEPROM_BASE).
 170          *
 171          * Parameters:
 172          * baseAddr:
 173          *   CY_FLASH_BASE
 174          *   CY_EEPROM_BASE - applicable only for PSoC 3 / PSoC 5LP devices.
 175          *
 176          *  start:
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 4   

 177          *     The starting address to start summing data for
 178          *  size:
 179          *     The number of bytes to read and compute the sum for
 180          *
 181          * Returns:
 182          *   8 bit sum for the provided data
 183          *
 184          *******************************************************************************/
 185          uint8 Bootloader_Calc8BitSum(uint32 baseAddr, uint32 start, uint32 size) \
 186                          CYSMALL 
 187          {
 188   1          uint8 CYDATA sum = 0u;
 189   1      
 190   1          #if(!CY_PSOC4)
 191   1              CYASSERT((baseAddr == CY_EEPROM_BASE) || (baseAddr == CY_FLASH_BASE));
 192   1          #else
                      CYASSERT(baseAddr == CY_FLASH_BASE);
                  #endif  /* (!CY_PSOC4) */
 195   1      
 196   1          while (size > 0u)
 197   1          {
 198   2              size--;
 199   2              sum += (*((uint8  *)(baseAddr + start + size)));
 200   2          }
 201   1      
 202   1          return(sum);
 203   1      }
 204          
 205          
 206          /*******************************************************************************
 207          * Function Name: Bootloader_Start
 208          ********************************************************************************
 209          * Summary:
 210          *  This function is called in order to execute the following algorithm:
 211          *
 212          *  - Identify the active bootloadable application (applicable only to
 213          *    the Multi-application bootloader)
 214          *
 215          *  - Validate the bootloader application (design-time configurable, Bootloader
 216          *    application validation option of the component customizer)
 217          *
 218          *  - Validate the active bootloadable application. If active bootloadable
 219          *    application is not valid, and the other bootloadable application (inactive)
 220          *    is valid, the last one is started.
 221          *
 222          *  - Run a communication subroutine (design-time configurable, Wait for command
 223          *    option of the component customizer)
 224          *
 225          *  - Schedule the bootloadable and reset the device
 226          *
 227          * Parameters:
 228          *  None
 229          *
 230          * Return:
 231          *  This method will never return. It will either load a new application and
 232          *  reset the device or jump directly to the existing application. The CPU is
 233          *  halted, if validation failed when "Bootloader application validation" option
 234          *  is enabled.
 235          *  PSoC 3/PSoC 5: The CPU is halted if Flash initialization fails.
 236          *
 237          * Side Effects:
 238          *  If Bootloader application validation option is enabled and this method
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 5   

 239          *  determines that the bootloader application itself is corrupt, this method
 240          *  will not return, instead it will simply hang the application.
 241          *
 242          *******************************************************************************/
 243          void Bootloader_Start(void) CYSMALL 
 244          {
 245   1          #if(0u != Bootloader_BOOTLOADER_APP_VALIDATION)
 246   1              uint8 CYDATA calcedChecksum;
 247   1          #endif    /* (0u != Bootloader_BOOTLOADER_APP_VALIDATION) */
 248   1      
 249   1          #if(!CY_PSOC4)
 250   1              #if(0u != Bootloader_FAST_APP_VALIDATION)
                          #if !defined(CY_BOOT_VERSION)
              
                              /* Not required starting from cy_boot 4.20 */
                              uint8 CYXDATA Bootloader_flashBuffer[Bootloader_FROW_SIZE];
              
                          #endif /* !defined(CY_BOOT_VERSION) */
                      #endif  /* (0u != Bootloader_FAST_APP_VALIDATION) */
 258   1          #endif  /* (!CY_PSOC4) */
 259   1      
 260   1          cystatus validApp  = CYRET_BAD_DATA;
 261   1      
 262   1      
 263   1          /* Identify active bootloadable application */
 264   1          #if(0u != Bootloader_DUAL_APP_BOOTLOADER)
              
                      /* Assumes no active bootloadable application. Bootloader is active. */
                      Bootloader_activeApp = Bootloader_MD_BTLDB_ACTIVE_NONE;
              
                      /* Bootloadable # A is active */
                      if(Bootloader_GetMetadata(Bootloader_GET_BTLDB_ACTIVE, 0u) == Bootloader_MD_BTLDB_IS_ACTIVE)
                      {
                          /*******************************************************************
                          * -----------------------------------------------------------
                          * |      | Bootloadable A | Bootloadable B |                |
                          * | Case |---------------------------------|     Action     |
                          * |      | Active | Valid | Active | Valid |                |
                          * |------|--------------------------------------------------|
                          * |  9   |    1   |   0   |   0    |   0   | Bootloader     |
                          * |  10  |    1   |   0   |   0    |   1   | Bootloadable B |
                          * |  11  |    1   |   0   |   1    |   0   | Bootloader     |
                          * |  12  |    1   |   0   |   1    |   1   | Bootloadable B |
                          * |  13  |    1   |   1   |   0    |   0   | Bootloadable A |
                          * |  14  |    1   |   1   |   0    |   1   | Bootloadable A |
                          * |  15  |    1   |   1   |   1    |   0   | Bootloadable A |
                          * |  16  |    1   |   1   |   1    |   1   | Bootloadable A |
                          * -----------------------------------------------------------
                          *******************************************************************/
                          if (CYRET_SUCCESS == Bootloader_ValidateBootloadable(Bootloader_MD_BTLDB_ACTIVE_0))
                          {
                              /* Cases # 13,  14, 15, and 16 */
                              Bootloader_activeApp = Bootloader_MD_BTLDB_ACTIVE_0;
                              validApp = CYRET_SUCCESS;
                          }
                          else
                          {
                              if (CYRET_SUCCESS == Bootloader_ValidateBootloadable(Bootloader_MD_BTLDB_ACTIVE_1))
                              {
                                  /* Cases # 10 and 12 */
                                  Bootloader_activeApp = Bootloader_MD_BTLDB_ACTIVE_1;
                                  validApp = CYRET_SUCCESS;
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 6   

                              }
                          }
                      }
              
                      /*  Active bootloadable application is not identified */
                      if(Bootloader_activeApp == Bootloader_MD_BTLDB_ACTIVE_NONE)
                      {
                          /*******************************************************************
                          * -----------------------------------------------------------
                          * |      | Bootloadable A | Bootloadable B |                |
                          * | Case |---------------------------------|     Action     |
                          * |      | Active | Valid | Active | Valid |                |
                          * |------|--------------------------------------------------|
                          * |  1   |    0   |   0   |   0    |   0   | Bootloader     |
                          * |  2   |    0   |   0   |   0    |   1   | Bootloader     |
                          * |  3   |    0   |   0   |   1    |   0   | Bootloader     |
                          * |  4   |    0   |   0   |   1    |   1   | Bootloadable B |
                          * |  5   |    0   |   1   |   0    |   0   | Bootloader     |
                          * |  6   |    0   |   1   |   0    |   1   | Bootloader     |
                          * |  7   |    0   |   1   |   1    |   0   | Bootloadable A |
                          * |  8   |    0   |   1   |   1    |   1   | Bootloadable B |
                          * -----------------------------------------------------------
                          *******************************************************************/
                          if (Bootloader_GetMetadata(Bootloader_GET_BTLDB_ACTIVE, 1u) ==
                                  Bootloader_MD_BTLDB_IS_ACTIVE)
                          {
                              /* Cases # 3, 4, 7, and 8 */
                              if (CYRET_SUCCESS == Bootloader_ValidateBootloadable(Bootloader_MD_BTLDB_ACTIVE_1))
                              {
                                  /* Cases # 4 and 8 */
                                  Bootloader_activeApp = Bootloader_MD_BTLDB_ACTIVE_1;
                                  validApp = CYRET_SUCCESS;
                              }
                              else
                              {
                                  if (CYRET_SUCCESS == Bootloader_ValidateBootloadable(Bootloader_MD_BTLDB_ACTIVE_0))
                                  {
                                      /* Cases # 7 */
                                      Bootloader_activeApp = Bootloader_MD_BTLDB_ACTIVE_0;
                                      validApp = CYRET_SUCCESS;
                                  }
                              }
                          }
                      }
                  #else
 346   1              if (CYRET_SUCCESS == Bootloader_ValidateBootloadable(Bootloader_MD_BTLDB_ACTIVE_0))
 347   1              {
 348   2                  validApp = CYRET_SUCCESS;
 349   2              }
 350   1          #endif  /* (0u != Bootloader_DUAL_APP_BOOTLOADER) */
 351   1      
 352   1      
 353   1          /* Initialize Flash subsystem for non-PSoC 4 devices */
 354   1          #if(!CY_PSOC4)
 355   1              #if(0u != Bootloader_FAST_APP_VALIDATION)
              
                          if (CYRET_SUCCESS != CySetTemp())
                          {
                              CyHalt(0x00u);
                          }
              
                          #if !defined(CY_BOOT_VERSION)
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 7   

              
                              /* Not required with cy_boot 4.20 */
                              if (CYRET_SUCCESS != CySetFlashEEBuffer(Bootloader_flashBuffer))
                              {
                                  CyHalt(0x00u);
                              }
              
                          #endif /* !defined(CY_BOOT_VERSION) */
                      #endif  /* (0u != Bootloader_FAST_APP_VALIDATION) */
 372   1          #endif  /* (CY_PSOC4) */
 373   1      
 374   1      
 375   1          /***********************************************************************
 376   1          * Bootloader Application Validation
 377   1          *
 378   1          * Halt the device if:
 379   1          *  - A calculated checksum does not match the one stored in the metadata
 380   1          *     section.
 381   1          *  - There is an invalid pointer to the place where the bootloader
 382   1          *    application ends.
 383   1          *  - Flash subsystem was not initialized correctly
 384   1          ***********************************************************************/
 385   1          #if(0u != Bootloader_BOOTLOADER_APP_VALIDATION)
 386   1      
 387   1              /* Calculate Bootloader application checksum */
 388   1              calcedChecksum = Bootloader_Calc8BitSum(CY_FLASH_BASE,
 389   1                      Bootloader_MD_BTLDR_ADDR_PTR,
 390   1                      *Bootloader_SizeBytesAccess - Bootloader_MD_BTLDR_ADDR_PTR);
 391   1      
 392   1              /* we included checksum, so remove it */
 393   1              calcedChecksum -= *Bootloader_ChecksumAccess;
 394   1              calcedChecksum = ( uint8 )1u + ( uint8 )(~calcedChecksum);
 395   1      
 396   1              /* Checksum and pointer to bootloader verification */
 397   1              if((calcedChecksum != *Bootloader_ChecksumAccess) ||
 398   1                 (0u == *Bootloader_SizeBytesAccess))
 399   1              {
 400   2                  CyHalt(0x00u);
 401   2              }
 402   1      
 403   1          #endif  /* (0u != Bootloader_BOOTLOADER_APP_VALIDATION) */
 404   1      
 405   1      
 406   1          /***********************************************************************
 407   1          * If the active bootloadable application is invalid or a bootloader
 408   1          * application is scheduled - do the following:
 409   1          *  - schedule the bootloader application to be run after software reset
 410   1          *  - Go to the communication subroutine. The HostLink() will wait for
 411   1          *    the commands forever.
 412   1          ***********************************************************************/
 413   1          if ((Bootloader_GET_RUN_TYPE == Bootloader_START_BTLDR) ||
 414   1              (CYRET_SUCCESS != validApp))
 415   1          {
 416   2              Bootloader_SET_RUN_TYPE(0u);
 417   2      
 418   2              Bootloader_HostLink(Bootloader_WAIT_FOR_COMMAND_FOREVER);
 419   2          }
 420   1      
 421   1      
 422   1          /* Go to communication subroutine. Will wait for commands for specifed time */
 423   1          #if(0u != Bootloader_WAIT_FOR_COMMAND)
 424   1      
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 8   

 425   1              /* Timeout is in 100s of milliseconds */
 426   1              Bootloader_HostLink(Bootloader_WAIT_FOR_COMMAND_TIME);
 427   1      
 428   1          #endif  /* (0u != Bootloader_WAIT_FOR_COMMAND) */
 429   1      
 430   1      
 431   1          /* Schedule bootloadable application and perform software reset */
 432   1          Bootloader_LaunchApplication();
 433   1      }
 434          
 435          
 436          /*******************************************************************************
 437          * Function Name: Bootloader_LaunchApplication
 438          ********************************************************************************
 439          *
 440          * Summary:
 441          *  Schedules bootloadable application and resets device
 442          *
 443          * Parameters:
 444          *  None
 445          *
 446          * Returns:
 447          *  This method will never return.
 448          *
 449          *******************************************************************************/
 450          static void Bootloader_LaunchApplication(void) CYSMALL 
 451          {
 452   1          /* Schedule Bootloadable to start after reset */
 453   1          Bootloader_SET_RUN_TYPE(Bootloader_START_APP);
 454   1      
 455   1          CySoftwareReset();
 456   1      }
 457          
 458          
 459          /*******************************************************************************
 460          * Function Name: Bootloader_Exit
 461          ********************************************************************************
 462          *
 463          * Summary:
 464          *  Schedules the specified application and performs software reset to launch
 465          *  a specified application.
 466          *
 467          *  If the specified application is not valid, the Bootloader (the result of the
 468          *  ValidateBootloadable() function execution returns other than CYRET_SUCCESS,
 469          *  the bootloader application is launched.
 470          *
 471          * Parameters:
 472          *  appId: application to be started:
 473          *  Bootloader_EXIT_TO_BTLDR   - Bootloader application will be started on
 474          *                                     software reset.
 475          *  Bootloader_EXIT_TO_BTLDB,
 476          *  Bootloader_EXIT_TO_BTLDB_1 - Bootloadable application # 1 will be
 477          *                                     started on software reset.
 478          *  Bootloader_EXIT_TO_BTLDB_2 - Bootloadable application # 2 will be
 479          *                                     started on software reset. Available only
 480          *                                     if Multi-Application option is enabled in
 481          *                                     the component customizer.
 482          * Returns:
 483          *  This function never returns.
 484          *
 485          *******************************************************************************/
 486          void Bootloader_Exit(uint8 appId) CYSMALL 
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 9   

 487          {
 488   1          if(Bootloader_EXIT_TO_BTLDR == appId)
 489   1          {
 490   2              Bootloader_SET_RUN_TYPE(0x0u);
 491   2          }
 492   1          else
 493   1          {
 494   2              if(CYRET_SUCCESS == Bootloader_ValidateBootloadable(appId))
 495   2              {
 496   3                  /* Set active application in metadata */
 497   3                  uint8 CYDATA idx;
 498   3                  for(idx = 0u; idx < Bootloader_MAX_NUM_OF_BTLDB; idx++)
 499   3                  {
 500   4                      Bootloader_SetFlashByte((uint32) Bootloader_MD_BTLDB_ACTIVE_OFFSET(idx),
 501   4                                                    (uint8 )(idx == appId));
 502   4                  }
 503   3      
 504   3              #if(0u != Bootloader_DUAL_APP_BOOTLOADER)
                          Bootloader_activeApp = appId;
                      #endif /* (0u != Bootloader_DUAL_APP_BOOTLOADER) */
 507   3      
 508   3                  Bootloader_SET_RUN_TYPE(Bootloader_SCHEDULE_BTLDB);
 509   3              }
 510   2              else
 511   2              {
 512   3                  Bootloader_SET_RUN_TYPE(0u);
 513   3              }
 514   2          }
 515   1      
 516   1          CySoftwareReset();
 517   1      }
 518          
 519          
 520          /*******************************************************************************
 521          * Function Name: CyBtldr_CheckLaunch
 522          ********************************************************************************
 523          *
 524          * Summary:
 525          *  This routine checks if the bootloader or the bootloadable application has to
 526          *  be run.  If the application has to be run, it will start executing.
 527          *  If the bootloader is to be run, it will return, so the bootloader can
 528          *  continue starting up.
 529          *
 530          * Parameters:
 531          *  None
 532          *
 533          * Returns:
 534          *  It will not return if it determines that the bootloadable application should
 535          *  be run.
 536          *
 537          *******************************************************************************/
 538          void CyBtldr_CheckLaunch(void) CYSMALL 
 539          {
 540   1      
 541   1      #if(CY_PSOC4)
              
                  /*******************************************************************************
                  * Set cyBtldrRunType to zero in case of non-software reset occurred. This means
                  * that bootloader application is scheduled - that is initial clean state. The
                  * value of cyBtldrRunType is valid only in case of software reset.
                  *******************************************************************************/
                  if (0u == (Bootloader_RES_CAUSE_REG & Bootloader_RES_CAUSE_RESET_SOFT))
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 10  

                  {
                      cyBtldrRunType = 0u;
                  }
              
              #endif /* (CY_PSOC4) */
 554   1      
 555   1      
 556   1          if (Bootloader_GET_RUN_TYPE == Bootloader_START_APP)
 557   1          {
 558   2              Bootloader_SET_RUN_TYPE(0u);
 559   2      
 560   2              /*******************************************************************************
 561   2              * Indicates that we have told ourselves to jump to the application since we have
 562   2              * already told ourselves to jump, we do not do any expensive verification of the
 563   2              * application. We just check to make sure that the value at CY_APP_ADDR_ADDRESS
 564   2              * is something other than 0.
 565   2              *******************************************************************************/
 566   2              if(0u != Bootloader_GetMetadata(Bootloader_GET_BTLDB_ADDR, Bootloader_activeApp))
 567   2              {
 568   3                  /* Never return from this method */
 569   3                  Bootloader_LaunchBootloadable(Bootloader_GetMetadata(Bootloader_GET_BTLDB_ADDR,
 570   3                                                                                   Bootloader_activeApp));
 571   3              }
 572   2          }
 573   1      }
 574          
 575          
 576          /* Moves argument appAddr (RO) into PC, moving execution to appAddr */
 577          #if defined (__ARMCC_VERSION)
              
                  __asm static void Bootloader_LaunchBootloadable(uint32 appAddr)
                  {
                      BX  R0
                      ALIGN
                  }
              
              #elif defined(__GNUC__)
              
                  __attribute__((noinline)) /* Workaround for GCC toolchain bug with inlining */
                  __attribute__((naked))
                  static void Bootloader_LaunchBootloadable(uint32 appAddr)
                  {
                      __asm volatile("    BX  R0\n");
                  }
              
              #elif defined (__ICCARM__)
              
                  static void Bootloader_LaunchBootloadable(uint32 appAddr)
                  {
                      __asm volatile("    BX  R0\n");
                  }
              
              #endif  /* (__ARMCC_VERSION) */
 602          
 603          
 604          /*******************************************************************************
 605          * Function Name: Bootloader_ValidateBootloadable
 606          ********************************************************************************
 607          * Summary:
 608          *  Performs the bootloadable application validation by calculating the
 609          *  application image checksum and comparing it with the checksum value stored
 610          *  in the Bootloadable Application Checksum field of the metadata section.
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 11  

 611          *
 612          *  If the Fast bootloadable application validation option is enabled in the
 613          *  component customizer and bootloadable application successfully passes
 614          *  validation, the Bootloadable Application Verification Status field of the
 615          *  metadata section is updated. Refer to the Metadata Layout section for the
 616          *  details.
 617          *
 618          *  If the Fast bootloadable application validation option is enabled and
 619          *  Bootloadable Application Verification Status field of the metadata section
 620          *  claims that bootloadable application is valid, the function returns
 621          *  CYRET_SUCCESS without further checksum calculation.
 622          *
 623          * Parameters:
 624          *  appId:
 625          *  The number of the bootloadable application should be 0 for the normal
 626          *  bootloader and 0 or 1 for the Multi-Application bootloader.
 627          *
 628          * Returns:
 629          *  Returns CYRET_SUCCESS if the specified bootloadable application is valid.
 630          *
 631          *******************************************************************************/
 632          cystatus Bootloader_ValidateBootloadable(uint8 appId) CYSMALL \
 633          
 634              {
 635   1              uint32 CYDATA idx;
 636   1      
 637   1              uint32 CYDATA end   = Bootloader_FIRST_APP_BYTE(appId) +
 638   1                                      Bootloader_GetMetadata(Bootloader_GET_BTLDB_LENGTH,
 639   1                                                             appId);
 640   1      
 641   1              CYBIT         valid = 0u; /* Assume bad flash image */
 642   1              uint8  CYDATA calcedChecksum = 0u;
 643   1      
 644   1      
 645   1              #if(0u != Bootloader_DUAL_APP_BOOTLOADER)
              
                          if(appId > 1u)
                          {
                              return(CYRET_BAD_DATA);
                          }
              
                      #endif  /* (0u != Bootloader_DUAL_APP_BOOTLOADER) */
 653   1      
 654   1      
 655   1              #if(0u != Bootloader_FAST_APP_VALIDATION)
              
              
                          if(Bootloader_GetMetadata(Bootloader_GET_BTLDB_STATUS, appId) ==
                             Bootloader_MD_BTLDB_IS_VERIFIED)
                          {
                              return(CYRET_SUCCESS);
                          }
              
                      #endif  /* (0u != Bootloader_FAST_APP_VALIDATION) */
 665   1      
 666   1      
 667   1              /* Calculate checksum of bootloadable image */
 668   1              for(idx = Bootloader_FIRST_APP_BYTE(appId); idx < end; ++idx)
 669   1              {
 670   2                  uint8 CYDATA curByte = Bootloader_GET_CODE_BYTE(idx);
 671   2      
 672   2                  if((curByte != 0u) && (curByte != 0xFFu))
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 12  

 673   2                  {
 674   3                      valid = 1u;
 675   3                  }
 676   2      
 677   2                  calcedChecksum += curByte;
 678   2              }
 679   1      
 680   1      
 681   1              /***************************************************************************
 682   1              * We do not compute checksum over the meta data section, so no need to
 683   1              * subtract off App Verified or App Active information here like we do when
 684   1              * verifying a row.
 685   1              ***************************************************************************/
 686   1      
 687   1      
 688   1              #if((!CY_PSOC4) && (CYDEV_ECC_ENABLE == 0u))
 689   1      
 690   1                  /* Add ECC data to checksum */
 691   1                  idx = ((Bootloader_FIRST_APP_BYTE(appId)) >> 3u);
 692   1      
 693   1                  /* Flash may run into meta data, so ECC does not use full row */
 694   1                  end = (end == (CY_FLASH_SIZE - Bootloader_MD_SIZEOF))
 695   1                      ? (CY_FLASH_SIZE >> 3u)
 696   1                      : (end >> 3u);
 697   1      
 698   1                  for (; idx < end; ++idx)
 699   1                  {
 700   2                      calcedChecksum += CY_GET_XTND_REG8((volatile uint8 *)(CYDEV_ECC_BASE + idx));
 701   2                  }
 702   1      
 703   1              #endif  /* ((!CY_PSOC4) && (CYDEV_ECC_ENABLE == 0u)) */
 704   1      
 705   1      
 706   1              calcedChecksum = ( uint8 )1u + ( uint8 )(~calcedChecksum);
 707   1      
 708   1      
 709   1              if((calcedChecksum != Bootloader_GetMetadata(Bootloader_GET_BTLDB_CHECKSUM, appId)) ||
 710   1                 (0u == valid))
 711   1              {
 712   2                  return(CYRET_BAD_DATA);
 713   2              }
 714   1      
 715   1      
 716   1              #if(0u != Bootloader_FAST_APP_VALIDATION)
                          Bootloader_SetFlashByte((uint32) Bootloader_MD_BTLDB_VERIFIED_OFFSET(appId),
                                                        Bootloader_MD_BTLDB_IS_VERIFIED);
                      #endif  /* (0u != Bootloader_FAST_APP_VALIDATION) */
 720   1      
 721   1      
 722   1              return(CYRET_SUCCESS);
 723   1      }
 724          
 725          
 726          /*******************************************************************************
 727          * Function Name: Bootloader_HostLink
 728          ********************************************************************************
 729          *
 730          * Summary:
 731          *  Causes the bootloader to attempt to read data being transmitted by the
 732          *  host application.  If data is sent from the host, this establishes the
 733          *  communication interface to process all requests.
 734          *
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 13  

 735          * Parameters:
 736          *  timeOut:
 737          *   The amount of time to listen for data before giving up. Timeout is
 738          *   measured in 10s of ms.  Use 0 for an infinite wait.
 739          *
 740          * Return:
 741          *   None
 742          *
 743          *******************************************************************************/
 744          static void Bootloader_HostLink(uint8 timeOut) 
 745          {
 746   1          uint16    CYDATA numberRead;
 747   1          uint16    CYDATA rspSize;
 748   1          uint8     CYDATA ackCode;
 749   1          uint16    CYDATA pktChecksum;
 750   1          cystatus  CYDATA readStat;
 751   1          uint16    CYDATA pktSize    = 0u;
 752   1          uint16    CYDATA dataOffset = 0u;
 753   1          uint8     CYDATA timeOutCnt = 10u;
 754   1      
 755   1          #if(0u != Bootloader_FAST_APP_VALIDATION)
                      uint8 CYDATA clearedMetaData = 0u;
                  #endif  /* (0u != Bootloader_FAST_APP_VALIDATION) */
 758   1      
 759   1          CYBIT     communicationState = Bootloader_COMMUNICATION_STATE_IDLE;
 760   1      
 761   1          uint8     packetBuffer[Bootloader_SIZEOF_COMMAND_BUFFER];
 762   1          uint8     dataBuffer  [Bootloader_SIZEOF_COMMAND_BUFFER];
 763   1      
 764   1      
 765   1          #if(!CY_PSOC4)
 766   1              #if(0u == Bootloader_FAST_APP_VALIDATION)
 767   1                  #if !defined(CY_BOOT_VERSION)
              
                              /* Not required with cy_boot 4.20 */
                              uint8 CYXDATA Bootloader_flashBuffer[Bootloader_FROW_SIZE];
              
                          #endif /* !defined(CY_BOOT_VERSION) */
 773   1              #endif  /* (0u == Bootloader_FAST_APP_VALIDATION) */
 774   1          #endif  /* (CY_PSOC4) */
 775   1      
 776   1      
 777   1      
 778   1          #if(!CY_PSOC4)
 779   1              #if(0u == Bootloader_FAST_APP_VALIDATION)
 780   1      
 781   1                  /* Initialize Flash subsystem for non-PSoC 4 devices */
 782   1                  if (CYRET_SUCCESS != CySetTemp())
 783   1                  {
 784   2                      CyHalt(0x00u);
 785   2                  }
 786   1      
 787   1                  #if !defined(CY_BOOT_VERSION)
              
                              /* Not required with cy_boot 4.20 */
                              if (CYRET_SUCCESS != CySetFlashEEBuffer(Bootloader_flashBuffer))
                              {
                                  CyHalt(0x00u);
                              }
              
                          #endif /* !defined(CY_BOOT_VERSION) */
 796   1              #endif  /* (0u == Bootloader_FAST_APP_VALIDATION) */
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 14  

 797   1          #endif  /* (CY_PSOC4) */
 798   1      
 799   1          /* Initialize communications channel. */
 800   1          CyBtldrCommStart();
 801   1      
 802   1          /* Enable global interrupts */
 803   1          CyGlobalIntEnable;
 804   1      
 805   1          do
 806   1          {
 807   2              ackCode = CYRET_SUCCESS;
 808   2      
 809   2              do
 810   2              {
 811   3                  readStat = CyBtldrCommRead(packetBuffer,
 812   3                                              Bootloader_SIZEOF_COMMAND_BUFFER,
 813   3                                              &numberRead,
 814   3                                              (0u == timeOut) ? 0xFFu : timeOut);
 815   3                  if (0u != timeOut)
 816   3                  {
 817   4                      timeOutCnt--;
 818   4                  }
 819   3      
 820   3              } while ( (0u != timeOutCnt) && (readStat != CYRET_SUCCESS) );
 821   2      
 822   2      
 823   2              if( readStat != CYRET_SUCCESS )
 824   2              {
 825   3                  continue;
 826   3              }
 827   2      
 828   2              if((numberRead < Bootloader_MIN_PKT_SIZE) ||
 829   2                 (packetBuffer[Bootloader_SOP_ADDR] != Bootloader_SOP))
 830   2              {
 831   3                  ackCode = Bootloader_ERR_DATA;
 832   3              }
 833   2              else
 834   2              {
 835   3                  pktSize = ((uint16)((uint16)packetBuffer[Bootloader_SIZE_ADDR + 1u] << 8u)) |
 836   3                                     packetBuffer[Bootloader_SIZE_ADDR];
 837   3      
 838   3                  pktChecksum = ((uint16)((uint16)packetBuffer[Bootloader_CHK_ADDR(pktSize) + 1u] << 8u)) |
 839   3                                         packetBuffer[Bootloader_CHK_ADDR(pktSize)];
 840   3      
 841   3                  if((pktSize + Bootloader_MIN_PKT_SIZE) > numberRead)
 842   3                  {
 843   4                      ackCode = Bootloader_ERR_LENGTH;
 844   4                  }
 845   3                  else if(packetBuffer[Bootloader_EOP_ADDR(pktSize)] != Bootloader_EOP)
 846   3                  {
 847   4                      ackCode = Bootloader_ERR_DATA;
 848   4                  }
 849   3                  else if(pktChecksum != Bootloader_CalcPacketChecksum(packetBuffer,
 850   3                                                                              pktSize + Bootloader_DATA_ADDR))
 851   3                  {
 852   4                      ackCode = Bootloader_ERR_CHECKSUM;
 853   4                  }
 854   3                  else
 855   3                  {
 856   4                      /* Empty section */
 857   4                  }
 858   3              }
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 15  

 859   2      
 860   2              rspSize = 0u;
 861   2              if(ackCode == CYRET_SUCCESS)
 862   2              {
 863   3                  uint8 CYDATA btldrData = packetBuffer[Bootloader_DATA_ADDR];
 864   3      
 865   3                  ackCode = Bootloader_ERR_DATA;
 866   3                  switch(packetBuffer[Bootloader_CMD_ADDR])
 867   3                  {
 868   4      
 869   4      
 870   4                  /***************************************************************************
 871   4                  *   Get metadata
 872   4                  ***************************************************************************/
 873   4                  #if(0u != Bootloader_CMD_GET_METADATA)
              
                              case Bootloader_COMMAND_GET_METADATA:
              
                                  if((Bootloader_COMMUNICATION_STATE_ACTIVE == communicationState) && (pktSize == 1u))
                                  {
                                      if (btldrData >= Bootloader_MAX_NUM_OF_BTLDB)
                                      {
                                          ackCode = Bootloader_ERR_APP;
                                      }
                                      else if(CYRET_SUCCESS == Bootloader_ValidateBootloadable(btldrData))
                                      {
                                          #if(CY_PSOC3)
                                              (void) memcpy(&packetBuffer[Bootloader_DATA_ADDR],
                                                          ((uint8  CYCODE *) (Bootloader_META_BASE(btldrData))),
                                                          Bootloader_GET_METADATA_RESPONSE_SIZE);
                                          #else
                                              (void) memcpy(&packetBuffer[Bootloader_DATA_ADDR],
                                                          (uint8 *) Bootloader_META_BASE(btldrData),
                                                          Bootloader_GET_METADATA_RESPONSE_SIZE);
                                          #endif  /* (CY_PSOC3) */
              
                                          rspSize = 56u;
                                          ackCode = CYRET_SUCCESS;
                                      }
                                      else
                                      {
                                          ackCode = Bootloader_ERR_APP;
                                      }
                                  }
                                  break;
              
                          #endif  /* (0u != Bootloader_CMD_GET_METADATA) */
 906   4      
 907   4      
 908   4                  /***************************************************************************
 909   4                  *   Verify checksum
 910   4                  ***************************************************************************/
 911   4                  case Bootloader_COMMAND_CHECKSUM:
 912   4      
 913   4                      if((Bootloader_COMMUNICATION_STATE_ACTIVE == communicationState) && (pktSize == 0u))
 914   4                      {
 915   5                          packetBuffer[Bootloader_DATA_ADDR] =
 916   5                                  (uint8)(Bootloader_ValidateBootloadable(Bootloader_activeApp) == CYRET_SUCCESS
             -);
 917   5      
 918   5                          rspSize = 1u;
 919   5                          ackCode = CYRET_SUCCESS;
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 16  

 920   5                      }
 921   4                      break;
 922   4      
 923   4      
 924   4                  /***************************************************************************
 925   4                  *   Get flash size
 926   4                  ***************************************************************************/
 927   4      
 928   4                  /* Replace Bootloader_NUM_OF_FLASH_ARRAYS with CY_FLASH_NUMBER_ARRAYS */
 929   4      
 930   4      
 931   4                  #if(0u != Bootloader_CMD_GET_FLASH_SIZE_AVAIL)
 932   4      
 933   4                      case Bootloader_COMMAND_REPORT_SIZE:
 934   4      
 935   4                          /* btldrData - holds flash array ID sent by host */
 936   4      
 937   4                          if((Bootloader_COMMUNICATION_STATE_ACTIVE == communicationState) && (pktSize == 1u))
 938   4                          {
 939   5                              if(btldrData < CY_FLASH_NUMBER_ARRAYS)
 940   5                              {
 941   6                                  uint16 CYDATA startRow;
 942   6                                  uint8  CYDATA ArrayIdBtlderEnds;
 943   6      
 944   6      
 945   6                                  /*****************************************************************************
             -**
 946   6                                  * - For the flash array where bootloader application ends, return the first
 947   6                                  *   full row after the bootloader application.
 948   6                                  *
 949   6                                  * - For the fully occupied flash array, the number of rows in array is returne
             -d.
 950   6                                  *   As there is no space for the bootloadable application in this array.
 951   6                                  *
 952   6                                  * - For the arrays next to the occupied array, zero is returned.
 953   6                                  *   The bootloadable application can written from the their beginning.
 954   6                                  *
 955   6                                  ******************************************************************************
             -*/
 956   6                                  ArrayIdBtlderEnds = (uint8)  (*Bootloader_SizeBytesAccess / CY_FLASH_SIZEOF_AR
             -RAY);
 957   6      
 958   6                                  if (btldrData == ArrayIdBtlderEnds)
 959   6                                  {
 960   7                                      startRow = (uint16) (*Bootloader_SizeBytesAccess / CY_FLASH_SIZEOF_ROW) %
 961   7                                                  Bootloader_NUMBER_OF_ROWS_IN_ARRAY;
 962   7                                  }
 963   6                                  else if (btldrData > ArrayIdBtlderEnds)
 964   6                                  {
 965   7                                      startRow = Bootloader_FIRST_ROW_IN_ARRAY;
 966   7                                  }
 967   6                                  else /* (btldrData < ArrayIdBtlderEnds) */
 968   6                                  {
 969   7                                      startRow = Bootloader_NUMBER_OF_ROWS_IN_ARRAY;
 970   7                                  }
 971   6      
 972   6                                  packetBuffer[Bootloader_DATA_ADDR]      = LO8(startRow);
 973   6                                  packetBuffer[Bootloader_DATA_ADDR + 1u] = HI8(startRow);
 974   6      
 975   6                                  packetBuffer[Bootloader_DATA_ADDR + 2u] =
 976   6                                              LO8(Bootloader_NUMBER_OF_ROWS_IN_ARRAY - 1u);
 977   6      
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 17  

 978   6                                  packetBuffer[Bootloader_DATA_ADDR + 3u] =
 979   6                                              HI8(Bootloader_NUMBER_OF_ROWS_IN_ARRAY - 1u);
 980   6      
 981   6                                  rspSize = 4u;
 982   6                                  ackCode = CYRET_SUCCESS;
 983   6                              }
 984   5      
 985   5                          }
 986   4                          break;
 987   4      
 988   4                  #endif  /* (0u != Bootloader_CMD_GET_FLASH_SIZE_AVAIL) */
 989   4      
 990   4      
 991   4                  /***************************************************************************
 992   4                  *   Get application status
 993   4                  ***************************************************************************/
 994   4                  #if(0u != Bootloader_DUAL_APP_BOOTLOADER)
              
                              #if(0u != Bootloader_CMD_GET_APP_STATUS_AVAIL)
              
                                  case Bootloader_COMMAND_APP_STATUS:
              
                                      if((Bootloader_COMMUNICATION_STATE_ACTIVE == communicationState) && (pktSize == 1u
             -))
                                      {
              
                                          packetBuffer[Bootloader_DATA_ADDR] =
                                              (uint8)Bootloader_ValidateBootloadable(btldrData);
              
                                          packetBuffer[Bootloader_DATA_ADDR + 1u] =
                                              (uint8) Bootloader_GetMetadata(Bootloader_GET_BTLDB_ACTIVE, btldrData);
              
                                          rspSize = 2u;
                                          ackCode = CYRET_SUCCESS;
                                      }
                                      break;
              
                              #endif  /* (0u != Bootloader_CMD_GET_APP_STATUS_AVAIL) */
              
                          #endif  /* (0u != Bootloader_DUAL_APP_BOOTLOADER) */
1017   4      
1018   4      
1019   4                  /***************************************************************************
1020   4                  *   Program / Erase row
1021   4                  ***************************************************************************/
1022   4                  case Bootloader_COMMAND_PROGRAM:
1023   4      
1024   4                  /* The btldrData variable holds Flash Array ID */
1025   4      
1026   4              #if (0u != Bootloader_CMD_ERASE_ROW_AVAIL)
1027   4      
1028   4                  case Bootloader_COMMAND_ERASE:
1029   4                      if (Bootloader_COMMAND_ERASE == packetBuffer[Bootloader_CMD_ADDR])
1030   4                      {
1031   5                          if ((Bootloader_COMMUNICATION_STATE_ACTIVE == communicationState) && (pktSize == 3u))
1032   5                          {
1033   6                              #if(!CY_PSOC4)
1034   6                                  if((btldrData >= Bootloader_FIRST_EE_ARRAYID) &&
1035   6                                     (btldrData <= Bootloader_LAST_EE_ARRAYID))
1036   6                                  {
1037   7                                      /* Size of EEPROM row */
1038   7                                      dataOffset = CY_EEPROM_SIZEOF_ROW;
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 18  

1039   7                                  }
1040   6                                  else
1041   6                                  {
1042   7                                      /* Size of FLASH row (depends on ECC configuration) */
1043   7                                      dataOffset = Bootloader_FROW_SIZE;
1044   7                                  }
1045   6                              #else
                                          /* Size of FLASH row (no ECC available) */
                                          dataOffset = Bootloader_FROW_SIZE;
                                      #endif  /* (!CY_PSOC4) */
1049   6      
1050   6                              #if(CY_PSOC3)
1051   6                                  (void) memset(dataBuffer, (char8) 0, (int16) dataOffset);
1052   6                              #else
                                          (void) memset(dataBuffer, 0, (uint32) dataOffset);
                                      #endif  /* (CY_PSOC3) */
1055   6                          }
1056   5                          else
1057   5                          {
1058   6                              break;
1059   6                          }
1060   5                      }
1061   4      
1062   4              #endif  /* (0u != Bootloader_CMD_ERASE_ROW_AVAIL) */
1063   4      
1064   4      
1065   4                      if((Bootloader_COMMUNICATION_STATE_ACTIVE == communicationState) && (pktSize >= 3u))
1066   4                      {
1067   5      
1068   5                          /* The command may be sent along with the last block of data, to program the row. */
1069   5                          #if(CY_PSOC3)
1070   5                              (void) memcpy(&dataBuffer[dataOffset],
1071   5                                            &packetBuffer[Bootloader_DATA_ADDR + 3u],
1072   5                                            (int16) pktSize - 3);
1073   5                          #else
                                      (void) memcpy(&dataBuffer[dataOffset],
                                                    &packetBuffer[Bootloader_DATA_ADDR + 3u],
                                                    (uint32) pktSize - 3u);
                                  #endif  /* (CY_PSOC3) */
1078   5      
1079   5                          dataOffset += (pktSize - 3u);
1080   5      
1081   5                          #if(!CY_PSOC4)
1082   5                              if((btldrData >= Bootloader_FIRST_EE_ARRAYID) &&
1083   5                                 (btldrData <= Bootloader_LAST_EE_ARRAYID))
1084   5                              {
1085   6      
1086   6                                  CyEEPROM_Start();
1087   6      
1088   6                                  /* Size of EEPROM row */
1089   6                                  pktSize = CY_EEPROM_SIZEOF_ROW;
1090   6                              }
1091   5                              else
1092   5                              {
1093   6                                  /* Size of FLASH row (depends on ECC configuration) */
1094   6                                  pktSize = Bootloader_FROW_SIZE;
1095   6                              }
1096   5                          #else
                                      /* Size of FLASH row (no ECC available) */
                                      pktSize = Bootloader_FROW_SIZE;
                                  #endif  /* (!CY_PSOC4) */
1100   5      
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 19  

1101   5      
1102   5                          /* Check if we have all data to program */
1103   5                          if(dataOffset == pktSize)
1104   5                          {
1105   6                              uint16 row;
1106   6                              uint16 firstRow;
1107   6      
1108   6                              /* Get FLASH/EEPROM row number inside of the array */
1109   6                              dataOffset = ((uint16)((uint16)packetBuffer[Bootloader_DATA_ADDR + 2u] << 8u)) |
1110   6                                                    packetBuffer[Bootloader_DATA_ADDR + 1u];
1111   6      
1112   6      
1113   6                              /* Metadata section resides in Flash (cannot be in EEPROM). */
1114   6                              #if(!CY_PSOC4)
1115   6                                  if(btldrData <= Bootloader_LAST_FLASH_ARRAYID)
1116   6                                  {
1117   7                              #endif  /* (!CY_PSOC4) */
1118   7      
1119   7      
1120   7                              /* btldrData  - holds flash array Id sent by host */
1121   7                              /* dataOffset - holds flash row Id sent by host   */
1122   7                              row = (uint16)(btldrData * Bootloader_NUMBER_OF_ROWS_IN_ARRAY) + dataOffset;
1123   7      
1124   7      
1125   7                              /*******************************************************************************
1126   7                              * Refuse to write to the row within range of the bootloader application
1127   7                              *******************************************************************************/
1128   7      
1129   7                              /* First empty flash row after bootloader application */
1130   7                              firstRow = (uint16) (*Bootloader_SizeBytesAccess / CYDEV_FLS_ROW_SIZE);
1131   7                              if ((*Bootloader_SizeBytesAccess % CYDEV_FLS_ROW_SIZE) != 0u)
1132   7                              {
1133   8                                  firstRow++;
1134   8                              }
1135   7      
1136   7                              /* Check to see if the row to program will not corrupt the bootloader application 
             -*/
1137   7                              if(row < firstRow)
1138   7                              {
1139   8                                  ackCode = Bootloader_ERR_ROW;
1140   8                                  dataOffset = 0u;
1141   8                                  break;
1142   8                              }
1143   7      
1144   7      
1145   7                              #if(0u != Bootloader_DUAL_APP_BOOTLOADER)
              
                                          if(Bootloader_activeApp < Bootloader_MD_BTLDB_ACTIVE_NONE)
                                          {
                                              uint16 lastRow;
              
              
                                              /*************************************************************************
             -******
                                              * For the first bootloadable application gets the last flash row occupied 
             -by
                                              * the bootloader application image:
                                              *  -----------------------------------------------------------------------
             -----
                                              * | Bootloader   | Bootloadable # 1 |     | Bootloadable # 2 |     | M2 | 
             -M1 |
                                              *  -----------------------------------------------------------------------
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 20  

             -----
                                              * |<--firstRow---|>
                                              *
                                              * For the second bootloadable application gets the last flash row occupied
             - by
                                              * the first bootloadable application:
                                              *  -----------------------------------------------------------------------
             -----
                                              * | Bootloader   | Bootloadable # 1 |     | Bootloadable # 2 |     | M2 | 
             -M1 |
                                              *  -----------------------------------------------------------------------
             -----
                                              * |<-------------firstRow-----------------|>
                                              *
                                              * Incremented by 1 to get the first available row.
                                              *
                                              * Note: M1 and M2 stands for the metadata # 1 and metadata # 2, metadata
                                              * sections for the 1st and 2nd bootloadable applications.
                                              **************************************************************************
             -*****/
                                              firstRow = (uint16) 1u +
                                                  (uint16) Bootloader_GetMetadata(Bootloader_GET_BTLDR_LAST_ROW,
                                                                                        Bootloader_activeApp);
              
              
                                              /*************************************************************************
             -******
                                              * The number of flash rows available for the both bootloadable application
             -s:
                                              *
                                              * First bootloadable application is active:
                                              *  -----------------------------------------------------------------------
             -----
                                              * | Bootloader   | Bootloadable # 1 |     | Bootloadable # 2 |     | M2 | 
             -M1 |
                                              *  -----------------------------------------------------------------------
             -----
                                              *                |<-------------------lastRow -------------------->|
                                              *
                                              * Second bootloadable application is active:
                                              *  -----------------------------------------------------------------------
             -----
                                              * | Bootloader   | Bootloadable # 1 |     | Bootloadable # 2 |     | M2 | 
             -M1 |
                                              *  -----------------------------------------------------------------------
             -----
                                              *                                         |<-------lastRow-------->|
                                              **************************************************************************
             -*****/
                                              lastRow = (uint16)(CY_FLASH_NUMBER_ROWS -
                                                                  Bootloader_NUMBER_OF_METADATA_ROWS -
                                                                  firstRow);
              
              
                                              /*************************************************************************
             -******
                                              * The number of flash rows available for the active bootloadable applicati
             -on:
                                              *
                                              * First bootloadable application is active: the number of flash rows avail
             -able
                                              * for the both bootloadable applications should be divided by 2 - 2 bootlo
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 21  

             -adable
                                              * applications should fit there.
                                              *
                                              * Second bootloadable application is active: the number of flash rows avai
             -lable
                                              * for the both bootloadable applications should be divided by 1 - 1 bootlo
             -adable
                                              * application should fit there.
                                              **************************************************************************
             -*****/
                                              lastRow = lastRow / (Bootloader_NUMBER_OF_BTLDBLE_APPS -
                                                              Bootloader_activeApp);
              
              
                                              /*************************************************************************
             -******
                                              * The last row equals to the first row plus the number of rows available f
             -or
                                              * the each bootloadable application. That gives the flash row number right
                                              * beyond the valid range, so we subtract 1.
                                              *
                                              * First bootloadable application is active:
                                              *  -----------------------------------------------------------------------
             -----
                                              * | Bootloader   | Bootloadable # 1 |     | Bootloadable # 2 |     | M2 | 
             -M1 |
                                              *  -----------------------------------------------------------------------
             -----
                                              * |<----------------lastRow ------------->|
                                              *
                                              * Second bootloadable application is active:
                                              *  -----------------------------------------------------------------------
             -----
                                              * | Bootloader   | Bootloadable # 1 |     | Bootloadable # 2 |     | M2 | 
             -M1 |
                                              *  -----------------------------------------------------------------------
             -----
                                              * |<-----------------------------lastRow-------------------------->|
                                              **************************************************************************
             -*****/
                                              lastRow = (firstRow + lastRow) - 1u;
              
              
                                              /*************************************************************************
             -******
                                              * 1. Refuse to write row within the range of the active application
                                              *
                                              *  First bootloadable application is active:
                                              *   ----------------------------------------------------------------------
             ------
                                              *  | Bootloader   | Bootloadable # 1 |     | Bootloadable # 2 |     | M2 |
             - M1 |
                                              *   ----------------------------------------------------------------------
             ------
                                              *  |<----------------lastRow ------------->|
                                              *  |<--firstRow---|>
                                              *                 |<-------protected------>|
                                              *
                                              *  Second bootloadable application is active:
                                              *   ----------------------------------------------------------------------
             ------
                                              *  | Bootloader   | Bootloadable # 1 |     | Bootloadable # 2 |     | M2 |
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 22  

             - M1 |
                                              *   ----------------------------------------------------------------------
             ------
                                              *  |<-------------firstRow-----------------|>
                                              *  |<-----------------------------lastRow-------------------------->|
                                              *                                          |<-------protected------>|
                                              *
                                              * 2. Refuse to write to the row that contains metadata of the active
                                              *    bootloadable application.
                                              *
                                              **************************************************************************
             -*****/
                                              if(((row >= firstRow) && (row <= lastRow)) ||
                                                 ((btldrData == Bootloader_MD_FLASH_ARRAY_NUM) &&
                                                 (dataOffset == Bootloader_MD_ROW_NUM(Bootloader_activeApp))))
                                              {
                                                  ackCode = Bootloader_ERR_ACTIVE;
                                                  dataOffset = 0u;
                                                  break;
                                              }
                                          }
              
                                      #endif  /* (0u != Bootloader_DUAL_APP_BOOTLOADER) */
1266   7      
1267   7      
1268   7      
1269   7                              /*******************************************************************************
1270   7                              * Clear row that contains the metadata, when 'Fast bootloadable application
1271   7                              * validation' option is enabled.
1272   7                              *
1273   7                              * If 'Fast bootloadable application validation' option is enabled, the
1274   7                              * bootloader only computes the checksum the first time and assumes that it
1275   7                              * remains valid in each future startup. The metadata row is cleared because the
1276   7                              * bootloadable application might become corrupted during update, while
1277   7                              * 'Bootloadable Application Verification Status' field will still report that
1278   7                              * application is valid.
1279   7                              *******************************************************************************/
1280   7                              #if(0u != Bootloader_FAST_APP_VALIDATION)
              
                                          if(0u == clearedMetaData)
                                          {
                                              /* Metadata section must be filled with zeros */
              
                                              uint8 erase[Bootloader_FROW_SIZE];
                                              uint8 Bootloader_notActiveApp;
              
              
                                              #if(CY_PSOC3)
                                                  (void) memset(erase, (char8) 0, (int16) Bootloader_FROW_SIZE);
                                              #else
                                                  (void) memset(erase, 0, Bootloader_FROW_SIZE);
                                              #endif  /* (CY_PSOC3) */
              
              
                                              #if(0u != Bootloader_DUAL_APP_BOOTLOADER)
                                                  if (Bootloader_MD_BTLDB_ACTIVE_0 == Bootloader_activeApp)
                                                  {
                                                      Bootloader_notActiveApp = Bootloader_MD_BTLDB_ACTIVE_1;
                                                  }
                                                  else
                                                  {
                                                      Bootloader_notActiveApp = Bootloader_MD_BTLDB_ACTIVE_0;
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 23  

                                                  }
                                              #else
                                                  Bootloader_notActiveApp = Bootloader_MD_BTLDB_ACTIVE_0;
                                              #endif /* (0u != Bootloader_DUAL_APP_BOOTLOADER) */
              
              
                                              #if(CY_PSOC4)
                                                  (void) CySysFlashWriteRow(
                                                          Bootloader_MD_ROW_NUM(Bootloader_notActiveApp),
                                                          erase);
                                              #else
                                                  (void) CyWriteRowFull(
                                                          (uint8)  Bootloader_MD_FLASH_ARRAY_NUM,
                                                          (uint16) Bootloader_MD_ROW_NUM(Bootloader_notActiveApp),
                                                          erase,
                                                          Bootloader_FROW_SIZE);
                                              #endif  /* (CY_PSOC4) */
              
                                              /* PSoC 5: Do not care about flushing the cache as flash row has been eras
             -ed. */
              
                                              /* Set up flag that metadata was cleared */
                                              clearedMetaData = 1u;
                                          }
              
                                      #endif  /* (0u != Bootloader_FAST_APP_VALIDATION) */
1330   7      
1331   7      
1332   7                              #if(!CY_PSOC4)
1333   7                                  }   /* (btldrData <= Bootloader_LAST_FLASH_ARRAYID) */
1334   6                              #endif  /* (!CY_PSOC4) */
1335   6      
1336   6      
1337   6                              #if(CY_PSOC4)
                                          ackCode = (CYRET_SUCCESS != CySysFlashWriteRow((uint32) row, dataBuffer)) \
                                              ? Bootloader_ERR_ROW \
                                              : CYRET_SUCCESS;
                                      #else
1342   6                                  ackCode = (CYRET_SUCCESS != CyWriteRowFull(btldrData, dataOffset, dataBuffer, 
             -pktSize)) \
1343   6                                      ? Bootloader_ERR_ROW \
1344   6                                      : CYRET_SUCCESS;
1345   6                              #endif  /* (CY_PSOC4) */
1346   6      
1347   6      
1348   6                              #if(CY_PSOC5)
                                          /***************************************************************************
                                          * When writing Flash, data in the instruction cache can become stale.
                                          * Therefore, the cache data does not correlate to the data just written to
                                          * Flash. A call to CyFlushCache() is required to invalidate the data in the
                                          * cache and force fresh information to be loaded from Flash.
                                          ***************************************************************************/
                                          CyFlushCache();
                                      #endif /* (CY_PSOC5) */
1357   6      
1358   6                          }
1359   5                          else
1360   5                          {
1361   6                              ackCode = Bootloader_ERR_LENGTH;
1362   6                          }
1363   5      
1364   5                          dataOffset = 0u;
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 24  

1365   5                      }
1366   4                      break;
1367   4      
1368   4      
1369   4                  /***************************************************************************
1370   4                  *   Sync bootloader
1371   4                  ***************************************************************************/
1372   4                  #if(0u != Bootloader_CMD_SYNC_BOOTLOADER_AVAIL)
1373   4      
1374   4                  case Bootloader_COMMAND_SYNC:
1375   4      
1376   4                      if(Bootloader_COMMUNICATION_STATE_ACTIVE == communicationState)
1377   4                      {
1378   5                          /* If something failed the host would send this command to reset the bootloader. */
1379   5                          dataOffset = 0u;
1380   5      
1381   5                          /* Don't acknowledge the packet, just get ready to accept the next one */
1382   5                          continue;
1383   5                      }
1384   4                      break;
1385   4      
1386   4                  #endif  /* (0u != Bootloader_CMD_SYNC_BOOTLOADER_AVAIL) */
1387   4      
1388   4      
1389   4                  /***************************************************************************
1390   4                  *   Set an active application
1391   4                  ***************************************************************************/
1392   4                  #if(0u != Bootloader_DUAL_APP_BOOTLOADER)
              
                              case Bootloader_COMMAND_APP_ACTIVE:
              
                                  if((Bootloader_COMMUNICATION_STATE_ACTIVE == communicationState) && (pktSize == 1u))
                                  {
                                      if(CYRET_SUCCESS == Bootloader_ValidateBootloadable(btldrData))
                                      {
                                          uint8 CYDATA idx;
              
                                          for(idx = 0u; idx < Bootloader_MAX_NUM_OF_BTLDB; idx++)
                                          {
                                              Bootloader_SetFlashByte((uint32) Bootloader_MD_BTLDB_ACTIVE_OFFSET(idx),
                                                                            (uint8 )(idx == btldrData));
                                          }
                                          Bootloader_activeApp = btldrData;
                                          ackCode = CYRET_SUCCESS;
                                      }
                                      else
                                      {
                                          ackCode = Bootloader_ERR_APP;
                                      }
                                  }
                                  break;
              
                          #endif  /* (0u != Bootloader_DUAL_APP_BOOTLOADER) */
1418   4      
1419   4      
1420   4                  /***************************************************************************
1421   4                  *   Send data
1422   4                  ***************************************************************************/
1423   4                  #if (0u != Bootloader_CMD_SEND_DATA_AVAIL)
1424   4      
1425   4                      case Bootloader_COMMAND_DATA:
1426   4      
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 25  

1427   4                          if(Bootloader_COMMUNICATION_STATE_ACTIVE == communicationState)
1428   4                          {
1429   5                              /*  Make sure that dataOffset is valid before copying the data */
1430   5                              if((dataOffset + pktSize) <= Bootloader_SIZEOF_COMMAND_BUFFER)
1431   5                              {
1432   6                                  ackCode = CYRET_SUCCESS;
1433   6      
1434   6                                  #if(CY_PSOC3)
1435   6                                      (void) memcpy(&dataBuffer[dataOffset],
1436   6                                                    &packetBuffer[Bootloader_DATA_ADDR],
1437   6                                                    ( int16 )pktSize);
1438   6                                  #else
                                              (void) memcpy(&dataBuffer[dataOffset],
                                                            &packetBuffer[Bootloader_DATA_ADDR],
                                                            (uint32) pktSize);
                                          #endif  /* (CY_PSOC3) */
1443   6      
1444   6                                  dataOffset += pktSize;
1445   6                              }
1446   5                              else
1447   5                              {
1448   6                                  ackCode = Bootloader_ERR_LENGTH;
1449   6                              }
1450   5                          }
1451   4      
1452   4                          break;
1453   4      
1454   4                  #endif  /* (0u != Bootloader_CMD_SEND_DATA_AVAIL) */
1455   4      
1456   4      
1457   4                  /***************************************************************************
1458   4                  *   Enter bootloader
1459   4                  ***************************************************************************/
1460   4                  case Bootloader_COMMAND_ENTER:
1461   4      
1462   4                      if(pktSize == 0u)
1463   4                      {
1464   5                          #if(CY_PSOC3)
1465   5      
1466   5                              Bootloader_ENTER CYDATA BtldrVersion =
1467   5                                  {CYSWAP_ENDIAN32(CYDEV_CHIP_JTAG_ID), CYDEV_CHIP_REV_EXPECT, Bootloader_VERSIO
             -N};
1468   5      
1469   5                          #else
              
                                      Bootloader_ENTER CYDATA BtldrVersion =
                                          {CYDEV_CHIP_JTAG_ID, CYDEV_CHIP_REV_EXPECT, Bootloader_VERSION};
              
                                  #endif  /* (CY_PSOC3) */
1475   5      
1476   5                          communicationState = Bootloader_COMMUNICATION_STATE_ACTIVE;
1477   5      
1478   5                          rspSize = sizeof(Bootloader_ENTER);
1479   5      
1480   5                          #if(CY_PSOC3)
1481   5                              (void) memcpy(&packetBuffer[Bootloader_DATA_ADDR],
1482   5                                            &BtldrVersion,
1483   5                                            ( int16 )rspSize);
1484   5                          #else
                                      (void) memcpy(&packetBuffer[Bootloader_DATA_ADDR],
                                                    &BtldrVersion,
                                                    (uint32) rspSize);
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 26  

                                  #endif  /* (CY_PSOC3) */
1489   5      
1490   5                          ackCode = CYRET_SUCCESS;
1491   5                      }
1492   4                      break;
1493   4      
1494   4      
1495   4                  /***************************************************************************
1496   4                  *   Verify row
1497   4                  ***************************************************************************/
1498   4                  #if (0u != Bootloader_CMD_VERIFY_ROW_AVAIL)
1499   4      
1500   4                  case Bootloader_COMMAND_VERIFY:
1501   4      
1502   4                      if((Bootloader_COMMUNICATION_STATE_ACTIVE == communicationState) && (pktSize == 3u))
1503   4                      {
1504   5                          /* Get FLASH/EEPROM row number */
1505   5                          uint16 CYDATA rowNum = ((uint16)((uint16)packetBuffer[Bootloader_DATA_ADDR + 2u] << 8u
             -)) |
1506   5                                                          packetBuffer[Bootloader_DATA_ADDR + 1u];
1507   5      
1508   5                          #if(!CY_PSOC4)
1509   5      
1510   5                              uint32 CYDATA rowAddr;
1511   5                              uint8 CYDATA checksum;
1512   5      
1513   5                              if((btldrData >= Bootloader_FIRST_EE_ARRAYID) &&
1514   5                                 (btldrData <= Bootloader_LAST_EE_ARRAYID))
1515   5                              {
1516   6                                  /* EEPROM */
1517   6                                  /* Both PSoC 3 and PSoC 5LP architectures have one EEPROM array. */
1518   6                                  rowAddr = (uint32)rowNum * CYDEV_EEPROM_ROW_SIZE;
1519   6      
1520   6                                  checksum = Bootloader_Calc8BitSum(CY_EEPROM_BASE, rowAddr, CYDEV_EEPROM_ROW_SI
             -ZE);
1521   6                              }
1522   5                              else
1523   5                              {
1524   6                                  /* FLASH */
1525   6                                  rowAddr = ((uint32)btldrData * CYDEV_FLS_SECTOR_SIZE)
1526   6                                             + ((uint32)rowNum * CYDEV_FLS_ROW_SIZE);
1527   6      
1528   6                                  checksum = Bootloader_Calc8BitSum(CY_FLASH_BASE, rowAddr, CYDEV_FLS_ROW_SIZE);
1529   6                              }
1530   5      
1531   5                          #else
              
                                      uint32 CYDATA rowAddr = ((uint32)btldrData * CYDEV_FLS_SECTOR_SIZE)
                                                          + ((uint32)rowNum * CYDEV_FLS_ROW_SIZE);
              
                                      uint8 CYDATA checksum = Bootloader_Calc8BitSum(CY_FLASH_BASE,
                                                                                           rowAddr,
                                                                                           CYDEV_FLS_ROW_SIZE);
              
                                  #endif  /* (!CY_PSOC4) */
1541   5      
1542   5      
1543   5                          /* Calculate checksum on data from ECC */
1544   5                          #if(!CY_PSOC4) && (CYDEV_ECC_ENABLE == 0u)
1545   5      
1546   5                              if(btldrData <= Bootloader_LAST_FLASH_ARRAYID)
1547   5                              {
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 27  

1548   6                                  uint16 CYDATA tmpIndex;
1549   6      
1550   6                                  rowAddr = CYDEV_ECC_BASE + ((uint32)btldrData * (CYDEV_FLS_SECTOR_SIZE / 8u))
1551   6                                              + ((uint32)rowNum * CYDEV_ECC_ROW_SIZE);
1552   6      
1553   6                                  for(tmpIndex = 0u; tmpIndex < CYDEV_ECC_ROW_SIZE; tmpIndex++)
1554   6                                  {
1555   7                                      checksum += CY_GET_XTND_REG8((uint8 CYFAR *)(rowAddr + tmpIndex));
1556   7                                  }
1557   6                              }
1558   5      
1559   5                          #endif  /* (!CY_PSOC4) && (CYDEV_ECC_ENABLE == 0u) */
1560   5      
1561   5      
1562   5                          /*******************************************************************************
1563   5                          * App Verified & App Active are information that is updated in Flash at runtime.
1564   5                          * Remove these items from the checksum to allow the host to verify everything is
1565   5                          * correct.
1566   5                           ******************************************************************************/
1567   5                          if((Bootloader_MD_FLASH_ARRAY_NUM == btldrData) &&
1568   5                             (Bootloader_CONTAIN_METADATA(rowNum)))
1569   5                          {
1570   6      
1571   6                              checksum -= (uint8)Bootloader_GetMetadata(Bootloader_GET_BTLDB_ACTIVE,
1572   6                                                                       Bootloader_GET_APP_ID(rowNum));
1573   6      
1574   6                              checksum -= (uint8)Bootloader_GetMetadata(Bootloader_GET_BTLDB_STATUS,
1575   6                                                                       Bootloader_GET_APP_ID(rowNum));
1576   6                          }
1577   5      
1578   5                          packetBuffer[Bootloader_DATA_ADDR] = (uint8)1u + (uint8)(~checksum);
1579   5                          ackCode = CYRET_SUCCESS;
1580   5                          rspSize = 1u;
1581   5                      }
1582   4                      break;
1583   4      
1584   4                  #endif /* (0u != Bootloader_CMD_VERIFY_ROW_AVAIL) */
1585   4      
1586   4      
1587   4                  /***************************************************************************
1588   4                  *   Exit bootloader
1589   4                  ***************************************************************************/
1590   4                  case Bootloader_COMMAND_EXIT:
1591   4      
1592   4                      if(CYRET_SUCCESS == Bootloader_ValidateBootloadable(Bootloader_activeApp))
1593   4                      {
1594   5                          Bootloader_SET_RUN_TYPE(Bootloader_SCHEDULE_BTLDB);
1595   5                      }
1596   4      
1597   4                      CySoftwareReset();
1598   4      
1599   4                      /* Will never get here */
1600   4                      break;
1601   4      
1602   4      
1603   4                  /***************************************************************************
1604   4                  *   Unsupported command
1605   4                  ***************************************************************************/
1606   4                  default:
1607   4                      ackCode = Bootloader_ERR_CMD;
1608   4                      break;
1609   4                  }
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 28  

1610   3              }
1611   2      
1612   2              /* Reply with acknowledge or not acknowledge packet */
1613   2              (void) Bootloader_WritePacket(ackCode, packetBuffer, rspSize);
1614   2      
1615   2          } while ((0u == timeOut) || (Bootloader_COMMUNICATION_STATE_ACTIVE == communicationState));
1616   1      }
1617          
1618          
1619          /*******************************************************************************
1620          * Function Name: Bootloader_WritePacket
1621          ********************************************************************************
1622          *
1623          * Summary:
1624          *  Creates a bootloader response packet and transmits it back to the bootloader
1625          *  host application over the already established communications protocol.
1626          *
1627          * Parameters:
1628          *  status:
1629          *      The status code to pass back as the second byte of the packet
1630          *  buffer:
1631          *      The buffer containing the data portion of the packet
1632          *  size:
1633          *      The number of bytes contained within the buffer to pass back
1634          *
1635          * Return:
1636          *   CYRET_SUCCESS if successful. Any other non-zero value if failure occurred.
1637          *
1638          *******************************************************************************/
1639          static cystatus Bootloader_WritePacket(uint8 status, uint8 buffer[], uint16 size) CYSMALL \
1640                                                      
1641          {
1642   1          uint16 CYDATA checksum;
1643   1      
1644   1          /* Start of packet. */
1645   1          buffer[Bootloader_SOP_ADDR]      = Bootloader_SOP;
1646   1          buffer[Bootloader_CMD_ADDR]      = status;
1647   1          buffer[Bootloader_SIZE_ADDR]     = LO8(size);
1648   1          buffer[Bootloader_SIZE_ADDR + 1u] = HI8(size);
1649   1      
1650   1          /* Compute checksum. */
1651   1          checksum = Bootloader_CalcPacketChecksum(buffer, size + Bootloader_DATA_ADDR);
1652   1      
1653   1          buffer[Bootloader_CHK_ADDR(size)]     = LO8(checksum);
1654   1          buffer[Bootloader_CHK_ADDR(1u + size)] = HI8(checksum);
1655   1          buffer[Bootloader_EOP_ADDR(size)]     = Bootloader_EOP;
1656   1      
1657   1          /* Start packet transmit. */
1658   1          return(CyBtldrCommWrite(buffer, size + Bootloader_MIN_PKT_SIZE, &size, 150u));
1659   1      }
1660          
1661          
1662          /*******************************************************************************
1663          * Function Name: Bootloader_SetFlashByte
1664          ********************************************************************************
1665          *
1666          * Summary:
1667          *  Writes a byte to the specified Flash memory location.
1668          *
1669          * Parameters:
1670          *  address:
1671          *      The address in Flash memory where data will be written
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 29  

1672          *
1673          *  runType:
1674          *      Byte to be written
1675          *
1676          * Return:
1677          *  None
1678          *
1679          *******************************************************************************/
1680          void Bootloader_SetFlashByte(uint32 address, uint8 runType) 
1681          {
1682   1          uint32 flsAddr = address - CYDEV_FLASH_BASE;
1683   1          uint8  rowData[CYDEV_FLS_ROW_SIZE];
1684   1      
1685   1          #if !(CY_PSOC4)
1686   1              uint8 arrayId = ( uint8 )(flsAddr / CYDEV_FLS_SECTOR_SIZE);
1687   1          #endif  /* !(CY_PSOC4) */
1688   1      
1689   1          #if (CY_PSOC4)
                      uint16 rowNum = ( uint16 )(flsAddr / CYDEV_FLS_ROW_SIZE);
                  #else
1692   1              uint16 rowNum = ( uint16 )((flsAddr % CYDEV_FLS_SECTOR_SIZE) / CYDEV_FLS_ROW_SIZE);
1693   1          #endif  /* (CY_PSOC4) */
1694   1      
1695   1          uint32 baseAddr = address - (address % CYDEV_FLS_ROW_SIZE);
1696   1          uint16 idx;
1697   1      
1698   1          for(idx = 0u; idx < CYDEV_FLS_ROW_SIZE; idx++)
1699   1          {
1700   2              rowData[idx] = Bootloader_GET_CODE_BYTE(baseAddr + idx);
1701   2          }
1702   1      
1703   1          rowData[address % CYDEV_FLS_ROW_SIZE] = runType;
1704   1      
1705   1          #if(CY_PSOC4)
                      (void) CySysFlashWriteRow((uint32) rowNum, rowData);
                  #else
1708   1              (void) CyWriteRowData(arrayId, rowNum, rowData);
1709   1          #endif  /* (CY_PSOC4) */
1710   1      
1711   1          #if(CY_PSOC5)
                      /***************************************************************************
                      * When writing Flash, data in the instruction cache can become stale.
                      * Therefore, the cache data does not correlate to the data just written to
                      * Flash. A call to CyFlushCache() is required to invalidate the data in the
                      * cache and force fresh information to be loaded from Flash.
                      ***************************************************************************/
                      CyFlushCache();
                  #endif /* (CY_PSOC5) */
1720   1      }
1721          
1722          
1723          /*******************************************************************************
1724          * Function Name: Bootloader_GetMetadata
1725          ********************************************************************************
1726          *
1727          * Summary:
1728          *  Returns the value of the specified field of the metadata section.
1729          *
1730          * Parameters:
1731          *  field:
1732          *   The field to get data from:
1733          *   Bootloader_GET_BTLDB_CHECKSUM    - Bootloadable Application Checksum
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 30  

1734          *   Bootloader_GET_BTLDB_ADDR        - Bootloadable Application Start
1735          *                                            Routine Address
1736          *   Bootloader_GET_BTLDR_LAST_ROW    - Bootloader Last Flash Row
1737          *   Bootloader_GET_BTLDB_LENGTH      - Bootloadable Application Length
1738          *   Bootloader_GET_BTLDB_ACTIVE      - Active Bootloadable Application
1739          *   Bootloader_GET_BTLDB_STATUS      - Bootloadable Application
1740          *                                            Verification Status
1741          *   Bootloader_GET_BTLDR_APP_VERSION - Bootloader Application Version
1742          *   Bootloader_GET_BTLDB_APP_VERSION - Bootloadable Application Version
1743          *   Bootloader_GET_BTLDB_APP_ID      - Bootloadable Application ID
1744          *   Bootloader_GET_BTLDB_APP_CUST_ID - Bootloadable Application Custom ID
1745          *
1746          *  appId:
1747          *   Number of the bootlodable application. Should be 0 for the normal
1748          *   bootloader and 0 or 1 for the Multi-Application bootloader.
1749          *
1750          * Return:
1751          *  The value of the specified field of the specified application.
1752          *
1753          *******************************************************************************/
1754          uint32 Bootloader_GetMetadata(uint8 field, uint8 appId)
1755          {
1756   1          uint32 fieldPtr;
1757   1          uint8  fieldSize = 2u;
1758   1          uint32 result = 0u;
1759   1      
1760   1          switch (field)
1761   1          {
1762   2          case Bootloader_GET_BTLDB_CHECKSUM:
1763   2              fieldPtr  = Bootloader_MD_BTLDB_CHECKSUM_OFFSET(appId);
1764   2              fieldSize = 1u;
1765   2              break;
1766   2      
1767   2          case Bootloader_GET_BTLDB_ADDR:
1768   2              fieldPtr  = Bootloader_MD_BTLDB_ADDR_OFFSET(appId);
1769   2          #if(!CY_PSOC3)
                      fieldSize = 4u;
                  #endif  /* (!CY_PSOC3) */
1772   2              break;
1773   2      
1774   2          case Bootloader_GET_BTLDR_LAST_ROW:
1775   2              fieldPtr  = Bootloader_MD_BTLDR_LAST_ROW_OFFSET(appId);
1776   2              break;
1777   2      
1778   2          case Bootloader_GET_BTLDB_LENGTH:
1779   2              fieldPtr  = Bootloader_MD_BTLDB_LENGTH_OFFSET(appId);
1780   2          #if(!CY_PSOC3)
                      fieldSize = 4u;
                  #endif  /* (!CY_PSOC3) */
1783   2              break;
1784   2      
1785   2          case Bootloader_GET_BTLDB_ACTIVE:
1786   2              fieldPtr  = Bootloader_MD_BTLDB_ACTIVE_OFFSET(appId);
1787   2              fieldSize = 1u;
1788   2              break;
1789   2      
1790   2          case Bootloader_GET_BTLDB_STATUS:
1791   2              fieldPtr  = Bootloader_MD_BTLDB_VERIFIED_OFFSET(appId);
1792   2              fieldSize = 1u;
1793   2              break;
1794   2      
1795   2          case Bootloader_GET_BTLDB_APP_VERSION:
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 31  

1796   2              fieldPtr  = Bootloader_MD_BTLDB_APP_VERSION_OFFSET(appId);
1797   2              break;
1798   2      
1799   2          case Bootloader_GET_BTLDR_APP_VERSION:
1800   2              fieldPtr  = Bootloader_MD_BTLDR_APP_VERSION_OFFSET(appId);
1801   2              break;
1802   2      
1803   2          case Bootloader_GET_BTLDB_APP_ID:
1804   2              fieldPtr  = Bootloader_MD_BTLDB_APP_ID_OFFSET(appId);
1805   2              break;
1806   2      
1807   2          case Bootloader_GET_BTLDB_APP_CUST_ID:
1808   2              fieldPtr  = Bootloader_MD_BTLDB_APP_CUST_ID_OFFSET(appId);
1809   2              fieldSize = 4u;
1810   2              break;
1811   2      
1812   2          default:
1813   2              /* Should never be here */
1814   2              CYASSERT(0u != 0u);
1815   2              fieldPtr  = 0u;
1816   2              break;
1817   2          }
1818   1      
1819   1      
1820   1          if (1u == fieldSize)
1821   1          {
1822   2              result =  (uint32) CY_GET_XTND_REG8((volatile uint8 *)fieldPtr);
1823   2          }
1824   1      
1825   1          #if(CY_PSOC3)   /* Big-endian */
1826   1      
1827   1              if (2u == fieldSize)
1828   1              {
1829   2                  result =  (uint32) CY_GET_XTND_REG8((volatile uint8 *)(fieldPtr + 1u));
1830   2                  result |= (uint32) CY_GET_XTND_REG8((volatile uint8 *)(fieldPtr     )) <<  8u;
1831   2              }
1832   1      
1833   1              if (4u == fieldSize)
1834   1              {
1835   2                  result =  (uint32) CY_GET_XTND_REG8((volatile uint8 *)(fieldPtr + 3u));
1836   2                  result |= (uint32) CY_GET_XTND_REG8((volatile uint8 *)(fieldPtr + 2u)) <<  8u;
1837   2                  result |= (uint32) CY_GET_XTND_REG8((volatile uint8 *)(fieldPtr + 1u)) << 16u;
1838   2                  result |= (uint32) CY_GET_XTND_REG8((volatile uint8 *)(fieldPtr     )) << 24u;
1839   2              }
1840   1      
1841   1          #else   /* PSoC 4 and PSoC 5: Little-endian */
              
                      if (2u == fieldSize)
                      {
                          result =  (uint32) CY_GET_XTND_REG8((volatile uint8 *) (fieldPtr     ));
                          result |= (uint32) CY_GET_XTND_REG8((volatile uint8 *) (fieldPtr + 1u)) <<  8u;
                      }
              
                      if (4u == fieldSize)
                      {
                          result =  (uint32) CY_GET_XTND_REG8((volatile uint8 *)(fieldPtr     ));
                          result |= (uint32) CY_GET_XTND_REG8((volatile uint8 *)(fieldPtr + 1u)) <<  8u;
                          result |= (uint32) CY_GET_XTND_REG8((volatile uint8 *)(fieldPtr + 2u)) << 16u;
                          result |= (uint32) CY_GET_XTND_REG8((volatile uint8 *)(fieldPtr + 3u)) << 24u;
                      }
              
                  #endif /* (CY_PSOC3) */
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 32  

1858   1      
1859   1          return (result);
1860   1      }
1861          
1862          
1863          /* [] END OF FILE */
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 33  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _Bootloader_CalcPacketChecksum (BEGIN)
                                           ; SOURCE LINE # 101
0000 8B00        R     MOV     buffer,R3
0002 8A00        R     MOV     buffer+01H,R2
0004 8900        R     MOV     buffer+02H,R1
0006 8C00        R     MOV     size,R4
0008 8D00        R     MOV     size+01H,R5
                                           ; SOURCE LINE # 106
000A 7500FF      R     MOV     crc,#0FFH
000D 7500FF      R     MOV     crc+01H,#0FFH
                                           ; SOURCE LINE # 109
0010 850000      R     MOV     tmpIndex,size
0013 850000      R     MOV     tmpIndex+01H,size+01H
                                           ; SOURCE LINE # 111
0016 E500        R     MOV     A,size+01H
0018 4500        R     ORL     A,size
001A 7009              JNZ     ?C0005
                                           ; SOURCE LINE # 112
                                           ; SOURCE LINE # 113
001C 6300FF      R     XRL     crc+01H,#0FFH
001F 6300FF      R     XRL     crc,#0FFH
                                           ; SOURCE LINE # 114
0022 020000      R     LJMP    ?C0002
                                           ; SOURCE LINE # 116
0025         ?C0005:
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
0025 C3                CLR     C
0026 E500        R     MOV     A,tmpIndex+01H
0028 9500        R     SUBB    A,size+01H
002A FF                MOV     R7,A
002B E500        R     MOV     A,tmpIndex
002D 9500        R     SUBB    A,size
002F FE                MOV     R6,A
0030 AB00        R     MOV     R3,buffer
0032 AA00        R     MOV     R2,buffer+01H
0034 A900        R     MOV     R1,buffer+02H
0036 E9                MOV     A,R1
0037 2F                ADD     A,R7
0038 F9                MOV     R1,A
0039 EA                MOV     A,R2
003A 3E                ADDC    A,R6
003B FA                MOV     R2,A
003C 120000      E     LCALL   ?C?CLDPTR
003F FF                MOV     R7,A
0040 7E00              MOV     R6,#00H
0042 8E00        R     MOV     tmp,R6
0044 8F00        R     MOV     tmp+01H,R7
                                           ; SOURCE LINE # 121
0046 750000      R     MOV     i,#00H
0049         ?C0006:
0049 E500        R     MOV     A,i
004B C3                CLR     C
004C 9408              SUBB    A,#08H
004E 5047              JNC     ?C0007
                                           ; SOURCE LINE # 122
                                           ; SOURCE LINE # 123
0050 7E00              MOV     R6,#00H
0052 E500        R     MOV     A,tmp+01H
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 34  

0054 5401              ANL     A,#01H
0056 FF                MOV     R7,A
0057 7C00              MOV     R4,#00H
0059 E500        R     MOV     A,crc+01H
005B 5401              ANL     A,#01H
005D FD                MOV     R5,A
005E EC                MOV     A,R4
005F 6E                XRL     A,R6
0060 FE                MOV     R6,A
0061 ED                MOV     A,R5
0062 6F                XRL     A,R7
0063 FF                MOV     R7,A
0064 EF                MOV     A,R7
0065 4E                ORL     A,R6
0066 6015              JZ      ?C0009
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 125
0068 E500        R     MOV     A,crc
006A C3                CLR     C
006B 13                RRC     A
006C FE                MOV     R6,A
006D E500        R     MOV     A,crc+01H
006F 13                RRC     A
0070 FF                MOV     R7,A
0071 EE                MOV     A,R6
0072 6484              XRL     A,#084H
0074 F500        R     MOV     crc,A
0076 EF                MOV     A,R7
0077 6408              XRL     A,#08H
0079 F500        R     MOV     crc+01H,A
                                           ; SOURCE LINE # 126
007B 800B              SJMP    ?C0010
007D         ?C0009:
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 129
007D E500        R     MOV     A,crc
007F C3                CLR     C
0080 13                RRC     A
0081 F500        R     MOV     crc,A
0083 E500        R     MOV     A,crc+01H
0085 13                RRC     A
0086 F500        R     MOV     crc+01H,A
                                           ; SOURCE LINE # 130
0088         ?C0010:
                                           ; SOURCE LINE # 132
0088 E500        R     MOV     A,tmp
008A C3                CLR     C
008B 13                RRC     A
008C F500        R     MOV     tmp,A
008E E500        R     MOV     A,tmp+01H
0090 13                RRC     A
0091 F500        R     MOV     tmp+01H,A
                                           ; SOURCE LINE # 133
0093 0500        R     INC     i
0095 80B2              SJMP    ?C0006
0097         ?C0007:
                                           ; SOURCE LINE # 135
0097 E500        R     MOV     A,size+01H
0099 1500        R     DEC     size+01H
009B 7002              JNZ     ?C0142
009D 1500        R     DEC     size
009F         ?C0142:
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 35  

                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 137
009F E500        R     MOV     A,size+01H
00A1 4500        R     ORL     A,size
00A3 7080              JNZ     ?C0005
                                           ; SOURCE LINE # 139
00A5 6300FF      R     XRL     crc+01H,#0FFH
00A8 6300FF      R     XRL     crc,#0FFH
                                           ; SOURCE LINE # 140
00AB 850000      R     MOV     tmp,crc
00AE 850000      R     MOV     tmp+01H,crc+01H
                                           ; SOURCE LINE # 141
00B1 E500        R     MOV     A,crc+01H
00B3 7D00              MOV     R5,#00H
00B5 FC                MOV     R4,A
00B6 E500        R     MOV     A,tmp
00B8 FF                MOV     R7,A
00B9 7E00              MOV     R6,#00H
00BB EE                MOV     A,R6
00BC 4C                ORL     A,R4
00BD F500        R     MOV     crc,A
00BF EF                MOV     A,R7
00C0 4D                ORL     A,R5
00C1 F500        R     MOV     crc+01H,A
                                           ; SOURCE LINE # 142
00C3         ?C0002:
                                           ; SOURCE LINE # 144
00C3 AE00        R     MOV     R6,crc
00C5 AF00        R     MOV     R7,crc+01H
                                           ; SOURCE LINE # 159
00C7         ?C0011:
00C7 22                RET     
             ; FUNCTION _Bootloader_CalcPacketChecksum (END)

             ; FUNCTION _Bootloader_Calc8BitSum (BEGIN)
                                           ; SOURCE LINE # 185
0000 8F00        R     MOV     baseAddr+03H,R7
0002 8E00        R     MOV     baseAddr+02H,R6
0004 8D00        R     MOV     baseAddr+01H,R5
0006 8C00        R     MOV     baseAddr,R4
                                           ; SOURCE LINE # 188
0008 750000      R     MOV     sum,#00H
                                           ; SOURCE LINE # 191
000B AE00        R     MOV     R6,baseAddr+02H
000D AF00        R     MOV     R7,baseAddr+03H
000F EF                MOV     A,R7
0010 6400              XRL     A,#00H
0012 7003              JNZ     ?C0143
0014 EE                MOV     A,R6
0015 6480              XRL     A,#080H
0017         ?C0143:
0017 601B              JZ      ?C0013
0019 7F00              MOV     R7,#00H
001B 7E00              MOV     R6,#00H
001D 7D10              MOV     R5,#010H
001F 7C00              MOV     R4,#00H
0021 AB00        R     MOV     R3,baseAddr+03H
0023 AA00        R     MOV     R2,baseAddr+02H
0025 A900        R     MOV     R1,baseAddr+01H
0027 A800        R     MOV     R0,baseAddr
0029 C3                CLR     C
002A 120000      E     LCALL   ?C?ULCMP
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 36  

002D 6005              JZ      ?C0013
002F 7F00              MOV     R7,#00H
0031 120000      E     LCALL   _?CyHalt
0034         ?C0013:
                                           ; SOURCE LINE # 196
0034 AE00        R     MOV     R6,size+02H
0036 AF00        R     MOV     R7,size+03H
0038 D3                SETB    C
0039 EF                MOV     A,R7
003A 9400              SUBB    A,#00H
003C EE                MOV     A,R6
003D 9400              SUBB    A,#00H
003F 4050              JC      ?C0014
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 198
0041 AF00        R     MOV     R7,size+03H
0043 AE00        R     MOV     R6,size+02H
0045 AD00        R     MOV     R5,size+01H
0047 AC00        R     MOV     R4,size
0049 7BFF              MOV     R3,#0FFH
004B 7AFF              MOV     R2,#0FFH
004D 79FF              MOV     R1,#0FFH
004F 78FF              MOV     R0,#0FFH
0051 120000      E     LCALL   ?C?LADD
0054 8F00        R     MOV     size+03H,R7
0056 8E00        R     MOV     size+02H,R6
0058 8D00        R     MOV     size+01H,R5
005A 8C00        R     MOV     size,R4
                                           ; SOURCE LINE # 199
005C E500        R     MOV     A,baseAddr+03H
005E 2500        R     ADD     A,start+03H
0060 FF                MOV     R7,A
0061 E500        R     MOV     A,baseAddr+02H
0063 3500        R     ADDC    A,start+02H
0065 FE                MOV     R6,A
0066 E500        R     MOV     A,baseAddr+01H
0068 3500        R     ADDC    A,start+01H
006A FD                MOV     R5,A
006B E500        R     MOV     A,baseAddr
006D 3500        R     ADDC    A,start
006F FC                MOV     R4,A
0070 EF                MOV     A,R7
0071 2500        R     ADD     A,size+03H
0073 FF                MOV     R7,A
0074 EE                MOV     A,R6
0075 3500        R     ADDC    A,size+02H
0077 FE                MOV     R6,A
0078 ED                MOV     A,R5
0079 3500        R     ADDC    A,size+01H
007B FD                MOV     R5,A
007C EC                MOV     A,R4
007D 3500        R     ADDC    A,size
007F FC                MOV     R4,A
0080 A907              MOV     R1,AR7
0082 AA06              MOV     R2,AR6
0084 AB05              MOV     R3,AR5
0086 120000      E     LCALL   ?C?CLDPTR
0089 FF                MOV     R7,A
008A EF                MOV     A,R7
008B 2500        R     ADD     A,sum
008D F500        R     MOV     sum,A
                                           ; SOURCE LINE # 200
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 37  

008F 80A3              SJMP    ?C0013
0091         ?C0014:
                                           ; SOURCE LINE # 202
0091 AF00        R     MOV     R7,sum
                                           ; SOURCE LINE # 203
0093         ?C0015:
0093 22                RET     
             ; FUNCTION _Bootloader_Calc8BitSum (END)

             ; FUNCTION Bootloader_Start (BEGIN)
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 260
0000 750006      R     MOV     validApp,#06H
                                           ; SOURCE LINE # 346
0003 7F00              MOV     R7,#00H
0005 120000      R     LCALL   _Bootloader_ValidateBootloadable
0008 EF                MOV     A,R7
0009 7003              JNZ     ?C0016
                                           ; SOURCE LINE # 347
                                           ; SOURCE LINE # 348
000B 750000      R     MOV     validApp,#00H
                                           ; SOURCE LINE # 349
000E         ?C0016:
                                           ; SOURCE LINE # 388
000E 7F00              MOV     R7,#00H
0010 7E00              MOV     R6,#00H
0012 7D10              MOV     R5,#010H
0014 7C00              MOV     R4,#00H
0016 C004              PUSH    AR4
0018 C005              PUSH    AR5
001A C006              PUSH    AR6
001C C007              PUSH    AR7
001E 7F00              MOV     R7,#00H
0020 7E00              MOV     R6,#00H
0022 7D00              MOV     R5,#00H
0024 7C00              MOV     R4,#00H
0026 8F00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+07H,R7
0028 8E00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+06H,R6
002A 8D00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+05H,R5
002C 8C00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+04H,R4
002E 900000      R     MOV     DPTR,#Bootloader_SizeBytesAccess
0031 E0                MOVX    A,@DPTR
0032 FE                MOV     R6,A
0033 A3                INC     DPTR
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 8F82              MOV     DPL,R7
0038 8E83              MOV     DPH,R6
003A 120000      E     LCALL   ?C?LLDCODE
003D 8F00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+0BH,R7
003F 8E00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+0AH,R6
0041 8D00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+09H,R5
0043 8C00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+08H,R4
0045 D007              POP     AR7
0047 D006              POP     AR6
0049 D005              POP     AR5
004B D004              POP     AR4
004D 120000      R     LCALL   _Bootloader_Calc8BitSum
0050 8F00        R     MOV     calcedChecksum,R7
                                           ; SOURCE LINE # 393
0052 900000      R     MOV     DPTR,#Bootloader_ChecksumAccess
0055 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 38  

0056 FE                MOV     R6,A
0057 A3                INC     DPTR
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
005A 8F82              MOV     DPL,R7
005C 8E83              MOV     DPH,R6
005E E4                CLR     A
005F 93                MOVC    A,@A+DPTR
0060 FF                MOV     R7,A
0061 C3                CLR     C
0062 E500        R     MOV     A,calcedChecksum
0064 9F                SUBB    A,R7
0065 F500        R     MOV     calcedChecksum,A
                                           ; SOURCE LINE # 394
0067 E500        R     MOV     A,calcedChecksum
0069 F4                CPL     A
006A FF                MOV     R7,A
006B EF                MOV     A,R7
006C 04                INC     A
006D F500        R     MOV     calcedChecksum,A
                                           ; SOURCE LINE # 397
006F 900000      R     MOV     DPTR,#Bootloader_ChecksumAccess
0072 E0                MOVX    A,@DPTR
0073 FE                MOV     R6,A
0074 A3                INC     DPTR
0075 E0                MOVX    A,@DPTR
0076 FF                MOV     R7,A
0077 8F82              MOV     DPL,R7
0079 8E83              MOV     DPH,R6
007B E4                CLR     A
007C 93                MOVC    A,@A+DPTR
007D FF                MOV     R7,A
007E E500        R     MOV     A,calcedChecksum
0080 B50713            CJNE    A,AR7,?C0018
0083 900000      R     MOV     DPTR,#Bootloader_SizeBytesAccess
0086 E0                MOVX    A,@DPTR
0087 FE                MOV     R6,A
0088 A3                INC     DPTR
0089 E0                MOVX    A,@DPTR
008A FF                MOV     R7,A
008B 8F82              MOV     DPL,R7
008D 8E83              MOV     DPH,R6
008F 120000      E     LCALL   ?C?LLDCODE
0092 EF                MOV     A,R7
0093 4E                ORL     A,R6
0094 7005              JNZ     ?C0017
0096         ?C0018:
                                           ; SOURCE LINE # 399
                                           ; SOURCE LINE # 400
0096 7F00              MOV     R7,#00H
0098 120000      E     LCALL   _?CyHalt
                                           ; SOURCE LINE # 401
009B         ?C0017:
                                           ; SOURCE LINE # 413
009B 9046FA            MOV     DPTR,#046FAH
009E E0                MOVX    A,@DPTR
009F FF                MOV     R7,A
00A0 EF                MOV     A,R7
00A1 54C0              ANL     A,#0C0H
00A3 FF                MOV     R7,A
00A4 7E00              MOV     R6,#00H
00A6 EF                MOV     A,R7
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 39  

00A7 6440              XRL     A,#040H
00A9 4E                ORL     A,R6
00AA 6004              JZ      ?C0020
00AC E500        R     MOV     A,validApp
00AE 600A              JZ      ?C0019
00B0         ?C0020:
                                           ; SOURCE LINE # 415
                                           ; SOURCE LINE # 416
00B0 9046FA            MOV     DPTR,#046FAH
00B3 E4                CLR     A
00B4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 418
00B5 7F00              MOV     R7,#00H
00B7 120000      R     LCALL   _Bootloader_HostLink
                                           ; SOURCE LINE # 419
00BA         ?C0019:
                                           ; SOURCE LINE # 426
00BA 7F00              MOV     R7,#00H
00BC 120000      R     LCALL   _Bootloader_HostLink
                                           ; SOURCE LINE # 432
00BF 120000      R     LCALL   Bootloader_LaunchApplication
                                           ; SOURCE LINE # 433
00C2 22                RET     
             ; FUNCTION Bootloader_Start (END)

             ; FUNCTION Bootloader_LaunchApplication (BEGIN)
                                           ; SOURCE LINE # 450
                                           ; SOURCE LINE # 453
0000 9046FA            MOV     DPTR,#046FAH
0003 7480              MOV     A,#080H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 455
0006 120000      E     LCALL   CySoftwareReset
                                           ; SOURCE LINE # 456
0009 22                RET     
             ; FUNCTION Bootloader_LaunchApplication (END)

             ; FUNCTION _Bootloader_Exit (BEGIN)
                                           ; SOURCE LINE # 486
0000 8F00        R     MOV     appId,R7
                                           ; SOURCE LINE # 488
0002 E500        R     MOV     A,appId
0004 B40207            CJNE    A,#02H,?C0023
                                           ; SOURCE LINE # 489
                                           ; SOURCE LINE # 490
0007 9046FA            MOV     DPTR,#046FAH
000A E4                CLR     A
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 491
000C 8059              SJMP    ?C0024
000E         ?C0023:
                                           ; SOURCE LINE # 493
                                           ; SOURCE LINE # 494
000E AF00        R     MOV     R7,appId
0010 120000      R     LCALL   _Bootloader_ValidateBootloadable
0013 EF                MOV     A,R7
0014 704C              JNZ     ?C0025
                                           ; SOURCE LINE # 495
                                           ; SOURCE LINE # 498
0016 750000      R     MOV     idx,#00H
0019         ?C0026:
0019 E500        R     MOV     A,idx
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 40  

001B C3                CLR     C
001C 9401              SUBB    A,#01H
001E 503A              JNC     ?C0027
                                           ; SOURCE LINE # 499
                                           ; SOURCE LINE # 501
0020 AF00        R     MOV     R7,idx
0022 7E00              MOV     R6,#00H
0024 7C01              MOV     R4,#01H
0026 7D00              MOV     R5,#00H
0028 120000      E     LCALL   ?C?LIMUL
002B A804              MOV     R0,AR4
002D A905              MOV     R1,AR5
002F AA06              MOV     R2,AR6
0031 AB07              MOV     R3,AR7
0033 C3                CLR     C
0034 74D0              MOV     A,#0D0H
0036 9B                SUBB    A,R3
0037 FF                MOV     R7,A
0038 74FF              MOV     A,#0FFH
003A 9A                SUBB    A,R2
003B FE                MOV     R6,A
003C 7410              MOV     A,#010H
003E 99                SUBB    A,R1
003F FD                MOV     R5,A
0040 E4                CLR     A
0041 98                SUBB    A,R0
0042 FC                MOV     R4,A
0043 E500        R     MOV     A,idx
0045 B50004            CJNE    A,appId,?C0029
0048 7B01              MOV     R3,#01H
004A 8002              SJMP    ?C0030
004C         ?C0029:
004C 7B00              MOV     R3,#00H
004E         ?C0030:
004E 900000      R     MOV     DPTR,#?_Bootloader_SetFlashByte?BYTE+04H
0051 EB                MOV     A,R3
0052 F0                MOVX    @DPTR,A
0053 120000      R     LCALL   _Bootloader_SetFlashByte
                                           ; SOURCE LINE # 502
0056 0500        R     INC     idx
0058 80BF              SJMP    ?C0026
005A         ?C0027:
                                           ; SOURCE LINE # 508
005A 9046FA            MOV     DPTR,#046FAH
005D 7480              MOV     A,#080H
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 509
0060 8005              SJMP    ?C0024
0062         ?C0025:
                                           ; SOURCE LINE # 511
                                           ; SOURCE LINE # 512
0062 9046FA            MOV     DPTR,#046FAH
0065 E4                CLR     A
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 513
                                           ; SOURCE LINE # 514
0067         ?C0024:
                                           ; SOURCE LINE # 516
0067 120000      E     LCALL   CySoftwareReset
                                           ; SOURCE LINE # 517
006A 22                RET     
             ; FUNCTION _Bootloader_Exit (END)
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 41  


             ; FUNCTION CyBtldr_CheckLaunch (BEGIN)
                                           ; SOURCE LINE # 538
                                           ; SOURCE LINE # 556
0000 9046FA            MOV     DPTR,#046FAH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54C0              ANL     A,#0C0H
0008 FF                MOV     R7,A
0009 7E00              MOV     R6,#00H
000B EF                MOV     A,R7
000C 6480              XRL     A,#080H
000E 4E                ORL     A,R6
000F 701A              JNZ     ?C0035
                                           ; SOURCE LINE # 557
                                           ; SOURCE LINE # 558
0011 9046FA            MOV     DPTR,#046FAH
0014 E4                CLR     A
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 566
0016 7D00              MOV     R5,#00H
0018 7F02              MOV     R7,#02H
001A 120000      R     LCALL   _Bootloader_GetMetadata
001D EF                MOV     A,R7
001E 4E                ORL     A,R6
001F 600A              JZ      ?C0035
                                           ; SOURCE LINE # 567
                                           ; SOURCE LINE # 569
0021 7D00              MOV     R5,#00H
0023 7F02              MOV     R7,#02H
0025 120000      R     LCALL   _Bootloader_GetMetadata
0028 120000      E     LCALL   _Bootloader_LaunchBootloadable
                                           ; SOURCE LINE # 571
                                           ; SOURCE LINE # 572
                                           ; SOURCE LINE # 573
002B         ?C0035:
002B 22                RET     
             ; FUNCTION CyBtldr_CheckLaunch (END)

             ; FUNCTION _Bootloader_ValidateBootloadable (BEGIN)
                                           ; SOURCE LINE # 632
0000 8F00        R     MOV     appId,R7
                                           ; SOURCE LINE # 637
0002 AD00        R     MOV     R5,appId
0004 7F03              MOV     R7,#03H
0006 120000      R     LCALL   _Bootloader_GetMetadata
0009 EF                MOV     A,R7
000A 2401              ADD     A,#01H
000C FF                MOV     R7,A
000D EE                MOV     A,R6
000E 3400              ADDC    A,#00H
0010 FE                MOV     R6,A
0011 ED                MOV     A,R5
0012 3400              ADDC    A,#00H
0014 FD                MOV     R5,A
0015 EC                MOV     A,R4
0016 3400              ADDC    A,#00H
0018 FC                MOV     R4,A
0019 7B00              MOV     R3,#00H
001B 7A01              MOV     R2,#01H
001D 7900              MOV     R1,#00H
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 42  

001F 7800              MOV     R0,#00H
0021 120000      E     LCALL   ?C?LMUL
0024 C004              PUSH    AR4
0026 C005              PUSH    AR5
0028 C006              PUSH    AR6
002A C007              PUSH    AR7
002C AD00        R     MOV     R5,appId
002E 7F04              MOV     R7,#04H
0030 120000      R     LCALL   _Bootloader_GetMetadata
0033 A804              MOV     R0,AR4
0035 A905              MOV     R1,AR5
0037 AA06              MOV     R2,AR6
0039 AB07              MOV     R3,AR7
003B D007              POP     AR7
003D D006              POP     AR6
003F D005              POP     AR5
0041 D004              POP     AR4
0043 120000      E     LCALL   ?C?LADD
0046 8F00        R     MOV     end+03H,R7
0048 8E00        R     MOV     end+02H,R6
004A 8D00        R     MOV     end+01H,R5
004C 8C00        R     MOV     end,R4
                                           ; SOURCE LINE # 641
004E C200        R     CLR     valid
                                           ; SOURCE LINE # 642
0050 750000      R     MOV     calcedChecksum,#00H
                                           ; SOURCE LINE # 668
0053 AD00        R     MOV     R5,appId
0055 7F03              MOV     R7,#03H
0057 120000      R     LCALL   _Bootloader_GetMetadata
005A EF                MOV     A,R7
005B 2401              ADD     A,#01H
005D FF                MOV     R7,A
005E EE                MOV     A,R6
005F 3400              ADDC    A,#00H
0061 FE                MOV     R6,A
0062 ED                MOV     A,R5
0063 3400              ADDC    A,#00H
0065 FD                MOV     R5,A
0066 EC                MOV     A,R4
0067 3400              ADDC    A,#00H
0069 FC                MOV     R4,A
006A 7B00              MOV     R3,#00H
006C 7A01              MOV     R2,#01H
006E 7900              MOV     R1,#00H
0070 7800              MOV     R0,#00H
0072 120000      E     LCALL   ?C?LMUL
0075 8F00        R     MOV     idx+03H,R7
0077 8E00        R     MOV     idx+02H,R6
0079 8D00        R     MOV     idx+01H,R5
007B 8C00        R     MOV     idx,R4
007D         ?C0036:
007D AF00        R     MOV     R7,end+03H
007F AE00        R     MOV     R6,end+02H
0081 AD00        R     MOV     R5,end+01H
0083 AC00        R     MOV     R4,end
0085 AB00        R     MOV     R3,idx+03H
0087 AA00        R     MOV     R2,idx+02H
0089 A900        R     MOV     R1,idx+01H
008B A800        R     MOV     R0,idx
008D C3                CLR     C
008E 120000      E     LCALL   ?C?ULCMP
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 43  

0091 5040              JNC     ?C0037
                                           ; SOURCE LINE # 669
                                           ; SOURCE LINE # 670
0093 AF00        R     MOV     R7,idx+03H
0095 AE00        R     MOV     R6,idx+02H
0097 AD00        R     MOV     R5,idx+01H
0099 AC00        R     MOV     R4,idx
009B 8F82              MOV     DPL,R7
009D 8E83              MOV     DPH,R6
009F E4                CLR     A
00A0 93                MOVC    A,@A+DPTR
00A1 FF                MOV     R7,A
00A2 8F00        R     MOV     curByte,R7
                                           ; SOURCE LINE # 672
00A4 E500        R     MOV     A,curByte
00A6 6008              JZ      ?C0039
00A8 E500        R     MOV     A,curByte
00AA 64FF              XRL     A,#0FFH
00AC 6002              JZ      ?C0039
                                           ; SOURCE LINE # 673
                                           ; SOURCE LINE # 674
00AE D200        R     SETB    valid
                                           ; SOURCE LINE # 675
00B0         ?C0039:
                                           ; SOURCE LINE # 677
00B0 E500        R     MOV     A,curByte
00B2 2500        R     ADD     A,calcedChecksum
00B4 F500        R     MOV     calcedChecksum,A
                                           ; SOURCE LINE # 678
00B6 AF00        R     MOV     R7,idx+03H
00B8 AE00        R     MOV     R6,idx+02H
00BA AD00        R     MOV     R5,idx+01H
00BC AC00        R     MOV     R4,idx
00BE 7B01              MOV     R3,#01H
00C0 7A00              MOV     R2,#00H
00C2 7900              MOV     R1,#00H
00C4 7800              MOV     R0,#00H
00C6 120000      E     LCALL   ?C?LADD
00C9 8F00        R     MOV     idx+03H,R7
00CB 8E00        R     MOV     idx+02H,R6
00CD 8D00        R     MOV     idx+01H,R5
00CF 8C00        R     MOV     idx,R4
00D1 80AA              SJMP    ?C0036
00D3         ?C0037:
                                           ; SOURCE LINE # 691
00D3 AD00        R     MOV     R5,appId
00D5 7F03              MOV     R7,#03H
00D7 120000      R     LCALL   _Bootloader_GetMetadata
00DA EF                MOV     A,R7
00DB 2401              ADD     A,#01H
00DD FF                MOV     R7,A
00DE EE                MOV     A,R6
00DF 3400              ADDC    A,#00H
00E1 FE                MOV     R6,A
00E2 ED                MOV     A,R5
00E3 3400              ADDC    A,#00H
00E5 FD                MOV     R5,A
00E6 EC                MOV     A,R4
00E7 3400              ADDC    A,#00H
00E9 FC                MOV     R4,A
00EA 7B00              MOV     R3,#00H
00EC 7A01              MOV     R2,#01H
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 44  

00EE 7900              MOV     R1,#00H
00F0 7800              MOV     R0,#00H
00F2 120000      E     LCALL   ?C?LMUL
00F5 7803              MOV     R0,#03H
00F7 120000      E     LCALL   ?C?ULSHR
00FA 8F00        R     MOV     idx+03H,R7
00FC 8E00        R     MOV     idx+02H,R6
00FE 8D00        R     MOV     idx+01H,R5
0100 8C00        R     MOV     idx,R4
                                           ; SOURCE LINE # 694
0102 7FC0              MOV     R7,#0C0H
0104 7EFF              MOV     R6,#0FFH
0106 7D00              MOV     R5,#00H
0108 7C00              MOV     R4,#00H
010A AB00        R     MOV     R3,end+03H
010C AA00        R     MOV     R2,end+02H
010E A900        R     MOV     R1,end+01H
0110 A800        R     MOV     R0,end
0112 C3                CLR     C
0113 120000      E     LCALL   ?C?ULCMP
0116 700A              JNZ     ?C0040
0118 7F00              MOV     R7,#00H
011A 7E20              MOV     R6,#020H
011C 7D00              MOV     R5,#00H
011E 7C00              MOV     R4,#00H
0120 800D              SJMP    ?C0041
0122         ?C0040:
0122 AF00        R     MOV     R7,end+03H
0124 AE00        R     MOV     R6,end+02H
0126 AD00        R     MOV     R5,end+01H
0128 AC00        R     MOV     R4,end
012A 7803              MOV     R0,#03H
012C 120000      E     LCALL   ?C?ULSHR
012F         ?C0041:
012F 8F00        R     MOV     end+03H,R7
0131 8E00        R     MOV     end+02H,R6
0133 8D00        R     MOV     end+01H,R5
0135 8C00        R     MOV     end,R4
                                           ; SOURCE LINE # 698
0137         ?C0042:
0137 AF00        R     MOV     R7,end+03H
0139 AE00        R     MOV     R6,end+02H
013B AD00        R     MOV     R5,end+01H
013D AC00        R     MOV     R4,end
013F AB00        R     MOV     R3,idx+03H
0141 AA00        R     MOV     R2,idx+02H
0143 A900        R     MOV     R1,idx+01H
0145 A800        R     MOV     R0,idx
0147 C3                CLR     C
0148 120000      E     LCALL   ?C?ULCMP
014B 503F              JNC     ?C0043
                                           ; SOURCE LINE # 699
                                           ; SOURCE LINE # 700
014D E500        R     MOV     A,idx+03H
014F 2400              ADD     A,#00H
0151 FF                MOV     R7,A
0152 E500        R     MOV     A,idx+02H
0154 3400              ADDC    A,#00H
0156 FE                MOV     R6,A
0157 E500        R     MOV     A,idx+01H
0159 3408              ADDC    A,#08H
015B FD                MOV     R5,A
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 45  

015C E500        R     MOV     A,idx
015E 3400              ADDC    A,#00H
0160 FC                MOV     R4,A
0161 A907              MOV     R1,AR7
0163 AA06              MOV     R2,AR6
0165 AB05              MOV     R3,AR5
0167 120000      E     LCALL   _cyread8
016A EF                MOV     A,R7
016B 2500        R     ADD     A,calcedChecksum
016D F500        R     MOV     calcedChecksum,A
                                           ; SOURCE LINE # 701
016F AF00        R     MOV     R7,idx+03H
0171 AE00        R     MOV     R6,idx+02H
0173 AD00        R     MOV     R5,idx+01H
0175 AC00        R     MOV     R4,idx
0177 7B01              MOV     R3,#01H
0179 7A00              MOV     R2,#00H
017B 7900              MOV     R1,#00H
017D 7800              MOV     R0,#00H
017F 120000      E     LCALL   ?C?LADD
0182 8F00        R     MOV     idx+03H,R7
0184 8E00        R     MOV     idx+02H,R6
0186 8D00        R     MOV     idx+01H,R5
0188 8C00        R     MOV     idx,R4
018A 80AB              SJMP    ?C0042
018C         ?C0043:
                                           ; SOURCE LINE # 706
018C E500        R     MOV     A,calcedChecksum
018E F4                CPL     A
018F FF                MOV     R7,A
0190 EF                MOV     A,R7
0191 04                INC     A
0192 F500        R     MOV     calcedChecksum,A
                                           ; SOURCE LINE # 709
0194 AD00        R     MOV     R5,appId
0196 7F01              MOV     R7,#01H
0198 120000      R     LCALL   _Bootloader_GetMetadata
019B A804              MOV     R0,AR4
019D A905              MOV     R1,AR5
019F AA06              MOV     R2,AR6
01A1 AB07              MOV     R3,AR7
01A3 AF00        R     MOV     R7,calcedChecksum
01A5 E4                CLR     A
01A6 FC                MOV     R4,A
01A7 FD                MOV     R5,A
01A8 FE                MOV     R6,A
01A9 C3                CLR     C
01AA 120000      E     LCALL   ?C?ULCMP
01AD 7003              JNZ     ?C0046
01AF 200003            JB      valid,?C0045
01B2         ?C0046:
                                           ; SOURCE LINE # 711
                                           ; SOURCE LINE # 712
01B2 7F06              MOV     R7,#06H
01B4 22                RET     
                                           ; SOURCE LINE # 713
01B5         ?C0045:
                                           ; SOURCE LINE # 722
01B5 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 723
01B7         ?C0047:
01B7 22                RET     
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 46  

             ; FUNCTION _Bootloader_ValidateBootloadable (END)

             ; FUNCTION _Bootloader_HostLink (BEGIN)
                                           ; SOURCE LINE # 744
0000 900000      R     MOV     DPTR,#timeOut
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 745
                                           ; SOURCE LINE # 751
0005 750000      R     MOV     pktSize,#00H
0008 750000      R     MOV     pktSize+01H,#00H
                                           ; SOURCE LINE # 752
000B 750000      R     MOV     dataOffset,#00H
000E 750000      R     MOV     dataOffset+01H,#00H
                                           ; SOURCE LINE # 753
0011 75000A      R     MOV     timeOutCnt,#0AH
                                           ; SOURCE LINE # 759
0014 C200        R     CLR     communicationState
                                           ; SOURCE LINE # 782
0016 120000      E     LCALL   CySetTemp
0019 EF                MOV     A,R7
001A 6005              JZ      ?C0048
                                           ; SOURCE LINE # 783
                                           ; SOURCE LINE # 784
001C 7F00              MOV     R7,#00H
001E 120000      E     LCALL   _?CyHalt
                                           ; SOURCE LINE # 785
0021         ?C0048:
                                           ; SOURCE LINE # 800
0021 120000      E     LCALL   USBFS_CyBtldrCommStart
                                           ; SOURCE LINE # 803
0024 D2AF              SETB    EA
0026 9044F4            MOV     DPTR,#044F4H
0029 74FD              MOV     A,#0FDH
002B F0                MOVX    @DPTR,A
002C         ?C0051:
                                           ; SOURCE LINE # 806
                                           ; SOURCE LINE # 807
002C 750000      R     MOV     ackCode,#00H
002F         ?C0054:
                                           ; SOURCE LINE # 810
                                           ; SOURCE LINE # 811
002F 7B01              MOV     R3,#01H
0031 7A00        R     MOV     R2,#HIGH packetBuffer
0033 7900        R     MOV     R1,#LOW packetBuffer
0035 C003              PUSH    AR3
0037 C002              PUSH    AR2
0039 C001              PUSH    AR1
003B 7B00              MOV     R3,#00H
003D 7A00        R     MOV     R2,#HIGH numberRead
003F 7900        R     MOV     R1,#LOW numberRead
0041 8B00        E     MOV     ?_USBFS_CyBtldrCommRead?BYTE+05H,R3
0043 8A00        E     MOV     ?_USBFS_CyBtldrCommRead?BYTE+06H,R2
0045 8900        E     MOV     ?_USBFS_CyBtldrCommRead?BYTE+07H,R1
0047 900000      R     MOV     DPTR,#timeOut
004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
004C EF                MOV     A,R7
004D 7004              JNZ     ?C0055
004F 7FFF              MOV     R7,#0FFH
0051 8005              SJMP    ?C0056
0053         ?C0055:
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 47  

0053 900000      R     MOV     DPTR,#timeOut
0056 E0                MOVX    A,@DPTR
0057 FF                MOV     R7,A
0058         ?C0056:
0058 8F00        E     MOV     ?_USBFS_CyBtldrCommRead?BYTE+08H,R7
005A D001              POP     AR1
005C D002              POP     AR2
005E D003              POP     AR3
0060 7D2C              MOV     R5,#02CH
0062 7C01              MOV     R4,#01H
0064 120000      E     LCALL   _USBFS_CyBtldrCommRead
0067 8F00        R     MOV     readStat,R7
                                           ; SOURCE LINE # 815
0069 900000      R     MOV     DPTR,#timeOut
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
006E EF                MOV     A,R7
006F 6002              JZ      ?C0052
                                           ; SOURCE LINE # 816
                                           ; SOURCE LINE # 817
0071 1500        R     DEC     timeOutCnt
                                           ; SOURCE LINE # 818
                                           ; SOURCE LINE # 820
0073         ?C0052:
0073 E500        R     MOV     A,timeOutCnt
0075 6004              JZ      ?C0053
0077 E500        R     MOV     A,readStat
0079 70B4              JNZ     ?C0054
007B         ?C0053:
                                           ; SOURCE LINE # 823
007B E500        R     MOV     A,readStat
007D 6003              JZ      $ + 5H
007F 020000      R     LJMP    ?C0049
                                           ; SOURCE LINE # 824
                                           ; SOURCE LINE # 825
                                           ; SOURCE LINE # 826
0082         ?C0059:
                                           ; SOURCE LINE # 828
0082 C3                CLR     C
0083 E500        R     MOV     A,numberRead+01H
0085 9407              SUBB    A,#07H
0087 E500        R     MOV     A,numberRead
0089 9400              SUBB    A,#00H
008B 400A              JC      ?C0061
008D 900000      R     MOV     DPTR,#packetBuffer
0090 E0                MOVX    A,@DPTR
0091 FF                MOV     R7,A
0092 EF                MOV     A,R7
0093 6401              XRL     A,#01H
0095 6006              JZ      ?C0060
0097         ?C0061:
                                           ; SOURCE LINE # 830
                                           ; SOURCE LINE # 831
0097 750004      R     MOV     ackCode,#04H
                                           ; SOURCE LINE # 832
009A 020000      R     LJMP    ?C0062
009D         ?C0060:
                                           ; SOURCE LINE # 834
                                           ; SOURCE LINE # 835
009D 900000      R     MOV     DPTR,#packetBuffer+03H
00A0 E0                MOVX    A,@DPTR
00A1 FF                MOV     R7,A
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 48  

00A2 7E00              MOV     R6,#00H
00A4 EF                MOV     A,R7
00A5 7F00              MOV     R7,#00H
00A7 FE                MOV     R6,A
00A8 900000      R     MOV     DPTR,#packetBuffer+02H
00AB E0                MOVX    A,@DPTR
00AC FD                MOV     R5,A
00AD 7C00              MOV     R4,#00H
00AF EE                MOV     A,R6
00B0 4C                ORL     A,R4
00B1 F500        R     MOV     pktSize,A
00B3 EF                MOV     A,R7
00B4 4D                ORL     A,R5
00B5 F500        R     MOV     pktSize+01H,A
                                           ; SOURCE LINE # 838
00B7 AE00        R     MOV     R6,pktSize
00B9 AF00        R     MOV     R7,pktSize+01H
00BB 7400        R     MOV     A,#LOW packetBuffer+05H
00BD 2F                ADD     A,R7
00BE F582              MOV     DPL,A
00C0 7400        R     MOV     A,#HIGH packetBuffer+05H
00C2 3E                ADDC    A,R6
00C3 F583              MOV     DPH,A
00C5 E0                MOVX    A,@DPTR
00C6 FF                MOV     R7,A
00C7 7E00              MOV     R6,#00H
00C9 EF                MOV     A,R7
00CA 7F00              MOV     R7,#00H
00CC FE                MOV     R6,A
00CD AC00        R     MOV     R4,pktSize
00CF AD00        R     MOV     R5,pktSize+01H
00D1 7400        R     MOV     A,#LOW packetBuffer+04H
00D3 2D                ADD     A,R5
00D4 F582              MOV     DPL,A
00D6 7400        R     MOV     A,#HIGH packetBuffer+04H
00D8 3C                ADDC    A,R4
00D9 F583              MOV     DPH,A
00DB E0                MOVX    A,@DPTR
00DC FD                MOV     R5,A
00DD 7C00              MOV     R4,#00H
00DF EE                MOV     A,R6
00E0 4C                ORL     A,R4
00E1 F500        R     MOV     pktChecksum,A
00E3 EF                MOV     A,R7
00E4 4D                ORL     A,R5
00E5 F500        R     MOV     pktChecksum+01H,A
                                           ; SOURCE LINE # 841
00E7 E500        R     MOV     A,pktSize+01H
00E9 2407              ADD     A,#07H
00EB FF                MOV     R7,A
00EC E500        R     MOV     A,pktSize
00EE 3400              ADDC    A,#00H
00F0 FE                MOV     R6,A
00F1 D3                SETB    C
00F2 EF                MOV     A,R7
00F3 9500        R     SUBB    A,numberRead+01H
00F5 EE                MOV     A,R6
00F6 9500        R     SUBB    A,numberRead
00F8 4005              JC      ?C0063
                                           ; SOURCE LINE # 842
                                           ; SOURCE LINE # 843
00FA 750003      R     MOV     ackCode,#03H
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 49  

                                           ; SOURCE LINE # 844
00FD 803A              SJMP    ?C0062
00FF         ?C0063:
                                           ; SOURCE LINE # 845
00FF AE00        R     MOV     R6,pktSize
0101 AF00        R     MOV     R7,pktSize+01H
0103 7400        R     MOV     A,#LOW packetBuffer+06H
0105 2F                ADD     A,R7
0106 F582              MOV     DPL,A
0108 7400        R     MOV     A,#HIGH packetBuffer+06H
010A 3E                ADDC    A,R6
010B F583              MOV     DPH,A
010D E0                MOVX    A,@DPTR
010E FF                MOV     R7,A
010F EF                MOV     A,R7
0110 6417              XRL     A,#017H
0112 6005              JZ      ?C0065
                                           ; SOURCE LINE # 846
                                           ; SOURCE LINE # 847
0114 750004      R     MOV     ackCode,#04H
                                           ; SOURCE LINE # 848
0117 8020              SJMP    ?C0062
0119         ?C0065:
                                           ; SOURCE LINE # 849
0119 7B01              MOV     R3,#01H
011B 7A00        R     MOV     R2,#HIGH packetBuffer
011D 7900        R     MOV     R1,#LOW packetBuffer
011F E500        R     MOV     A,pktSize+01H
0121 2404              ADD     A,#04H
0123 FD                MOV     R5,A
0124 E500        R     MOV     A,pktSize
0126 3400              ADDC    A,#00H
0128 FC                MOV     R4,A
0129 120000      R     LCALL   _Bootloader_CalcPacketChecksum
012C EF                MOV     A,R7
012D 6500        R     XRL     A,pktChecksum+01H
012F 7003              JNZ     ?C0144
0131 EE                MOV     A,R6
0132 6500        R     XRL     A,pktChecksum
0134         ?C0144:
0134 6003              JZ      ?C0062
                                           ; SOURCE LINE # 851
                                           ; SOURCE LINE # 852
0136 750008      R     MOV     ackCode,#08H
                                           ; SOURCE LINE # 853
                                           ; SOURCE LINE # 855
                                           ; SOURCE LINE # 857
                                           ; SOURCE LINE # 858
0139         ?C0062:
                                           ; SOURCE LINE # 860
0139 750000      R     MOV     rspSize,#00H
013C 750000      R     MOV     rspSize+01H,#00H
                                           ; SOURCE LINE # 861
013F E500        R     MOV     A,ackCode
0141 6003              JZ      $ + 5H
0143 020000      R     LJMP    ?C0069
                                           ; SOURCE LINE # 862
                                           ; SOURCE LINE # 863
0146 900000      R     MOV     DPTR,#packetBuffer+04H
0149 E0                MOVX    A,@DPTR
014A FF                MOV     R7,A
014B 8F00        R     MOV     btldrData,R7
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 50  

                                           ; SOURCE LINE # 865
014D 750004      R     MOV     ackCode,#04H
                                           ; SOURCE LINE # 866
0150 900000      R     MOV     DPTR,#packetBuffer+01H
0153 E0                MOVX    A,@DPTR
0154 FF                MOV     R7,A
0155 EF                MOV     A,R7
0156 120000      E     LCALL   ?C?CCASE
0159 0000        R     DW      ?C0071
015B 31                DB      031H
015C 0000        R     DW      ?C0075
015E 32                DB      032H
015F 0000        R     DW      ?C0083
0161 34                DB      034H
0162 0000        R     DW      ?C0099
0164 35                DB      035H
0165 0000        R     DW      ?C0101
0167 37                DB      037H
0168 0000        R     DW      ?C0105
016A 38                DB      038H
016B 0000        R     DW      ?C0083
016D 39                DB      039H
016E 0000        R     DW      ?C0107
0170 3A                DB      03AH
0171 0000        R     DW      ?C0116
0173 3B                DB      03BH
0174 0000              DW      00H
0176 0000        R     DW      ?C0118
                                           ; SOURCE LINE # 867
                                           ; SOURCE LINE # 911
0178         ?C0071:
                                           ; SOURCE LINE # 913
0178 200003      R     JB      communicationState,$ + 6H
017B 020000      R     LJMP    ?C0069
017E E500        R     MOV     A,pktSize+01H
0180 4500        R     ORL     A,pktSize
0182 6003              JZ      $ + 5H
0184 020000      R     LJMP    ?C0069
                                           ; SOURCE LINE # 914
                                           ; SOURCE LINE # 916
0187 7F00              MOV     R7,#00H
0189 120000      R     LCALL   _Bootloader_ValidateBootloadable
018C EF                MOV     A,R7
018D 7004              JNZ     ?C0073
018F 7F01              MOV     R7,#01H
0191 8002              SJMP    ?C0074
0193         ?C0073:
0193 7F00              MOV     R7,#00H
0195         ?C0074:
0195 900000      R     MOV     DPTR,#packetBuffer+04H
0198 EF                MOV     A,R7
0199 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 918
019A 750000      R     MOV     rspSize,#00H
019D 750001      R     MOV     rspSize+01H,#01H
                                           ; SOURCE LINE # 919
01A0 750000      R     MOV     ackCode,#00H
                                           ; SOURCE LINE # 920
                                           ; SOURCE LINE # 921
01A3 020000      R     LJMP    ?C0069
                                           ; SOURCE LINE # 933
01A6         ?C0075:
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 51  

                                           ; SOURCE LINE # 937
01A6 200003      R     JB      communicationState,$ + 6H
01A9 020000      R     LJMP    ?C0069
01AC E500        R     MOV     A,pktSize+01H
01AE 6401              XRL     A,#01H
01B0 4500        R     ORL     A,pktSize
01B2 6003              JZ      $ + 5H
01B4 020000      R     LJMP    ?C0069
                                           ; SOURCE LINE # 938
                                           ; SOURCE LINE # 939
01B7 E500        R     MOV     A,btldrData
01B9 C3                CLR     C
01BA 9401              SUBB    A,#01H
01BC 4003              JC      $ + 5H
01BE 020000      R     LJMP    ?C0069
                                           ; SOURCE LINE # 940
                                           ; SOURCE LINE # 956
01C1 900000      R     MOV     DPTR,#Bootloader_SizeBytesAccess
01C4 E0                MOVX    A,@DPTR
01C5 FE                MOV     R6,A
01C6 A3                INC     DPTR
01C7 E0                MOVX    A,@DPTR
01C8 FF                MOV     R7,A
01C9 8F82              MOV     DPL,R7
01CB 8E83              MOV     DPH,R6
01CD 120000      E     LCALL   ?C?LLDCODE
01D0 7B00              MOV     R3,#00H
01D2 7A00              MOV     R2,#00H
01D4 7901              MOV     R1,#01H
01D6 7800              MOV     R0,#00H
01D8 120000      E     LCALL   ?C?ULDIV
01DB 8F00        R     MOV     ArrayIdBtlderEnds,R7
                                           ; SOURCE LINE # 958
01DD E500        R     MOV     A,btldrData
01DF B50021            CJNE    A,ArrayIdBtlderEnds,?C0078
                                           ; SOURCE LINE # 959
                                           ; SOURCE LINE # 961
01E2 900000      R     MOV     DPTR,#Bootloader_SizeBytesAccess
01E5 E0                MOVX    A,@DPTR
01E6 FE                MOV     R6,A
01E7 A3                INC     DPTR
01E8 E0                MOVX    A,@DPTR
01E9 FF                MOV     R7,A
01EA 8F82              MOV     DPL,R7
01EC 8E83              MOV     DPH,R6
01EE 120000      E     LCALL   ?C?LLDCODE
01F1 7B00              MOV     R3,#00H
01F3 7A01              MOV     R2,#01H
01F5 7900              MOV     R1,#00H
01F7 7800              MOV     R0,#00H
01F9 120000      E     LCALL   ?C?ULDIV
01FC 750000      R     MOV     startRow,#00H
01FF 8F00        R     MOV     startRow+01H,R7
                                           ; SOURCE LINE # 962
0201 8015              SJMP    ?C0079
0203         ?C0078:
                                           ; SOURCE LINE # 963
0203 E500        R     MOV     A,btldrData
0205 D3                SETB    C
0206 9500        R     SUBB    A,ArrayIdBtlderEnds
0208 4008              JC      ?C0080
                                           ; SOURCE LINE # 964
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 52  

                                           ; SOURCE LINE # 965
020A 750000      R     MOV     startRow,#00H
020D 750000      R     MOV     startRow+01H,#00H
                                           ; SOURCE LINE # 966
0210 8006              SJMP    ?C0079
0212         ?C0080:
                                           ; SOURCE LINE # 968
                                           ; SOURCE LINE # 969
0212 750001      R     MOV     startRow,#01H
0215 750000      R     MOV     startRow+01H,#00H
                                           ; SOURCE LINE # 970
0218         ?C0079:
                                           ; SOURCE LINE # 972
0218 AF00        R     MOV     R7,startRow+01H
021A EF                MOV     A,R7
021B 54FF              ANL     A,#0FFH
021D FF                MOV     R7,A
021E 900000      R     MOV     DPTR,#packetBuffer+04H
0221 EF                MOV     A,R7
0222 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 973
0223 E500        R     MOV     A,startRow
0225 FF                MOV     R7,A
0226 7E00              MOV     R6,#00H
0228 900000      R     MOV     DPTR,#packetBuffer+05H
022B EF                MOV     A,R7
022C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 976
022D 900000      R     MOV     DPTR,#packetBuffer+06H
0230 74FF              MOV     A,#0FFH
0232 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 979
0233 900000      R     MOV     DPTR,#packetBuffer+07H
0236 E4                CLR     A
0237 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 981
0238 750000      R     MOV     rspSize,#00H
023B 750004      R     MOV     rspSize+01H,#04H
                                           ; SOURCE LINE # 982
023E 750000      R     MOV     ackCode,#00H
                                           ; SOURCE LINE # 983
                                           ; SOURCE LINE # 985
                                           ; SOURCE LINE # 986
0241 020000      R     LJMP    ?C0069
                                           ; SOURCE LINE # 1022
                                           ; SOURCE LINE # 1028
0244         ?C0083:
                                           ; SOURCE LINE # 1029
0244 900000      R     MOV     DPTR,#packetBuffer+01H
0247 E0                MOVX    A,@DPTR
0248 FF                MOV     R7,A
0249 EF                MOV     A,R7
024A 6434              XRL     A,#034H
024C 703C              JNZ     ?C0084
                                           ; SOURCE LINE # 1030
                                           ; SOURCE LINE # 1031
024E 200003      R     JB      communicationState,$ + 6H
0251 020000      R     LJMP    ?C0069
0254 E500        R     MOV     A,pktSize+01H
0256 6403              XRL     A,#03H
0258 4500        R     ORL     A,pktSize
025A 6003              JZ      $ + 5H
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 53  

025C 020000      R     LJMP    ?C0069
                                           ; SOURCE LINE # 1032
                                           ; SOURCE LINE # 1034
025F E500        R     MOV     A,btldrData
0261 C3                CLR     C
0262 9440              SUBB    A,#040H
0264 400F              JC      ?C0086
0266 E500        R     MOV     A,btldrData
0268 D3                SETB    C
0269 947F              SUBB    A,#07FH
026B 5008              JNC     ?C0086
                                           ; SOURCE LINE # 1036
                                           ; SOURCE LINE # 1038
026D 750000      R     MOV     dataOffset,#00H
0270 750010      R     MOV     dataOffset+01H,#010H
                                           ; SOURCE LINE # 1039
0273 8006              SJMP    ?C0087
0275         ?C0086:
                                           ; SOURCE LINE # 1041
                                           ; SOURCE LINE # 1043
0275 750001      R     MOV     dataOffset,#01H
0278 750020      R     MOV     dataOffset+01H,#020H
                                           ; SOURCE LINE # 1044
027B         ?C0087:
                                           ; SOURCE LINE # 1051
027B AE00        R     MOV     R6,dataOffset
027D AF00        R     MOV     R7,dataOffset+01H
027F 7D00              MOV     R5,#00H
0281 7B01              MOV     R3,#01H
0283 7A00        R     MOV     R2,#HIGH dataBuffer
0285 7900        R     MOV     R1,#LOW dataBuffer
0287 120000      E     LCALL   ?C?MEMSET
                                           ; SOURCE LINE # 1055
                                           ; SOURCE LINE # 1057
                                           ; SOURCE LINE # 1058
                                           ; SOURCE LINE # 1059
                                           ; SOURCE LINE # 1060
028A         ?C0084:
                                           ; SOURCE LINE # 1065
028A 200003      R     JB      communicationState,$ + 6H
028D 020000      R     LJMP    ?C0069
0290 C3                CLR     C
0291 E500        R     MOV     A,pktSize+01H
0293 9403              SUBB    A,#03H
0295 E500        R     MOV     A,pktSize
0297 9400              SUBB    A,#00H
0299 5003              JNC     $ + 5H
029B 020000      R     LJMP    ?C0069
                                           ; SOURCE LINE # 1066
                                           ; SOURCE LINE # 1072
029E AE00        R     MOV     R6,pktSize
02A0 AF00        R     MOV     R7,pktSize+01H
02A2 EF                MOV     A,R7
02A3 24FD              ADD     A,#0FDH
02A5 FF                MOV     R7,A
02A6 EE                MOV     A,R6
02A7 34FF              ADDC    A,#0FFH
02A9 FE                MOV     R6,A
02AA 7B01              MOV     R3,#01H
02AC 7A00        R     MOV     R2,#HIGH packetBuffer+07H
02AE 7900        R     MOV     R1,#LOW packetBuffer+07H
02B0 C003              PUSH    AR3
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 54  

02B2 C002              PUSH    AR2
02B4 C001              PUSH    AR1
02B6 AC00        R     MOV     R4,dataOffset
02B8 AD00        R     MOV     R5,dataOffset+01H
02BA 7400        R     MOV     A,#LOW dataBuffer
02BC 2D                ADD     A,R5
02BD F9                MOV     R1,A
02BE 7400        R     MOV     A,#HIGH dataBuffer
02C0 3C                ADDC    A,R4
02C1 FA                MOV     R2,A
02C2 7B01              MOV     R3,#01H
02C4 A801              MOV     R0,AR1
02C6 AC02              MOV     R4,AR2
02C8 AD03              MOV     R5,AR3
02CA D001              POP     AR1
02CC D002              POP     AR2
02CE D003              POP     AR3
02D0 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 1079
02D3 E500        R     MOV     A,pktSize+01H
02D5 24FD              ADD     A,#0FDH
02D7 FF                MOV     R7,A
02D8 E500        R     MOV     A,pktSize
02DA 34FF              ADDC    A,#0FFH
02DC FE                MOV     R6,A
02DD EF                MOV     A,R7
02DE 2500        R     ADD     A,dataOffset+01H
02E0 F500        R     MOV     dataOffset+01H,A
02E2 EE                MOV     A,R6
02E3 3500        R     ADDC    A,dataOffset
02E5 F500        R     MOV     dataOffset,A
                                           ; SOURCE LINE # 1082
02E7 E500        R     MOV     A,btldrData
02E9 C3                CLR     C
02EA 9440              SUBB    A,#040H
02EC 4012              JC      ?C0090
02EE E500        R     MOV     A,btldrData
02F0 D3                SETB    C
02F1 947F              SUBB    A,#07FH
02F3 500B              JNC     ?C0090
                                           ; SOURCE LINE # 1084
                                           ; SOURCE LINE # 1086
02F5 120000      E     LCALL   CyEEPROM_Start
                                           ; SOURCE LINE # 1089
02F8 750000      R     MOV     pktSize,#00H
02FB 750010      R     MOV     pktSize+01H,#010H
                                           ; SOURCE LINE # 1090
02FE 8006              SJMP    ?C0091
0300         ?C0090:
                                           ; SOURCE LINE # 1092
                                           ; SOURCE LINE # 1094
0300 750001      R     MOV     pktSize,#01H
0303 750020      R     MOV     pktSize+01H,#020H
                                           ; SOURCE LINE # 1095
0306         ?C0091:
                                           ; SOURCE LINE # 1103
0306 E500        R     MOV     A,dataOffset+01H
0308 6500        R     XRL     A,pktSize+01H
030A 7004              JNZ     ?C0145
030C E500        R     MOV     A,dataOffset
030E 6500        R     XRL     A,pktSize
0310         ?C0145:
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 55  

0310 6003              JZ      $ + 5H
0312 020000      R     LJMP    ?C0092
                                           ; SOURCE LINE # 1104
                                           ; SOURCE LINE # 1109
0315 900000      R     MOV     DPTR,#packetBuffer+06H
0318 E0                MOVX    A,@DPTR
0319 FF                MOV     R7,A
031A 7E00              MOV     R6,#00H
031C EF                MOV     A,R7
031D 7F00              MOV     R7,#00H
031F FE                MOV     R6,A
0320 900000      R     MOV     DPTR,#packetBuffer+05H
0323 E0                MOVX    A,@DPTR
0324 FD                MOV     R5,A
0325 7C00              MOV     R4,#00H
0327 EE                MOV     A,R6
0328 4C                ORL     A,R4
0329 F500        R     MOV     dataOffset,A
032B EF                MOV     A,R7
032C 4D                ORL     A,R5
032D F500        R     MOV     dataOffset+01H,A
                                           ; SOURCE LINE # 1115
032F E500        R     MOV     A,btldrData
0331 D3                SETB    C
0332 943F              SUBB    A,#03FH
0334 4003              JC      $ + 5H
0336 020000      R     LJMP    ?C0093
                                           ; SOURCE LINE # 1116
                                           ; SOURCE LINE # 1122
0339 AF00        R     MOV     R7,btldrData
033B 7E00              MOV     R6,#00H
033D EF                MOV     A,R7
033E 7F00              MOV     R7,#00H
0340 FE                MOV     R6,A
0341 EF                MOV     A,R7
0342 2500        R     ADD     A,dataOffset+01H
0344 FF                MOV     R7,A
0345 EE                MOV     A,R6
0346 3500        R     ADDC    A,dataOffset
0348 FE                MOV     R6,A
0349 900000      R     MOV     DPTR,#row
034C EE                MOV     A,R6
034D F0                MOVX    @DPTR,A
034E A3                INC     DPTR
034F EF                MOV     A,R7
0350 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1130
0351 900000      R     MOV     DPTR,#Bootloader_SizeBytesAccess
0354 E0                MOVX    A,@DPTR
0355 FE                MOV     R6,A
0356 A3                INC     DPTR
0357 E0                MOVX    A,@DPTR
0358 FF                MOV     R7,A
0359 8F82              MOV     DPL,R7
035B 8E83              MOV     DPH,R6
035D 120000      E     LCALL   ?C?LLDCODE
0360 7B00              MOV     R3,#00H
0362 7A01              MOV     R2,#01H
0364 7900              MOV     R1,#00H
0366 7800              MOV     R0,#00H
0368 120000      E     LCALL   ?C?ULDIV
036B 900000      R     MOV     DPTR,#firstRow
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 56  

036E EE                MOV     A,R6
036F F0                MOVX    @DPTR,A
0370 A3                INC     DPTR
0371 EF                MOV     A,R7
0372 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1131
0373 900000      R     MOV     DPTR,#Bootloader_SizeBytesAccess
0376 E0                MOVX    A,@DPTR
0377 FE                MOV     R6,A
0378 A3                INC     DPTR
0379 E0                MOVX    A,@DPTR
037A FF                MOV     R7,A
037B 8F82              MOV     DPL,R7
037D 8E83              MOV     DPH,R6
037F 120000      E     LCALL   ?C?LLDCODE
0382 EF                MOV     A,R7
0383 54FF              ANL     A,#0FFH
0385 FF                MOV     R7,A
0386 EE                MOV     A,R6
0387 5400              ANL     A,#00H
0389 FE                MOV     R6,A
038A ED                MOV     A,R5
038B 5400              ANL     A,#00H
038D FD                MOV     R5,A
038E EC                MOV     A,R4
038F 5400              ANL     A,#00H
0391 FC                MOV     R4,A
0392 EF                MOV     A,R7
0393 4E                ORL     A,R6
0394 600A              JZ      ?C0094
                                           ; SOURCE LINE # 1132
                                           ; SOURCE LINE # 1133
0396 900000      R     MOV     DPTR,#firstRow
0399 E4                CLR     A
039A 75F001            MOV     B,#01H
039D 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1134
03A0         ?C0094:
                                           ; SOURCE LINE # 1137
03A0 900000      R     MOV     DPTR,#firstRow
03A3 E0                MOVX    A,@DPTR
03A4 FE                MOV     R6,A
03A5 A3                INC     DPTR
03A6 E0                MOVX    A,@DPTR
03A7 FF                MOV     R7,A
03A8 900000      R     MOV     DPTR,#row
03AB E0                MOVX    A,@DPTR
03AC FC                MOV     R4,A
03AD A3                INC     DPTR
03AE E0                MOVX    A,@DPTR
03AF FD                MOV     R5,A
03B0 C3                CLR     C
03B1 ED                MOV     A,R5
03B2 9F                SUBB    A,R7
03B3 EC                MOV     A,R4
03B4 9E                SUBB    A,R6
03B5 500C              JNC     ?C0093
                                           ; SOURCE LINE # 1138
                                           ; SOURCE LINE # 1139
03B7 75000A      R     MOV     ackCode,#0AH
                                           ; SOURCE LINE # 1140
03BA 750000      R     MOV     dataOffset,#00H
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 57  

03BD 750000      R     MOV     dataOffset+01H,#00H
                                           ; SOURCE LINE # 1141
03C0 020000      R     LJMP    ?C0069
                                           ; SOURCE LINE # 1142
                                           ; SOURCE LINE # 1333
03C3         ?C0093:
                                           ; SOURCE LINE # 1342
03C3 7B01              MOV     R3,#01H
03C5 7A00        R     MOV     R2,#HIGH dataBuffer
03C7 7900        R     MOV     R1,#LOW dataBuffer
03C9 900000      E     MOV     DPTR,#?_CyWriteRowFull?BYTE+06H
03CC E500        R     MOV     A,pktSize
03CE F0                MOVX    @DPTR,A
03CF A3                INC     DPTR
03D0 E500        R     MOV     A,pktSize+01H
03D2 F0                MOVX    @DPTR,A
03D3 AD00        R     MOV     R5,dataOffset+01H
03D5 AC00        R     MOV     R4,dataOffset
03D7 AF00        R     MOV     R7,btldrData
03D9 120000      E     LCALL   _CyWriteRowFull
03DC EF                MOV     A,R7
03DD 6004              JZ      ?C0096
03DF 7F0A              MOV     R7,#0AH
03E1 8002              SJMP    ?C0097
03E3         ?C0096:
03E3 7F00              MOV     R7,#00H
03E5         ?C0097:
03E5 8F00        R     MOV     ackCode,R7
                                           ; SOURCE LINE # 1358
03E7 8003              SJMP    ?C0098
03E9         ?C0092:
                                           ; SOURCE LINE # 1360
                                           ; SOURCE LINE # 1361
03E9 750003      R     MOV     ackCode,#03H
                                           ; SOURCE LINE # 1362
03EC         ?C0098:
                                           ; SOURCE LINE # 1364
03EC 750000      R     MOV     dataOffset,#00H
03EF 750000      R     MOV     dataOffset+01H,#00H
                                           ; SOURCE LINE # 1365
                                           ; SOURCE LINE # 1366
03F2 020000      R     LJMP    ?C0069
                                           ; SOURCE LINE # 1374
03F5         ?C0099:
                                           ; SOURCE LINE # 1376
03F5 200003      R     JB      communicationState,$ + 6H
03F8 020000      R     LJMP    ?C0069
                                           ; SOURCE LINE # 1377
                                           ; SOURCE LINE # 1379
03FB 750000      R     MOV     dataOffset,#00H
03FE 750000      R     MOV     dataOffset+01H,#00H
                                           ; SOURCE LINE # 1382
0401 020000      R     LJMP    ?C0049
                                           ; SOURCE LINE # 1383
                                           ; SOURCE LINE # 1384
                                           ; SOURCE LINE # 1425
0404         ?C0101:
                                           ; SOURCE LINE # 1427
0404 200003      R     JB      communicationState,$ + 6H
0407 020000      R     LJMP    ?C0069
                                           ; SOURCE LINE # 1428
                                           ; SOURCE LINE # 1430
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 58  

040A E500        R     MOV     A,dataOffset+01H
040C 2500        R     ADD     A,pktSize+01H
040E FF                MOV     R7,A
040F E500        R     MOV     A,dataOffset
0411 3500        R     ADDC    A,pktSize
0413 FE                MOV     R6,A
0414 D3                SETB    C
0415 EF                MOV     A,R7
0416 942C              SUBB    A,#02CH
0418 EE                MOV     A,R6
0419 9401              SUBB    A,#01H
041B 503F              JNC     ?C0103
                                           ; SOURCE LINE # 1431
                                           ; SOURCE LINE # 1432
041D 750000      R     MOV     ackCode,#00H
                                           ; SOURCE LINE # 1437
0420 AE00        R     MOV     R6,pktSize
0422 AF00        R     MOV     R7,pktSize+01H
0424 7B01              MOV     R3,#01H
0426 7A00        R     MOV     R2,#HIGH packetBuffer+04H
0428 7900        R     MOV     R1,#LOW packetBuffer+04H
042A C003              PUSH    AR3
042C C002              PUSH    AR2
042E C001              PUSH    AR1
0430 AC00        R     MOV     R4,dataOffset
0432 AD00        R     MOV     R5,dataOffset+01H
0434 7400        R     MOV     A,#LOW dataBuffer
0436 2D                ADD     A,R5
0437 F9                MOV     R1,A
0438 7400        R     MOV     A,#HIGH dataBuffer
043A 3C                ADDC    A,R4
043B FA                MOV     R2,A
043C 7B01              MOV     R3,#01H
043E A801              MOV     R0,AR1
0440 AC02              MOV     R4,AR2
0442 AD03              MOV     R5,AR3
0444 D001              POP     AR1
0446 D002              POP     AR2
0448 D003              POP     AR3
044A 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 1444
044D E500        R     MOV     A,pktSize+01H
044F 2500        R     ADD     A,dataOffset+01H
0451 F500        R     MOV     dataOffset+01H,A
0453 E500        R     MOV     A,pktSize
0455 3500        R     ADDC    A,dataOffset
0457 F500        R     MOV     dataOffset,A
                                           ; SOURCE LINE # 1445
0459 020000      R     LJMP    ?C0069
045C         ?C0103:
                                           ; SOURCE LINE # 1447
                                           ; SOURCE LINE # 1448
045C 750003      R     MOV     ackCode,#03H
                                           ; SOURCE LINE # 1449
                                           ; SOURCE LINE # 1450
                                           ; SOURCE LINE # 1452
045F 020000      R     LJMP    ?C0069
                                           ; SOURCE LINE # 1460
0462         ?C0105:
                                           ; SOURCE LINE # 1462
0462 E500        R     MOV     A,pktSize+01H
0464 4500        R     ORL     A,pktSize
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 59  

0466 6003              JZ      $ + 5H
0468 020000      R     LJMP    ?C0069
                                           ; SOURCE LINE # 1463
                                           ; SOURCE LINE # 1466
046B 7BFF              MOV     R3,#0FFH
046D 7A00        R     MOV     R2,#HIGH _?ix1000
046F 7900        R     MOV     R1,#LOW _?ix1000
0471 C003              PUSH    AR3
0473 C002              PUSH    AR2
0475 C001              PUSH    AR1
0477 7B00              MOV     R3,#00H
0479 7A00        R     MOV     R2,#HIGH BtldrVersion
047B 7900        R     MOV     R1,#LOW BtldrVersion
047D A801              MOV     R0,AR1
047F AC02              MOV     R4,AR2
0481 AD03              MOV     R5,AR3
0483 D001              POP     AR1
0485 D002              POP     AR2
0487 D003              POP     AR3
0489 7E00              MOV     R6,#00H
048B 7F08              MOV     R7,#08H
048D 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 1476
0490 D200        R     SETB    communicationState
                                           ; SOURCE LINE # 1478
0492 750000      R     MOV     rspSize,#00H
0495 750008      R     MOV     rspSize+01H,#08H
                                           ; SOURCE LINE # 1483
0498 AE00        R     MOV     R6,rspSize
049A AF00        R     MOV     R7,rspSize+01H
049C 7B00              MOV     R3,#00H
049E 7A00        R     MOV     R2,#HIGH BtldrVersion
04A0 7900        R     MOV     R1,#LOW BtldrVersion
04A2 C003              PUSH    AR3
04A4 C002              PUSH    AR2
04A6 C001              PUSH    AR1
04A8 7B01              MOV     R3,#01H
04AA 7A00        R     MOV     R2,#HIGH packetBuffer+04H
04AC 7900        R     MOV     R1,#LOW packetBuffer+04H
04AE A801              MOV     R0,AR1
04B0 AC02              MOV     R4,AR2
04B2 AD03              MOV     R5,AR3
04B4 D001              POP     AR1
04B6 D002              POP     AR2
04B8 D003              POP     AR3
04BA 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 1490
04BD 750000      R     MOV     ackCode,#00H
                                           ; SOURCE LINE # 1491
                                           ; SOURCE LINE # 1492
04C0 020000      R     LJMP    ?C0069
                                           ; SOURCE LINE # 1500
04C3         ?C0107:
                                           ; SOURCE LINE # 1502
04C3 200003      R     JB      communicationState,$ + 6H
04C6 020000      R     LJMP    ?C0069
04C9 E500        R     MOV     A,pktSize+01H
04CB 6403              XRL     A,#03H
04CD 4500        R     ORL     A,pktSize
04CF 6003              JZ      $ + 5H
04D1 020000      R     LJMP    ?C0069
                                           ; SOURCE LINE # 1503
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 60  

                                           ; SOURCE LINE # 1505
04D4 900000      R     MOV     DPTR,#packetBuffer+06H
04D7 E0                MOVX    A,@DPTR
04D8 FF                MOV     R7,A
04D9 7E00              MOV     R6,#00H
04DB EF                MOV     A,R7
04DC 7F00              MOV     R7,#00H
04DE FE                MOV     R6,A
04DF 900000      R     MOV     DPTR,#packetBuffer+05H
04E2 E0                MOVX    A,@DPTR
04E3 FD                MOV     R5,A
04E4 7C00              MOV     R4,#00H
04E6 EE                MOV     A,R6
04E7 4C                ORL     A,R4
04E8 F500        R     MOV     rowNum,A
04EA EF                MOV     A,R7
04EB 4D                ORL     A,R5
04EC F500        R     MOV     rowNum+01H,A
                                           ; SOURCE LINE # 1513
04EE E500        R     MOV     A,btldrData
04F0 C3                CLR     C
04F1 9440              SUBB    A,#040H
04F3 4059              JC      ?C0109
04F5 E500        R     MOV     A,btldrData
04F7 D3                SETB    C
04F8 947F              SUBB    A,#07FH
04FA 5052              JNC     ?C0109
                                           ; SOURCE LINE # 1515
                                           ; SOURCE LINE # 1518
04FC AE00        R     MOV     R6,rowNum
04FE AF00        R     MOV     R7,rowNum+01H
0500 7C00              MOV     R4,#00H
0502 7D10              MOV     R5,#010H
0504 120000      E     LCALL   ?C?LIMUL
0507 8F00        R     MOV     rowAddr+03H,R7
0509 8E00        R     MOV     rowAddr+02H,R6
050B 8D00        R     MOV     rowAddr+01H,R5
050D 8C00        R     MOV     rowAddr,R4
                                           ; SOURCE LINE # 1520
050F 7F00              MOV     R7,#00H
0511 7E80              MOV     R6,#080H
0513 7D00              MOV     R5,#00H
0515 7C00              MOV     R4,#00H
0517 C004              PUSH    AR4
0519 C005              PUSH    AR5
051B C006              PUSH    AR6
051D C007              PUSH    AR7
051F AF00        R     MOV     R7,rowAddr+03H
0521 AE00        R     MOV     R6,rowAddr+02H
0523 AD00        R     MOV     R5,rowAddr+01H
0525 AC00        R     MOV     R4,rowAddr
0527 8F00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+07H,R7
0529 8E00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+06H,R6
052B 8D00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+05H,R5
052D 8C00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+04H,R4
052F 7F10              MOV     R7,#010H
0531 7E00              MOV     R6,#00H
0533 7D00              MOV     R5,#00H
0535 7C00              MOV     R4,#00H
0537 8F00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+0BH,R7
0539 8E00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+0AH,R6
053B 8D00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+09H,R5
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 61  

053D 8C00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+08H,R4
053F D007              POP     AR7
0541 D006              POP     AR6
0543 D005              POP     AR5
0545 D004              POP     AR4
0547 120000      R     LCALL   _Bootloader_Calc8BitSum
054A 8F00        R     MOV     checksum,R7
                                           ; SOURCE LINE # 1521
054C 807C              SJMP    ?C0110
054E         ?C0109:
                                           ; SOURCE LINE # 1523
                                           ; SOURCE LINE # 1526
054E AE00        R     MOV     R6,rowNum
0550 AF00        R     MOV     R7,rowNum+01H
0552 7C01              MOV     R4,#01H
0554 7D00              MOV     R5,#00H
0556 120000      E     LCALL   ?C?LIMUL
0559 C004              PUSH    AR4
055B C005              PUSH    AR5
055D C006              PUSH    AR6
055F C007              PUSH    AR7
0561 AF00        R     MOV     R7,btldrData
0563 E4                CLR     A
0564 FC                MOV     R4,A
0565 FD                MOV     R5,A
0566 FE                MOV     R6,A
0567 7B00              MOV     R3,#00H
0569 7A00              MOV     R2,#00H
056B 7901              MOV     R1,#01H
056D 7800              MOV     R0,#00H
056F 120000      E     LCALL   ?C?LMUL
0572 A804              MOV     R0,AR4
0574 A905              MOV     R1,AR5
0576 AA06              MOV     R2,AR6
0578 AB07              MOV     R3,AR7
057A D007              POP     AR7
057C D006              POP     AR6
057E D005              POP     AR5
0580 D004              POP     AR4
0582 120000      E     LCALL   ?C?LADD
0585 8F00        R     MOV     rowAddr+03H,R7
0587 8E00        R     MOV     rowAddr+02H,R6
0589 8D00        R     MOV     rowAddr+01H,R5
058B 8C00        R     MOV     rowAddr,R4
                                           ; SOURCE LINE # 1528
058D 7F00              MOV     R7,#00H
058F 7E00              MOV     R6,#00H
0591 7D10              MOV     R5,#010H
0593 7C00              MOV     R4,#00H
0595 C004              PUSH    AR4
0597 C005              PUSH    AR5
0599 C006              PUSH    AR6
059B C007              PUSH    AR7
059D AF00        R     MOV     R7,rowAddr+03H
059F AE00        R     MOV     R6,rowAddr+02H
05A1 AD00        R     MOV     R5,rowAddr+01H
05A3 AC00        R     MOV     R4,rowAddr
05A5 8F00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+07H,R7
05A7 8E00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+06H,R6
05A9 8D00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+05H,R5
05AB 8C00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+04H,R4
05AD 7F00              MOV     R7,#00H
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 62  

05AF 7E01              MOV     R6,#01H
05B1 7D00              MOV     R5,#00H
05B3 7C00              MOV     R4,#00H
05B5 8F00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+0BH,R7
05B7 8E00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+0AH,R6
05B9 8D00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+09H,R5
05BB 8C00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+08H,R4
05BD D007              POP     AR7
05BF D006              POP     AR6
05C1 D005              POP     AR5
05C3 D004              POP     AR4
05C5 120000      R     LCALL   _Bootloader_Calc8BitSum
05C8 8F00        R     MOV     checksum,R7
                                           ; SOURCE LINE # 1529
05CA         ?C0110:
                                           ; SOURCE LINE # 1546
05CA E500        R     MOV     A,btldrData
05CC D3                SETB    C
05CD 943F              SUBB    A,#03FH
05CF 4003              JC      $ + 5H
05D1 020000      R     LJMP    ?C0111
                                           ; SOURCE LINE # 1547
                                           ; SOURCE LINE # 1551
05D4 AF00        R     MOV     R7,btldrData
05D6 7E00              MOV     R6,#00H
05D8 7C20              MOV     R4,#020H
05DA 7D00              MOV     R5,#00H
05DC 120000      E     LCALL   ?C?LIMUL
05DF EF                MOV     A,R7
05E0 2400              ADD     A,#00H
05E2 FF                MOV     R7,A
05E3 EE                MOV     A,R6
05E4 3400              ADDC    A,#00H
05E6 FE                MOV     R6,A
05E7 ED                MOV     A,R5
05E8 3408              ADDC    A,#08H
05EA FD                MOV     R5,A
05EB EC                MOV     A,R4
05EC 3400              ADDC    A,#00H
05EE FC                MOV     R4,A
05EF C004              PUSH    AR4
05F1 C005              PUSH    AR5
05F3 C006              PUSH    AR6
05F5 C007              PUSH    AR7
05F7 AE00        R     MOV     R6,rowNum
05F9 AF00        R     MOV     R7,rowNum+01H
05FB 7C00              MOV     R4,#00H
05FD 7D20              MOV     R5,#020H
05FF 120000      E     LCALL   ?C?LIMUL
0602 A804              MOV     R0,AR4
0604 A905              MOV     R1,AR5
0606 AA06              MOV     R2,AR6
0608 AB07              MOV     R3,AR7
060A D007              POP     AR7
060C D006              POP     AR6
060E D005              POP     AR5
0610 D004              POP     AR4
0612 120000      E     LCALL   ?C?LADD
0615 8F00        R     MOV     rowAddr+03H,R7
0617 8E00        R     MOV     rowAddr+02H,R6
0619 8D00        R     MOV     rowAddr+01H,R5
061B 8C00        R     MOV     rowAddr,R4
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 63  

                                           ; SOURCE LINE # 1553
061D 750000      R     MOV     tmpIndex,#00H
0620 750000      R     MOV     tmpIndex+01H,#00H
0623         ?C0112:
0623 C3                CLR     C
0624 E500        R     MOV     A,tmpIndex+01H
0626 9420              SUBB    A,#020H
0628 E500        R     MOV     A,tmpIndex
062A 9400              SUBB    A,#00H
062C 502F              JNC     ?C0111
                                           ; SOURCE LINE # 1554
                                           ; SOURCE LINE # 1555
062E AE00        R     MOV     R6,tmpIndex
0630 AF00        R     MOV     R7,tmpIndex+01H
0632 E4                CLR     A
0633 FC                MOV     R4,A
0634 FD                MOV     R5,A
0635 EF                MOV     A,R7
0636 2500        R     ADD     A,rowAddr+03H
0638 FF                MOV     R7,A
0639 EE                MOV     A,R6
063A 3500        R     ADDC    A,rowAddr+02H
063C FE                MOV     R6,A
063D ED                MOV     A,R5
063E 3500        R     ADDC    A,rowAddr+01H
0640 FD                MOV     R5,A
0641 EC                MOV     A,R4
0642 3500        R     ADDC    A,rowAddr
0644 FC                MOV     R4,A
0645 A907              MOV     R1,AR7
0647 AA06              MOV     R2,AR6
0649 AB05              MOV     R3,AR5
064B 120000      E     LCALL   _cyread8
064E EF                MOV     A,R7
064F 2500        R     ADD     A,checksum
0651 F500        R     MOV     checksum,A
                                           ; SOURCE LINE # 1556
0653 0500        R     INC     tmpIndex+01H
0655 E500        R     MOV     A,tmpIndex+01H
0657 7002              JNZ     ?C0146
0659 0500        R     INC     tmpIndex
065B         ?C0146:
065B 80C6              SJMP    ?C0112
                                           ; SOURCE LINE # 1557
065D         ?C0111:
                                           ; SOURCE LINE # 1568
065D E500        R     MOV     A,btldrData
065F 702F              JNZ     ?C0115
0661 AE00        R     MOV     R6,rowNum
0663 AF00        R     MOV     R7,rowNum+01H
0665 E4                CLR     A
0666 FC                MOV     R4,A
0667 FD                MOV     R5,A
0668 7BFF              MOV     R3,#0FFH
066A 7A00              MOV     R2,#00H
066C 7900              MOV     R1,#00H
066E 7800              MOV     R0,#00H
0670 C3                CLR     C
0671 120000      E     LCALL   ?C?ULCMP
0674 701A              JNZ     ?C0115
                                           ; SOURCE LINE # 1569
                                           ; SOURCE LINE # 1571
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 64  

0676 7D00              MOV     R5,#00H
0678 7F05              MOV     R7,#05H
067A 120000      R     LCALL   _Bootloader_GetMetadata
067D C3                CLR     C
067E E500        R     MOV     A,checksum
0680 9F                SUBB    A,R7
0681 F500        R     MOV     checksum,A
                                           ; SOURCE LINE # 1574
0683 7D00              MOV     R5,#00H
0685 7F06              MOV     R7,#06H
0687 120000      R     LCALL   _Bootloader_GetMetadata
068A C3                CLR     C
068B E500        R     MOV     A,checksum
068D 9F                SUBB    A,R7
068E F500        R     MOV     checksum,A
                                           ; SOURCE LINE # 1576
0690         ?C0115:
                                           ; SOURCE LINE # 1578
0690 E500        R     MOV     A,checksum
0692 F4                CPL     A
0693 FF                MOV     R7,A
0694 EF                MOV     A,R7
0695 04                INC     A
0696 FF                MOV     R7,A
0697 900000      R     MOV     DPTR,#packetBuffer+04H
069A EF                MOV     A,R7
069B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1579
069C 750000      R     MOV     ackCode,#00H
                                           ; SOURCE LINE # 1580
069F 750000      R     MOV     rspSize,#00H
06A2 750001      R     MOV     rspSize+01H,#01H
                                           ; SOURCE LINE # 1581
                                           ; SOURCE LINE # 1582
06A5 8016              SJMP    ?C0069
                                           ; SOURCE LINE # 1590
06A7         ?C0116:
                                           ; SOURCE LINE # 1592
06A7 7F00              MOV     R7,#00H
06A9 120000      R     LCALL   _Bootloader_ValidateBootloadable
06AC EF                MOV     A,R7
06AD 7006              JNZ     ?C0117
                                           ; SOURCE LINE # 1593
                                           ; SOURCE LINE # 1594
06AF 9046FA            MOV     DPTR,#046FAH
06B2 7480              MOV     A,#080H
06B4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1595
06B5         ?C0117:
                                           ; SOURCE LINE # 1597
06B5 120000      E     LCALL   CySoftwareReset
                                           ; SOURCE LINE # 1600
06B8 8003              SJMP    ?C0069
                                           ; SOURCE LINE # 1606
06BA         ?C0118:
                                           ; SOURCE LINE # 1607
06BA 750005      R     MOV     ackCode,#05H
                                           ; SOURCE LINE # 1608
                                           ; SOURCE LINE # 1609
                                           ; SOURCE LINE # 1610
06BD         ?C0069:
                                           ; SOURCE LINE # 1613
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 65  

06BD 7B01              MOV     R3,#01H
06BF 7A00        R     MOV     R2,#HIGH packetBuffer
06C1 7900        R     MOV     R1,#LOW packetBuffer
06C3 850000      R     MOV     ?_Bootloader_WritePacket?BYTE+04H,rspSize
06C6 850000      R     MOV     ?_Bootloader_WritePacket?BYTE+05H,rspSize+01H
06C9 AF00        R     MOV     R7,ackCode
06CB 120000      R     LCALL   _Bootloader_WritePacket
                                           ; SOURCE LINE # 1615
06CE         ?C0049:
06CE 900000      R     MOV     DPTR,#timeOut
06D1 E0                MOVX    A,@DPTR
06D2 FF                MOV     R7,A
06D3 EF                MOV     A,R7
06D4 7003              JNZ     $ + 5H
06D6 020000      R     LJMP    ?C0051
06D9 300003      R     JNB     communicationState,$ + 6H
06DC 020000      R     LJMP    ?C0051
                                           ; SOURCE LINE # 1616
06DF 22                RET     
             ; FUNCTION _Bootloader_HostLink (END)

             ; FUNCTION _Bootloader_WritePacket (BEGIN)
                                           ; SOURCE LINE # 1639
0000 8F00        R     MOV     status,R7
0002 8B00        R     MOV     buffer,R3
0004 8A00        R     MOV     buffer+01H,R2
0006 8900        R     MOV     buffer+02H,R1
                                           ; SOURCE LINE # 1645
0008 AB00        R     MOV     R3,buffer
000A AA00        R     MOV     R2,buffer+01H
000C A900        R     MOV     R1,buffer+02H
000E 7401              MOV     A,#01H
0010 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 1646
0013 AB00        R     MOV     R3,buffer
0015 AA00        R     MOV     R2,buffer+01H
0017 A900        R     MOV     R1,buffer+02H
0019 E9                MOV     A,R1
001A 2401              ADD     A,#01H
001C F9                MOV     R1,A
001D EA                MOV     A,R2
001E 3400              ADDC    A,#00H
0020 FA                MOV     R2,A
0021 E500        R     MOV     A,status
0023 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 1647
0026 AF00        R     MOV     R7,size+01H
0028 EF                MOV     A,R7
0029 54FF              ANL     A,#0FFH
002B FF                MOV     R7,A
002C AB00        R     MOV     R3,buffer
002E AA00        R     MOV     R2,buffer+01H
0030 A900        R     MOV     R1,buffer+02H
0032 E9                MOV     A,R1
0033 2402              ADD     A,#02H
0035 F9                MOV     R1,A
0036 EA                MOV     A,R2
0037 3400              ADDC    A,#00H
0039 FA                MOV     R2,A
003A EF                MOV     A,R7
003B 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 1648
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 66  

003E E500        R     MOV     A,size
0040 FF                MOV     R7,A
0041 7E00              MOV     R6,#00H
0043 AB00        R     MOV     R3,buffer
0045 AA00        R     MOV     R2,buffer+01H
0047 A900        R     MOV     R1,buffer+02H
0049 E9                MOV     A,R1
004A 2403              ADD     A,#03H
004C F9                MOV     R1,A
004D EA                MOV     A,R2
004E 3400              ADDC    A,#00H
0050 FA                MOV     R2,A
0051 EF                MOV     A,R7
0052 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 1651
0055 AB00        R     MOV     R3,buffer
0057 AA00        R     MOV     R2,buffer+01H
0059 A900        R     MOV     R1,buffer+02H
005B E500        R     MOV     A,size+01H
005D 2404              ADD     A,#04H
005F FD                MOV     R5,A
0060 E500        R     MOV     A,size
0062 3400              ADDC    A,#00H
0064 FC                MOV     R4,A
0065 120000      R     LCALL   _Bootloader_CalcPacketChecksum
0068 8E00        R     MOV     checksum,R6
006A 8F00        R     MOV     checksum+01H,R7
                                           ; SOURCE LINE # 1653
006C AF00        R     MOV     R7,checksum+01H
006E EF                MOV     A,R7
006F 54FF              ANL     A,#0FFH
0071 FF                MOV     R7,A
0072 AB00        R     MOV     R3,buffer
0074 AA00        R     MOV     R2,buffer+01H
0076 A900        R     MOV     R1,buffer+02H
0078 E500        R     MOV     A,size+01H
007A 2404              ADD     A,#04H
007C FD                MOV     R5,A
007D E500        R     MOV     A,size
007F 3400              ADDC    A,#00H
0081 FC                MOV     R4,A
0082 E9                MOV     A,R1
0083 2D                ADD     A,R5
0084 F9                MOV     R1,A
0085 EA                MOV     A,R2
0086 3C                ADDC    A,R4
0087 FA                MOV     R2,A
0088 EF                MOV     A,R7
0089 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 1654
008C E500        R     MOV     A,checksum
008E FF                MOV     R7,A
008F 7E00              MOV     R6,#00H
0091 AB00        R     MOV     R3,buffer
0093 AA00        R     MOV     R2,buffer+01H
0095 A900        R     MOV     R1,buffer+02H
0097 E500        R     MOV     A,size+01H
0099 2405              ADD     A,#05H
009B FD                MOV     R5,A
009C E500        R     MOV     A,size
009E 3400              ADDC    A,#00H
00A0 FC                MOV     R4,A
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 67  

00A1 E9                MOV     A,R1
00A2 2D                ADD     A,R5
00A3 F9                MOV     R1,A
00A4 EA                MOV     A,R2
00A5 3C                ADDC    A,R4
00A6 FA                MOV     R2,A
00A7 EF                MOV     A,R7
00A8 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 1655
00AB AB00        R     MOV     R3,buffer
00AD AA00        R     MOV     R2,buffer+01H
00AF A900        R     MOV     R1,buffer+02H
00B1 E500        R     MOV     A,size+01H
00B3 2406              ADD     A,#06H
00B5 FF                MOV     R7,A
00B6 E500        R     MOV     A,size
00B8 3400              ADDC    A,#00H
00BA FE                MOV     R6,A
00BB E9                MOV     A,R1
00BC 2F                ADD     A,R7
00BD F9                MOV     R1,A
00BE EA                MOV     A,R2
00BF 3E                ADDC    A,R6
00C0 FA                MOV     R2,A
00C1 7417              MOV     A,#017H
00C3 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 1658
00C6 AB00        R     MOV     R3,buffer
00C8 AA00        R     MOV     R2,buffer+01H
00CA A900        R     MOV     R1,buffer+02H
00CC C003              PUSH    AR3
00CE C002              PUSH    AR2
00D0 C001              PUSH    AR1
00D2 E500        R     MOV     A,size+01H
00D4 2407              ADD     A,#07H
00D6 FD                MOV     R5,A
00D7 E500        R     MOV     A,size
00D9 3400              ADDC    A,#00H
00DB FC                MOV     R4,A
00DC 7B00              MOV     R3,#00H
00DE 7A00        R     MOV     R2,#HIGH size
00E0 7900        R     MOV     R1,#LOW size
00E2 8B00        E     MOV     ?_USBFS_CyBtldrCommWrite?BYTE+05H,R3
00E4 8A00        E     MOV     ?_USBFS_CyBtldrCommWrite?BYTE+06H,R2
00E6 8900        E     MOV     ?_USBFS_CyBtldrCommWrite?BYTE+07H,R1
00E8 750096      E     MOV     ?_USBFS_CyBtldrCommWrite?BYTE+08H,#096H
00EB D001              POP     AR1
00ED D002              POP     AR2
00EF D003              POP     AR3
00F1 120000      E     LCALL   _USBFS_CyBtldrCommWrite
                                           ; SOURCE LINE # 1659
00F4         ?C0120:
00F4 22                RET     
             ; FUNCTION _Bootloader_WritePacket (END)

             ; FUNCTION _Bootloader_SetFlashByte (BEGIN)
                                           ; SOURCE LINE # 1680
0000 900000      R     MOV     DPTR,#address
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1681
                                           ; SOURCE LINE # 1682
0006 900000      R     MOV     DPTR,#address
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 68  

0009 120000      E     LCALL   ?C?LLDXDATA
000C EF                MOV     A,R7
000D 2400              ADD     A,#00H
000F FF                MOV     R7,A
0010 EE                MOV     A,R6
0011 3400              ADDC    A,#00H
0013 FE                MOV     R6,A
0014 ED                MOV     A,R5
0015 34F0              ADDC    A,#0F0H
0017 FD                MOV     R5,A
0018 EC                MOV     A,R4
0019 34FF              ADDC    A,#0FFH
001B FC                MOV     R4,A
001C 900000      R     MOV     DPTR,#flsAddr
001F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1686
0022 7B00              MOV     R3,#00H
0024 7A00              MOV     R2,#00H
0026 7901              MOV     R1,#01H
0028 7800              MOV     R0,#00H
002A 900000      R     MOV     DPTR,#flsAddr
002D 120000      E     LCALL   ?C?LLDXDATA
0030 120000      E     LCALL   ?C?ULDIV
0033 900000      R     MOV     DPTR,#arrayId
0036 EF                MOV     A,R7
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1692
0038 900000      R     MOV     DPTR,#flsAddr
003B 120000      E     LCALL   ?C?LLDXDATA
003E EF                MOV     A,R7
003F 54FF              ANL     A,#0FFH
0041 FF                MOV     R7,A
0042 EE                MOV     A,R6
0043 54FF              ANL     A,#0FFH
0045 FE                MOV     R6,A
0046 ED                MOV     A,R5
0047 5400              ANL     A,#00H
0049 FD                MOV     R5,A
004A EC                MOV     A,R4
004B 5400              ANL     A,#00H
004D FC                MOV     R4,A
004E 7B00              MOV     R3,#00H
0050 7A01              MOV     R2,#01H
0052 7900              MOV     R1,#00H
0054 7800              MOV     R0,#00H
0056 120000      E     LCALL   ?C?ULDIV
0059 900000      R     MOV     DPTR,#rowNum
005C EE                MOV     A,R6
005D F0                MOVX    @DPTR,A
005E A3                INC     DPTR
005F EF                MOV     A,R7
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1695
0061 900000      R     MOV     DPTR,#address
0064 120000      E     LCALL   ?C?LLDXDATA
0067 EF                MOV     A,R7
0068 54FF              ANL     A,#0FFH
006A FB                MOV     R3,A
006B EE                MOV     A,R6
006C 5400              ANL     A,#00H
006E FA                MOV     R2,A
006F ED                MOV     A,R5
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 69  

0070 5400              ANL     A,#00H
0072 F9                MOV     R1,A
0073 EC                MOV     A,R4
0074 5400              ANL     A,#00H
0076 F8                MOV     R0,A
0077 900000      R     MOV     DPTR,#address
007A 120000      E     LCALL   ?C?LLDXDATA
007D 120000      E     LCALL   ?C?LSUB
0080 900000      R     MOV     DPTR,#baseAddr
0083 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1698
0086 900000      R     MOV     DPTR,#idx
0089 E4                CLR     A
008A F0                MOVX    @DPTR,A
008B A3                INC     DPTR
008C E4                CLR     A
008D F0                MOVX    @DPTR,A
008E         ?C0121:
008E 900000      R     MOV     DPTR,#idx
0091 E0                MOVX    A,@DPTR
0092 FE                MOV     R6,A
0093 A3                INC     DPTR
0094 E0                MOVX    A,@DPTR
0095 FF                MOV     R7,A
0096 C3                CLR     C
0097 EE                MOV     A,R6
0098 9401              SUBB    A,#01H
009A 503B              JNC     ?C0122
                                           ; SOURCE LINE # 1699
                                           ; SOURCE LINE # 1700
009C 900000      R     MOV     DPTR,#baseAddr
009F 120000      E     LCALL   ?C?LLDXDATA
00A2 900000      R     MOV     DPTR,#idx
00A5 E0                MOVX    A,@DPTR
00A6 FC                MOV     R4,A
00A7 A3                INC     DPTR
00A8 E0                MOVX    A,@DPTR
00A9 FD                MOV     R5,A
00AA EF                MOV     A,R7
00AB 2D                ADD     A,R5
00AC FF                MOV     R7,A
00AD EE                MOV     A,R6
00AE 3C                ADDC    A,R4
00AF FE                MOV     R6,A
00B0 8F82              MOV     DPL,R7
00B2 8E83              MOV     DPH,R6
00B4 E4                CLR     A
00B5 93                MOVC    A,@A+DPTR
00B6 FF                MOV     R7,A
00B7 900000      R     MOV     DPTR,#idx
00BA E0                MOVX    A,@DPTR
00BB FC                MOV     R4,A
00BC A3                INC     DPTR
00BD E0                MOVX    A,@DPTR
00BE FD                MOV     R5,A
00BF 7400        R     MOV     A,#LOW rowData
00C1 2D                ADD     A,R5
00C2 F582              MOV     DPL,A
00C4 7400        R     MOV     A,#HIGH rowData
00C6 3C                ADDC    A,R4
00C7 F583              MOV     DPH,A
00C9 EF                MOV     A,R7
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 70  

00CA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1701
00CB 900000      R     MOV     DPTR,#idx
00CE E4                CLR     A
00CF 75F001            MOV     B,#01H
00D2 120000      E     LCALL   ?C?IILDX
00D5 80B7              SJMP    ?C0121
00D7         ?C0122:
                                           ; SOURCE LINE # 1703
00D7 900000      R     MOV     DPTR,#runType
00DA E0                MOVX    A,@DPTR
00DB FB                MOV     R3,A
00DC 900000      R     MOV     DPTR,#address
00DF 120000      E     LCALL   ?C?LLDXDATA
00E2 EF                MOV     A,R7
00E3 54FF              ANL     A,#0FFH
00E5 FF                MOV     R7,A
00E6 EE                MOV     A,R6
00E7 5400              ANL     A,#00H
00E9 FE                MOV     R6,A
00EA ED                MOV     A,R5
00EB 5400              ANL     A,#00H
00ED FD                MOV     R5,A
00EE EC                MOV     A,R4
00EF 5400              ANL     A,#00H
00F1 FC                MOV     R4,A
00F2 7400        R     MOV     A,#LOW rowData
00F4 2F                ADD     A,R7
00F5 F582              MOV     DPL,A
00F7 7400        R     MOV     A,#HIGH rowData
00F9 3E                ADDC    A,R6
00FA F583              MOV     DPH,A
00FC EB                MOV     A,R3
00FD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1708
00FE 900000      R     MOV     DPTR,#arrayId
0101 E0                MOVX    A,@DPTR
0102 FF                MOV     R7,A
0103 900000      R     MOV     DPTR,#rowNum
0106 E0                MOVX    A,@DPTR
0107 FC                MOV     R4,A
0108 A3                INC     DPTR
0109 E0                MOVX    A,@DPTR
010A FD                MOV     R5,A
010B 7B01              MOV     R3,#01H
010D 7A00        R     MOV     R2,#HIGH rowData
010F 7900        R     MOV     R1,#LOW rowData
0111 120000      E     LCALL   _CyWriteRowData
                                           ; SOURCE LINE # 1720
0114 22                RET     
             ; FUNCTION _Bootloader_SetFlashByte (END)

             ; FUNCTION _Bootloader_GetMetadata (BEGIN)
                                           ; SOURCE LINE # 1754
0000 900000      R     MOV     DPTR,#field
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#appId
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1755
                                           ; SOURCE LINE # 1757
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 71  

000A 900000      R     MOV     DPTR,#fieldSize
000D 7402              MOV     A,#02H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1758
0010 7F00              MOV     R7,#00H
0012 7E00              MOV     R6,#00H
0014 7D00              MOV     R5,#00H
0016 7C00              MOV     R4,#00H
0018 900000      R     MOV     DPTR,#result
001B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1760
001E 900000      R     MOV     DPTR,#field
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 EF                MOV     A,R7
0024 120000      E     LCALL   ?C?CCASE
0027 0000        R     DW      ?C0126
0029 01                DB      01H
002A 0000        R     DW      ?C0127
002C 02                DB      02H
002D 0000        R     DW      ?C0128
002F 03                DB      03H
0030 0000        R     DW      ?C0129
0032 04                DB      04H
0033 0000        R     DW      ?C0130
0035 05                DB      05H
0036 0000        R     DW      ?C0131
0038 06                DB      06H
0039 0000        R     DW      ?C0133
003B 07                DB      07H
003C 0000        R     DW      ?C0132
003E 08                DB      08H
003F 0000        R     DW      ?C0134
0041 09                DB      09H
0042 0000        R     DW      ?C0135
0044 0A                DB      0AH
0045 0000              DW      00H
0047 0000        R     DW      ?C0136
                                           ; SOURCE LINE # 1761
                                           ; SOURCE LINE # 1762
0049         ?C0126:
                                           ; SOURCE LINE # 1763
0049 900000      R     MOV     DPTR,#appId
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E 7E00              MOV     R6,#00H
0050 7C01              MOV     R4,#01H
0052 7D00              MOV     R5,#00H
0054 120000      E     LCALL   ?C?LIMUL
0057 120000      E     LCALL   ?C?LNEG
005A EF                MOV     A,R7
005B 24C0              ADD     A,#0C0H
005D FF                MOV     R7,A
005E EE                MOV     A,R6
005F 34FF              ADDC    A,#0FFH
0061 FE                MOV     R6,A
0062 ED                MOV     A,R5
0063 3410              ADDC    A,#010H
0065 FD                MOV     R5,A
0066 EC                MOV     A,R4
0067 3400              ADDC    A,#00H
0069 FC                MOV     R4,A
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 72  

006A 900000      R     MOV     DPTR,#fieldPtr
006D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1764
0070 900000      R     MOV     DPTR,#fieldSize
0073 7401              MOV     A,#01H
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1765
0076 020000      R     LJMP    ?C0125
                                           ; SOURCE LINE # 1767
0079         ?C0127:
                                           ; SOURCE LINE # 1768
0079 900000      R     MOV     DPTR,#appId
007C E0                MOVX    A,@DPTR
007D FF                MOV     R7,A
007E 7E00              MOV     R6,#00H
0080 7C01              MOV     R4,#01H
0082 7D00              MOV     R5,#00H
0084 120000      E     LCALL   ?C?LIMUL
0087 A804              MOV     R0,AR4
0089 A905              MOV     R1,AR5
008B AA06              MOV     R2,AR6
008D AB07              MOV     R3,AR7
008F C3                CLR     C
0090 74C3              MOV     A,#0C3H
0092 9B                SUBB    A,R3
0093 FF                MOV     R7,A
0094 74FF              MOV     A,#0FFH
0096 9A                SUBB    A,R2
0097 FE                MOV     R6,A
0098 7410              MOV     A,#010H
009A 99                SUBB    A,R1
009B FD                MOV     R5,A
009C E4                CLR     A
009D 98                SUBB    A,R0
009E FC                MOV     R4,A
009F 900000      R     MOV     DPTR,#fieldPtr
00A2 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1772
00A5 020000      R     LJMP    ?C0125
                                           ; SOURCE LINE # 1774
00A8         ?C0128:
                                           ; SOURCE LINE # 1775
00A8 900000      R     MOV     DPTR,#appId
00AB E0                MOVX    A,@DPTR
00AC FF                MOV     R7,A
00AD 7E00              MOV     R6,#00H
00AF 7C01              MOV     R4,#01H
00B1 7D00              MOV     R5,#00H
00B3 120000      E     LCALL   ?C?LIMUL
00B6 A804              MOV     R0,AR4
00B8 A905              MOV     R1,AR5
00BA AA06              MOV     R2,AR6
00BC AB07              MOV     R3,AR7
00BE C3                CLR     C
00BF 74C7              MOV     A,#0C7H
00C1 9B                SUBB    A,R3
00C2 FF                MOV     R7,A
00C3 74FF              MOV     A,#0FFH
00C5 9A                SUBB    A,R2
00C6 FE                MOV     R6,A
00C7 7410              MOV     A,#010H
00C9 99                SUBB    A,R1
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 73  

00CA FD                MOV     R5,A
00CB E4                CLR     A
00CC 98                SUBB    A,R0
00CD FC                MOV     R4,A
00CE 900000      R     MOV     DPTR,#fieldPtr
00D1 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1776
00D4 020000      R     LJMP    ?C0125
                                           ; SOURCE LINE # 1778
00D7         ?C0129:
                                           ; SOURCE LINE # 1779
00D7 900000      R     MOV     DPTR,#appId
00DA E0                MOVX    A,@DPTR
00DB FF                MOV     R7,A
00DC 7E00              MOV     R6,#00H
00DE 7C01              MOV     R4,#01H
00E0 7D00              MOV     R5,#00H
00E2 120000      E     LCALL   ?C?LIMUL
00E5 A804              MOV     R0,AR4
00E7 A905              MOV     R1,AR5
00E9 AA06              MOV     R2,AR6
00EB AB07              MOV     R3,AR7
00ED C3                CLR     C
00EE 74CB              MOV     A,#0CBH
00F0 9B                SUBB    A,R3
00F1 FF                MOV     R7,A
00F2 74FF              MOV     A,#0FFH
00F4 9A                SUBB    A,R2
00F5 FE                MOV     R6,A
00F6 7410              MOV     A,#010H
00F8 99                SUBB    A,R1
00F9 FD                MOV     R5,A
00FA E4                CLR     A
00FB 98                SUBB    A,R0
00FC FC                MOV     R4,A
00FD 900000      R     MOV     DPTR,#fieldPtr
0100 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1783
0103 020000      R     LJMP    ?C0125
                                           ; SOURCE LINE # 1785
0106         ?C0130:
                                           ; SOURCE LINE # 1786
0106 900000      R     MOV     DPTR,#appId
0109 E0                MOVX    A,@DPTR
010A FF                MOV     R7,A
010B 7E00              MOV     R6,#00H
010D 7C01              MOV     R4,#01H
010F 7D00              MOV     R5,#00H
0111 120000      E     LCALL   ?C?LIMUL
0114 A804              MOV     R0,AR4
0116 A905              MOV     R1,AR5
0118 AA06              MOV     R2,AR6
011A AB07              MOV     R3,AR7
011C C3                CLR     C
011D 74D0              MOV     A,#0D0H
011F 9B                SUBB    A,R3
0120 FF                MOV     R7,A
0121 74FF              MOV     A,#0FFH
0123 9A                SUBB    A,R2
0124 FE                MOV     R6,A
0125 7410              MOV     A,#010H
0127 99                SUBB    A,R1
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 74  

0128 FD                MOV     R5,A
0129 E4                CLR     A
012A 98                SUBB    A,R0
012B FC                MOV     R4,A
012C 900000      R     MOV     DPTR,#fieldPtr
012F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1787
0132 900000      R     MOV     DPTR,#fieldSize
0135 7401              MOV     A,#01H
0137 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1788
0138 020000      R     LJMP    ?C0125
                                           ; SOURCE LINE # 1790
013B         ?C0131:
                                           ; SOURCE LINE # 1791
013B 900000      R     MOV     DPTR,#appId
013E E0                MOVX    A,@DPTR
013F FF                MOV     R7,A
0140 7E00              MOV     R6,#00H
0142 7C01              MOV     R4,#01H
0144 7D00              MOV     R5,#00H
0146 120000      E     LCALL   ?C?LIMUL
0149 A804              MOV     R0,AR4
014B A905              MOV     R1,AR5
014D AA06              MOV     R2,AR6
014F AB07              MOV     R3,AR7
0151 C3                CLR     C
0152 74D1              MOV     A,#0D1H
0154 9B                SUBB    A,R3
0155 FF                MOV     R7,A
0156 74FF              MOV     A,#0FFH
0158 9A                SUBB    A,R2
0159 FE                MOV     R6,A
015A 7410              MOV     A,#010H
015C 99                SUBB    A,R1
015D FD                MOV     R5,A
015E E4                CLR     A
015F 98                SUBB    A,R0
0160 FC                MOV     R4,A
0161 900000      R     MOV     DPTR,#fieldPtr
0164 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1792
0167 900000      R     MOV     DPTR,#fieldSize
016A 7401              MOV     A,#01H
016C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1793
016D 020000      R     LJMP    ?C0125
                                           ; SOURCE LINE # 1795
0170         ?C0132:
                                           ; SOURCE LINE # 1796
0170 900000      R     MOV     DPTR,#appId
0173 E0                MOVX    A,@DPTR
0174 FF                MOV     R7,A
0175 7E00              MOV     R6,#00H
0177 7C01              MOV     R4,#01H
0179 7D00              MOV     R5,#00H
017B 120000      E     LCALL   ?C?LIMUL
017E A804              MOV     R0,AR4
0180 A905              MOV     R1,AR5
0182 AA06              MOV     R2,AR6
0184 AB07              MOV     R3,AR7
0186 C3                CLR     C
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 75  

0187 74D6              MOV     A,#0D6H
0189 9B                SUBB    A,R3
018A FF                MOV     R7,A
018B 74FF              MOV     A,#0FFH
018D 9A                SUBB    A,R2
018E FE                MOV     R6,A
018F 7410              MOV     A,#010H
0191 99                SUBB    A,R1
0192 FD                MOV     R5,A
0193 E4                CLR     A
0194 98                SUBB    A,R0
0195 FC                MOV     R4,A
0196 900000      R     MOV     DPTR,#fieldPtr
0199 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1797
019C 020000      R     LJMP    ?C0125
                                           ; SOURCE LINE # 1799
019F         ?C0133:
                                           ; SOURCE LINE # 1800
019F 900000      R     MOV     DPTR,#appId
01A2 E0                MOVX    A,@DPTR
01A3 FF                MOV     R7,A
01A4 7E00              MOV     R6,#00H
01A6 7C01              MOV     R4,#01H
01A8 7D00              MOV     R5,#00H
01AA 120000      E     LCALL   ?C?LIMUL
01AD A804              MOV     R0,AR4
01AF A905              MOV     R1,AR5
01B1 AA06              MOV     R2,AR6
01B3 AB07              MOV     R3,AR7
01B5 C3                CLR     C
01B6 74D2              MOV     A,#0D2H
01B8 9B                SUBB    A,R3
01B9 FF                MOV     R7,A
01BA 74FF              MOV     A,#0FFH
01BC 9A                SUBB    A,R2
01BD FE                MOV     R6,A
01BE 7410              MOV     A,#010H
01C0 99                SUBB    A,R1
01C1 FD                MOV     R5,A
01C2 E4                CLR     A
01C3 98                SUBB    A,R0
01C4 FC                MOV     R4,A
01C5 900000      R     MOV     DPTR,#fieldPtr
01C8 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1801
01CB 8075              SJMP    ?C0125
                                           ; SOURCE LINE # 1803
01CD         ?C0134:
                                           ; SOURCE LINE # 1804
01CD 900000      R     MOV     DPTR,#appId
01D0 E0                MOVX    A,@DPTR
01D1 FF                MOV     R7,A
01D2 7E00              MOV     R6,#00H
01D4 7C01              MOV     R4,#01H
01D6 7D00              MOV     R5,#00H
01D8 120000      E     LCALL   ?C?LIMUL
01DB A804              MOV     R0,AR4
01DD A905              MOV     R1,AR5
01DF AA06              MOV     R2,AR6
01E1 AB07              MOV     R3,AR7
01E3 C3                CLR     C
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 76  

01E4 74D4              MOV     A,#0D4H
01E6 9B                SUBB    A,R3
01E7 FF                MOV     R7,A
01E8 74FF              MOV     A,#0FFH
01EA 9A                SUBB    A,R2
01EB FE                MOV     R6,A
01EC 7410              MOV     A,#010H
01EE 99                SUBB    A,R1
01EF FD                MOV     R5,A
01F0 E4                CLR     A
01F1 98                SUBB    A,R0
01F2 FC                MOV     R4,A
01F3 900000      R     MOV     DPTR,#fieldPtr
01F6 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1805
01F9 8047              SJMP    ?C0125
                                           ; SOURCE LINE # 1807
01FB         ?C0135:
                                           ; SOURCE LINE # 1808
01FB 900000      R     MOV     DPTR,#appId
01FE E0                MOVX    A,@DPTR
01FF FF                MOV     R7,A
0200 7E00              MOV     R6,#00H
0202 7C01              MOV     R4,#01H
0204 7D00              MOV     R5,#00H
0206 120000      E     LCALL   ?C?LIMUL
0209 A804              MOV     R0,AR4
020B A905              MOV     R1,AR5
020D AA06              MOV     R2,AR6
020F AB07              MOV     R3,AR7
0211 C3                CLR     C
0212 74D8              MOV     A,#0D8H
0214 9B                SUBB    A,R3
0215 FF                MOV     R7,A
0216 74FF              MOV     A,#0FFH
0218 9A                SUBB    A,R2
0219 FE                MOV     R6,A
021A 7410              MOV     A,#010H
021C 99                SUBB    A,R1
021D FD                MOV     R5,A
021E E4                CLR     A
021F 98                SUBB    A,R0
0220 FC                MOV     R4,A
0221 900000      R     MOV     DPTR,#fieldPtr
0224 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1809
0227 900000      R     MOV     DPTR,#fieldSize
022A 7404              MOV     A,#04H
022C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1810
022D 8013              SJMP    ?C0125
                                           ; SOURCE LINE # 1812
022F         ?C0136:
                                           ; SOURCE LINE # 1814
022F 7F00              MOV     R7,#00H
0231 120000      E     LCALL   _?CyHalt
                                           ; SOURCE LINE # 1815
0234 7F00              MOV     R7,#00H
0236 7E00              MOV     R6,#00H
0238 7D00              MOV     R5,#00H
023A 7C00              MOV     R4,#00H
023C 900000      R     MOV     DPTR,#fieldPtr
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 77  

023F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1816
                                           ; SOURCE LINE # 1817
0242         ?C0125:
                                           ; SOURCE LINE # 1820
0242 900000      R     MOV     DPTR,#fieldSize
0245 E0                MOVX    A,@DPTR
0246 FF                MOV     R7,A
0247 EF                MOV     A,R7
0248 B40119            CJNE    A,#01H,?C0138
                                           ; SOURCE LINE # 1821
                                           ; SOURCE LINE # 1822
024B 900000      R     MOV     DPTR,#fieldPtr
024E 120000      E     LCALL   ?C?LLDXDATA
0251 A907              MOV     R1,AR7
0253 AA06              MOV     R2,AR6
0255 AB05              MOV     R3,AR5
0257 120000      E     LCALL   _cyread8
025A E4                CLR     A
025B FC                MOV     R4,A
025C FD                MOV     R5,A
025D FE                MOV     R6,A
025E 900000      R     MOV     DPTR,#result
0261 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1823
0264         ?C0138:
                                           ; SOURCE LINE # 1827
0264 900000      R     MOV     DPTR,#fieldSize
0267 E0                MOVX    A,@DPTR
0268 FF                MOV     R7,A
0269 EF                MOV     A,R7
026A 6402              XRL     A,#02H
026C 7068              JNZ     ?C0139
                                           ; SOURCE LINE # 1828
                                           ; SOURCE LINE # 1829
026E 900000      R     MOV     DPTR,#fieldPtr
0271 120000      E     LCALL   ?C?LLDXDATA
0274 EF                MOV     A,R7
0275 2401              ADD     A,#01H
0277 FF                MOV     R7,A
0278 EE                MOV     A,R6
0279 3400              ADDC    A,#00H
027B FE                MOV     R6,A
027C ED                MOV     A,R5
027D 3400              ADDC    A,#00H
027F FD                MOV     R5,A
0280 EC                MOV     A,R4
0281 3400              ADDC    A,#00H
0283 FC                MOV     R4,A
0284 A907              MOV     R1,AR7
0286 AA06              MOV     R2,AR6
0288 AB05              MOV     R3,AR5
028A 120000      E     LCALL   _cyread8
028D E4                CLR     A
028E FC                MOV     R4,A
028F FD                MOV     R5,A
0290 FE                MOV     R6,A
0291 900000      R     MOV     DPTR,#result
0294 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1830
0297 900000      R     MOV     DPTR,#result
029A 120000      E     LCALL   ?C?LLDXDATA
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 78  

029D C004              PUSH    AR4
029F C005              PUSH    AR5
02A1 C006              PUSH    AR6
02A3 C007              PUSH    AR7
02A5 900000      R     MOV     DPTR,#fieldPtr
02A8 120000      E     LCALL   ?C?LLDXDATA
02AB A907              MOV     R1,AR7
02AD AA06              MOV     R2,AR6
02AF AB05              MOV     R3,AR5
02B1 120000      E     LCALL   _cyread8
02B4 E4                CLR     A
02B5 FC                MOV     R4,A
02B6 FD                MOV     R5,A
02B7 FE                MOV     R6,A
02B8 7808              MOV     R0,#08H
02BA 120000      E     LCALL   ?C?LSHL
02BD A804              MOV     R0,AR4
02BF A905              MOV     R1,AR5
02C1 AA06              MOV     R2,AR6
02C3 AB07              MOV     R3,AR7
02C5 D007              POP     AR7
02C7 D006              POP     AR6
02C9 D005              POP     AR5
02CB D004              POP     AR4
02CD 120000      E     LCALL   ?C?LOR
02D0 900000      R     MOV     DPTR,#result
02D3 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1831
02D6         ?C0139:
                                           ; SOURCE LINE # 1833
02D6 900000      R     MOV     DPTR,#fieldSize
02D9 E0                MOVX    A,@DPTR
02DA FF                MOV     R7,A
02DB EF                MOV     A,R7
02DC 6404              XRL     A,#04H
02DE 6003              JZ      $ + 5H
02E0 020000      R     LJMP    ?C0140
                                           ; SOURCE LINE # 1834
                                           ; SOURCE LINE # 1835
02E3 900000      R     MOV     DPTR,#fieldPtr
02E6 120000      E     LCALL   ?C?LLDXDATA
02E9 EF                MOV     A,R7
02EA 2403              ADD     A,#03H
02EC FF                MOV     R7,A
02ED EE                MOV     A,R6
02EE 3400              ADDC    A,#00H
02F0 FE                MOV     R6,A
02F1 ED                MOV     A,R5
02F2 3400              ADDC    A,#00H
02F4 FD                MOV     R5,A
02F5 EC                MOV     A,R4
02F6 3400              ADDC    A,#00H
02F8 FC                MOV     R4,A
02F9 A907              MOV     R1,AR7
02FB AA06              MOV     R2,AR6
02FD AB05              MOV     R3,AR5
02FF 120000      E     LCALL   _cyread8
0302 E4                CLR     A
0303 FC                MOV     R4,A
0304 FD                MOV     R5,A
0305 FE                MOV     R6,A
0306 900000      R     MOV     DPTR,#result
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 79  

0309 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1836
030C 900000      R     MOV     DPTR,#result
030F 120000      E     LCALL   ?C?LLDXDATA
0312 C004              PUSH    AR4
0314 C005              PUSH    AR5
0316 C006              PUSH    AR6
0318 C007              PUSH    AR7
031A 900000      R     MOV     DPTR,#fieldPtr
031D 120000      E     LCALL   ?C?LLDXDATA
0320 EF                MOV     A,R7
0321 2402              ADD     A,#02H
0323 FF                MOV     R7,A
0324 EE                MOV     A,R6
0325 3400              ADDC    A,#00H
0327 FE                MOV     R6,A
0328 ED                MOV     A,R5
0329 3400              ADDC    A,#00H
032B FD                MOV     R5,A
032C EC                MOV     A,R4
032D 3400              ADDC    A,#00H
032F FC                MOV     R4,A
0330 A907              MOV     R1,AR7
0332 AA06              MOV     R2,AR6
0334 AB05              MOV     R3,AR5
0336 120000      E     LCALL   _cyread8
0339 E4                CLR     A
033A FC                MOV     R4,A
033B FD                MOV     R5,A
033C FE                MOV     R6,A
033D 7808              MOV     R0,#08H
033F 120000      E     LCALL   ?C?LSHL
0342 A804              MOV     R0,AR4
0344 A905              MOV     R1,AR5
0346 AA06              MOV     R2,AR6
0348 AB07              MOV     R3,AR7
034A D007              POP     AR7
034C D006              POP     AR6
034E D005              POP     AR5
0350 D004              POP     AR4
0352 120000      E     LCALL   ?C?LOR
0355 900000      R     MOV     DPTR,#result
0358 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1837
035B 900000      R     MOV     DPTR,#result
035E 120000      E     LCALL   ?C?LLDXDATA
0361 C004              PUSH    AR4
0363 C005              PUSH    AR5
0365 C006              PUSH    AR6
0367 C007              PUSH    AR7
0369 900000      R     MOV     DPTR,#fieldPtr
036C 120000      E     LCALL   ?C?LLDXDATA
036F EF                MOV     A,R7
0370 2401              ADD     A,#01H
0372 FF                MOV     R7,A
0373 EE                MOV     A,R6
0374 3400              ADDC    A,#00H
0376 FE                MOV     R6,A
0377 ED                MOV     A,R5
0378 3400              ADDC    A,#00H
037A FD                MOV     R5,A
037B EC                MOV     A,R4
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 80  

037C 3400              ADDC    A,#00H
037E FC                MOV     R4,A
037F A907              MOV     R1,AR7
0381 AA06              MOV     R2,AR6
0383 AB05              MOV     R3,AR5
0385 120000      E     LCALL   _cyread8
0388 E4                CLR     A
0389 FC                MOV     R4,A
038A FD                MOV     R5,A
038B FE                MOV     R6,A
038C 7810              MOV     R0,#010H
038E 120000      E     LCALL   ?C?LSHL
0391 A804              MOV     R0,AR4
0393 A905              MOV     R1,AR5
0395 AA06              MOV     R2,AR6
0397 AB07              MOV     R3,AR7
0399 D007              POP     AR7
039B D006              POP     AR6
039D D005              POP     AR5
039F D004              POP     AR4
03A1 120000      E     LCALL   ?C?LOR
03A4 900000      R     MOV     DPTR,#result
03A7 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1838
03AA 900000      R     MOV     DPTR,#result
03AD 120000      E     LCALL   ?C?LLDXDATA
03B0 C004              PUSH    AR4
03B2 C005              PUSH    AR5
03B4 C006              PUSH    AR6
03B6 C007              PUSH    AR7
03B8 900000      R     MOV     DPTR,#fieldPtr
03BB 120000      E     LCALL   ?C?LLDXDATA
03BE A907              MOV     R1,AR7
03C0 AA06              MOV     R2,AR6
03C2 AB05              MOV     R3,AR5
03C4 120000      E     LCALL   _cyread8
03C7 E4                CLR     A
03C8 FC                MOV     R4,A
03C9 FD                MOV     R5,A
03CA FE                MOV     R6,A
03CB 7818              MOV     R0,#018H
03CD 120000      E     LCALL   ?C?LSHL
03D0 A804              MOV     R0,AR4
03D2 A905              MOV     R1,AR5
03D4 AA06              MOV     R2,AR6
03D6 AB07              MOV     R3,AR7
03D8 D007              POP     AR7
03DA D006              POP     AR6
03DC D005              POP     AR5
03DE D004              POP     AR4
03E0 120000      E     LCALL   ?C?LOR
03E3 900000      R     MOV     DPTR,#result
03E6 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1839
03E9         ?C0140:
                                           ; SOURCE LINE # 1859
03E9 900000      R     MOV     DPTR,#result
03EC 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 1860
03EF         ?C0141:
03EF 22                RET     
             ; FUNCTION _Bootloader_GetMetadata (END)
C51 COMPILER V9.51   BOOTLOADER                                                            10/03/2016 19:53:28 PAGE 81  




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4434    ----
   CONSTANT SIZE    =     13    ----
   XDATA SIZE       =      4     890
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      82
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
