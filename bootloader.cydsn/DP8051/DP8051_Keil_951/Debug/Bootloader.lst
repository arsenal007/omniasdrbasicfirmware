C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE BOOTLOADER
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\Bootloader.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\Bootloader.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(DEB
                    -UG) WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/Bootloader.lst) CD OT(5,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\Bootloader.o
                    -bj)

line level    source

   1          /****************************************************************************//**
   2          * \file Bootloader.c
   3          * \version 1.40
   4          *
   5          * \brief
   6          *   Provides an API for the Bootloader component. The API includes functions
   7          *   for starting bootloading operations, validating the application and
   8          *   jumping to the application.
   9          *
  10          ********************************************************************************
  11          * \copyright
  12          * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions,
  14          * disclaimers, and limitations in the end user license agreement accompanying
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include "Bootloader_PVT.h"
  19          
  20          
  21          
  22          #include "project.h"
  23          #include <string.h>
  24          
  25          #if (CY_BOOT_VERSION < CY_BOOT_5_0)
              #error Component Bootloader_v1_40 requires cy_boot v5.00 or later
              #endif /* (CY_BOOT_VERSION >= CY_BOOT_5_0) */
  28          
  29          /*******************************************************************************
  30          * The Checksum and SizeBytes are forcefully set in code. We then post process
  31          * the hex file from the linker and inject their values. When the hex file
  32          * is loaded into the device, these two variables should have valid values.
  33          * Because the compiler can do optimization to remove the constant
  34          * accesses, these should not be accessed directly. Instead, the variables
  35          * CyBtldr_ChecksumAccess & CyBtldr_SizeBytesAccess should be used to get the
  36          * proper values at the runtime.
  37          *******************************************************************************/
  38          #if (CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)
  39          #if defined(__ARMCC_VERSION) || defined (__GNUC__)
                  __attribute__((section (".bootloader"), used))
              #elif defined (__ICCARM__)
                  #pragma location=".bootloader"
              #endif  /* defined(__ARMCC_VERSION) || defined (__GNUC__) */
  44          
  45          #if defined(__ARMCC_VERSION) || defined (__GNUC__) || defined (__C51__)
  46                     const uint8  CYCODE Bootloader_Checksum = 0u;
  47          #elif defined (__ICCARM__)
                  __root const uint8  CYCODE Bootloader_Checksum = 0u;
              #endif  /* defined(__ARMCC_VERSION) || defined (__GNUC__) || defined (__C51__) */
  50          const uint8  CYCODE *Bootloader_ChecksumAccess  = (const uint8  CYCODE *)(&Bootloader_Checksum);
  51          
  52          #if defined(__ARMCC_VERSION) || defined (__GNUC__)
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 2   

                  __attribute__((section (".bootloader"), used))
              #elif defined (__ICCARM__)
                  #pragma location=".bootloader"
              #endif  /* defined(__ARMCC_VERSION) || defined (__GNUC__) */
  57          
  58          const uint32 CYCODE Bootloader_SizeBytes = 0xFFFFFFFFu;
  59          const uint32 CYCODE *Bootloader_SizeBytesAccess = (const uint32 CYCODE *)(&Bootloader_SizeBytes);
  60          #endif /*(CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)*/
  61          
  62          /**
  63           \defgroup variables_group Variables
  64           @{
  65          */
  66          #if (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER) 
              /**
               *  This variable is intended to indicate that in-application 
               *  bootloading initialization is done. The initialization itself is performed in the
               *  Bootloader_Initialize() function. Once the initialization is done,
               *  the variable is set and this prevents the functionality from reinitialization.
               */
              uint8 Bootloader_initVar = Bootloader_BOOTLOADING_NOT_INITIALIZED;
              
              /**
               *  This variable is intended to keep the current application number. It applies
               *  only to in-application bootloading.
               */
              uint8 Bootloader_runningApp = Bootloader_RUNNING_APPLICATION_UNKNOWN;
              
              /**
               *  This variable is intended to indicate that 'Enter bootloader' command has
               *  been received. It applies only to in-application bootloading.
               */
              uint8 Bootloader_isBootloading = Bootloader_BOOTLOADING_COMPLETED;
              #endif /*CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER*/
  87          
  88          #if ((0u != Bootloader_DUAL_APP_BOOTLOADER)  || (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)
             -)
              /**
               *  This variable is intended to keep the active application number. It applies
               *  to Classic Dual-app Bootloader and in-application bootloading.
               */
              volatile uint8 Bootloader_activeApp = Bootloader_MD_BTLDB_ACTIVE_NONE;
              #else /*SINGLE-APP BOOTLOADER*/
  95              #define Bootloader_activeApp      (Bootloader_MD_BTLDB_ACTIVE_0)
  96          #endif  /* (0u != Bootloader_DUAL_APP_BOOTLOADER) */
  97          
  98          
  99          #if (0u != Bootloader_SECURITY_KEY_AVAIL) 
              /**
               *  This variable holds the security key for additional safety during communication.
               */
              static const uint8 CYCODE Bootloader_securityKey[Bootloader_SECURITY_KEY_LENGTH] = {0x11u, 0x22u, 0x33u, 0
             -x44u, 0x55u, 0x66u};
              #endif /*(0u != Bootloader_SECURITY_KEY_AVAIL)*/
 105          
 106          #if ((CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LAUNCHER) && (!CY_PSOC3))
              /**
               *  This variable holds the pointer on the user's callback-function that implements the custom 
               *  bootloader command processing.
               */
              static Bootloader_callback_type Bootloader_callback = NULL;
              #endif /*(CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LAUNCHER) && (!CY_PSOC3)*/
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 3   

 113          /** @}*/
 114           
 115          /***************************************
 116          *     Function Prototypes
 117          ***************************************/
 118          #if (CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)
 119              static void  Bootloader_LaunchApplication(void) CYSMALL \
 120                              ; 
 121          #if(!CY_PSOC3)
                  /* Implementation for PSoC 3 resides in Bootloader_psoc3.a51 file.  */
                  static void     Bootloader_LaunchBootloadable(uint32 appAddr);
              #endif  /* (!CY_PSOC3) */
 125          #endif /* CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER */ 
 126          
 127          #if (CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LAUNCHER)
 128              static cystatus Bootloader_WritePacket(uint8 status, uint8 buffer[], uint16 size) CYSMALL \
 129                                              ;
 130          
 131              static uint16   Bootloader_CalcPacketChecksum(const uint8 buffer[], uint16 size) CYSMALL \
 132                                              ;
 133                                              
 134              #if (0u != Bootloader_CMD_VERIFY_FLS_ROW_AVAIL)
                  static uint8 Bootloader_VerifyRow(uint32 flashStart, const uint8* ramStart, uint16 size) \
                              CYSMALL ;                                
                  #endif /*(0u != Bootloader_CMD_VERIFY_FLS_ROW_AVAIL)*/            
 138          
 139          #if (CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)                                    
 140              static void Bootloader_HostLink(uint8 timeOut) CYLARGE ;
 141          #endif /* (CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER) */                                   
             - 
 142          #endif /*(CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LAUNCHER)*/
 143                                              
 144          #if (((0u != Bootloader_DUAL_APP_BOOTLOADER) && (CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LAUNCHER)) \
 145                                                    || (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER))
                  static uint8 Bootloader_CheckImage(uint8 appNumber, uint8 arrayNumber, uint16 row, uint16 rowNumInArra
             -y) CYSMALL \
                                                  ;                                    
              #endif /*(((0u != Bootloader_DUAL_APP_BOOTLOADER) && (CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LAUNCHER)) \
                                                        || (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER))*/
 150          
 151          #if ((CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER) || (0u != Bootloader_DUAL_APP_BOOTLOADER))
             - 
                  static void Bootloader_SetActiveAppInMetadata(uint8 activeApp) CYSMALL \
                              ;
              #endif /* (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER) || (0u != Bootloader_DUAL_APP_BOOTLOA
             -DER) */                     
 155          
 156          #if ((CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER) || \
 157               (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_MULTIAPPBOOTLOADER) || \
 158               (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LAUNCHER))
                  static uint8 Bootloader_GetActiveAppFromMetadata(void) CYSMALL \
                              ;                     
              #endif /*((CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER) || \
                        (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_MULTIAPPBOOTLOADER) || \
                        (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LAUNCHER)) */
 164                    
 165          #if (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LAUNCHER)
              #if ((0u != Bootloader_COPIER_AVAIL) && (CY_PSOC4)) 
                  static cystatus Bootloader_CopyRow(uint16 srcRowNum, uint16 dstRowNum) \
                               CYSMALL ;
                  static void Bootloader_Copier(void) CYSMALL ;
              #endif /*(0u != Bootloader_COPIER_AVAIL) && (CY_PSOC4)*/
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 4   

              #endif /*(CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LAUNCHER)*/
 172                                 
 173          
 174          /**
 175           \defgroup functions_group Functions
 176           @{
 177          */
 178          #if ((CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER) || \
 179                                            (0u != Bootloader_DUAL_APP_BOOTLOADER))                                 
             -         
              /*******************************************************************************
              * Function Name: Bootloader_SetActiveAppInMetadata
              ****************************************************************************//**
              * \internal
              *
              * \brief
              *    This function sets the active application in metadata.
              *    The other application is set inactive. 
              *
              * \param activeApp
              *   The active application number (0 or 1). If the active application number is
              *   greater than 1, then nothing is done.  
              *
              * \endinternal
              *******************************************************************************/
              static void Bootloader_SetActiveAppInMetadata(uint8 activeApp) CYSMALL \
                                   
              {
                  if (Bootloader_MD_BTLDB_ACTIVE_NONE > activeApp)
                  {
                      uint8 CYDATA idx;    
                      for(idx = 0u; idx < Bootloader_MAX_NUM_OF_BTLDB; idx++)
                      {
                          (void)Bootloader_SetFlashByte((uint32) Bootloader_MD_BTLDB_ACTIVE_OFFSET(idx),
                                                              (uint8)(idx == activeApp));
                      }
                  }    
              }
              #endif /* (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER) || 
                                         (0u != Bootloader_DUAL_APP_BOOTLOADER) */ 
 210          
 211          #if ((CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER) || \
 212               (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_MULTIAPPBOOTLOADER) || \
 213               (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LAUNCHER))                   
              /*******************************************************************************
              * Function Name: Bootloader_GetActiveAppFromMetadata
              ****************************************************************************//**
              * \internal
              *
              * \brief
              *    This function performs reading of both metadata sections to
              *    identify an active application. If none application is set active, 
              *    then Bootloader_MD_BTLDB_ACTIVE_NONE (0x02) is returned.
              *
              * \return
              *   The number of active applications. In the case of error:
              *   -  Bootloader_MD_BTLDB_ACTIVE_NONE (0x02) - neither application is initialized;
              *   -  Bootloader_BOTH_ACTIVE (0x03) - both applications are set active;
              *
              * \endinternal 
              *******************************************************************************/
              static  uint8 Bootloader_GetActiveAppFromMetadata(void) CYSMALL \
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 5   

                     
              {
                  uint8 CYDATA result;
                  uint8 CYDATA app0 = Bootloader_GetMetadata(Bootloader_GET_BTLDB_ACTIVE, 
                                                                   Bootloader_MD_BTLDB_ACTIVE_0);
                  uint8 CYDATA app1 = Bootloader_GetMetadata(Bootloader_GET_BTLDB_ACTIVE, 
                                                                   Bootloader_MD_BTLDB_ACTIVE_1);        
              
                  if (0u != app0)                                                     
                  {
                      if (0u == app1)
                      {
                          /* app0 is active */
                          result = Bootloader_MD_BTLDB_ACTIVE_0;
                      }
                      else 
                      {
                          /* Both are active */
                          result = Bootloader_BOTH_ACTIVE;
                      }
                  }
                  else /* (0u == app0) */
                  {
                      if (0u != app1)
                      {
                          /* app1 is active */
                          result = Bootloader_MD_BTLDB_ACTIVE_1;
                      }
                      else
                      {
                          /* Neither app is active. */
                          result = Bootloader_MD_BTLDB_ACTIVE_NONE;
                      }          
                  }
              
                  return (result);
              }
              #endif /*((CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER) || \
                        (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_MULTIAPPBOOTLOADER) || \
                        (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LAUNCHER)) */
 272                  
 273          #if (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)
              /*******************************************************************************
              * Function Name: Bootloader_Initialize
              ****************************************************************************//**
              * 
              * \brief 
              *   Used for in-app bootloading. This function updates the global variable 
              *   Bootloader_runningApp with a running application number.
              *
              *   If the running application number is valid (0 or 1), this function also 
              *   sets the global variable Bootloader_initVar that is used to determine 
              *   if the component can process bootloader commands or not.
              *   This function should be called once in the application project after a startup.
              *
              * \return
              *   Global variables: 
              *     - Bootloader_runningApp
              *     - Bootloader_activeApp
              *     - Bootloader_initVar
              *
              * \details 
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 6   

              *   This API should be called first to be able to capture the active application 
              *   number that is actually the running application number.
              *******************************************************************************/
              void Bootloader_Initialize(void) CYSMALL \
                                             
              {
                  if (Bootloader_BOOTLOADING_NOT_INITIALIZED ==Bootloader_initVar)
                  {
                      Bootloader_activeApp = Bootloader_GetActiveAppFromMetadata();
                      
                      /* Updating with number of active application */    
                      if ((Bootloader_MD_BTLDB_ACTIVE_NONE != Bootloader_activeApp) &&
                          (Bootloader_BOTH_ACTIVE != Bootloader_activeApp))
                      {
                          Bootloader_runningApp = Bootloader_activeApp;
                          
                          /* Bootloader commands are to be processed */
                          Bootloader_initVar = Bootloader_BOOTLADING_INITIALIZED;
                      }
                      else 
                      {
                          Bootloader_runningApp = Bootloader_RUNNING_APPLICATION_UNKNOWN;
                      }
                  }
              }
              
              /*****************************************************************************
              * Function Name: Bootloader_GetRunningAppStatus
              **************************************************************************//**
              *
              * \brief 
              *   Used for dual-app or in-app bootloader. Returns the value of the global 
              *   variable Bootloader_runningApp. This function should be called only after the 
              *   Bootloader_Initialize() has been called once.
              *
              * \return 
              *   The application number that is currently being executed. Values are 0 or 1; 
              *     other values indicate "not defined".
              *
              *******************************************************************************/
              uint8 Bootloader_GetRunningAppStatus(void) CYSMALL \
                          
              {  
                  return (Bootloader_runningApp);
              }
              
              
              /*******************************************************************************
              * Function Name: Bootloader_GetActiveAppStatus
              ****************************************************************************//**
              *
              * \brief 
              *   Used for dual-app or in-app bootloader. Returns the value of the global 
              *   variable Bootloader_activeApp. This function should be called only after the 
              *   Bootloader_Initialize() has been called once.
              *
              * \return 
              *   The desired application to be executed. Values are 0 or 1; other values 
              *     indicate "not defined".
              *
              *******************************************************************************/
              uint8 Bootloader_GetActiveAppStatus(void) CYSMALL \
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 7   

                    
              {  
                  /* Read active application number from metadata */
                  Bootloader_activeApp = Bootloader_GetActiveAppFromMetadata();
                  
                  return (Bootloader_activeApp);
              }
              #endif /*(CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)*/
 364          
 365          #if (CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LAUNCHER)
 366          /*******************************************************************************
 367          * Function Name: Bootloader_CalcPacketChecksum
 368          ****************************************************************************//**
 369          *  \internal
 370          *
 371          *  \brief
 372          *     This computes a 16-bit checksum for the provided number of bytes contained
 373          *     in the provided buffer.
 374          *
 375          *  \param buffer
 376          *     The buffer containing the data to compute the checksum.
 377          *  \param size
 378          *     The number of bytes in the buffer to compute the checksum.
 379          *
 380          *  \return 
 381          *     A 16-bit checksum for the provided data.
 382          *
 383          *  \endinternal
 384          *******************************************************************************/
 385          static uint16 Bootloader_CalcPacketChecksum(const uint8 buffer[], uint16 size) \
 386                              CYSMALL 
 387          {
 388   1          #if(0u != Bootloader_PACKET_CHECKSUM_CRC)
 389   1      
 390   1              uint16 CYDATA crc = Bootloader_CRC_CCITT_INITIAL_VALUE;
 391   1              uint16 CYDATA tmp;
 392   1              uint8  CYDATA i;
 393   1              uint16 CYDATA tmpIndex = size;
 394   1      
 395   1              if(0u == size)
 396   1              {
 397   2                  crc = ~crc;
 398   2              }
 399   1              else
 400   1              {
 401   2                  do
 402   2                  {
 403   3                      tmp = buffer[tmpIndex - size];
 404   3      
 405   3                      for (i = 0u; i < 8u; i++)
 406   3                      {
 407   4                          if (0u != ((crc & 0x0001u) ^ (tmp & 0x0001u)))
 408   4                          {
 409   5                              crc = (crc >> 1u) ^ Bootloader_CRC_CCITT_POLYNOMIAL;
 410   5                          }
 411   4                          else
 412   4                          {
 413   5                              crc >>= 1u;
 414   5                          }
 415   4      
 416   4                          tmp >>= 1u;
 417   4                      }
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 8   

 418   3      
 419   3                      size--;
 420   3                  }
 421   2                  while(0u != size);
 422   2      
 423   2                  crc = ~crc;
 424   2                  tmp = crc;
 425   2                  crc = ( uint16 )(crc << 8u) | (tmp >> 8u);
 426   2              }
 427   1      
 428   1              return(crc);
 429   1      
 430   1          #else
              
                      uint16 CYDATA sum = 0u;
              
                      while (size > 0u)
                      {
                          sum += buffer[size - 1u];
                          size--;
                      }
              
                      return(( uint16 )1u + ( uint16 )(~sum));
              
                  #endif /* (0u != Bootloader_PACKET_CHECKSUM_CRC) */
 443   1      }
 444          
 445          #if (!CY_PSOC3)
              /*******************************************************************************
              * Function Name: Bootloader_InitCallback
              ****************************************************************************//**
              *
              * \brief
              *  This function initializes the callback functionality.
              *  
              * \param userCallback
              *  The user's callback function.
              *
              *******************************************************************************/
              void Bootloader_InitCallback(Bootloader_callback_type userCallback) \
                         CYSMALL 
              {
                  Bootloader_callback = userCallback;
              }
              #endif /* (!CY_PSOC3) */
 463          
 464          
 465          #if (0u != Bootloader_CMD_VERIFY_FLS_ROW_AVAIL)
              /*******************************************************************************
              * Function Name: Bootloader_VerifyRow
              ****************************************************************************//**
              *  \internal
              * 
              *  \brief
              *   This API performs a byte to byte verifying of the flash row against the data 
              *   in the input buffer. 
              *
              *  \param flashStart 
              *        The start address of a row in flash.
              *  \param ramStart 
              *        The start address of corresponding data to compare in the RAM buffer.
              *  \param size 
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 9   

              *        The data length (common for both arrays).
              *
              *  \return
              *   CYRET_SUCCESS - If all data matches.
              *  \n Bootloader_ERR_VERIFY - If there is any mismatch.
              *
              * \endinternal 
              *******************************************************************************/
              static uint8 Bootloader_VerifyRow(uint32 flashStart, const uint8* ramStart, uint16 size) \
                              CYSMALL 
              {
                  uint8 CYDATA result = CYRET_SUCCESS;
                  uint16 CYDATA idx;
              
                  for(idx = 0u; idx < size; idx++)
                  {
                      if (CY_GET_XTND_REG8((uint8 CYFAR *)(flashStart + idx)) != ramStart[idx])
                      {
                          result = Bootloader_ERR_VERIFY;
                          break;
                      }    
                  }
              
                  return (result);
              }
              #endif /*(0u != Bootloader_CMD_VERIFY_FLS_ROW_AVAIL)*/
 506          #endif /*CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LAUNCHER*/
 507          
 508          
 509          /*******************************************************************************
 510          * Function Name: Bootloader_Calc8BitSum
 511          ****************************************************************************//**
 512          *
 513          * \brief
 514          *  This computes an 8-bit sum for the provided number of bytes contained in
 515          *  flash (if baseAddr equals CY_FLASH_BASE) or EEPROM (if baseAddr equals
 516          *  CY_EEPROM_BASE).
 517          *
 518          * \param baseAddr
 519          *   CY_FLASH_BASE
 520          *   CY_EEPROM_BASE - applicable only for PSoC 3 / PSoC 5LP devices.
 521          *
 522          * \param start
 523          *     The starting address to start summing data.
 524          * \param size
 525          *     The number of bytes to read and compute the sum.
 526          *
 527          * \return
 528          *   An 8-bit sum for the provided data.
 529          *
 530          *******************************************************************************/
 531          uint8 Bootloader_Calc8BitSum(uint32 baseAddr, uint32 start, uint32 size) \
 532                          CYSMALL 
 533          {
 534   1          uint8 CYDATA sum = 0u;
 535   1      
 536   1          #if(!CY_PSOC4)
 537   1              CYASSERT((baseAddr == CY_EEPROM_BASE) || (baseAddr == CY_FLASH_BASE));
 538   1          #else
                      CYASSERT(baseAddr == CY_FLASH_BASE);
                  #endif  /* (!CY_PSOC4) */
 541   1      
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 10  

 542   1          while (size > 0u)
 543   1          {
 544   2              size--;
 545   2              sum += (*((uint8  *)(baseAddr + start + size)));
 546   2          }
 547   1      
 548   1          return(sum);
 549   1      }
 550          
 551          
 552          #if (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LAUNCHER)
              #if ((0u != Bootloader_COPIER_AVAIL) && (CY_PSOC4)) 
              /*******************************************************************************
              * Function Name: Bootloader_CopyRow
              ****************************************************************************//**
              * \internal
              *
              * \brief
              *   This function performs copying of a specified row to specified 
              *     location.
              *
              * \param
              *   srcRowNum - The number of a row to copy from.
              * \param             
              *   dstRowNum - The number of a row to be copied to.
              *
              * \return
              *   \n CYRET_SUCCESS - If everything went right. 
              *   \n Otherwise, produce an error code indicating a problem.  
              * 
              * \endinternal
              *******************************************************************************/
              static cystatus Bootloader_CopyRow(uint16 srcRowNum, uint16 dstRowNum) \
                               CYSMALL 
              {
                  /*Buffer for row copy procedure*/
                  uint8  rowBuffer[CYDEV_FLS_ROW_SIZE];
                  cystatus result = CYRET_SUCCESS;
              
                  uint32 srcBaseAddr = CYDEV_FLASH_BASE + srcRowNum * CYDEV_FLS_ROW_SIZE;
                  uint16 idx;
              
                  for(idx = 0u; idx < CYDEV_FLS_ROW_SIZE; idx++)
                  {
                      rowBuffer[idx] = Bootloader_GET_CODE_BYTE(srcBaseAddr + idx);
                  }
                  
                  result = CySysFlashWriteRow((uint16) dstRowNum, rowBuffer);
                  
                  return (result);
              }
              
              /*******************************************************************************
              * Function Name: Bootloader_Copier
              ****************************************************************************//**
              *  \internal
              *  
              *  \brief
              *    This option is specific for Launcher-Combination architecture only and to 
              *    the case when there is a large communication component like BLE. To save 
              *    flash space for the user application, such a large communication component 
              *    is present only in the first application (Stack application) and is "shared" 
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 11  

              *    with the second application (the user's application actually) by "Code 
              *    sharing feature" (See code sharing and BLE Upgradable Stack example project). 
              *
              * \n If this option is enabled and the "need-to-copy" flag is set in the second 
              *    application's metadata, Copier performs copying of a previously saved Stack 
              *    application image from a "temporary location" to the app#1 flash 
              *    space (over the current app#1).
              *   
              * \n Before performing the copying operation the new Stack application image 
              *    should be received and stored at the temporary location by the current 
              *    Stack application. The "need-to-copy" flag should be set in app#2 metadata 
              *    indicating that copying operation is required.
              *
              * \n The temporary location is half of the flash space that left after Launcher 
              *    and 2 metadata rows. This implies that Stack application should fit in 
              *    that half of the flash space. 
              *
              * \n The destination for the copy operation is obtained as the first row after 
              *    Launcher (from app#1 metadata). 
              *
              * \n The source of copy operation is the first row of temporary location that 
              *    is calculated by the following formula: 
              * \n     srcRow = (((CY_FLASH_NUMBER_ROWS - dstRow - metaRows) / 2) + dstRow);
              * \n     where:
              *          - dstRow - the destination's first row (mentioned above);
              *          - CY_FLASH_NUMBER_ROWS - number of all flash rows; 
              *          - metaRows - 2 metadata rows;   
              *
              * \n Copying itself means row-by-row copying of the stored application's image.
              *    If it fails to copy some row, there is a defined number of attempts 
              *    (Bootloader_MAX_ATTEMPTS) to try again. In case of no success, 
              *    a user callback function Launcher_CopierCallback() is called. 
              *    If it is not defined, then the device is going to be halted.
              * 
              * \n After performing the application image copying, in case of success 
              *    the app#2 metadata is copied in the stead of app#1 metadata and then
              *    app#2 metadata is cleared.
              *
              * \n A "need-to-copy" flag is cleared just after performing the app#1 image
              *    copying from the temporary location to avoid another consecutive 
              *    copying operation.
              *   
              * \endinternal 
              *******************************************************************************/
              static void Bootloader_Copier(void) CYSMALL \
                         
              {
                  uint16 idx = 0u;
              
                  /* Number of attempts to perform copying again */
                  uint8 copierAttempts;
                  
                  /* "need-to-copy" flag from second application metadata */
                  uint8 copyFlag = Bootloader_GetMetadata(Bootloader_GET_BTLDB_COPY_FLAG, Bootloader_MD_BTLDB_ACTIVE_1);
              
                  /* Buffer to temporary hold metadata before flashing */
                  uint8 metaBuf[CYDEV_FLS_ROW_SIZE];
              
                  /* Launcher's last row number */
                  uint16 launcherLastRow = Bootloader_GetMetadata(Bootloader_GET_BTLDR_LAST_ROW, Bootloader_MD_BTLDB_ACT
             -IVE_0);
              
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 12  

                  /* Calculating destination's start row number (first row of app#1) */
                  uint16 dstRow = launcherLastRow + 1u;
                  
                  /* Calculating the source's/temporary location's start row number */
                  uint16 srcRow = ((((CY_FLASH_NUMBER_ROWS - dstRow - 2u) + 1u) >> 1u) + dstRow); 
                  
                  /* Taking length from app#2's metadata*/
                  uint32 srcLength = Bootloader_GetMetadata(Bootloader_GET_BTLDB_LENGTH, Bootloader_MD_BTLDB_ACTIVE_1);
              
                  /* Copy operation status initialization */
                  cystatus copyStatus = CYRET_SUCCESS;
                  
                  /* Calculating number of rows for copying */
                  uint16 numberOfRows = srcLength / CYDEV_FLS_ROW_SIZE;
                  
                  if (0u != (srcLength % CYDEV_FLS_ROW_SIZE))
                  {
                      numberOfRows++;
                  }
                      
                  /*************************************************************************
                  * Copying the number of rows from source (temporary location) to destination.
                  * If the operation is unsuccessful, there will be a few more attempts to
                  * perform the copying operation (a number is defined by Bootloader_MAX_ATTEMPTS)
                  ***************************************************************************/
                  for(idx = 0; idx < numberOfRows; idx++)
                  {
                      copierAttempts = Bootloader_MAX_ATTEMPTS;
                      
                      do 
                      {
                          /* Copying row */
                          copyStatus = Bootloader_CopyRow(srcRow + idx, dstRow + idx);
                          
                          /* Decrementing counter of attempts to repeat copying operation */
                          copierAttempts--;       
                      } while ((CYRET_SUCCESS != copyStatus) && (0u != copierAttempts));
              
                      
                      /*************************************************************************
                      * If a problem occurs, when a row can't be copied, "CopyFlag" should be
                      * cleared to prevent the recurrent copying that might follow the software reset.        
                      ***************************************************************************/
                      if (CYRET_SUCCESS != copyStatus)
                      {
                          /* Clear copy flag in metadata#1 */
                          Bootloader_SetFlashByte(Bootloader_MD_BTLDB_COPY_FLAG_OFFSET(Bootloader_MD_BTLDB_ACTIVE_1),
                                                       (copyFlag & (~Bootloader_NEED_TO_COPY_SET_BIT)));
                              
                          /* Callback macro definition */
                          #if (0u != LAUNCHER_COPIER_CALLBACK)
                              Bootloader_CopierCallback();
                          #endif /* 0u != LAUNCHER_COPIER_CALLBACK */ 
                          
                          /*************************************************************************
                          * If the copying operation was unsuccessful after certain number of attempts
                          * and Bootloader_CopierCallback() is either undefined or returns, then the
                          * device should be halted.
                          *************************************************************************/
                          CyHalt(0x00u);
                      }
                  }    
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 13  

                  
                  /* Copy metadata app#2 -> app#1*/
                  if (CYRET_SUCCESS == copyStatus)
                  {
                      /******************************************************************************
                      *                               Metadata#1 update             
                      ******************************************************************************/
                      /* Getting start address of metadata #2 */
                      uint32 metaStartAddr = Bootloader_MD_BASE_ADDR(Bootloader_MD_BTLDB_ACTIVE_1) + 
                                             Bootloader_MD_SIZEOF - CYDEV_FLS_ROW_SIZE; 
                      
                      /* Read all data from metadata #2 */
                      for (idx = 0u; idx < CYDEV_FLS_ROW_SIZE; idx++)
                      {
                          metaBuf[idx] = Bootloader_GET_CODE_BYTE(metaStartAddr + idx);
                      }
                      
                      /* Setting 'Copier available' flag (copyFlag field) in buffer to be stored in metadata#1 */
                      metaBuf[Bootloader_MD_BUFFER_START_OFFSET + Bootloader_MD_COPY_FLAG_BYTE_OFFSET] = Bootloader_COPI
             -ER_SUPPORT_SET_BIT;                
              
                      /* Set active app#1 */
                      Bootloader_activeApp = Bootloader_MD_BTLDB_ACTIVE_0;
                      
                      /* Setting app#1 as active application in buffer to be stored in metadata#1 */
                      metaBuf[Bootloader_MD_BUFFER_START_OFFSET + Bootloader_MD_ACTIVE_APP_BYTE_OFFSET] = 0x01u;      
              
                      /* Setting app#1 as valid for 'Fast validation' to be stored in metadata#1 */
                      metaBuf[Bootloader_MD_BUFFER_START_OFFSET + Bootloader_MD_FAST_VALID_BYTE_OFFSET] = 0x01u;      
              
                      /* Update metadata#1 in flash */
                      copyStatus = CySysFlashWriteRow((uint16) (CY_FLASH_NUMBER_ROWS - 1u), metaBuf);  
              
                      /******************************************************************************
                      *                               Metadata#2 update  
                      * Clear the whole buffer for metadata#2, which will make it invalid. 
                      * The 'Need-to-copy' flag will be cleared and app#2 will be set as non-active. 
                      *******************************************************************************/
                      (void) memset(&metaBuf, 0x00u, sizeof(metaBuf));
                      
                      /* Updating metadata#2 in flash */
                      copyStatus |= CySysFlashWriteRow((uint16) (CY_FLASH_NUMBER_ROWS - 2u), metaBuf);          
                  }
                  
                  if (CYRET_SUCCESS == copyStatus)
                  {
                      /* Schedule*/
                      Bootloader_SET_RUN_TYPE(Bootloader_SCHEDULE_BTLDB);
              
                      /* Software reset */
                      CySoftwareReset();
                  }
                  else
                  {
                      /* Halt device */
                      CyHalt(0x00u);
                  }
              }
              #endif /*(0u != Bootloader_COPIER_AVAIL) && (CY_PSOC4)*/
              #endif /*(CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LAUNCHER)*/
 786          
 787          
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 14  

 788          /*******************************************************************************
 789          * Function Name: Bootloader_Start
 790          ****************************************************************************//**
 791          * \brief
 792          *  This function is called to execute the following algorithm:
 793          *
 794          * -    Validate the Bootloadable application for the Classic Single-app Bootloader or 
 795          *   both Bootloadable/Combination applications for the Classic Dual-app Bootloader/
 796          *   Launch-only Bootloader (Launcher for short) respectively.
 797          *  
 798          * -    For the Classic Single-app Bootloader: if the Bootloadable application is valid, 
 799          *   then the flow switches to it after a software reset. Otherwise it stays in 
 800          *   the Bootloader, waiting for a command(s) from the host.
 801          * 
 802          * -    For the Classic Dual-app Bootloader: the flow acts according to the switching table 
 803          *  (see in the code below) and enabled/disabled options (for instance, auto-switching).
 804          *   NOTE If the valid Bootloadable application is identified, then the control is passed 
 805          *   to it after a software reset. Otherwise it stays in the Classic Dual-app Bootloader 
 806          *   waiting for a command(s) from the host.
 807          * 
 808          * -    For the Launcher: the flow acts according to the switching table (see below) and 
 809          *   enabled/disabled options. NOTE If the valid Combination application is identified, then 
 810          *   the control is passed to it after a software reset. Otherwise it stays in the Launcher 
 811          *   forever.
 812          * 
 813          * -    Validate the Bootloader/Launcher application(s) (design-time configurable, Bootloader 
 814          *   application validation option of the component customizer).
 815          * 
 816          * -    Run a communication subroutine (design-time configurable, the Wait for command 
 817          *   option of the component customizer). NOTE This is NOT applicable for the Launcher.
 818          *
 819          * -    Schedule the Bootloadable and reset the device.
 820          *
 821          *  \ref page_switching_logic
 822          *
 823          * \return
 824          *  This method will never return. It will either load a new application and
 825          *  reset the device or jump directly to the existing application. The CPU is
 826          *  halted, if the validation fails when the "Bootloader application validation" 
 827          *  option is enabled.
 828          *  PSoC 3/PSoC 5: The CPU is halted if flash initialization fails.
 829          *
 830          * \details
 831          *  If the "Bootloader application validation" option is enabled and this method
 832          *  determines that the Bootloader application itself is corrupt, this method
 833          *  will not return, instead it will simply hang the application.   
 834          *******************************************************************************/
 835          void Bootloader_Start(void) CYSMALL 
 836          {
 837   1      
 838   1      #if (CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)
 839   1      
 840   1          #if(0u != Bootloader_DUAL_APP_BOOTLOADER)
                      cystatus app0Status = CYRET_BAD_DATA;
                      cystatus app1Status = CYRET_BAD_DATA;  
                  #endif /*0u != Bootloader_DUAL_APP_BOOTLOADER*/
 844   1          
 845   1          cystatus validApp  = CYRET_BAD_DATA;
 846   1      
 847   1          #if(0u != Bootloader_BOOTLOADER_APP_VALIDATION)
 848   1              uint8 CYDATA calcedChecksum;
 849   1          #endif    /* (0u != Bootloader_BOOTLOADER_APP_VALIDATION) */
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 15  

 850   1      
 851   1          #if(!CY_PSOC4)
 852   1              #if(0u != Bootloader_FAST_APP_VALIDATION)
 853   1                  #if !defined(CY_BOOT_VERSION)
              
                              /* Not required starting from cy_boot 4.20 */
                              uint8 CYXDATA Bootloader_flashBuffer[Bootloader_FROW_SIZE];
              
                          #endif /* !defined(CY_BOOT_VERSION) */
 859   1              #endif  /* (0u != Bootloader_FAST_APP_VALIDATION) */
 860   1          #endif  /* (!CY_PSOC4) */
 861   1      
 862   1          #if (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LAUNCHER) 
                  #if ((0u != Bootloader_COPIER_AVAIL) && (CY_PSOC4))
                      /* Checking "need-to-copy" flag in metadata#1. If it is set, then copy operation is required*/    
             -        
                      uint8 needToCopyFlag = Bootloader_GetMetadata(Bootloader_GET_BTLDB_COPY_FLAG, 
                                                                      Bootloader_MD_BTLDB_ACTIVE_1);                    
             -                                
                      
                      /* Checking "Need to copy" flag in metadata#1 */
                      if (0u != (needToCopyFlag & Bootloader_NEED_TO_COPY_MASK))
                      {
                          /* Note that this function never returns */
                          Bootloader_Copier();
                      }
                  #endif  /* (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LAUNCHER) */
                  #endif  /* (0u != Bootloader_COPIER_AVAIL) && (CY_PSOC4)*/
 876   1              
 877   1          /* Identify active Bootloadable/Combination application */
 878   1          #if (0u != Bootloader_DUAL_APP_BOOTLOADER)
                      app0Status = Bootloader_ValidateBootloadable(Bootloader_MD_BTLDB_ACTIVE_0);
                      app1Status = Bootloader_ValidateBootloadable(Bootloader_MD_BTLDB_ACTIVE_1);  
              
                      /* Assumes no active Bootloadable application. Bootloader is active. */
                      Bootloader_activeApp = Bootloader_MD_BTLDB_ACTIVE_NONE;
              
                      /* Bootloadable app#1 is active */
                      if(Bootloader_GetMetadata(Bootloader_GET_BTLDB_ACTIVE, Bootloader_MD_BTLDB_ACTIVE_0) == \
                                                                                         Bootloader_MD_BTLDB_IS_ACTIVE)
                      {
                          /*********************************************************************************************
             -*************
                          * --------------------------------------------------------------------------------------------
             --------------
                          * |      |      app#1     |      app#2     |        Classic Dual-app       |     Launch-only B
             -ootloader   |
                          * | Case |---------------------------------|          Bootloader           |           (Launch
             -er)         |
                          * |      | Active | Valid | Active | Valid |                               |                  
             -            |
                          * |-------------------------------------------------------------------------------------------
             -------------|
                          * |  9   |    1   |   0   |   0    |   0   | Bootloader                    | Launcher         
             -            |
                          * |  10  |    1   |   0   |   0    |   1   | app#2, except if auto-app     | app#2            
             -            |
                          * |      |        |       |        |       | switching is disabled, then   |                  
             -            |
                          * |      |        |       |        |       | stay in Bootloader            |                  
             -            | 
                          * |  11  |    1   |   0   |   1    |   0   | Bootloader                    | Launcher         
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 16  

             -            |
                          * |  12  |    1   |   0   |   1    |   1   | app#2                         | app#2            
             -            |
                          * |  13  |    1   |   1   |   0    |   0   | app#1                         | app#1            
             -            |
                          * |  14  |    1   |   1   |   0    |   1   | app#1                         | app#1            
             -            |
                          * |  15  |    1   |   1   |   1    |   0   | app#1                         | app#1            
             -            |
                          * |  16  |    1   |   1   |   1    |   1   | app#1                         | app#1            
             -            |
                          * --------------------------------------------------------------------------------------------
             --------------
                          **********************************************************************************************
             -************/
                          if (CYRET_SUCCESS == app0Status)
                          {
                              /* Cases # 13,  14, 15, and 16 */
                              Bootloader_activeApp = Bootloader_MD_BTLDB_ACTIVE_0;
                              validApp = CYRET_SUCCESS;
                          }
                          else /*Bootloadable app#1 is not valid*/
                          {
                              #if (((1u == Bootloader_AUTO_SWITCHING_AVAIL) &&  \
                                    (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_MULTIAPPBOOTLOADER)) || \
                                    (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LAUNCHER)) 
                              if (CYRET_SUCCESS == app1Status )
                              {
                                  /* Cases # 10 and 12 */
                                  Bootloader_activeApp = Bootloader_MD_BTLDB_ACTIVE_1;
                                  validApp = CYRET_SUCCESS;
                              }
                              #endif /*((1u == Bootloader_AUTO_SWITCHING_AVAIL) && 
                                        (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_MULTIAPPBOOTLOADER)) || 
                                        (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LAUNCHER)*/
                          }
                      }
              
                      /*  Active Bootloadable application is not identified */
                      if(Bootloader_activeApp == Bootloader_MD_BTLDB_ACTIVE_NONE)
                      {
                          /*********************************************************************************************
             -*************
                          * --------------------------------------------------------------------------------------------
             --------------
                          * |      |       app#1    |       app#2    |        Classic Dual-app       |     Launch-only B
             -ootloader   |
                          * | Case |---------------------------------|          Bootloader           |           (Launch
             -er)         |
                          * |      | Active | Valid | Active | Valid |                               |                  
             -            |
                          * |------|------------------------------------------------------------------------------------
             -------------|
                          * |  1   |    0   |   0   |   0    |   0   | Bootloader                    | Launcher         
             -            |
                          * |  2   |    0   |   0   |   0    |   1   | Bootloader                    | app#2            
             -            |
                          * |  3   |    0   |   0   |   1    |   0   | Bootloader                    | Launcher         
             -            |
                          * |  4   |    0   |   0   |   1    |   1   | app#2                         | app#2            
             -            | 
                          * |  5   |    0   |   1   |   0    |   0   | Bootloader                    | app#1            
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 17  

             -            |
                          * |  6   |    0   |   1   |   0    |   1   | Bootloader                    | app#1            
             -            |
                          * |  7   |    0   |   1   |   1    |   0   | app#1, except if auto-app     | app#1            
             -            |
                          * |      |        |       |        |       | switching is disabled, then   |                  
             -            |
                          * |      |        |       |        |       | stay in Bootloader            |                  
             -            |  
                          * |  8   |    0   |   1   |   1    |   1   | app#2                         | app#2            
             -            |
                          * --------------------------------------------------------------------------------------------
             --------------
                          **********************************************************************************************
             -************/
                          if (Bootloader_GetMetadata(Bootloader_GET_BTLDB_ACTIVE, 1u) ==
                                  Bootloader_MD_BTLDB_IS_ACTIVE)
                          {
                              /* Cases # 3, 4, 7, and 8 */
                              if (CYRET_SUCCESS == app1Status)
                              {
                                  /* Cases # 4 and 8 */
                                  Bootloader_activeApp = Bootloader_MD_BTLDB_ACTIVE_1;
                                  validApp = CYRET_SUCCESS;
                              }
                              else
                              {
                               #if (((1u == Bootloader_AUTO_SWITCHING_AVAIL) && \
                                     (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_MULTIAPPBOOTLOADER)) \
                                  || (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LAUNCHER)) 
                                  if (CYRET_SUCCESS == app0Status)
                                  {
                                      /* Cases # 7 */
                                      Bootloader_activeApp = Bootloader_MD_BTLDB_ACTIVE_0;
                                      validApp = CYRET_SUCCESS;
                                  }
                                  #endif /*(((1u == Bootloader_AUTO_SWITCHING_AVAIL) && \
                                             (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_MULTIAPPBOOTLOADER)) \
                                          || (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LAUNCHER))*/
                              }
                          }
                      }
                      
                      #if (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LAUNCHER) 
                          /*None of applications is active*/
                          if (Bootloader_MD_BTLDB_ACTIVE_NONE ==Bootloader_activeApp)
                          {
                              /*case#5, case#6: pass control to Bootloadable app#1*/
                              if(CYRET_SUCCESS == app0Status)
                              {
                                  Bootloader_activeApp = Bootloader_MD_BTLDB_ACTIVE_0;
                                  validApp = CYRET_SUCCESS;
                              }
                              /*case#2: pass control to Bootloadable app#2*/
                              else if (CYRET_SUCCESS == app1Status)
                              {
                                  Bootloader_activeApp = Bootloader_MD_BTLDB_ACTIVE_1;
                                  validApp = CYRET_SUCCESS;
                              }
                              else
                              {
                                  /* case#1, case#3, case#9, case#11: very bad situation, no valid application */
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 18  

                                  /* Do nothing, stay in Bootloader/Launcher */
                              }
                          }
              
              
                           /*********************************************************************************
                          * The next logic is an invalidation of the non-active application in the metadata
                          * section, because there could be a situation due to some error, when both  
                          * applications are set active (cases #12,15,16). Only one application can be active.
                          * This logic also stores the active application number in the metadata section.         
                          *********************************************************************************/
                          if (CYRET_SUCCESS == validApp)
                          {
                              Bootloader_SetActiveAppInMetadata(Bootloader_activeApp);      
                          }
                      #endif /* CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LAUNCHER */
                  #else /*SINGLE_APP BOOTLOADER*/
1015   1              if (CYRET_SUCCESS == Bootloader_ValidateBootloadable(Bootloader_MD_BTLDB_ACTIVE_0))
1016   1              {
1017   2                  validApp = CYRET_SUCCESS;
1018   2              }
1019   1          #endif  /* (0u != Bootloader_DUAL_APP_BOOTLOADER) */
1020   1      
1021   1          
1022   1          /* Initialize flash subsystem for non-PSoC 4 devices */
1023   1          #if(!CY_PSOC4)
1024   1              #if(0u != Bootloader_FAST_APP_VALIDATION)
1025   1      
1026   1                  if (CYRET_SUCCESS != CySetTemp())
1027   1                  {
1028   2                      CyHalt(0x00u);
1029   2                  }
1030   1      
1031   1                  #if !defined(CY_BOOT_VERSION)
              
                              /* Not required with cy_boot 4.20 */
                              if (CYRET_SUCCESS != CySetFlashEEBuffer(Bootloader_flashBuffer))
                              {
                                  CyHalt(0x00u);
                              }
              
                          #endif /* !defined(CY_BOOT_VERSION) */
1040   1              #endif  /* (0u != Bootloader_FAST_APP_VALIDATION) */
1041   1          #endif  /* (CY_PSOC4) */
1042   1      
1043   1      
1044   1          /***********************************************************************
1045   1          * Bootloader Application Validation
1046   1          *
1047   1          * Halt the device if:
1048   1          *  - A calculated checksum does not match the one stored in the metadata
1049   1          *     section.
1050   1          *  - There is an invalid pointer to the place where the Bootloader
1051   1          *    application ends.
1052   1          *  - The flash subsystem was not initialized correctly.
1053   1          ***********************************************************************/
1054   1          #if(0u != Bootloader_BOOTLOADER_APP_VALIDATION)
1055   1      
1056   1              /* Calculate Bootloader application checksum */
1057   1              calcedChecksum = Bootloader_Calc8BitSum(CY_FLASH_BASE,
1058   1                      Bootloader_MD_BTLDR_ADDR_PTR,
1059   1                      *Bootloader_SizeBytesAccess - Bootloader_MD_BTLDR_ADDR_PTR);
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 19  

1060   1      
1061   1              /* We included checksum, so remove it */
1062   1              calcedChecksum -= *Bootloader_ChecksumAccess;
1063   1              calcedChecksum = ( uint8 )1u + ( uint8 )(~calcedChecksum);
1064   1      
1065   1              /* Checksum and pointer to Bootloader verification */
1066   1              if((calcedChecksum != *Bootloader_ChecksumAccess) ||
1067   1                 (0u == *Bootloader_SizeBytesAccess))
1068   1              {
1069   2                  /***********************************************************************
1070   2                  * If the Bootloader/Launcher application calculated checksum does not match
1071   2                  * the checksum stored in special Bootloader_Checksum constant 
1072   2                  * (accessed through Bootloader_ChecksumAccess) constant or its size 
1073   2                  * stored in Bootloader_SizeBytes constant (accessed through
1074   2                  * Bootloader_SizeBytesAccess) then CPU is halted, all software 
1075   2                  * processing stops. 
1076   2                  ***********************************************************************/
1077   2                  CyHalt(0x00u);
1078   2              }
1079   1      
1080   1          #endif /* 0u != Bootloader_BOOTLOADER_APP_VALIDATION */
1081   1      #endif /* CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER*/ 
1082   1      
1083   1      #if (CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LAUNCHER)    
1084   1          /***********************************************************************
1085   1          * If the active Bootloadable application is invalid or scheduled - do the following:
1086   1          *  - schedule the Bootloader application to be run after a software reset;
1087   1          *  - go to the communication subroutine. The HostLink() will wait for
1088   1          *    commands forever.
1089   1          ***********************************************************************/
1090   1          if ((Bootloader_GET_RUN_TYPE == Bootloader_SCHEDULE_BTLDR) 
1091   1      #if (CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)        
1092   1              || (CYRET_SUCCESS != validApp)
1093   1      #endif        
1094   1              )
1095   1          {
1096   2              Bootloader_SET_RUN_TYPE(Bootloader_SCHEDULE_BTLDR_INIT_STATE);
1097   2      
1098   2              Bootloader_HostLink(Bootloader_WAIT_FOR_COMMAND_FOREVER);
1099   2          }
1100   1      
1101   1          /* Go to communication subroutine. Will wait for commands for specified time */
1102   1          #if(0u != Bootloader_WAIT_FOR_COMMAND)
1103   1      
1104   1              /* Timeout is in 100s of milliseconds */
1105   1              Bootloader_HostLink(Bootloader_WAIT_FOR_COMMAND_TIME);
1106   1      
1107   1          #endif  /* (0u != Bootloader_WAIT_FOR_COMMAND) */
1108   1      #else /* Launcher */
                  /* If none Bootloadable application is valid */
                  if (CYRET_SUCCESS != validApp)
                  {   
                      CyHalt(0x00u);
                  }         
              #endif /*CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LAUNCHER*/    
1115   1      
1116   1      #if (CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)             
1117   1          /* Schedule Bootloadable application and perform software reset */
1118   1          Bootloader_LaunchApplication();
1119   1      #endif /*(CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)*/    
1120   1      }
1121          
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 20  

1122          #if (CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)
1123          /*******************************************************************************
1124          * Function Name: Bootloader_LaunchApplication
1125          ****************************************************************************//**
1126          * \internal
1127          *
1128          * \brief
1129          *  Schedules the Bootloadable application and resets the device.
1130          *
1131          * \return
1132          *  This method will never return.
1133          *
1134          * \endinternal
1135          *******************************************************************************/
1136          static void Bootloader_LaunchApplication(void) CYSMALL \
1137                              
1138          {
1139   1          /* Schedule Bootloadable to start after a reset */
1140   1          Bootloader_SET_RUN_TYPE(Bootloader_SCHEDULE_BTLDB);
1141   1      
1142   1          CySoftwareReset();
1143   1      }
1144          #endif /*(CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)*/
1145          
1146          /*******************************************************************************
1147          * Function Name: Bootloader_Exit
1148          ****************************************************************************//**
1149          *
1150          *\brief
1151          *  Schedules the specified application and performs a software reset to launch
1152          *  a specified application.
1153          *
1154          *  If the specified application is not valid, the Bootloader (the result of the
1155          *  ValidateBootloadable() function execution returns other than CYRET_SUCCESS,
1156          *  the Bootloader application is launched.
1157          *
1158          * \param appId 
1159          *   The application to be started:
1160          *   - Bootloader_EXIT_TO_BTLDR - The Bootloader application will be started on
1161          *                                     a software reset.
1162          *   - Bootloader_EXIT_TO_BTLDB;
1163          *   - Bootloader_EXIT_TO_BTLDB_1 - Bootloadable application # 1 will be
1164          *                                     started on a software reset.
1165          *   - Bootloader_EXIT_TO_BTLDB_2 - Bootloadable application # 2 will be
1166          *                                     started on a software reset. Available only
1167          *                                     if the "Dual-application" option is enabled in
1168          *                                     the component customizer.
1169          * \return
1170          *  This function never returns.
1171          *
1172          *******************************************************************************/
1173          void Bootloader_Exit(uint8 appId) CYSMALL 
1174          {
1175   1          if(Bootloader_EXIT_TO_BTLDR == appId)
1176   1          {
1177   2              Bootloader_SET_RUN_TYPE(Bootloader_SCHEDULE_BTLDR_INIT_STATE);
1178   2          }
1179   1          else
1180   1          {
1181   2              if(CYRET_SUCCESS == Bootloader_ValidateBootloadable(appId))
1182   2              {
1183   3                  /* Set active application in metadata */
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 21  

1184   3                  uint8 CYDATA idx;
1185   3                  for(idx = 0u; idx < Bootloader_MAX_NUM_OF_BTLDB; idx++)
1186   3                  {
1187   4                      Bootloader_SetFlashByte((uint32) Bootloader_MD_BTLDB_ACTIVE_OFFSET(idx),
1188   4                                                    (uint8 )(idx == appId));
1189   4                  }
1190   3      
1191   3              #if((0u != Bootloader_DUAL_APP_BOOTLOADER) || \
1192   3                  (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER))
                          Bootloader_activeApp = appId;
                      #endif /* (0u != Bootloader_DUAL_APP_BOOTLOADER) || 
                                (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER))*/
1196   3      
1197   3                  Bootloader_SET_RUN_TYPE(Bootloader_SCHEDULE_BTLDB);
1198   3              }
1199   2              else
1200   2              {
1201   3                  Bootloader_SET_RUN_TYPE(Bootloader_SCHEDULE_BTLDR_INIT_STATE);
1202   3              }
1203   2          }
1204   1      
1205   1          CySoftwareReset();
1206   1      }
1207          
1208          #if (CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)
1209          /*******************************************************************************
1210          * Function Name: CyBtldr_CheckLaunch
1211          ****************************************************************************//**
1212          * \internal
1213          *
1214          * \brief
1215          *  This routine checks if the Bootloader or Bootloadable application has to
1216          *  be run.  If the application has to be run, it will start executing.
1217          *  If the Bootloader has to be run, it will return, so the Bootloader can
1218          *  continue starting up.
1219          *
1220          * \return
1221          *  It will not return if it determines that the Bootloadable application should
1222          *  be run.
1223          *
1224          * \endinternal
1225          *******************************************************************************/
1226          void CyBtldr_CheckLaunch(void) CYSMALL 
1227          {
1228   1      
1229   1      #if(CY_PSOC4)
              
                  /*******************************************************************************
                  * Set cyBtldrRunType to zero in the case of a non-software reset. This means
                  * that the Bootloader application is scheduled - the initial clean state. The
                  * value of cyBtldrRunType is valid only in the case of a software reset.
                  *******************************************************************************/
                  if (0u == (Bootloader_RES_CAUSE_REG & Bootloader_RES_CAUSE_RESET_SOFT))
                  {
                      cyBtldrRunType = Bootloader_SCHEDULE_BTLDR_INIT_STATE;
                  }
              
              #endif /* (CY_PSOC4) */
1242   1      
1243   1      
1244   1          if (Bootloader_GET_RUN_TYPE == Bootloader_SCHEDULE_BTLDB)
1245   1          {
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 22  

1246   2      
1247   2      
1248   2          #if (CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LAUNCHER)
1249   2              /******************************************************************************* 
1250   2              * Classic Single-app or Dual-app Bootloader use cases.
1251   2              * The active application number is taken from Bootloader_activeApp not
1252   2              * to break backward compatibility.
1253   2              *******************************************************************************/
1254   2              uint8 activeApp = Bootloader_activeApp;
1255   2              
1256   2              
1257   2              /******************************************************************************* 
1258   2              * Classic Dual-app Bootloader with 2 Combination projects use case.
1259   2              * In this use case Classic Dual-app Bootloader is not the only one, who switches
1260   2              * between applications. So if there is no valid value for Bootloader_activeApp,
1261   2              * then we should additionally check the metadata if one of the Combination application
1262   2              * has set a value there.
1263   2              *******************************************************************************/ 
1264   2              #if (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_MULTIAPPBOOTLOADER)
                      if (activeApp >= Bootloader_MD_BTLDB_ACTIVE_NONE) 
                      {
                          activeApp = Bootloader_GetActiveAppFromMetadata();
                      }
                      #endif /*(CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_MULTIAPPBOOTLOADER)*/ 
1270   2          #else 
                      /* Launcher use case.  The active application number is taken from metadata. */
                      uint8 activeApp = Bootloader_GetActiveAppFromMetadata(); 
                  #endif /* (CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LAUNCHER) */
1274   2              
1275   2              Bootloader_SET_RUN_TYPE(Bootloader_SCHEDULE_BTLDR_INIT_STATE);
1276   2      
1277   2              /*******************************************************************************
1278   2              * Indicates that we have told ourselves to jump to the application because we have
1279   2              * already told ourselves to jump, we do not do any expensive verification of the
1280   2              * application. We just check to make sure that the value at CY_APP_ADDR_ADDRESS
1281   2              * is something other than 0 and active application is valid.
1282   2              *******************************************************************************/
1283   2              if ((0u != Bootloader_GetMetadata(Bootloader_GET_BTLDB_ADDR, activeApp)) 
1284   2          #if (CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_BOOTLOADER)
                          && (activeApp < Bootloader_MD_BTLDB_ACTIVE_NONE)
                  #endif /* (CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_BOOTLOADER) */        
1287   2                  )
1288   2              {
1289   3                  /* Never returns from this method */
1290   3                  Bootloader_LaunchBootloadable(Bootloader_GetMetadata(Bootloader_GET_BTLDB_ADDR,
1291   3                                                                                   activeApp));
1292   3              }
1293   2          }
1294   1      }
1295          
1296          
1297          /* Moves argument appAddr (RO) into PC, moving execution to appAddr */
1298          #if defined (__ARMCC_VERSION)
              
                  __asm static void Bootloader_LaunchBootloadable(uint32 appAddr)
                  {
                      BX  R0
                      ALIGN
                  }
              
              #elif defined(__GNUC__)
              
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 23  

                  __attribute__((noinline)) /* Workaround for GCC toolchain bug with inlining */
                  __attribute__((naked))
                  static void Bootloader_LaunchBootloadable(uint32 appAddr)
                  {
                      __asm volatile("    BX  R0\n");
                  }
              
              #elif defined (__ICCARM__)
              
                  static void Bootloader_LaunchBootloadable(uint32 appAddr)
                  {
                      __asm volatile("    BX  R0\n");
                  }
              
              #endif  /* (__ARMCC_VERSION) */
1323          #endif /* (CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)*/
1324          
1325          /*******************************************************************************
1326          * Function Name: Bootloader_ValidateBootloadable
1327          ****************************************************************************//**
1328          * \brief
1329          *  Performs the Bootloadable application validation by calculating the
1330          *  application image checksum and comparing it with the checksum value stored
1331          *  in the Bootloadable Application Checksum field of the metadata section.
1332          *
1333          *  If the "Fast bootloadable application validation" option is enabled in the
1334          *  component customizer and Bootloadable application successfully passes
1335          *  validation, the Bootloadable Application Verification Status field of the
1336          *  metadata section is updated. Refer to the "Metadata Layout" section for the
1337          *  details.
1338          *
1339          *  If the "Fast bootloadable application validation" option is enabled and
1340          *  the Bootloadable Application Verification Status field of the metadata section
1341          *  claims that the Bootloadable application is valid, the function returns
1342          *  CYRET_SUCCESS without further checksum calculation.
1343          *
1344          *  \param appId
1345          *  The number of the Bootloadable application should be 0 for the normal
1346          *  bootloader and 0 or 1 for the dual-application bootloader.
1347          *
1348          * \return
1349          *  CYRET_SUCCESS - If the specified the Bootloadable application is valid.
1350          *  CYRET_BAD_DATA is returned if the input parameter is out of the specified range
1351          *      or the calculated checksum does not match the stored checksum.
1352          *******************************************************************************/
1353          cystatus Bootloader_ValidateBootloadable(uint8 appId) CYSMALL \
1354          
1355              {
1356   1              uint32 CYDATA idx;
1357   1      
1358   1              uint32 CYDATA end   = Bootloader_FIRST_APP_BYTE(appId) +
1359   1                                    Bootloader_GetMetadata(Bootloader_GET_BTLDB_LENGTH, appId);
1360   1      
1361   1              CYBIT  valid = 0u; /* Assume bad flash image */
1362   1              uint8  CYDATA calcedChecksum = 0u;
1363   1      
1364   1      
1365   1              #if(0u != Bootloader_DUAL_APP_BOOTLOADER)
              
                          if(appId > 1u)
                          {
                              return(CYRET_BAD_DATA);
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 24  

                          }
              
                      #endif  /* (0u != Bootloader_DUAL_APP_BOOTLOADER) */
1373   1      
1374   1      
1375   1              #if(0u != Bootloader_FAST_APP_VALIDATION)
1376   1                  if(Bootloader_GetMetadata(Bootloader_GET_BTLDB_STATUS, appId) ==
1377   1                     Bootloader_MD_BTLDB_IS_VERIFIED)
1378   1                  {
1379   2                      return(CYRET_SUCCESS);
1380   2                  }
1381   1              #endif  /* (0u != Bootloader_FAST_APP_VALIDATION) */
1382   1      
1383   1      
1384   1              /* Calculate checksum of bootloadable image */
1385   1              for(idx = Bootloader_FIRST_APP_BYTE(appId); idx < end; ++idx)
1386   1              {
1387   2                  uint8 CYDATA curByte = Bootloader_GET_CODE_BYTE(idx);
1388   2      
1389   2                  if((curByte != 0u) && (curByte != 0xFFu))
1390   2                  {
1391   3                      valid = 1u;
1392   3                  }
1393   2      
1394   2                  calcedChecksum += curByte;
1395   2              }
1396   1      
1397   1      
1398   1              /***************************************************************************
1399   1              * We do not compute a checksum over the meta data section, so no need to
1400   1              * subtract App Verified or App Active information here like we do when
1401   1              * verifying a row.
1402   1              ***************************************************************************/
1403   1      
1404   1              #if((!CY_PSOC4) && (CYDEV_ECC_ENABLE == 0u))
1405   1      
1406   1                  /* Add ECC data to checksum */
1407   1                  idx = ((Bootloader_FIRST_APP_BYTE(appId)) >> 3u);
1408   1      
1409   1                  /* Flash may run into meta data, so ECC does not use full row */
1410   1                  end = (end == (CY_FLASH_SIZE - Bootloader_MD_SIZEOF))
1411   1                      ? (CY_FLASH_SIZE >> 3u)
1412   1                      : (end >> 3u);
1413   1      
1414   1                  for (; idx < end; ++idx)
1415   1                  {
1416   2                      calcedChecksum += CY_GET_XTND_REG8((volatile uint8 *)(CYDEV_ECC_BASE + idx));
1417   2                  }
1418   1      
1419   1              #endif  /* ((!CY_PSOC4) && (CYDEV_ECC_ENABLE == 0u)) */
1420   1      
1421   1              calcedChecksum = ( uint8 )1u + ( uint8 )(~calcedChecksum);
1422   1      
1423   1              if((calcedChecksum != Bootloader_GetMetadata(Bootloader_GET_BTLDB_CHECKSUM, appId)) ||
1424   1                 (0u == valid))
1425   1              {
1426   2                  return(CYRET_BAD_DATA);
1427   2              }
1428   1      
1429   1      
1430   1              #if(0u != Bootloader_FAST_APP_VALIDATION)
1431   1                  Bootloader_SetFlashByte((uint32) Bootloader_MD_BTLDB_VERIFIED_OFFSET(appId),
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 25  

1432   1                                                Bootloader_MD_BTLDB_IS_VERIFIED);
1433   1              #endif  /* (0u != Bootloader_FAST_APP_VALIDATION) */
1434   1      
1435   1      
1436   1              return(CYRET_SUCCESS);
1437   1      }
1438          
1439          #if (((0u != Bootloader_DUAL_APP_BOOTLOADER) && (CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LAUNCHER)) \
1440                                                    || (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER))
              /*******************************************************************************
              * Function Name: Bootloader_CheckImage
              ********************************************************************************
              * \internal
              *
              * \brief 
              *   This API checks if there is a permission to write to a certain image.
              *   It is used to check the active application as well as to check the Golden image.
              *
              * \param 
              *   appNumber - The application number.
              * \param 
              *   arrayNumber - The number of the flash page to write to.
              * \param 
              *   row - The row number to write to the flash.
              * \param 
              *   rowNumInArray - The row number inside the array.
              *
              * \return 
              *   CYRET_SUCCESS - Writing to a specified image is permitted.
              *   Bootloader_ERR_ACTIVE - Writing to this image is NOT permitted
              *   because the specified image is active or Golden.
              *
              * \endinternal
              *******************************************************************************/
              static uint8 Bootloader_CheckImage(uint8 appNumber, uint8 arrayNumber, uint16 row, uint16 rowNumInArray) C
             -YSMALL \
                                                       
              {
                  uint16 CYDATA firstRow = 0xFFFFu;
                  uint16 CYDATA lastRow = 0xFFFFu;
                  uint8 CYDATA ackCode = CYRET_SUCCESS;
              
                  if (appNumber < Bootloader_MAX_NUM_OF_BTLDB)
                  {    
                      /*******************************************************************************
                      * For the first Bootloadable application - gets the last flash row occupied by
                      * the Bootloader application image:
                      *  ---------------------------------------------------------------------------
                      * | Bootloader   | Bootloadable # 1 |     | Bootloadable # 2 |     | M2 | M1 |
                      *  ---------------------------------------------------------------------------
                      * |<--firstRow---|>
                      *
                      * For the second Bootloadable application - gets the last flash row occupied by
                      * the first Bootloadable application:
                      *  ---------------------------------------------------------------------------
                      * | Bootloader   | Bootloadable # 1 |     | Bootloadable # 2 |     | M2 | M1 |
                      *  ---------------------------------------------------------------------------
                      * |<-------------firstRow-----------------|>
                      *
                      * Incremented by 1 to get the first available row.
                      *
                      * NOTE M1 and M2 stand for metadata # 1 and metadata # 2, metadata 
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 26  

                      * sections for the 1st and 2nd Bootloadable applications.
                      *******************************************************************************/
                      firstRow = (uint16) 1u +
                          (uint16) Bootloader_GetMetadata(Bootloader_GET_BTLDR_LAST_ROW,  appNumber);
              
                  
                  /***********************************************************************************
                  * If this is the Upgradable Stack use case, then Stack application and User application
                  * do not occupy the half of flash each, as the other applications do for Classic Dual-app 
                  * and the general Launcher-Combination use cases. Another approach for calculation 
                  * lastRow is used for the Upgradable Stack use case. See Bootloader datasheet for more 
                  * details (use cases description).
                  ***********************************************************************************/
              
                  
                  #if ((CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER) && \
                       (0u != Bootloader_IS_STACK_APPLICATION))
                      /*******************************************************************************
                      * The Upgradable Stack application case implies that only this application can 
                      * perform a bootloading operation (the other one can't). So a verification 
                      * will be run to check if the Stack application is not overwritten. 
                      *
                      * The Stack application is defined as the first application.
                        * The User application is defined as the second application.
                      *
                      * This check is intended for the case when the Stack application is active
                      * and performs bootloading for the User application:
                      *  ---------------------------------------------------------------------------
                      * |   Launcher   |       Stack     |           User app            | M2 | M1 |
                      *  ---------------------------------------------------------------------------
                      *                |<-------------------lastRow -------------------->|
                      *******************************************************************************/
                      lastRow = (uint16) Bootloader_GetMetadata(Bootloader_GET_BTLDR_LAST_ROW,
                                                                      Bootloader_USER_APPLICATION);    
                  
                  #else /* Classic Dual-app and the general Launcher-Combination use cases */    
                      /*******************************************************************************
                      * The number of flash rows available for both Bootloadable applications:
                      *
                      * The first Bootloadable application is active:
                      *  ---------------------------------------------------------------------------
                      * | Bootloader   | Bootloadable # 1 |     | Bootloadable # 2 |     | M2 | M1 |
                      *  ---------------------------------------------------------------------------
                      *                |<-------------------lastRow -------------------->|
                      *
                      * The second Bootloadable application is active:
                      *  ---------------------------------------------------------------------------
                      * | Bootloader   | Bootloadable # 1 |     | Bootloadable # 2 |     | M2 | M1 |
                      *  ---------------------------------------------------------------------------
                      *                                         |<-------lastRow-------->|
                      *******************************************************************************/
                      lastRow = (uint16)(CY_FLASH_NUMBER_ROWS - Bootloader_NUMBER_OF_METADATA_ROWS - firstRow);
              
                      /*******************************************************************************
                      * The number of flash rows available for the active Bootloadable application:
                      *
                      * The first Bootloadable application is active: the number of flash rows available
                      * for both Bootloadable applications should be divided by 2, meaning 2 
                      * Bootloadable applications should fit there.
                      *
                      * The second Bootloadable application is active: the number of flash rows available
                      * for both Bootloadable applications should be divided by 1, meaning 1 
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 27  

                      * Bootloadable application should fit there.
                      *******************************************************************************/
                      lastRow = (uint16)(lastRow / (uint8)(Bootloader_NUMBER_OF_BTLDBLE_APPS - appNumber));
              
                      /*******************************************************************************
                      * The last row equals the first row plus the number of rows available for
                      * each Bootloadable application. That gives the flash row number right
                      * beyond the valid range, so we subtract 1.
                      *
                      * The first Bootloadable application is active:
                      *  ---------------------------------------------------------------------------
                      * | Bootloader   | Bootloadable # 1 |     | Bootloadable # 2 |     | M2 | M1 |
                      *  ---------------------------------------------------------------------------
                      * |<----------------lastRow ------------->|
                      *
                      * The second Bootloadable application is active:
                      *  ---------------------------------------------------------------------------
                      * | Bootloader   | Bootloadable # 1 |     | Bootloadable # 2 |     | M2 | M1 |
                      *  ---------------------------------------------------------------------------
                      * |<-----------------------------lastRow-------------------------->|
                      *******************************************************************************/
                      lastRow = (firstRow + lastRow) - 1u;
                  #endif /*(0u == Bootloader_IS_STACK_APPLICATION)*/    
              
                      /*******************************************************************************
                      * 1. Refuses to write a row within the range of the active application.
                      *
                      *  The first Bootloadable application is active:
                      *   ---------------------------------------------------------------------------
                      *  | Bootloader   | Bootloadable # 1 |     | Bootloadable # 2 |     | M2 | M1 |
                      *   ---------------------------------------------------------------------------
                      *  |<----------------lastRow ------------->|
                      *  |<--firstRow---|>
                      *                 |<-------protected------>|
                      *
                      *  the second Bootloadable application is active:
                      *   ---------------------------------------------------------------------------
                      *  | Bootloader   | Bootloadable # 1 |     | Bootloadable # 2 |     | M2 | M1 |
                      *   ---------------------------------------------------------------------------
                      *  |<-------------firstRow-----------------|>
                      *  |<-----------------------------lastRow-------------------------->|
                      *                                          |<-------protected------>|
                      *
                      * 2. Refuses to write to the row that contains metadata of the active
                      *    Bootloadable application.
                      *
                      *******************************************************************************/
                      if (((row >= firstRow) && (row <= lastRow)) || ((arrayNumber == Bootloader_MD_FLASH_ARRAY_NUM) && 
             -\
                          (rowNumInArray == Bootloader_MD_ROW_NUM(appNumber))))
                      {
                          ackCode = Bootloader_ERR_ACTIVE;
                      }
                  }
                  else /*(appNumber < Bootloader_MAX_NUM_OF_BTLDB)*/
                  {
                      ackCode = Bootloader_ERR_ACTIVE;
                  }
                  
                  return ackCode;
              }
              #endif  /* (0u != Bootloader_DUAL_APP_BOOTLOADER) || \
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 28  

                         (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER) */
1617          
1618          #if (CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LAUNCHER)
1619          /*******************************************************************************
1620          * Function Name: Bootloader_HostLink
1621          ****************************************************************************//**
1622          *
1623          * \brief
1624          *  Causes the Bootloader to attempt to read data being transmitted by the
1625          *  host application.  If data is sent from the host, this establishes the
1626          *  communication interface to process all requests.
1627          *
1628          * \param
1629          *  timeOut:
1630          *   The amount of time to listen for data before giving up. The timeout is
1631          *   measured in 10s of ms.  Use 0 for an infinite wait.
1632          * 
1633          * \details
1634          *  This function is public only for Launcher-Combination architecture. For 
1635          *  Classic Bootloader it is static, meaning private. 
1636          *******************************************************************************/
1637          #if (CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)
1638          static void Bootloader_HostLink(uint8 timeOut) CYLARGE 
1639                             
1640          #else
              void Bootloader_HostLink(uint8 timeOut) CYLARGE 
                                 
              #endif /*(CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)*/    
1644          {
1645   1          uint16    CYDATA numberRead;
1646   1          uint16    CYDATA rspSize;
1647   1          uint8     CYDATA ackCode;
1648   1          uint16    CYDATA pktChecksum;
1649   1          cystatus  CYDATA readStat;
1650   1          uint16    CYDATA pktSize    = 0u;
1651   1          uint8     CYDATA timeOutCnt = 10u;
1652   1      
1653   1          #if(0u != Bootloader_FAST_APP_VALIDATION)
1654   1              uint8 CYDATA clearedMetaData = 0u;
1655   1          #endif  /* (0u != Bootloader_FAST_APP_VALIDATION) */
1656   1      
1657   1      #if (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)
                  static  CYBIT communicationState = Bootloader_COMMUNICATION_STATE_IDLE; 
                  static uint16 CYDATA dataOffset = 0u; 
                  uint16  CYDATA btldrLastRow = 0xFFFFu;
                  uint8 needToCopyFlag = 0u;
                  uint32 app2StartAddress = Bootloader_GetMetadata(Bootloader_GET_BTLDB_ADDR, 
                                            Bootloader_MD_BTLDB_ACTIVE_1);
              #else
1665   1          CYBIT     communicationState = Bootloader_COMMUNICATION_STATE_IDLE;
1666   1          uint16 CYDATA dataOffset = 0u; 
1667   1      #endif /*CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER*/
1668   1      
1669   1          uint8     packetBuffer[Bootloader_SIZEOF_COMMAND_BUFFER];
1670   1          uint8     dataBuffer  [Bootloader_SIZEOF_COMMAND_BUFFER];
1671   1      
1672   1      
1673   1          #if(!CY_PSOC4)
1674   1              #if(0u == Bootloader_FAST_APP_VALIDATION)
                          #if !defined(CY_BOOT_VERSION)
              
                              /* Not required with cy_boot 4.20 */
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 29  

                              uint8 CYXDATA Bootloader_flashBuffer[Bootloader_FROW_SIZE];
              
                          #endif /* !defined(CY_BOOT_VERSION) */
                      #endif  /* (0u == Bootloader_FAST_APP_VALIDATION) */
1682   1          #endif  /* (CY_PSOC4) */
1683   1      
1684   1      
1685   1      
1686   1          #if(!CY_PSOC4)
1687   1              #if((0u == Bootloader_FAST_APP_VALIDATION) || \
1688   1                  (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER))
              
                          /* Initialize flash subsystem for non-PSoC 4 devices */
                          if (CYRET_SUCCESS != CySetTemp())
                          {
                              CyHalt(0x00u);
                          }
              
                      #endif  /* (0u == Bootloader_FAST_APP_VALIDATION) ||
                                 (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER) */
1698   1          #endif  /* (CY_PSOC4) */
1699   1      
1700   1          /* Initialize communications channel. */
1701   1          CyBtldrCommStart();
1702   1      
1703   1          /* Enable global interrupts */
1704   1          CyGlobalIntEnable;
1705   1      
1706   1          do
1707   1          {
1708   2              ackCode = CYRET_SUCCESS;
1709   2      
1710   2              do
1711   2              {
1712   3                  readStat = CyBtldrCommRead(packetBuffer,
1713   3                                              Bootloader_SIZEOF_COMMAND_BUFFER,
1714   3                                              &numberRead,
1715   3                                              (0u == timeOut) ? 0xFFu : timeOut);
1716   3                  if (0u != timeOut)
1717   3                  {
1718   4                      timeOutCnt--;
1719   4                  }
1720   3      
1721   3              } while ( (0u != timeOutCnt) && (readStat != CYRET_SUCCESS) );
1722   2      
1723   2      
1724   2              if( readStat != CYRET_SUCCESS )
1725   2              {
1726   3                  continue;
1727   3              }
1728   2      
1729   2              if((numberRead < Bootloader_MIN_PKT_SIZE) ||
1730   2                 (packetBuffer[Bootloader_SOP_ADDR] != Bootloader_SOP))
1731   2              {
1732   3                  ackCode = Bootloader_ERR_DATA;
1733   3              }
1734   2              else
1735   2              {
1736   3                  pktSize = ((uint16)((uint16)packetBuffer[Bootloader_SIZE_ADDR + 1u] << 8u)) |
1737   3                                     packetBuffer[Bootloader_SIZE_ADDR];
1738   3      
1739   3      
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 30  

1740   3                  /****************************************************************************************
1741   3                  * If the whole packet length exceeds the number of bytes that have been read by the communicat
             -ion 
1742   3                  * component or the size of the buffer that is reserved for the packet, then give an error. 
1743   3                  **************************************************************************************/
1744   3                  if (((pktSize + Bootloader_MIN_PKT_SIZE) > numberRead) || 
1745   3                      ((pktSize + Bootloader_MIN_PKT_SIZE) > Bootloader_SIZEOF_COMMAND_BUFFER)) 
1746   3                  {
1747   4                      ackCode = Bootloader_ERR_LENGTH;
1748   4                  }
1749   3                  else /* Packet length is OK*/
1750   3                  {
1751   4                      pktChecksum = ((uint16)((uint16)packetBuffer[Bootloader_CHK_ADDR(pktSize) + 1u] << 8u)) |
1752   4                                         packetBuffer[Bootloader_CHK_ADDR(pktSize)];
1753   4         
1754   4                      if (packetBuffer[Bootloader_EOP_ADDR(pktSize)] != Bootloader_EOP)
1755   4                      {
1756   5                          ackCode = Bootloader_ERR_DATA;
1757   5                      }
1758   4                      else if(pktChecksum != Bootloader_CalcPacketChecksum(packetBuffer,
1759   4                                                                              pktSize + Bootloader_DATA_ADDR))
1760   4                      {
1761   5                          ackCode = Bootloader_ERR_CHECKSUM;
1762   5                      }
1763   4                      else
1764   4                      {
1765   5                          /* Empty section */
1766   5                      }
1767   4                  }    
1768   3              }
1769   2      
1770   2              rspSize = Bootloader_RSP_SIZE_0;
1771   2              if(ackCode == CYRET_SUCCESS)
1772   2              {
1773   3                  uint8 CYDATA btldrData = packetBuffer[Bootloader_DATA_ADDR];
1774   3      
1775   3                  ackCode = Bootloader_ERR_DATA;
1776   3                  switch(packetBuffer[Bootloader_CMD_ADDR])
1777   3                  {
1778   4      
1779   4      
1780   4                  /***************************************************************************
1781   4                  *   Get metadata (0x3C)
1782   4                  ***************************************************************************/
1783   4                  #if(0u != Bootloader_CMD_GET_METADATA)
              
                              case Bootloader_COMMAND_GET_METADATA:
              
                                  if((Bootloader_COMMUNICATION_STATE_ACTIVE == communicationState) && (pktSize == 1u))
                                  {
                                      if (btldrData >= Bootloader_MAX_NUM_OF_BTLDB)
                                      {
                                          ackCode = Bootloader_ERR_APP;
                                      }
                                      else if(CYRET_SUCCESS == Bootloader_ValidateBootloadable(btldrData))
                                      {
                                          #if(CY_PSOC3)
                                              (void) memcpy(&packetBuffer[Bootloader_DATA_ADDR],
                                                          ((uint8  CYCODE *) (Bootloader_MD_BASE_ADDR(btldrData))),
                                                          Bootloader_GET_METADATA_RESPONSE_SIZE);
                                          #else
                                              (void) memcpy(&packetBuffer[Bootloader_DATA_ADDR],
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 31  

                                                          (uint8 *) Bootloader_MD_BASE_ADDR(btldrData),
                                                          Bootloader_GET_METADATA_RESPONSE_SIZE);
                                          #endif  /* (CY_PSOC3) */
              
                                          rspSize = Bootloader_RSP_SIZE_GET_METADATA;
                                          ackCode = CYRET_SUCCESS;
                                      }
                                      else
                                      {
                                          ackCode = Bootloader_ERR_APP;
                                      }
                                  }
                                  break;
              
                          #endif  /* (0u != Bootloader_CMD_GET_METADATA) */
1816   4      
1817   4      
1818   4                  /***************************************************************************
1819   4                  *   Verify application checksum (0x31)
1820   4                  ***************************************************************************/
1821   4              #if (0u != Bootloader_CMD_VERIFY_APP_CHKSUM_AVAIL)     
1822   4                  case Bootloader_COMMAND_CHECKSUM:
1823   4      
1824   4                      if((Bootloader_COMMUNICATION_STATE_ACTIVE == communicationState) && (pktSize == 0u))
1825   4                      {
1826   5                          packetBuffer[Bootloader_DATA_ADDR] =
1827   5                                  (uint8)(Bootloader_ValidateBootloadable(Bootloader_activeApp) == CYRET_SUCCESS
             -);
1828   5      
1829   5                          rspSize = Bootloader_RSP_SIZE_VERIFY_CHKSM;
1830   5                          ackCode = CYRET_SUCCESS;
1831   5                      }
1832   4                      break;
1833   4              #endif /* (0u != Bootloader_CMD_VERIFY_APP_CHKSUM_AVAIL) */
1834   4      
1835   4                  /*****************************************************************************
1836   4                  *   Verify row (0x45u)
1837   4                  ***************************************************************************/
1838   4              #if(0u != Bootloader_CMD_VERIFY_FLS_ROW_AVAIL)
                          case Bootloader_COMMAND_VERIFY_FLS_ROW:
              
                              /* Packet size is either 3 (data is already in buffer) or (3u + Bootloader_FROW_SIZE),
                               * then data is in packetBuffer[]*/
                              if ((Bootloader_COMMUNICATION_STATE_ACTIVE == communicationState) && ((3u == pktSize) || 
                                 ((3u + Bootloader_FROW_SIZE) == pktSize)))
                              {
                                  uint16 CYDATA rowNum = ((uint16)((uint16)packetBuffer[Bootloader_DATA_ADDR + 2u] << 8u
             -)) |
                                                                           packetBuffer[Bootloader_DATA_ADDR + 1u];
                                  
                                  uint32 CYDATA startAddr;
                                  uint16 upperRange = 0u;
                              #if (!CY_PSOC4)
                                  uint16 CYDATA rowSize; 
                              #endif /*(!CY_PSOC4)*/    
                                  
                                  ackCode = CYRET_SUCCESS;
                                  rspSize = Bootloader_RSP_SIZE_0;
                                      
                                  if (3u == pktSize)
                                  {
                                      /* Do nothing, data is already in dataBuffer[] */
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 32  

                                  }
                                  else 
                                  {
                                  #if (CY_PSOC3)
                                      /*Data is in packetBuffer[], needs to be copied to dataBuffer[]*/
                                      (void) memcpy(dataBuffer, &packetBuffer[Bootloader_DATA_ADDR + 3u],
                                                    (int16)pktSize - 3);
                                  #else              
                                      /*Data is in packetBuffer[], needs to be copied to dataBuffer[]*/
                                      (void) memcpy(dataBuffer, &packetBuffer[Bootloader_DATA_ADDR + 3u],
                                                    (uint32)pktSize - 3u);
                                  #endif /*CY_PSOC3)*/              
                                  }
                                      
                              #if (!CY_PSOC4) 
                                  if((btldrData >= Bootloader_FIRST_EE_ARRAYID) &&
                                     (btldrData <= Bootloader_LAST_EE_ARRAYID))
                                  {
                                      /* EEPROM */
                                      /* Both PSoC 3 and PSoC 5LP architecture have one EEPROM array. */
                                      startAddr = CY_EEPROM_BASE + ((uint32)rowNum * CYDEV_EEPROM_ROW_SIZE);
                                      rowSize = CYDEV_EEPROM_ROW_SIZE;
                                      upperRange = Bootloader_NUMBER_OF_ROWS_IN_EEPROM_ARRAY;    
                                  }
                                  else if (btldrData < CY_FLASH_NUMBER_ARRAYS)    
                                  {
                                      startAddr = CY_FLASH_BASE + ((uint32)btldrData * CYDEV_FLS_SECTOR_SIZE) +
                                                                   ((uint32)rowNum * CYDEV_FLS_ROW_SIZE);
                                      rowSize = CYDEV_FLS_ROW_SIZE;        
                                      upperRange = Bootloader_NUMBER_OF_ROWS_IN_ARRAY;                        
                                  }
                                  else
                                  {
                                      ackCode = Bootloader_ERR_ARRAY;
                                      break;                              
                                  }
              
                                  /*Checking if row number is within array address range*/
                                  ackCode = Bootloader_CHECK_ROW_NUMBER(rowNum, upperRange);
                                  
                                  if (CYRET_SUCCESS != ackCode)
                                  {
                                      break;
                                  }
                                  
                                  ackCode = Bootloader_VerifyRow(startAddr, dataBuffer, rowSize);
                                  
                                  /*******************************************************************************
                                  * If flash row check has completed successfully and ECC is disabled and there is 
                                  * data in the buffer for ECC row.
                                  *******************************************************************************/      
             -              
                                  #if (CYDEV_ECC_ENABLE == 0u)
                                      if ((CYRET_SUCCESS == ackCode) && (btldrData < CY_FLASH_NUMBER_ARRAYS) && (dataOff
             -set > rowSize))
                                      {
                                          startAddr = CYDEV_ECC_BASE + ((uint32)btldrData * (CYDEV_FLS_SECTOR_SIZE / 8u)
             -) +
                                                      ((uint32)rowNum * CYDEV_ECC_ROW_SIZE);
                                                              
                                          ackCode = Bootloader_VerifyRow(startAddr, &dataBuffer[rowSize], (uint16)CYDEV_
             -ECC_ROW_SIZE);                        
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 33  

                                      }
                                  #endif /*(CYDEV_ECC_ENABLE == 0u)*/
                                  
                              #else /*CY_PSOC4*/
                                  if (btldrData < CY_FLASH_NUMBER_ARRAYS)
                                  {
                                      startAddr = CY_FLASH_BASE + ((uint32)btldrData * CYDEV_FLS_SECTOR_SIZE)
                                                          + ((uint32)rowNum * CYDEV_FLS_ROW_SIZE);
              
                                      upperRange = Bootloader_NUMBER_OF_ROWS_IN_ARRAY;         
                                      
                                      /*Checking if row number is within array address range*/
                                      ackCode = Bootloader_CHECK_ROW_NUMBER(rowNum, upperRange);
                                  
                                      if (CYRET_SUCCESS != ackCode)
                                      {
                                          break;
                                      }
                                      
                                      ackCode = Bootloader_VerifyRow(startAddr, dataBuffer, (uint16)CYDEV_FLS_ROW_SIZE);
                                  }
                                  else
                                  {
                                      ackCode = Bootloader_ERR_ARRAY;
                                      break;                     
                                  }
                              #endif  /* (!CY_PSOC4) */
                              
                              } 
                              break;
                      #endif /*(0u != Bootloader_CMD_VERIFY_ROW_FLS_AVAIL)*/
1950   4      
1951   4                  /***************************************************************************
1952   4                  *   Get flash size (0x32)
1953   4                  ***************************************************************************/
1954   4                  #if(0u != Bootloader_CMD_GET_FLASH_SIZE_AVAIL)
1955   4      
1956   4                      case Bootloader_COMMAND_REPORT_SIZE:
1957   4      
1958   4                          /* btldrData - holds flash array ID sent by host */
1959   4                          if((Bootloader_COMMUNICATION_STATE_ACTIVE == communicationState) && (pktSize == 1u))
1960   4                          {
1961   5                              if(btldrData < CY_FLASH_NUMBER_ARRAYS)
1962   5                              {
1963   6                                  uint16 CYDATA startRow;
1964   6                                  uint8  CYDATA arrayIdBtlderEnds;
1965   6      
1966   6                                  /*****************************************************************************
             -**
1967   6                                  * - For the flash array where the Bootloader application ends, returns the fir
             -st
1968   6                                  *   full row after the Bootloader application.
1969   6                                  *
1970   6                                  * - For a fully occupied flash array, the number of rows in the array is retur
             -ned
1971   6                                  *   because there is no space for the Bootloadable application in this array.
1972   6                                  *
1973   6                                  * - For the arrays next to the occupied array, zero is returned.
1974   6                                  *   The Bootloadable application can be written from those arrays beginning.
1975   6                                  *
1976   6                                  *   If this is a Bootloader that is located in an application (Combination pro
             -ject type),
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 34  

1977   6                                  *   then we do not use the Bootloader_SizeBytes and Bootloader_SizeBytesAccess
             - 
1978   6                                  *   variables, instead we take the Launcher's last row from metadata.
1979   6                                  ******************************************************************************
             -*/
1980   6                              #if (CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER) 
1981   6                                  arrayIdBtlderEnds = (uint8) (*Bootloader_SizeBytesAccess / CY_FLASH_SIZEOF_ARR
             -AY);
1982   6      
1983   6                                  if (btldrData == arrayIdBtlderEnds)
1984   6                                  {
1985   7                                      startRow = (uint16) (*Bootloader_SizeBytesAccess / CY_FLASH_SIZEOF_ROW) %
1986   7                                                  Bootloader_NUMBER_OF_ROWS_IN_ARRAY;
1987   7                                  }
1988   6                              #else /*Combination project type*/   
                                          btldrLastRow = (uint16)(Bootloader_GetMetadata(Bootloader_GET_BTLDR_LAST_ROW, 
             -\
                                                                                              Bootloader_MD_BTLDB_ACTIVE
             -_0));
                                          arrayIdBtlderEnds = (uint8) (((uint32)btldrLastRow * CY_FLASH_SIZEOF_ROW) / (u
             -int32)CY_FLASH_SIZEOF_ARRAY); 
                                          if (btldrData == arrayIdBtlderEnds)
                                          {
                                              startRow = (uint16)((btldrLastRow) % Bootloader_NUMBER_OF_ROWS_IN_ARRAY);
                                          }
                                      #endif /*(CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)*/
1997   6                              
1998   6                                  else if (btldrData > arrayIdBtlderEnds)
1999   6                                  {
2000   7                                      startRow = Bootloader_FIRST_ROW_IN_ARRAY;
2001   7                                  }
2002   6                                  else /* (btldrData < ArrayIdBtlderEnds) */
2003   6                                  {
2004   7                                      startRow = Bootloader_NUMBER_OF_ROWS_IN_ARRAY;
2005   7                                  }
2006   6      
2007   6                                  packetBuffer[Bootloader_DATA_ADDR]      = LO8(startRow);
2008   6                                  packetBuffer[Bootloader_DATA_ADDR + 1u] = HI8(startRow);
2009   6      
2010   6                                  packetBuffer[Bootloader_DATA_ADDR + 2u] =
2011   6                                              LO8(Bootloader_NUMBER_OF_ROWS_IN_ARRAY - 1u);
2012   6      
2013   6                                  packetBuffer[Bootloader_DATA_ADDR + 3u] =
2014   6                                              HI8(Bootloader_NUMBER_OF_ROWS_IN_ARRAY - 1u);
2015   6      
2016   6                                  rspSize = Bootloader_RSP_SIZE_GET_FLASH_SIZE;
2017   6                                  ackCode = CYRET_SUCCESS;
2018   6                              }
2019   5      
2020   5                          }
2021   4                          break;
2022   4      
2023   4                  #endif  /* (0u != Bootloader_CMD_GET_FLASH_SIZE_AVAIL) */
2024   4      
2025   4      
2026   4                  /***************************************************************************
2027   4                  *   Get application status (0x33)
2028   4                  ***************************************************************************/
2029   4                  #if ((0u != Bootloader_DUAL_APP_BOOTLOADER) || (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEAND
             -BOOTLOADER))
              
                              #if(0u != Bootloader_CMD_GET_APP_STATUS_AVAIL)
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 35  

              
                                  case Bootloader_COMMAND_APP_STATUS:
              
                                      if((Bootloader_COMMUNICATION_STATE_ACTIVE == communicationState) && (1u == pktSize
             -))
                                      {
              
                                          packetBuffer[Bootloader_DATA_ADDR] =
                                              (uint8)Bootloader_ValidateBootloadable(btldrData);
              
                                          packetBuffer[Bootloader_DATA_ADDR + 1u] =
                                              (uint8) Bootloader_GetMetadata(Bootloader_GET_BTLDB_ACTIVE, btldrData);
              
                                          rspSize = Bootloader_RSP_SIZE_GET_APP_STATUS;
                                          ackCode = CYRET_SUCCESS;
                                      }
                                      break;
              
                              #endif  /* (0u != Bootloader_CMD_GET_APP_STATUS_AVAIL) */
              
                          #endif  /* (0u != Bootloader_DUAL_APP_BOOTLOADER || (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADAB
             -LEANDBOOTLOADER)) */
2052   4      
2053   4                  /***************************************************************************
2054   4                  *   Program / Erase row (0x39 / 0x34)
2055   4                  ***************************************************************************/
2056   4                  case Bootloader_COMMAND_PROGRAM:
2057   4      
2058   4                  /* btldrData variable holds Flash Array ID */
2059   4      
2060   4              #if (0u != Bootloader_CMD_ERASE_ROW_AVAIL)
2061   4      
2062   4                  case Bootloader_COMMAND_ERASE:
2063   4                      if (Bootloader_COMMAND_ERASE == packetBuffer[Bootloader_CMD_ADDR])
2064   4                      {
2065   5                          if ((Bootloader_COMMUNICATION_STATE_ACTIVE == communicationState) && (pktSize == 3u))
2066   5                          {
2067   6                              #if(!CY_PSOC4)
2068   6                                  if((btldrData >= Bootloader_FIRST_EE_ARRAYID) &&
2069   6                                     (btldrData <= Bootloader_LAST_EE_ARRAYID))
2070   6                                  {
2071   7                                      /* Size of EEPROM row */
2072   7                                      dataOffset = CY_EEPROM_SIZEOF_ROW;
2073   7                                  }
2074   6                                  else
2075   6                                  {
2076   7                                      /* Size of flash row (depends on ECC configuration) */
2077   7                                      dataOffset = Bootloader_FROW_SIZE;
2078   7                                  }
2079   6                              #else
                                          /* Size of flash row (no ECC available) */
                                          dataOffset = Bootloader_FROW_SIZE;
                                      #endif  /* (!CY_PSOC4) */
2083   6      
2084   6                              #if(CY_PSOC3)
2085   6                                  (void) memset(dataBuffer, (char8) 0, (int16) dataOffset);
2086   6                              #else
                                          (void) memset(dataBuffer, 0, (uint32) dataOffset);
                                      #endif  /* (CY_PSOC3) */
2089   6                          }
2090   5                          else
2091   5                          {
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 36  

2092   6                              break;
2093   6                          }
2094   5                      }
2095   4      
2096   4              #endif  /* (0u != Bootloader_CMD_ERASE_ROW_AVAIL) */
2097   4      
2098   4      
2099   4                      if((Bootloader_COMMUNICATION_STATE_ACTIVE == communicationState) && (pktSize >= 3u))
2100   4                      {
2101   5                          uint16 upperRange;
2102   5      
2103   5                          /* Command may be sent along with last block of data, to program row. */
2104   5                          #if(CY_PSOC3)
2105   5                              (void) memcpy(&dataBuffer[dataOffset],
2106   5                                            &packetBuffer[Bootloader_DATA_ADDR + 3u],
2107   5                                            (int16) pktSize - 3);
2108   5                          #else
                                      (void) memcpy(&dataBuffer[dataOffset],
                                                    &packetBuffer[Bootloader_DATA_ADDR + 3u],
                                                    (uint32) pktSize - 3u);
                                  #endif  /* (CY_PSOC3) */
2113   5      
2114   5                          dataOffset += (pktSize - 3u);
2115   5      
2116   5                          #if(!CY_PSOC4)
2117   5                              if((btldrData >= Bootloader_FIRST_EE_ARRAYID) &&
2118   5                                 (btldrData <= Bootloader_LAST_EE_ARRAYID))
2119   5                              {
2120   6                                  CyEEPROM_Start();
2121   6      
2122   6                                  /* Size of EEPROM row */
2123   6                                  pktSize = CY_EEPROM_SIZEOF_ROW;                            
2124   6                                  upperRange = Bootloader_NUMBER_OF_ROWS_IN_EEPROM_ARRAY;
2125   6                              }
2126   5                              else
2127   5                              {
2128   6                                  /* Size of flash row (depends on ECC configuration) */
2129   6                                  pktSize = Bootloader_FROW_SIZE;                            
2130   6                                  upperRange = Bootloader_NUMBER_OF_ROWS_IN_ARRAY;
2131   6                              }
2132   5                          #else
                                      /* Size of flash row (no ECC available) */
                                      pktSize = Bootloader_FROW_SIZE;                            
                                      upperRange = Bootloader_NUMBER_OF_ROWS_IN_ARRAY;
                                  #endif  /* (!CY_PSOC4) */
2137   5      
2138   5                          /* Check if we have all data to program */
2139   5                          if(dataOffset == pktSize)
2140   5                          {
2141   6                              uint16 row;
2142   6                              uint16 firstRow;    
2143   6                          #if ((0u != Bootloader_DUAL_APP_BOOTLOADER) && \
2144   6                                (1u == Bootloader_GOLDEN_IMAGE_AVAIL))
                                      cystatus goldenImageValid;
                                  #endif /*(((0u != Bootloader_DUAL_APP_BOOTLOADER) &&
                                             (1u == Bootloader_GOLDEN_IMAGE_AVAIL))*/
2148   6      
2149   6                              /* Get flash/EEPROM row number inside array */
2150   6                              dataOffset = ((uint16)((uint16)packetBuffer[Bootloader_DATA_ADDR + 2u] << 8u)) |
2151   6                                                    packetBuffer[Bootloader_DATA_ADDR + 1u];
2152   6      
2153   6                              /*Checking if row number is within array address range*/
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 37  

2154   6                              ackCode = Bootloader_CHECK_ROW_NUMBER(dataOffset, upperRange);
2155   6                          
2156   6                              if (CYRET_SUCCESS != ackCode)
2157   6                              {
2158   7                                  break;
2159   7                              }
2160   6                              
2161   6                              /* Metadata section resides in flash (cannot be in EEPROM). */
2162   6                              #if(!CY_PSOC4)
2163   6                                  if(btldrData <= Bootloader_LAST_FLASH_ARRAYID)
2164   6                                  {
2165   7                              #endif  /* (!CY_PSOC4) */
2166   7                      
2167   7                              /* btldrData  - holds flash array Id sent by host */
2168   7                              /* dataOffset - holds flash row Id sent by host   */
2169   7                              row = (uint16)(btldrData * Bootloader_NUMBER_OF_ROWS_IN_ARRAY) + dataOffset;
2170   7                      
2171   7                              /*******************************************************************************
2172   7                              * Refuse to write to the row within range of the bootloader application
2173   7                              *******************************************************************************/
2174   7      
2175   7                              /* First empty flash row after Bootloader application */
2176   7                              #if (CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)    
2177   7                                  firstRow = (uint16) (*Bootloader_SizeBytesAccess / CYDEV_FLS_ROW_SIZE);
2178   7                                  if ((*Bootloader_SizeBytesAccess % CYDEV_FLS_ROW_SIZE) != 0u)
2179   7                                  {
2180   8                                      firstRow++;
2181   8                                  }
2182   7                              #else /*Combination project type*/                       
                                          
                                          if (Bootloader_RUNNING_APPLICATION_0 == Bootloader_runningApp) 
                                          {
                                              btldrLastRow = (uint16)Bootloader_GetMetadata(Bootloader_GET_BTLDR_LAST_RO
             -W, 
                                                                                          Bootloader_MD_BTLDB_ACTIVE_1);
             -                            
                                          }    
                                          else /*(Bootloader_RUNNING_APPLICATION_1 == Bootloader_runningApp)*/
                                          {
                                              btldrLastRow = (uint16)Bootloader_GetMetadata(Bootloader_GET_BTLDR_LAST_RO
             -W,
                                                                                          Bootloader_MD_BTLDB_ACTIVE_0);
                                          }
                                                              
                                          firstRow = (uint16)(btldrLastRow + 1u); 
                                      #endif /*(CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)*/             
             -        
2197   7      
2198   7                                  /* Check to see if a row to be programmed will not corrupt the Bootloader appl
             -ication */
2199   7                                  if(row < firstRow)
2200   7                                  {
2201   8                                      ackCode = Bootloader_ERR_ROW;
2202   8                                      dataOffset = 0u;
2203   8                                      break;
2204   8                                  }
2205   7                              
2206   7                              #if ((0u != Bootloader_DUAL_APP_BOOTLOADER) || \
2207   7                                   (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER))
                                          
                                          /*****************************************************************************
             -*******
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 38  

                                          * No check is required in case when there is no app#1 present in Upgradable St
             -ack
                                          * use case (no user application downloaded yet).                        
                                          ******************************************************************************
             -******/
                                          #if (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)
                                          if (0u != app2StartAddress) 
                                          {
                                          #endif /*(CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)*/
                                          
                                              if(Bootloader_activeApp < Bootloader_MD_BTLDB_ACTIVE_NONE)    
                                              {
                                                  /* Refuse to write to active image */
                                                  ackCode = Bootloader_CheckImage(Bootloader_activeApp, 
                                                                                     btldrData, /*array number*/
                                                                                     row,  /*row number*/
                                                                                     dataOffset); /*row number in scope 
             -of array*/
                                              
                                                  if (Bootloader_ERR_ACTIVE == ackCode)
                                                  {
                                                      dataOffset = 0u;
                                                      break;                                
                                                  }
                                              }
                                          #if (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)
                                          }
                                          #endif /*(CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)*/
              
                                          /*This option is available for classic Dual-app bootloader only*/
                                          #if ((0u != Bootloader_DUAL_APP_BOOTLOADER) && \
                                               (1u == Bootloader_GOLDEN_IMAGE_AVAIL))
                                          /* Check if this is an attempt to overwrite Golden image */
                                          ackCode = Bootloader_CheckImage(Bootloader_GOLDEN_IMAGE, 
                                                                                btldrData, /*array number*/
                                                                                row, /*row number*/
                                                                                dataOffset); /*row number in scope of ar
             -ray*/
                                          
                                          
                                          /************************************************************************
                                          * If an image to write is intended to update the Golden image and Golden image
                                          * itself is valid, then give an error that it is active/Golden, otherwise 
                                          * (invalid Golden image) let the Golden image to be overwritten.
                                          *************************************************************************/
                                          goldenImageValid = Bootloader_ValidateBootloadable(Bootloader_GOLDEN_IMAGE);  
             -                        
                                          if ((Bootloader_ERR_ACTIVE == ackCode) && (CYRET_SUCCESS == goldenImageValid))
                                          {
                                              dataOffset = 0u;
                                              break;                                
                                          }
                                          else /* It is OK to overwrite corrupted Golden image */
                                          {
                                              ackCode = CYRET_SUCCESS;
                                          }
                                          #endif /*((0u != Bootloader_DUAL_APP_BOOTLOADER) &&
                                                    (1u == Bootloader_GOLDEN_IMAGE_AVAIL)) */
                                      #endif /*(0u != Bootloader_DUAL_APP_BOOTLOADER) ||
                                               (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)*/    
2265   7        
2266   7      
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 39  

2267   7                              /*******************************************************************************
2268   7                              * Clear a row that contains metadata, when the "Fast bootloadable application
2269   7                              * validation" option is enabled.
2270   7                              *
2271   7                              * If the "Fast bootloadable application validation" option is enabled, the
2272   7                              * bootloader only computes the checksum the first time and assumes that it
2273   7                              * remains valid in each future startup. The metadata row is cleared because the
2274   7                              * Bootloadable application might become corrupted during update, while
2275   7                              * the "Bootloadable Application Verification Status" field will still report that
2276   7                              * the application is valid.
2277   7                              *******************************************************************************/
2278   7                              #if(0u != Bootloader_FAST_APP_VALIDATION)
2279   7      
2280   7                                  if(0u == clearedMetaData)
2281   7                                  {
2282   8                                      /* Metadata section must be filled with zeros */
2283   8      
2284   8                                      uint8 erase[Bootloader_FROW_SIZE];
2285   8                                      uint8 Bootloader_notActiveApp;
2286   8      
2287   8      
2288   8                                      #if(CY_PSOC3)
2289   8                                          (void) memset(erase, (char8) 0, (int16) Bootloader_FROW_SIZE);
2290   8                                      #else
                                                  (void) memset(erase, 0, Bootloader_FROW_SIZE);
                                              #endif  /* (CY_PSOC3) */
2293   8      
2294   8      
2295   8                                      #if ((0u != Bootloader_DUAL_APP_BOOTLOADER) || \
2296   8                                           (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER))
                                                  if (Bootloader_MD_BTLDB_ACTIVE_0 == Bootloader_activeApp)
                                                  {
                                                      Bootloader_notActiveApp = Bootloader_MD_BTLDB_ACTIVE_1;
                                                  }
                                                  else
                                                  {
                                                      Bootloader_notActiveApp = Bootloader_MD_BTLDB_ACTIVE_0;
                                                  }
                                              #else
2306   8                                          Bootloader_notActiveApp = Bootloader_MD_BTLDB_ACTIVE_0;
2307   8                                      #endif /* (0u != Bootloader_DUAL_APP_BOOTLOADER) */
2308   8      
2309   8      
2310   8                                      #if(CY_PSOC4)
                                                  (void) CySysFlashWriteRow(
                                                          Bootloader_MD_ROW_NUM(Bootloader_notActiveApp),
                                                          erase);
                                              #else
2315   8                                          (void) CyWriteRowFull(
2316   8                                                  (uint8)  Bootloader_MD_FLASH_ARRAY_NUM,
2317   8                                                  (uint16) Bootloader_MD_ROW_NUM(Bootloader_notActiveApp),
2318   8                                                  erase,
2319   8                                                  Bootloader_FROW_SIZE);
2320   8                                      #endif  /* (CY_PSOC4) */
2321   8      
2322   8                                      /* PSoC 5: Do not care about flushing cache as flash row has been erased. 
             -*/
2323   8      
2324   8                                      /* Set up flag that metadata was cleared */
2325   8                                      clearedMetaData = 1u;
2326   8                                  }
2327   7      
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 40  

2328   7                              #endif  /* (0u != Bootloader_FAST_APP_VALIDATION) */
2329   7      
2330   7      
2331   7                              #if(!CY_PSOC4)
2332   7                                  }   /* (btldrData <= Bootloader_LAST_FLASH_ARRAYID) */
2333   6                              #endif  /* (!CY_PSOC4) */
2334   6      
2335   6      
2336   6                              #if(CY_PSOC4)
                                          ackCode = (CYRET_SUCCESS != CySysFlashWriteRow((uint32) row, dataBuffer)) \
                                              ? Bootloader_ERR_ROW \
                                              : CYRET_SUCCESS;
                                      #else
2341   6                                  ackCode = (CYRET_SUCCESS != CyWriteRowFull(btldrData, dataOffset, dataBuffer, 
             -pktSize)) \
2342   6                                      ? Bootloader_ERR_ROW \
2343   6                                      : CYRET_SUCCESS;
2344   6                              #endif  /* (CY_PSOC4) */
2345   6      
2346   6      
2347   6                              #if(CY_PSOC5)
                                          /***************************************************************************
                                          * When writing to flash, data in the instruction cache can become stale.
                                          * Therefore, the cache data does not correlate to the data just written to
                                          * flash. A call to CyFlushCache() is required to invalidate the data in the
                                          * cache and force fresh information to be loaded from flash.
                                          ***************************************************************************/
                                          CyFlushCache();
                                      #endif /* (CY_PSOC5) */
2356   6      
2357   6                          }
2358   5                          else
2359   5                          {
2360   6                              ackCode = Bootloader_ERR_LENGTH;
2361   6                          }
2362   5      
2363   5                          dataOffset = 0u;
2364   5                      }
2365   4                      break;
2366   4      
2367   4      
2368   4                  /***************************************************************************
2369   4                  *   Sync bootloader (0x35)
2370   4                  ***************************************************************************/
2371   4                  #if(0u != Bootloader_CMD_SYNC_BOOTLOADER_AVAIL)
2372   4      
2373   4                  case Bootloader_COMMAND_SYNC:
2374   4      
2375   4                      if(Bootloader_COMMUNICATION_STATE_ACTIVE == communicationState)
2376   4                      {
2377   5                          /* If something failed, Host would send this command to reset Bootloader. */
2378   5                          dataOffset = 0u;
2379   5      
2380   5                          /* Don't acknowledge the packet, just get ready to accept the next one */
2381   5                          continue;
2382   5                      }
2383   4                      break;
2384   4      
2385   4                  #endif  /* (0u != Bootloader_CMD_SYNC_BOOTLOADER_AVAIL) */
2386   4      
2387   4      
2388   4                  /***************************************************************************
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 41  

2389   4                  *   Set an active application (0x36)
2390   4                  ***************************************************************************/
2391   4                  #if ((0u != Bootloader_DUAL_APP_BOOTLOADER) || \
2392   4                       (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER))    
              
                              case Bootloader_COMMAND_APP_ACTIVE:
              
                                  if((Bootloader_COMMUNICATION_STATE_ACTIVE == communicationState) && (pktSize == 1u))
                                  {
                                      if(CYRET_SUCCESS == Bootloader_ValidateBootloadable(btldrData))
                                      {
                                          Bootloader_SetActiveAppInMetadata(btldrData);
                                          Bootloader_activeApp = btldrData;
                                          ackCode = CYRET_SUCCESS;
                                      }
                                      else
                                      {
                                          ackCode = Bootloader_ERR_APP;
                                      }
                                  }
                                  break;
              
                          #endif  /* (0u != Bootloader_DUAL_APP_BOOTLOADER) || 
                                     (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER) */
2413   4      
2414   4      
2415   4                  /***************************************************************************
2416   4                  *   Send data (0x37)
2417   4                  ***************************************************************************/
2418   4                  #if (0u != Bootloader_CMD_SEND_DATA_AVAIL)
2419   4      
2420   4                      case Bootloader_COMMAND_DATA:
2421   4      
2422   4                          if(Bootloader_COMMUNICATION_STATE_ACTIVE == communicationState)
2423   4                          {
2424   5                              /*  Make sure that dataOffset is valid before copying data */
2425   5                              if((dataOffset + pktSize) <= Bootloader_SIZEOF_COMMAND_BUFFER)
2426   5                              {
2427   6                                  ackCode = CYRET_SUCCESS;
2428   6      
2429   6                                  #if(CY_PSOC3)
2430   6                                      (void) memcpy(&dataBuffer[dataOffset],
2431   6                                                    &packetBuffer[Bootloader_DATA_ADDR],
2432   6                                                    ( int16 )pktSize);
2433   6                                  #else
                                              (void) memcpy(&dataBuffer[dataOffset],
                                                            &packetBuffer[Bootloader_DATA_ADDR],
                                                            (uint32) pktSize);
                                          #endif  /* (CY_PSOC3) */
2438   6      
2439   6                                  dataOffset += pktSize;
2440   6                              }
2441   5                              else
2442   5                              {
2443   6                                  ackCode = Bootloader_ERR_LENGTH;
2444   6                              }
2445   5                          }
2446   4      
2447   4                          break;
2448   4      
2449   4                  #endif  /* (0u != Bootloader_CMD_SEND_DATA_AVAIL) */
2450   4      
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 42  

2451   4      
2452   4                  /***************************************************************************
2453   4                  *   Enter bootloader (0x38)
2454   4                  ***************************************************************************/
2455   4                  case Bootloader_COMMAND_ENTER:
2456   4      
2457   4              #if (Bootloader_SECURITY_KEY_AVAIL == 1u)    
                          if(pktSize == 6u) /*Security key*/
                      #else    
2460   4                  if(pktSize == 0u) /*Security key is not demanded*/
2461   4              #endif /*(Bootloader_SECURITY_KEY_AVAIL == 1u)*/   
2462   4                      {
2463   5                          #if(CY_PSOC3)
2464   5      
2465   5                              Bootloader_ENTER CYDATA BtldrVersion =
2466   5                                  {CYSWAP_ENDIAN32(CYDEV_CHIP_JTAG_ID), CYDEV_CHIP_REV_EXPECT, Bootloader_VERSIO
             -N};
2467   5      
2468   5                          #else
              
                                      Bootloader_ENTER CYDATA BtldrVersion =
                                          {CYDEV_CHIP_JTAG_ID, CYDEV_CHIP_REV_EXPECT, Bootloader_VERSION};
                          #endif  /* (CY_PSOC3) */
2473   5      
2474   5                  #if (Bootloader_SECURITY_KEY_AVAIL == 1u)
                              
                              /*Security key checking*/
                              uint8 idx = Bootloader_SECURITY_KEY_LENGTH;
                              ackCode = CYRET_SUCCESS;
                              
                              do
                              {
                                  idx--;                     
                                  if (Bootloader_securityKey[idx] != packetBuffer[Bootloader_DATA_ADDR + idx])
                                  {
                                      ackCode = Bootloader_ERR_DATA;
                                      break;
                                  }
                                  
                              } while(0u != idx);
                              
                              if (Bootloader_ERR_DATA == ackCode)
                              {
                                  break;
                              }
                          #endif /*(Bootloader_SECURITY_KEY_AVAIL == 1u)*/
2496   5                      
2497   5                      #if (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER) 
                                  Bootloader_isBootloading = Bootloader_BOOTLOADING_IN_PROGRESS;
                              #endif /*(CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)*/    
2500   5                      
2501   5                          communicationState = Bootloader_COMMUNICATION_STATE_ACTIVE;
2502   5      
2503   5                          rspSize = sizeof(Bootloader_ENTER);
2504   5                          dataOffset = 0u; 
2505   5                          
2506   5                          #if(CY_PSOC3)
2507   5                              (void) memcpy(&packetBuffer[Bootloader_DATA_ADDR],
2508   5                                            &BtldrVersion,
2509   5                                            ( int16 )rspSize);
2510   5                          #else
                                      (void) memcpy(&packetBuffer[Bootloader_DATA_ADDR],
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 43  

                                                    &BtldrVersion,
                                                    (uint32) rspSize);
                                  #endif  /* (CY_PSOC3) */
2515   5      
2516   5                          ackCode = CYRET_SUCCESS;
2517   5                      }
2518   4                      else /* Packet length does not match*/
2519   4                      {
2520   5                          ackCode = Bootloader_ERR_DATA;
2521   5                      }
2522   4                      break;
2523   4      
2524   4      
2525   4                  /***************************************************************************
2526   4                  *   Get row checksum (0x3A)
2527   4                  ***************************************************************************/
2528   4                  #if (0u != Bootloader_CMD_GET_ROW_CHKSUM_AVAIL)
2529   4      
2530   4                  case Bootloader_COMMAND_GET_ROW_CHKSUM:
2531   4      
2532   4                      if((Bootloader_COMMUNICATION_STATE_ACTIVE == communicationState) && (pktSize == 3u))
2533   4                      {
2534   5                          /* Get flash/EEPROM row number */
2535   5                          uint16 CYDATA rowNum = ((uint16)((uint16)packetBuffer[Bootloader_DATA_ADDR + 2u] << 8u
             -)) |
2536   5                                                          packetBuffer[Bootloader_DATA_ADDR + 1u];
2537   5                          
2538   5                          uint16 CYDATA tmpRowNum; 
2539   5                          #if(!CY_PSOC4)
2540   5      
2541   5                              uint32 CYDATA rowAddr;
2542   5                              uint8 CYDATA checksum;
2543   5      
2544   5                              if((btldrData >= Bootloader_FIRST_EE_ARRAYID) &&
2545   5                                 (btldrData <= Bootloader_LAST_EE_ARRAYID))
2546   5                              {
2547   6                                  /* EEPROM */
2548   6                                  /* Both PSoC 3 and PSoC 5LP architecture have one EEPROM array. */
2549   6                                  rowAddr = (uint32)rowNum * CYDEV_EEPROM_ROW_SIZE;
2550   6                                  
2551   6                                  /* Checking if row number is within array address range */
2552   6                                  ackCode = Bootloader_CHECK_ROW_NUMBER(rowNum, 
2553   6                                                             Bootloader_NUMBER_OF_ROWS_IN_EEPROM_ARRAY);
2554   6                          
2555   6                                  if (CYRET_SUCCESS != ackCode)
2556   6                                  {
2557   7                                      break;
2558   7                                  }
2559   6      
2560   6                                  checksum = Bootloader_Calc8BitSum(CY_EEPROM_BASE, rowAddr, CYDEV_EEPROM_ROW_SI
             -ZE);
2561   6                              }
2562   5                              else
2563   5                              {
2564   6                                  /* flash */ 
2565   6                                  rowAddr = ((uint32)btldrData * CYDEV_FLS_SECTOR_SIZE)
2566   6                                             + ((uint32)rowNum * CYDEV_FLS_ROW_SIZE);
2567   6      
2568   6                                  /* Checking if row number is within array address range */
2569   6                                  ackCode = Bootloader_CHECK_ROW_NUMBER(rowNum, 
2570   6                                                             Bootloader_NUMBER_OF_ROWS_IN_ARRAY);
2571   6                          
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 44  

2572   6                                  if (CYRET_SUCCESS != ackCode)
2573   6                                  {
2574   7                                      break;
2575   7                                  }                            
2576   6      
2577   6                                  checksum = Bootloader_Calc8BitSum(CY_FLASH_BASE, rowAddr, CYDEV_FLS_ROW_SIZE);
2578   6                              }
2579   5      
2580   5                          #else
              
                                      uint32 CYDATA rowAddr = ((uint32)btldrData * CYDEV_FLS_SECTOR_SIZE)
                                                          + ((uint32)rowNum * CYDEV_FLS_ROW_SIZE);
                                      
                                      uint8 CYDATA checksum;
                                       
                                      /* Checking if row number is within array address range */
                                      ackCode = Bootloader_CHECK_ROW_NUMBER(rowNum, 
                                                                     Bootloader_NUMBER_OF_ROWS_IN_ARRAY);
                                  
                                      if (CYRET_SUCCESS != ackCode)
                                      {
                                          break;
                                      }                     
              
                                      checksum = Bootloader_Calc8BitSum(CY_FLASH_BASE, rowAddr, CYDEV_FLS_ROW_SIZE);
              
                                  #endif  /* (!CY_PSOC4) */
2599   5      
2600   5      
2601   5                          /* Calculate checksum on data from ECC */
2602   5                          #if(!CY_PSOC4) && (CYDEV_ECC_ENABLE == 0u)
2603   5      
2604   5                              if(btldrData <= Bootloader_LAST_FLASH_ARRAYID)
2605   5                              {
2606   6                                  uint16 CYDATA tmpIndex;
2607   6      
2608   6                                  rowAddr = CYDEV_ECC_BASE + ((uint32)btldrData * (CYDEV_FLS_SECTOR_SIZE / 8u))
2609   6                                              + ((uint32)rowNum * CYDEV_ECC_ROW_SIZE);
2610   6      
2611   6                                  for(tmpIndex = 0u; tmpIndex < CYDEV_ECC_ROW_SIZE; tmpIndex++)
2612   6                                  {
2613   7                                      checksum += CY_GET_XTND_REG8((uint8 CYFAR *)(rowAddr + tmpIndex));
2614   7                                  }
2615   6                              }
2616   5      
2617   5                          #endif  /* (!CY_PSOC4) && (CYDEV_ECC_ENABLE == 0u) */
2618   5      
2619   5      
2620   5                          /*******************************************************************************
2621   5                          * App Verified & App Active are information updated in flash at the runtime.
2622   5                          * Remove these items from the checksum to allow the host to verify if everything is
2623   5                          * correct.
2624   5                           ******************************************************************************/
2625   5                          #if(!CY_PSOC4)
2626   5                              tmpRowNum = rowNum; 
2627   5                          #else
                                      tmpRowNum = rowNum + ((uint16)(Bootloader_NUMBER_OF_ROWS_IN_ARRAY * btldrData));
                                  #endif
2630   5                          
2631   5                          if((Bootloader_MD_FLASH_ARRAY_NUM == btldrData) && (Bootloader_CONTAIN_METADATA(tmpRow
             -Num)))
2632   5                          {
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 45  

2633   6      
2634   6                              checksum -= (uint8)Bootloader_GetMetadata(Bootloader_GET_BTLDB_ACTIVE,
2635   6                                                                       Bootloader_GET_APP_ID(tmpRowNum));
2636   6      
2637   6                              checksum -= (uint8)Bootloader_GetMetadata(Bootloader_GET_BTLDB_STATUS,
2638   6                                                                       Bootloader_GET_APP_ID(tmpRowNum));
2639   6                          }
2640   5      
2641   5                          packetBuffer[Bootloader_DATA_ADDR] = (uint8)1u + (uint8)(~checksum);
2642   5                          ackCode = CYRET_SUCCESS;
2643   5                          rspSize = Bootloader_RSP_SIZE_VERIFY_ROW_CHKSM;
2644   5                      }
2645   4                      break;
2646   4      
2647   4                  #endif /* (0u != Bootloader_CMD_GET_ROW_CHKSUM_AVAIL) */
2648   4      
2649   4      
2650   4                  /***************************************************************************
2651   4                  *   Exit bootloader (0x3B)
2652   4                  ***************************************************************************/
2653   4                  case Bootloader_COMMAND_EXIT:
2654   4      
2655   4                      /*******************************************************************************
2656   4                      * Currently the copy flag is checked in the metadata for the second application. 
2657   4                      * If it is set, then the copy operation is required and Launcher (BTLDR) should 
2658   4                      * be scheduled.
2659   4                      *******************************************************************************/
2660   4                  #if (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)
                              needToCopyFlag = Bootloader_GetMetadata(Bootloader_GET_BTLDB_COPY_FLAG, 
                                                                      Bootloader_MD_BTLDB_ACTIVE_1);                    
             -                                
                      
                              /* Checking "Need to copy" flag in metadata#1 */
                              if (0u != (needToCopyFlag & Bootloader_NEED_TO_COPY_MASK))
                              {  
                                  Bootloader_SET_RUN_TYPE(Bootloader_SCHEDULE_BTLDR);
                              }
                              else
                          #endif /* (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER) */
2671   4              
2672   4                      if(CYRET_SUCCESS == Bootloader_ValidateBootloadable(Bootloader_activeApp))
2673   4                      {
2674   5                          Bootloader_SET_RUN_TYPE(Bootloader_SCHEDULE_BTLDB);
2675   5                      }
2676   4                      
2677   4                  #if (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)
                              Bootloader_isBootloading = Bootloader_BOOTLOADING_COMPLETED;
                          #endif /* CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER */    
2680   4                  
2681   4                      CySoftwareReset();
2682   4      
2683   4                      /* Will never get here */
2684   4                      break;
2685   4      
2686   4      
2687   4                  /***************************************************************************
2688   4                  *   Unsupported command
2689   4                  ***************************************************************************/
2690   4                  default:
2691   4                  
2692   4                  #if (!CY_PSOC3)
                              if ((NULL != Bootloader_callback) && (Bootloader_COMMUNICATION_STATE_ACTIVE == communicati
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 46  

             -onState))
                              {
                                  Bootloader_in_packet_type Bootloader_inPacket; 
                                  Bootloader_out_packet_type Bootloader_outPacket;
              
                                  /* Initializing input packet */
                                  Bootloader_inPacket.command = packetBuffer[Bootloader_CMD_ADDR];
                                  Bootloader_inPacket.packetLength = pktSize;
                                  Bootloader_inPacket.pInputBuffer = &packetBuffer[Bootloader_DATA_ADDR];
                                                      
                                  /* Clearing and setting output packet */
                                  (void) memset(&Bootloader_outPacket, 0, sizeof(Bootloader_outPacket));
                                  Bootloader_outPacket.pOutputBuffer = &packetBuffer[Bootloader_DATA_ADDR];
                                  
                                  /* Callback */
                                  (void) Bootloader_callback(&Bootloader_inPacket, &Bootloader_outPacket);
              
                                  rspSize = Bootloader_outPacket.packetLength;
                                  if (((rspSize > (Bootloader_SIZEOF_COMMAND_BUFFER - Bootloader_MIN_PKT_SIZE)) && 
                                       (Bootloader_outPacket.pOutputBuffer == &packetBuffer[Bootloader_DATA_ADDR])) ||
                                      ((NULL == Bootloader_outPacket.pOutputBuffer) && (0u != rspSize)))
                                  {                    
                                      /* One of returned parameters is wrong */
                                      ackCode = Bootloader_ERR_CALLBACK;
                                      rspSize = 0u;
                                  }
                                  else /* Everything is OK */
                                  {
                                      ackCode = (uint8)Bootloader_outPacket.status;
                                  }
                              }    
                              else /* No callback function defined, so return "Error Command" status */
                          #endif /* (!CY_PSOC3) */
2726   4                      {
2727   5                          ackCode = Bootloader_ERR_CMD;
2728   5                      }    
2729   4                      break;
2730   4                  }
2731   3              }
2732   2      
2733   2              /* Reply with acknowledge or not acknowledge packet */
2734   2              (void) Bootloader_WritePacket(ackCode, packetBuffer, rspSize);
2735   2         
2736   2          } while ((0u == timeOut) || (Bootloader_COMMUNICATION_STATE_ACTIVE == communicationState));
2737   1      }
2738          
2739          
2740          /*******************************************************************************
2741          * Function Name: Bootloader_WritePacket
2742          ****************************************************************************//**
2743          * \internal
2744          *
2745          * \brief
2746          *  Creates a bootloader response packet and transmits it back to the bootloader
2747          *  host application over the already established communications protocol.
2748          *
2749          *  \param status
2750          *      The status code to pass back as the second byte of the packet.
2751          *  \param buffer
2752          *      The buffer containing the data portion of the packet.
2753          *  \param size
2754          *      The number of bytes contained within the buffer to pass back.
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 47  

2755          *
2756          * \return
2757          *   CYRET_SUCCESS if successful. Any other non-zero value if a failure occurred.
2758          *
2759          * \endinternal
2760          *******************************************************************************/
2761          static cystatus Bootloader_WritePacket(uint8 status, uint8 buffer[], uint16 size) CYSMALL \
2762                                                      
2763          {
2764   1          uint16 CYDATA checksum;
2765   1      
2766   1          /* Start of packet. */
2767   1          buffer[Bootloader_SOP_ADDR]      = Bootloader_SOP;
2768   1          buffer[Bootloader_CMD_ADDR]      = status;
2769   1          buffer[Bootloader_SIZE_ADDR]     = LO8(size);
2770   1          buffer[Bootloader_SIZE_ADDR + 1u] = HI8(size);
2771   1      
2772   1          /* Compute checksum. */
2773   1          checksum = Bootloader_CalcPacketChecksum(buffer, size + Bootloader_DATA_ADDR);
2774   1      
2775   1          buffer[Bootloader_CHK_ADDR(size)]     = LO8(checksum);
2776   1          buffer[Bootloader_CHK_ADDR(1u + size)] = HI8(checksum);
2777   1          buffer[Bootloader_EOP_ADDR(size)]     = Bootloader_EOP;
2778   1      
2779   1          /* Start packet transmit. */
2780   1          return(CyBtldrCommWrite(buffer, size + Bootloader_MIN_PKT_SIZE, &size, 150u));
2781   1      }
2782          #endif /*(CYDEV_PROJ_TYPE != CYDEV_PROJ_TYPE_LAUNCHER)*/
2783          
2784          /*******************************************************************************
2785          * Function Name: Bootloader_SetFlashByte
2786          ****************************************************************************//**
2787          *
2788          * \brief
2789          *  Writes a byte to the specified flash memory location.
2790          *
2791          * \param address
2792          *      The address in flash memory where data will be written.
2793          * \param runType:
2794          *      The byte to be written.
2795          *
2796          *******************************************************************************/
2797          void Bootloader_SetFlashByte(uint32 address, uint8 runType) 
2798          {
2799   1          uint32 flsAddr = address - CYDEV_FLASH_BASE;
2800   1          uint8  rowData[CYDEV_FLS_ROW_SIZE];
2801   1      
2802   1          #if !(CY_PSOC4)
2803   1              uint8 arrayId = ( uint8 )(flsAddr / CYDEV_FLS_SECTOR_SIZE);
2804   1          #endif  /* !(CY_PSOC4) */
2805   1      
2806   1          #if (CY_PSOC4)
                      uint16 rowNum = ( uint16 )(flsAddr / CYDEV_FLS_ROW_SIZE);
                  #else
2809   1              uint16 rowNum = ( uint16 )((flsAddr % CYDEV_FLS_SECTOR_SIZE) / CYDEV_FLS_ROW_SIZE);
2810   1          #endif  /* (CY_PSOC4) */
2811   1      
2812   1          uint32 baseAddr = address - (address % CYDEV_FLS_ROW_SIZE);
2813   1          uint16 idx;
2814   1      
2815   1          for(idx = 0u; idx < CYDEV_FLS_ROW_SIZE; idx++)
2816   1          {
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 48  

2817   2              rowData[idx] = Bootloader_GET_CODE_BYTE(baseAddr + idx);
2818   2          }
2819   1      
2820   1          rowData[address % CYDEV_FLS_ROW_SIZE] = runType;
2821   1      
2822   1          #if(CY_PSOC4)
                      (void) CySysFlashWriteRow((uint32) rowNum, rowData);
                  #else
2825   1              (void) CyWriteRowData(arrayId, rowNum, rowData);
2826   1          #endif  /* (CY_PSOC4) */
2827   1      
2828   1          #if(CY_PSOC5)
                      /***************************************************************************
                      * When writing to flash, data in the instruction cache can become stale.
                      * Therefore, the cache data does not correlate to the data just written to
                      * flash. A call to CyFlushCache() is required to invalidate the data in the
                      * cache and force fresh information to be loaded from flash.
                      ***************************************************************************/
                      CyFlushCache();
                  #endif /* (CY_PSOC5) */
2837   1      }
2838          
2839          
2840          /*******************************************************************************
2841          * Function Name: Bootloader_GetMetadata
2842          ****************************************************************************//**
2843          *
2844          * \brief
2845          *    Returns the value of the specified field of the metadata section.
2846          *
2847          * \param field \ref group_metadataFields
2848          *    Identifies the specific field of metadata.
2849          *
2850          * \param appId
2851          *    The number of the Bootloadable/Combination application. Should be 0 for 
2852          *    the normal bootloader and 0 or 1 for the Dual-application bootloader.
2853          *
2854          * \return
2855          *    The value of the specified field of the specified application.
2856          *
2857          *******************************************************************************/
2858          uint32 Bootloader_GetMetadata(uint8 field, uint8 appId)
2859          {
2860   1          uint32 fieldPtr;
2861   1          uint8  fieldSize = 2u;
2862   1          uint32 result = 0u;
2863   1      
2864   1          switch (field)
2865   1          {
2866   2          case Bootloader_GET_BTLDB_CHECKSUM:
2867   2              fieldPtr  = Bootloader_MD_BTLDB_CHECKSUM_OFFSET(appId);
2868   2              fieldSize = 1u;
2869   2              break;   
2870   2      
2871   2          case Bootloader_GET_BTLDB_ADDR:
2872   2              fieldPtr  = Bootloader_MD_BTLDB_ADDR_OFFSET(appId);
2873   2          #if(!CY_PSOC3)
                      fieldSize = 4u;
                  #endif  /* (!CY_PSOC3) */
2876   2              break;
2877   2      
2878   2          case Bootloader_GET_BTLDR_LAST_ROW:
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 49  

2879   2              fieldPtr  = Bootloader_MD_BTLDR_LAST_ROW_OFFSET(appId);
2880   2              break;
2881   2      
2882   2          case Bootloader_GET_BTLDB_LENGTH:
2883   2              fieldPtr  = Bootloader_MD_BTLDB_LENGTH_OFFSET(appId);
2884   2          #if(!CY_PSOC3)
                      fieldSize = 4u;
                  #endif  /* (!CY_PSOC3) */
2887   2              break;
2888   2      
2889   2          case Bootloader_GET_BTLDB_ACTIVE:
2890   2              fieldPtr  = Bootloader_MD_BTLDB_ACTIVE_OFFSET(appId);
2891   2              fieldSize = 1u;
2892   2              break;
2893   2      
2894   2          case Bootloader_GET_BTLDB_STATUS:
2895   2              fieldPtr  = Bootloader_MD_BTLDB_VERIFIED_OFFSET(appId);
2896   2              fieldSize = 1u;
2897   2              break;
2898   2      
2899   2          case Bootloader_GET_BTLDB_APP_VERSION:
2900   2              fieldPtr  = Bootloader_MD_BTLDB_APP_VERSION_OFFSET(appId);
2901   2              break;
2902   2      
2903   2          case Bootloader_GET_BTLDR_APP_VERSION:
2904   2              fieldPtr  = Bootloader_MD_BTLDR_APP_VERSION_OFFSET(appId);
2905   2              break;
2906   2      
2907   2          case Bootloader_GET_BTLDB_APP_ID:
2908   2              fieldPtr  = Bootloader_MD_BTLDB_APP_ID_OFFSET(appId);
2909   2              break;
2910   2      
2911   2          case Bootloader_GET_BTLDB_APP_CUST_ID:
2912   2              fieldPtr  = Bootloader_MD_BTLDB_APP_CUST_ID_OFFSET(appId);
2913   2              fieldSize = 4u;
2914   2              break;
2915   2              
2916   2          case Bootloader_GET_BTLDB_COPY_FLAG:
2917   2              fieldPtr = Bootloader_MD_BTLDB_COPY_FLAG_OFFSET(appId);
2918   2              fieldSize = 1u;
2919   2              break;        
2920   2      
2921   2          case Bootloader_GET_BTLDB_USER_DATA:
2922   2              fieldPtr = Bootloader_MD_BTLDB_USER_DATA_OFFSET(appId);
2923   2              fieldSize = 4u;
2924   2              break;        
2925   2      
2926   2          default:
2927   2              /* Should never be here */
2928   2              CYASSERT(0u != 0u);
2929   2              fieldPtr  = 0u;
2930   2              break;
2931   2          }
2932   1      
2933   1      
2934   1          if (1u == fieldSize)
2935   1          {
2936   2              result =  (uint32) CY_GET_XTND_REG8((volatile uint8 *)fieldPtr);
2937   2          }
2938   1      
2939   1          #if(CY_PSOC3)   /* Big-endian */
2940   1      
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 50  

2941   1              if (2u == fieldSize)
2942   1              {
2943   2                  result =  (uint32) CY_GET_XTND_REG8((volatile uint8 *)(fieldPtr + 1u));
2944   2                  result |= (uint32) CY_GET_XTND_REG8((volatile uint8 *)(fieldPtr     )) <<  8u;
2945   2              }
2946   1      
2947   1              if (4u == fieldSize)
2948   1              {
2949   2                  result =  (uint32) CY_GET_XTND_REG8((volatile uint8 *)(fieldPtr + 3u));
2950   2                  result |= (uint32) CY_GET_XTND_REG8((volatile uint8 *)(fieldPtr + 2u)) <<  8u;
2951   2                  result |= (uint32) CY_GET_XTND_REG8((volatile uint8 *)(fieldPtr + 1u)) << 16u;
2952   2                  result |= (uint32) CY_GET_XTND_REG8((volatile uint8 *)(fieldPtr     )) << 24u;
2953   2              }
2954   1      
2955   1          #else   /* PSoC 4 and PSoC 5: Little-endian */
              
                      if (2u == fieldSize)
                      {
                          result =  (uint32) CY_GET_XTND_REG8((volatile uint8 *) (fieldPtr     ));
                          result |= (uint32) CY_GET_XTND_REG8((volatile uint8 *) (fieldPtr + 1u)) <<  8u;
                      }
              
                      if (4u == fieldSize)
                      {
                          result =  (uint32) CY_GET_XTND_REG8((volatile uint8 *)(fieldPtr     ));
                          result |= (uint32) CY_GET_XTND_REG8((volatile uint8 *)(fieldPtr + 1u)) <<  8u;
                          result |= (uint32) CY_GET_XTND_REG8((volatile uint8 *)(fieldPtr + 2u)) << 16u;
                          result |= (uint32) CY_GET_XTND_REG8((volatile uint8 *)(fieldPtr + 3u)) << 24u;
                      }
              
                  #endif /* (CY_PSOC3) */
2972   1      
2973   1          return (result);
2974   1      }
2975          
2976          
2977          /* @} [] END OF FILE */
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 51  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _Bootloader_CalcPacketChecksum (BEGIN)
                                           ; SOURCE LINE # 385
0000 8B00        R     MOV     buffer,R3
0002 8A00        R     MOV     buffer+01H,R2
0004 8900        R     MOV     buffer+02H,R1
0006 8C00        R     MOV     size,R4
0008 8D00        R     MOV     size+01H,R5
                                           ; SOURCE LINE # 390
000A 74FF              MOV     A,#0FFH
000C F500        R     MOV     crc,A
000E F500        R     MOV     crc+01H,A
                                           ; SOURCE LINE # 393
0010 850000      R     MOV     tmpIndex,size
0013 850000      R     MOV     tmpIndex+01H,size+01H
                                           ; SOURCE LINE # 395
0016 E500        R     MOV     A,size+01H
0018 4500        R     ORL     A,size
001A 7009              JNZ     ?C0005
                                           ; SOURCE LINE # 396
                                           ; SOURCE LINE # 397
001C 6300FF      R     XRL     crc+01H,#0FFH
001F 6300FF      R     XRL     crc,#0FFH
                                           ; SOURCE LINE # 398
0022 020000      R     LJMP    ?C0002
                                           ; SOURCE LINE # 400
0025         ?C0005:
                                           ; SOURCE LINE # 402
                                           ; SOURCE LINE # 403
0025 C3                CLR     C
0026 E500        R     MOV     A,tmpIndex+01H
0028 9500        R     SUBB    A,size+01H
002A FF                MOV     R7,A
002B E500        R     MOV     A,tmpIndex
002D 9500        R     SUBB    A,size
002F FE                MOV     R6,A
0030 AB00        R     MOV     R3,buffer
0032 E500        R     MOV     A,buffer+02H
0034 2F                ADD     A,R7
0035 F9                MOV     R1,A
0036 E500        R     MOV     A,buffer+01H
0038 3E                ADDC    A,R6
0039 FA                MOV     R2,A
003A 120000      E     LCALL   ?C?CLDPTR
003D 750000      R     MOV     tmp,#00H
0040 F500        R     MOV     tmp+01H,A
                                           ; SOURCE LINE # 405
;---- Variable 'i' assigned to Register 'R5' ----
0042 E4                CLR     A
0043 FD                MOV     R5,A
0044         ?C0006:
0044 ED                MOV     A,R5
0045 C3                CLR     C
0046 9408              SUBB    A,#08H
0048 503D              JNC     ?C0007
                                           ; SOURCE LINE # 406
                                           ; SOURCE LINE # 407
004A E500        R     MOV     A,tmp+01H
004C 5401              ANL     A,#01H
004E FF                MOV     R7,A
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 52  

004F E500        R     MOV     A,crc+01H
0051 5401              ANL     A,#01H
0053 FB                MOV     R3,A
0054 E4                CLR     A
0055 EB                MOV     A,R3
0056 6F                XRL     A,R7
0057 6015              JZ      ?C0009
                                           ; SOURCE LINE # 408
                                           ; SOURCE LINE # 409
0059 E500        R     MOV     A,crc
005B C3                CLR     C
005C 13                RRC     A
005D FE                MOV     R6,A
005E E500        R     MOV     A,crc+01H
0060 13                RRC     A
0061 FF                MOV     R7,A
0062 EE                MOV     A,R6
0063 6484              XRL     A,#084H
0065 F500        R     MOV     crc,A
0067 EF                MOV     A,R7
0068 6408              XRL     A,#08H
006A F500        R     MOV     crc+01H,A
                                           ; SOURCE LINE # 410
006C 800B              SJMP    ?C0010
006E         ?C0009:
                                           ; SOURCE LINE # 412
                                           ; SOURCE LINE # 413
006E E500        R     MOV     A,crc
0070 C3                CLR     C
0071 13                RRC     A
0072 F500        R     MOV     crc,A
0074 E500        R     MOV     A,crc+01H
0076 13                RRC     A
0077 F500        R     MOV     crc+01H,A
                                           ; SOURCE LINE # 414
0079         ?C0010:
                                           ; SOURCE LINE # 416
0079 E500        R     MOV     A,tmp
007B C3                CLR     C
007C 13                RRC     A
007D F500        R     MOV     tmp,A
007F E500        R     MOV     A,tmp+01H
0081 13                RRC     A
0082 F500        R     MOV     tmp+01H,A
                                           ; SOURCE LINE # 417
0084 0D                INC     R5
0085 80BD              SJMP    ?C0006
0087         ?C0007:
                                           ; SOURCE LINE # 419
0087 E500        R     MOV     A,size+01H
0089 1500        R     DEC     size+01H
008B 7002              JNZ     ?C0157
008D 1500        R     DEC     size
008F         ?C0157:
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 421
008F E500        R     MOV     A,size+01H
0091 4500        R     ORL     A,size
0093 7090              JNZ     ?C0005
                                           ; SOURCE LINE # 423
0095 6300FF      R     XRL     crc+01H,#0FFH
0098 6300FF      R     XRL     crc,#0FFH
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 53  

                                           ; SOURCE LINE # 424
009B 850000      R     MOV     tmp,crc
009E 850000      R     MOV     tmp+01H,crc+01H
                                           ; SOURCE LINE # 425
00A1 E500        R     MOV     A,crc+01H
00A3 FC                MOV     R4,A
00A4 E500        R     MOV     A,tmp
00A6 FF                MOV     R7,A
00A7 EC                MOV     A,R4
00A8 F500        R     MOV     crc,A
00AA EF                MOV     A,R7
00AB F500        R     MOV     crc+01H,A
                                           ; SOURCE LINE # 426
00AD         ?C0002:
                                           ; SOURCE LINE # 428
00AD AE00        R     MOV     R6,crc
00AF AF00        R     MOV     R7,crc+01H
                                           ; SOURCE LINE # 443
00B1         ?C0011:
00B1 22                RET     
             ; FUNCTION _Bootloader_CalcPacketChecksum (END)

             ; FUNCTION _Bootloader_Calc8BitSum (BEGIN)
                                           ; SOURCE LINE # 531
0000 8F00        R     MOV     baseAddr+03H,R7
0002 8E00        R     MOV     baseAddr+02H,R6
0004 8D00        R     MOV     baseAddr+01H,R5
0006 8C00        R     MOV     baseAddr,R4
                                           ; SOURCE LINE # 534
0008 E4                CLR     A
0009 F500        R     MOV     sum,A
                                           ; SOURCE LINE # 537
000B EF                MOV     A,R7
000C 7003              JNZ     ?C0158
000E EE                MOV     A,R6
000F 6480              XRL     A,#080H
0011         ?C0158:
0011 6019              JZ      ?C0013
0013 E4                CLR     A
0014 FF                MOV     R7,A
0015 FE                MOV     R6,A
0016 7D10              MOV     R5,#010H
0018 FC                MOV     R4,A
0019 AB00        R     MOV     R3,baseAddr+03H
001B AA00        R     MOV     R2,baseAddr+02H
001D A900        R     MOV     R1,baseAddr+01H
001F A800        R     MOV     R0,baseAddr
0021 C3                CLR     C
0022 120000      E     LCALL   ?C?ULCMP
0025 6005              JZ      ?C0013
0027 7F00              MOV     R7,#00H
0029 120000      E     LCALL   _?CyHalt
002C         ?C0013:
                                           ; SOURCE LINE # 542
002C D3                SETB    C
002D E500        R     MOV     A,size+03H
002F 9400              SUBB    A,#00H
0031 E500        R     MOV     A,size+02H
0033 9400              SUBB    A,#00H
0035 404B              JC      ?C0014
                                           ; SOURCE LINE # 543
                                           ; SOURCE LINE # 544
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 54  

0037 AF00        R     MOV     R7,size+03H
0039 AE00        R     MOV     R6,size+02H
003B AD00        R     MOV     R5,size+01H
003D AC00        R     MOV     R4,size
003F 74FF              MOV     A,#0FFH
0041 FB                MOV     R3,A
0042 FA                MOV     R2,A
0043 F9                MOV     R1,A
0044 F8                MOV     R0,A
0045 120000      E     LCALL   ?C?LADD
0048 8F00        R     MOV     size+03H,R7
004A 8E00        R     MOV     size+02H,R6
004C 8D00        R     MOV     size+01H,R5
004E 8C00        R     MOV     size,R4
                                           ; SOURCE LINE # 545
0050 E500        R     MOV     A,baseAddr+03H
0052 2500        R     ADD     A,start+03H
0054 FF                MOV     R7,A
0055 E500        R     MOV     A,baseAddr+02H
0057 3500        R     ADDC    A,start+02H
0059 FE                MOV     R6,A
005A E500        R     MOV     A,baseAddr+01H
005C 3500        R     ADDC    A,start+01H
005E FD                MOV     R5,A
005F E500        R     MOV     A,baseAddr
0061 3500        R     ADDC    A,start
0063 FC                MOV     R4,A
0064 EF                MOV     A,R7
0065 2500        R     ADD     A,size+03H
0067 FF                MOV     R7,A
0068 EE                MOV     A,R6
0069 3500        R     ADDC    A,size+02H
006B FE                MOV     R6,A
006C ED                MOV     A,R5
006D 3500        R     ADDC    A,size+01H
006F FD                MOV     R5,A
0070 EC                MOV     A,R4
0071 3500        R     ADDC    A,size
0073 A907              MOV     R1,AR7
0075 AA06              MOV     R2,AR6
0077 AB05              MOV     R3,AR5
0079 120000      E     LCALL   ?C?CLDPTR
007C 2500        R     ADD     A,sum
007E F500        R     MOV     sum,A
                                           ; SOURCE LINE # 546
0080 80AA              SJMP    ?C0013
0082         ?C0014:
                                           ; SOURCE LINE # 548
0082 AF00        R     MOV     R7,sum
                                           ; SOURCE LINE # 549
0084         ?C0015:
0084 22                RET     
             ; FUNCTION _Bootloader_Calc8BitSum (END)

             ; FUNCTION Bootloader_Start (BEGIN)
                                           ; SOURCE LINE # 835
                                           ; SOURCE LINE # 845
0000 750006      R     MOV     validApp,#06H
                                           ; SOURCE LINE # 1015
0003 E4                CLR     A
0004 FF                MOV     R7,A
0005 120000      R     LCALL   _Bootloader_ValidateBootloadable
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 55  

0008 EF                MOV     A,R7
0009 7002              JNZ     ?C0016
                                           ; SOURCE LINE # 1016
                                           ; SOURCE LINE # 1017
000B F500        R     MOV     validApp,A
                                           ; SOURCE LINE # 1018
000D         ?C0016:
                                           ; SOURCE LINE # 1026
000D 120000      E     LCALL   CySetTemp
0010 EF                MOV     A,R7
0011 6005              JZ      ?C0017
                                           ; SOURCE LINE # 1027
                                           ; SOURCE LINE # 1028
0013 7F00              MOV     R7,#00H
0015 120000      E     LCALL   _?CyHalt
                                           ; SOURCE LINE # 1029
0018         ?C0017:
                                           ; SOURCE LINE # 1057
0018 E4                CLR     A
0019 F500        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+07H,A
001B F500        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+06H,A
001D F500        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+05H,A
001F F500        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+04H,A
0021 900000      R     MOV     DPTR,#Bootloader_SizeBytesAccess
0024 E0                MOVX    A,@DPTR
0025 FE                MOV     R6,A
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 F582              MOV     DPL,A
002A 8E83              MOV     DPH,R6
002C 120000      E     LCALL   ?C?LLDCODE
002F 8F00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+0BH,R7
0031 8E00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+0AH,R6
0033 8D00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+09H,R5
0035 8C00        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+08H,R4
0037 E4                CLR     A
0038 FF                MOV     R7,A
0039 FE                MOV     R6,A
003A 7D10              MOV     R5,#010H
003C FC                MOV     R4,A
003D 120000      R     LCALL   _Bootloader_Calc8BitSum
;---- Variable 'calcedChecksum' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1062
0040 900000      R     MOV     DPTR,#Bootloader_ChecksumAccess
0043 E0                MOVX    A,@DPTR
0044 FC                MOV     R4,A
0045 A3                INC     DPTR
0046 E0                MOVX    A,@DPTR
0047 F582              MOV     DPL,A
0049 8C83              MOV     DPH,R4
004B E4                CLR     A
004C 93                MOVC    A,@A+DPTR
004D FE                MOV     R6,A
004E C3                CLR     C
004F EF                MOV     A,R7
0050 9E                SUBB    A,R6
0051 FF                MOV     R7,A
                                           ; SOURCE LINE # 1063
0052 F4                CPL     A
0053 04                INC     A
0054 FF                MOV     R7,A
                                           ; SOURCE LINE # 1066
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 56  

0055 B50612            CJNE    A,AR6,?C0019
0058 900000      R     MOV     DPTR,#Bootloader_SizeBytesAccess
005B E0                MOVX    A,@DPTR
005C FE                MOV     R6,A
005D A3                INC     DPTR
005E E0                MOVX    A,@DPTR
005F F582              MOV     DPL,A
0061 8E83              MOV     DPH,R6
0063 120000      E     LCALL   ?C?LLDCODE
0066 EF                MOV     A,R7
0067 4E                ORL     A,R6
0068 7005              JNZ     ?C0018
006A         ?C0019:
                                           ; SOURCE LINE # 1068
                                           ; SOURCE LINE # 1077
006A 7F00              MOV     R7,#00H
006C 120000      E     LCALL   _?CyHalt
                                           ; SOURCE LINE # 1078
006F         ?C0018:
                                           ; SOURCE LINE # 1090
006F 9046FA            MOV     DPTR,#046FAH
0072 E0                MOVX    A,@DPTR
0073 54C0              ANL     A,#0C0H
0075 6440              XRL     A,#040H
0077 6004              JZ      ?C0021
0079 E500        R     MOV     A,validApp
007B 6009              JZ      ?C0020
007D         ?C0021:
                                           ; SOURCE LINE # 1095
                                           ; SOURCE LINE # 1096
007D 9046FA            MOV     DPTR,#046FAH
0080 E4                CLR     A
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1098
0082 FF                MOV     R7,A
0083 120000      R     LCALL   _Bootloader_HostLink
                                           ; SOURCE LINE # 1099
0086         ?C0020:
                                           ; SOURCE LINE # 1105
0086 E4                CLR     A
0087 FF                MOV     R7,A
0088 120000      R     LCALL   _Bootloader_HostLink
                                           ; SOURCE LINE # 1118
008B 120000      R     LCALL   Bootloader_LaunchApplication
                                           ; SOURCE LINE # 1120
008E 22                RET     
             ; FUNCTION Bootloader_Start (END)

             ; FUNCTION Bootloader_LaunchApplication (BEGIN)
                                           ; SOURCE LINE # 1136
                                           ; SOURCE LINE # 1140
0000 9046FA            MOV     DPTR,#046FAH
0003 7480              MOV     A,#080H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1142
0006 120000      E     LCALL   CySoftwareReset
                                           ; SOURCE LINE # 1143
0009 22                RET     
             ; FUNCTION Bootloader_LaunchApplication (END)

             ; FUNCTION _Bootloader_Exit (BEGIN)
                                           ; SOURCE LINE # 1173
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 57  

0000 8F00        R     MOV     appId,R7
                                           ; SOURCE LINE # 1175
0002 E500        R     MOV     A,appId
0004 B40207            CJNE    A,#02H,?C0024
                                           ; SOURCE LINE # 1176
                                           ; SOURCE LINE # 1177
0007 9046FA            MOV     DPTR,#046FAH
000A E4                CLR     A
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1178
000C 8050              SJMP    ?C0025
000E         ?C0024:
                                           ; SOURCE LINE # 1180
                                           ; SOURCE LINE # 1181
000E AF00        R     MOV     R7,appId
0010 120000      R     LCALL   _Bootloader_ValidateBootloadable
0013 EF                MOV     A,R7
0014 7043              JNZ     ?C0026
                                           ; SOURCE LINE # 1182
                                           ; SOURCE LINE # 1185
0016 F500        R     MOV     idx,A
0018         ?C0027:
0018 E500        R     MOV     A,idx
001A C3                CLR     C
001B 9401              SUBB    A,#01H
001D 5032              JNC     ?C0028
                                           ; SOURCE LINE # 1186
                                           ; SOURCE LINE # 1188
001F AF00        R     MOV     R7,idx
0021 7E00              MOV     R6,#00H
0023 7C01              MOV     R4,#01H
0025 7D00              MOV     R5,#00H
0027 120000      E     LCALL   ?C?LIMUL
002A C3                CLR     C
002B 74D0              MOV     A,#0D0H
002D 9F                SUBB    A,R7
002E FF                MOV     R7,A
002F 74FF              MOV     A,#0FFH
0031 9E                SUBB    A,R6
0032 FE                MOV     R6,A
0033 7410              MOV     A,#010H
0035 9D                SUBB    A,R5
0036 FD                MOV     R5,A
0037 E4                CLR     A
0038 9C                SUBB    A,R4
0039 FC                MOV     R4,A
003A E500        R     MOV     A,idx
003C B50004            CJNE    A,appId,?C0030
003F 7B01              MOV     R3,#01H
0041 8002              SJMP    ?C0031
0043         ?C0030:
0043 7B00              MOV     R3,#00H
0045         ?C0031:
0045 900000      R     MOV     DPTR,#?_Bootloader_SetFlashByte?BYTE+04H
0048 EB                MOV     A,R3
0049 F0                MOVX    @DPTR,A
004A 120000      R     LCALL   _Bootloader_SetFlashByte
                                           ; SOURCE LINE # 1189
004D 0500        R     INC     idx
004F 80C7              SJMP    ?C0027
0051         ?C0028:
                                           ; SOURCE LINE # 1197
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 58  

0051 9046FA            MOV     DPTR,#046FAH
0054 7480              MOV     A,#080H
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1198
0057 8005              SJMP    ?C0025
0059         ?C0026:
                                           ; SOURCE LINE # 1200
                                           ; SOURCE LINE # 1201
0059 9046FA            MOV     DPTR,#046FAH
005C E4                CLR     A
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1202
                                           ; SOURCE LINE # 1203
005E         ?C0025:
                                           ; SOURCE LINE # 1205
005E 120000      E     LCALL   CySoftwareReset
                                           ; SOURCE LINE # 1206
0061 22                RET     
             ; FUNCTION _Bootloader_Exit (END)

             ; FUNCTION CyBtldr_CheckLaunch (BEGIN)
                                           ; SOURCE LINE # 1226
                                           ; SOURCE LINE # 1244
0000 9046FA            MOV     DPTR,#046FAH
0003 E0                MOVX    A,@DPTR
0004 54C0              ANL     A,#0C0H
0006 6480              XRL     A,#080H
0008 7018              JNZ     ?C0036
                                           ; SOURCE LINE # 1245
                                           ; SOURCE LINE # 1254
000A F500        R     MOV     activeApp,A
                                           ; SOURCE LINE # 1275
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1283
000D AD00        R     MOV     R5,activeApp
000F 7F02              MOV     R7,#02H
0011 120000      R     LCALL   _Bootloader_GetMetadata
0014 EF                MOV     A,R7
0015 4E                ORL     A,R6
0016 600A              JZ      ?C0036
                                           ; SOURCE LINE # 1288
                                           ; SOURCE LINE # 1290
0018 AD00        R     MOV     R5,activeApp
001A 7F02              MOV     R7,#02H
001C 120000      R     LCALL   _Bootloader_GetMetadata
001F 120000      E     LCALL   _Bootloader_LaunchBootloadable
                                           ; SOURCE LINE # 1292
                                           ; SOURCE LINE # 1293
                                           ; SOURCE LINE # 1294
0022         ?C0036:
0022 22                RET     
             ; FUNCTION CyBtldr_CheckLaunch (END)

             ; FUNCTION _Bootloader_ValidateBootloadable (BEGIN)
                                           ; SOURCE LINE # 1353
0000 8F00        R     MOV     appId,R7
                                           ; SOURCE LINE # 1358
0002 AD00        R     MOV     R5,appId
0004 7F03              MOV     R7,#03H
0006 120000      R     LCALL   _Bootloader_GetMetadata
0009 EF                MOV     A,R7
000A 2401              ADD     A,#01H
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 59  

000C FF                MOV     R7,A
000D E4                CLR     A
000E 3E                ADDC    A,R6
000F FE                MOV     R6,A
0010 E4                CLR     A
0011 3D                ADDC    A,R5
0012 FD                MOV     R5,A
0013 E4                CLR     A
0014 3C                ADDC    A,R4
0015 FC                MOV     R4,A
0016 E4                CLR     A
0017 FB                MOV     R3,A
0018 7A01              MOV     R2,#01H
001A F9                MOV     R1,A
001B F8                MOV     R0,A
001C 120000      E     LCALL   ?C?LMUL
001F C004              PUSH    AR4
0021 C005              PUSH    AR5
0023 C006              PUSH    AR6
0025 C007              PUSH    AR7
0027 AD00        R     MOV     R5,appId
0029 7F04              MOV     R7,#04H
002B 120000      R     LCALL   _Bootloader_GetMetadata
002E D003              POP     AR3
0030 D002              POP     AR2
0032 D001              POP     AR1
0034 D000              POP     AR0
0036 120000      E     LCALL   ?C?LADD
0039 8F00        R     MOV     end+03H,R7
003B 8E00        R     MOV     end+02H,R6
003D 8D00        R     MOV     end+01H,R5
003F 8C00        R     MOV     end,R4
                                           ; SOURCE LINE # 1361
0041 C200        R     CLR     valid
                                           ; SOURCE LINE # 1362
0043 E4                CLR     A
0044 F500        R     MOV     calcedChecksum,A
                                           ; SOURCE LINE # 1376
0046 AD00        R     MOV     R5,appId
0048 7F06              MOV     R7,#06H
004A 120000      R     LCALL   _Bootloader_GetMetadata
004D EF                MOV     A,R7
004E 6401              XRL     A,#01H
0050 4E                ORL     A,R6
0051 7002              JNZ     ?C0037
                                           ; SOURCE LINE # 1378
                                           ; SOURCE LINE # 1379
0053 FF                MOV     R7,A
0054 22                RET     
                                           ; SOURCE LINE # 1380
0055         ?C0037:
                                           ; SOURCE LINE # 1385
0055 AD00        R     MOV     R5,appId
0057 7F03              MOV     R7,#03H
0059 120000      R     LCALL   _Bootloader_GetMetadata
005C EF                MOV     A,R7
005D 2401              ADD     A,#01H
005F FF                MOV     R7,A
0060 E4                CLR     A
0061 3E                ADDC    A,R6
0062 FE                MOV     R6,A
0063 E4                CLR     A
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 60  

0064 3D                ADDC    A,R5
0065 FD                MOV     R5,A
0066 E4                CLR     A
0067 3C                ADDC    A,R4
0068 FC                MOV     R4,A
0069 E4                CLR     A
006A FB                MOV     R3,A
006B 7A01              MOV     R2,#01H
006D F9                MOV     R1,A
006E F8                MOV     R0,A
006F 120000      E     LCALL   ?C?LMUL
0072 8F00        R     MOV     idx+03H,R7
0074 8E00        R     MOV     idx+02H,R6
0076 8D00        R     MOV     idx+01H,R5
0078 8C00        R     MOV     idx,R4
007A         ?C0039:
007A AF00        R     MOV     R7,end+03H
007C AE00        R     MOV     R6,end+02H
007E AD00        R     MOV     R5,end+01H
0080 AC00        R     MOV     R4,end
0082 AB00        R     MOV     R3,idx+03H
0084 AA00        R     MOV     R2,idx+02H
0086 A900        R     MOV     R1,idx+01H
0088 A800        R     MOV     R0,idx
008A C3                CLR     C
008B 120000      E     LCALL   ?C?ULCMP
008E 5032              JNC     ?C0040
                                           ; SOURCE LINE # 1386
                                           ; SOURCE LINE # 1387
0090 850082      R     MOV     DPL,idx+03H
0093 850083      R     MOV     DPH,idx+02H
0096 E4                CLR     A
0097 93                MOVC    A,@A+DPTR
0098 F500        R     MOV     curByte,A
                                           ; SOURCE LINE # 1389
009A 6005              JZ      ?C0042
009C F4                CPL     A
009D 6002              JZ      ?C0042
                                           ; SOURCE LINE # 1390
                                           ; SOURCE LINE # 1391
009F D200        R     SETB    valid
                                           ; SOURCE LINE # 1392
00A1         ?C0042:
                                           ; SOURCE LINE # 1394
00A1 E500        R     MOV     A,curByte
00A3 2500        R     ADD     A,calcedChecksum
00A5 F500        R     MOV     calcedChecksum,A
                                           ; SOURCE LINE # 1395
00A7 AF00        R     MOV     R7,idx+03H
00A9 AE00        R     MOV     R6,idx+02H
00AB AD00        R     MOV     R5,idx+01H
00AD AC00        R     MOV     R4,idx
00AF E4                CLR     A
00B0 7B01              MOV     R3,#01H
00B2 FA                MOV     R2,A
00B3 F9                MOV     R1,A
00B4 F8                MOV     R0,A
00B5 120000      E     LCALL   ?C?LADD
00B8 8F00        R     MOV     idx+03H,R7
00BA 8E00        R     MOV     idx+02H,R6
00BC 8D00        R     MOV     idx+01H,R5
00BE 8C00        R     MOV     idx,R4
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 61  

00C0 80B8              SJMP    ?C0039
00C2         ?C0040:
                                           ; SOURCE LINE # 1407
00C2 AD00        R     MOV     R5,appId
00C4 7F03              MOV     R7,#03H
00C6 120000      R     LCALL   _Bootloader_GetMetadata
00C9 EF                MOV     A,R7
00CA 2401              ADD     A,#01H
00CC FF                MOV     R7,A
00CD E4                CLR     A
00CE 3E                ADDC    A,R6
00CF FE                MOV     R6,A
00D0 E4                CLR     A
00D1 3D                ADDC    A,R5
00D2 FD                MOV     R5,A
00D3 E4                CLR     A
00D4 3C                ADDC    A,R4
00D5 FC                MOV     R4,A
00D6 E4                CLR     A
00D7 FB                MOV     R3,A
00D8 7A01              MOV     R2,#01H
00DA F9                MOV     R1,A
00DB F8                MOV     R0,A
00DC 120000      E     LCALL   ?C?LMUL
00DF 7803              MOV     R0,#03H
00E1 120000      E     LCALL   ?C?ULSHR
00E4 8F00        R     MOV     idx+03H,R7
00E6 8E00        R     MOV     idx+02H,R6
00E8 8D00        R     MOV     idx+01H,R5
00EA 8C00        R     MOV     idx,R4
                                           ; SOURCE LINE # 1410
00EC E4                CLR     A
00ED 7FC0              MOV     R7,#0C0H
00EF 7EFF              MOV     R6,#0FFH
00F1 FD                MOV     R5,A
00F2 FC                MOV     R4,A
00F3 AB00        R     MOV     R3,end+03H
00F5 AA00        R     MOV     R2,end+02H
00F7 A900        R     MOV     R1,end+01H
00F9 A800        R     MOV     R0,end
00FB C3                CLR     C
00FC 120000      E     LCALL   ?C?ULCMP
00FF 7007              JNZ     ?C0043
0101 FF                MOV     R7,A
0102 7E20              MOV     R6,#020H
0104 FD                MOV     R5,A
0105 FC                MOV     R4,A
0106 800D              SJMP    ?C0044
0108         ?C0043:
0108 AF00        R     MOV     R7,end+03H
010A AE00        R     MOV     R6,end+02H
010C AD00        R     MOV     R5,end+01H
010E AC00        R     MOV     R4,end
0110 7803              MOV     R0,#03H
0112 120000      E     LCALL   ?C?ULSHR
0115         ?C0044:
0115 8F00        R     MOV     end+03H,R7
0117 8E00        R     MOV     end+02H,R6
0119 8D00        R     MOV     end+01H,R5
011B 8C00        R     MOV     end,R4
                                           ; SOURCE LINE # 1414
011D         ?C0045:
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 62  

011D AF00        R     MOV     R7,end+03H
011F AE00        R     MOV     R6,end+02H
0121 AD00        R     MOV     R5,end+01H
0123 AC00        R     MOV     R4,end
0125 AB00        R     MOV     R3,idx+03H
0127 AA00        R     MOV     R2,idx+02H
0129 A900        R     MOV     R1,idx+01H
012B A800        R     MOV     R0,idx
012D C3                CLR     C
012E 120000      E     LCALL   ?C?ULCMP
0131 5039              JNC     ?C0046
                                           ; SOURCE LINE # 1415
                                           ; SOURCE LINE # 1416
0133 E4                CLR     A
0134 2500        R     ADD     A,idx+03H
0136 FF                MOV     R7,A
0137 E4                CLR     A
0138 3500        R     ADDC    A,idx+02H
013A FE                MOV     R6,A
013B E500        R     MOV     A,idx+01H
013D 3408              ADDC    A,#08H
013F FD                MOV     R5,A
0140 E4                CLR     A
0141 3500        R     ADDC    A,idx
0143 A907              MOV     R1,AR7
0145 AA06              MOV     R2,AR6
0147 AB05              MOV     R3,AR5
0149 120000      E     LCALL   _cyread8
014C EF                MOV     A,R7
014D 2500        R     ADD     A,calcedChecksum
014F F500        R     MOV     calcedChecksum,A
                                           ; SOURCE LINE # 1417
0151 AF00        R     MOV     R7,idx+03H
0153 AE00        R     MOV     R6,idx+02H
0155 AD00        R     MOV     R5,idx+01H
0157 AC00        R     MOV     R4,idx
0159 E4                CLR     A
015A 7B01              MOV     R3,#01H
015C FA                MOV     R2,A
015D F9                MOV     R1,A
015E F8                MOV     R0,A
015F 120000      E     LCALL   ?C?LADD
0162 8F00        R     MOV     idx+03H,R7
0164 8E00        R     MOV     idx+02H,R6
0166 8D00        R     MOV     idx+01H,R5
0168 8C00        R     MOV     idx,R4
016A 80B1              SJMP    ?C0045
016C         ?C0046:
                                           ; SOURCE LINE # 1421
016C E500        R     MOV     A,calcedChecksum
016E F4                CPL     A
016F 04                INC     A
0170 F500        R     MOV     calcedChecksum,A
                                           ; SOURCE LINE # 1423
0172 AD00        R     MOV     R5,appId
0174 7F01              MOV     R7,#01H
0176 120000      R     LCALL   _Bootloader_GetMetadata
0179 A804              MOV     R0,AR4
017B A905              MOV     R1,AR5
017D AA06              MOV     R2,AR6
017F AB07              MOV     R3,AR7
0181 AF00        R     MOV     R7,calcedChecksum
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 63  

0183 E4                CLR     A
0184 FC                MOV     R4,A
0185 FD                MOV     R5,A
0186 FE                MOV     R6,A
0187 C3                CLR     C
0188 120000      E     LCALL   ?C?ULCMP
018B 7003              JNZ     ?C0049
018D 200003            JB      valid,?C0048
0190         ?C0049:
                                           ; SOURCE LINE # 1425
                                           ; SOURCE LINE # 1426
0190 7F06              MOV     R7,#06H
0192 22                RET     
                                           ; SOURCE LINE # 1427
0193         ?C0048:
                                           ; SOURCE LINE # 1431
0193 AF00        R     MOV     R7,appId
0195 7E00              MOV     R6,#00H
0197 7C01              MOV     R4,#01H
0199 7D00              MOV     R5,#00H
019B 120000      E     LCALL   ?C?LIMUL
019E C3                CLR     C
019F 74D1              MOV     A,#0D1H
01A1 9F                SUBB    A,R7
01A2 FF                MOV     R7,A
01A3 74FF              MOV     A,#0FFH
01A5 9E                SUBB    A,R6
01A6 FE                MOV     R6,A
01A7 7410              MOV     A,#010H
01A9 9D                SUBB    A,R5
01AA FD                MOV     R5,A
01AB E4                CLR     A
01AC 9C                SUBB    A,R4
01AD FC                MOV     R4,A
01AE 900000      R     MOV     DPTR,#?_Bootloader_SetFlashByte?BYTE+04H
01B1 7401              MOV     A,#01H
01B3 F0                MOVX    @DPTR,A
01B4 120000      R     LCALL   _Bootloader_SetFlashByte
                                           ; SOURCE LINE # 1436
01B7 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 1437
01B9         ?C0038:
01B9 22                RET     
             ; FUNCTION _Bootloader_ValidateBootloadable (END)

             ; FUNCTION _Bootloader_HostLink (BEGIN)
                                           ; SOURCE LINE # 1638
0000 900000      R     MOV     DPTR,#timeOut
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1650
0005 E4                CLR     A
0006 F500        R     MOV     pktSize,A
0008 F500        R     MOV     pktSize+01H,A
                                           ; SOURCE LINE # 1651
000A 75000A      R     MOV     timeOutCnt,#0AH
                                           ; SOURCE LINE # 1654
000D F500        R     MOV     clearedMetaData,A
                                           ; SOURCE LINE # 1665
000F C200        R     CLR     communicationState
                                           ; SOURCE LINE # 1666
0011 F500        R     MOV     dataOffset,A
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 64  

0013 F500        R     MOV     dataOffset+01H,A
                                           ; SOURCE LINE # 1701
0015 120000      E     LCALL   USBFS_CyBtldrCommStart
                                           ; SOURCE LINE # 1704
0018 D2AF              SETB    EA
001A 9044F4            MOV     DPTR,#044F4H
001D 74FD              MOV     A,#0FDH
001F F0                MOVX    @DPTR,A
0020         ?C0052:
                                           ; SOURCE LINE # 1707
                                           ; SOURCE LINE # 1708
0020 E4                CLR     A
0021 F500        R     MOV     ackCode,A
0023         ?C0055:
                                           ; SOURCE LINE # 1711
                                           ; SOURCE LINE # 1712
0023 750000      E     MOV     ?_USBFS_CyBtldrCommRead?BYTE+05H,#00H
0026 750000      R     MOV     ?_USBFS_CyBtldrCommRead?BYTE+06H,#HIGH numberRead
0029 750000      R     MOV     ?_USBFS_CyBtldrCommRead?BYTE+07H,#LOW numberRead
002C 900000      R     MOV     DPTR,#timeOut
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 7006              JNZ     ?C0056
0033 7EFF              MOV     R6,#0FFH
0035 7FFF              MOV     R7,#0FFH
0037 8000              SJMP    ?C0057
0039         ?C0056:
0039         ?C0057:
0039 8F00        E     MOV     ?_USBFS_CyBtldrCommRead?BYTE+08H,R7
003B 7B01              MOV     R3,#01H
003D 7A00        R     MOV     R2,#HIGH packetBuffer
003F 7900        R     MOV     R1,#LOW packetBuffer
0041 7D2C              MOV     R5,#02CH
0043 7C01              MOV     R4,#01H
0045 120000      E     LCALL   _USBFS_CyBtldrCommRead
0048 8F00        R     MOV     readStat,R7
                                           ; SOURCE LINE # 1716
004A 900000      R     MOV     DPTR,#timeOut
004D E0                MOVX    A,@DPTR
004E 6002              JZ      ?C0053
                                           ; SOURCE LINE # 1717
                                           ; SOURCE LINE # 1718
0050 1500        R     DEC     timeOutCnt
                                           ; SOURCE LINE # 1719
                                           ; SOURCE LINE # 1721
0052         ?C0053:
0052 E500        R     MOV     A,timeOutCnt
0054 6004              JZ      ?C0054
0056 E500        R     MOV     A,readStat
0058 70C9              JNZ     ?C0055
005A         ?C0054:
                                           ; SOURCE LINE # 1724
005A E500        R     MOV     A,readStat
005C 6003              JZ      $ + 5H
005E 020000      R     LJMP    ?C0050
                                           ; SOURCE LINE # 1725
                                           ; SOURCE LINE # 1726
                                           ; SOURCE LINE # 1727
0061         ?C0060:
                                           ; SOURCE LINE # 1729
0061 C3                CLR     C
0062 E500        R     MOV     A,numberRead+01H
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 65  

0064 9407              SUBB    A,#07H
0066 E500        R     MOV     A,numberRead
0068 9400              SUBB    A,#00H
006A 4008              JC      ?C0062
006C 900000      R     MOV     DPTR,#packetBuffer
006F E0                MOVX    A,@DPTR
0070 6401              XRL     A,#01H
0072 6006              JZ      ?C0061
0074         ?C0062:
                                           ; SOURCE LINE # 1731
                                           ; SOURCE LINE # 1732
0074 750004      R     MOV     ackCode,#04H
                                           ; SOURCE LINE # 1733
0077 020000      R     LJMP    ?C0063
007A         ?C0061:
                                           ; SOURCE LINE # 1735
                                           ; SOURCE LINE # 1736
007A 900000      R     MOV     DPTR,#packetBuffer+03H
007D E0                MOVX    A,@DPTR
007E FE                MOV     R6,A
007F 900000      R     MOV     DPTR,#packetBuffer+02H
0082 E0                MOVX    A,@DPTR
0083 FD                MOV     R5,A
0084 EE                MOV     A,R6
0085 F500        R     MOV     pktSize,A
0087 ED                MOV     A,R5
0088 F500        R     MOV     pktSize+01H,A
                                           ; SOURCE LINE # 1744
008A E500        R     MOV     A,pktSize+01H
008C 2407              ADD     A,#07H
008E FF                MOV     R7,A
008F E4                CLR     A
0090 3500        R     ADDC    A,pktSize
0092 FE                MOV     R6,A
0093 D3                SETB    C
0094 EF                MOV     A,R7
0095 9500        R     SUBB    A,numberRead+01H
0097 EE                MOV     A,R6
0098 9500        R     SUBB    A,numberRead
009A 5008              JNC     ?C0065
009C EF                MOV     A,R7
009D 942C              SUBB    A,#02CH
009F EE                MOV     A,R6
00A0 9401              SUBB    A,#01H
00A2 4005              JC      ?C0064
00A4         ?C0065:
                                           ; SOURCE LINE # 1746
                                           ; SOURCE LINE # 1747
00A4 750003      R     MOV     ackCode,#03H
                                           ; SOURCE LINE # 1748
00A7 8057              SJMP    ?C0063
00A9         ?C0064:
                                           ; SOURCE LINE # 1750
                                           ; SOURCE LINE # 1751
00A9 7400        R     MOV     A,#LOW packetBuffer+05H
00AB 2500        R     ADD     A,pktSize+01H
00AD F582              MOV     DPL,A
00AF 7400        R     MOV     A,#HIGH packetBuffer+05H
00B1 3500        R     ADDC    A,pktSize
00B3 F583              MOV     DPH,A
00B5 E0                MOVX    A,@DPTR
00B6 FE                MOV     R6,A
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 66  

00B7 7400        R     MOV     A,#LOW packetBuffer+04H
00B9 2500        R     ADD     A,pktSize+01H
00BB F582              MOV     DPL,A
00BD 7400        R     MOV     A,#HIGH packetBuffer+04H
00BF 3500        R     ADDC    A,pktSize
00C1 F583              MOV     DPH,A
00C3 E0                MOVX    A,@DPTR
00C4 FD                MOV     R5,A
00C5 EE                MOV     A,R6
00C6 F500        R     MOV     pktChecksum,A
00C8 ED                MOV     A,R5
00C9 F500        R     MOV     pktChecksum+01H,A
                                           ; SOURCE LINE # 1754
00CB 7400        R     MOV     A,#LOW packetBuffer+06H
00CD 2500        R     ADD     A,pktSize+01H
00CF F582              MOV     DPL,A
00D1 7400        R     MOV     A,#HIGH packetBuffer+06H
00D3 3500        R     ADDC    A,pktSize
00D5 F583              MOV     DPH,A
00D7 E0                MOVX    A,@DPTR
00D8 6417              XRL     A,#017H
00DA 6005              JZ      ?C0067
                                           ; SOURCE LINE # 1755
                                           ; SOURCE LINE # 1756
00DC 750004      R     MOV     ackCode,#04H
                                           ; SOURCE LINE # 1757
00DF 801F              SJMP    ?C0063
00E1         ?C0067:
                                           ; SOURCE LINE # 1758
00E1 7B01              MOV     R3,#01H
00E3 7A00        R     MOV     R2,#HIGH packetBuffer
00E5 7900        R     MOV     R1,#LOW packetBuffer
00E7 E500        R     MOV     A,pktSize+01H
00E9 2404              ADD     A,#04H
00EB FD                MOV     R5,A
00EC E4                CLR     A
00ED 3500        R     ADDC    A,pktSize
00EF FC                MOV     R4,A
00F0 120000      R     LCALL   _Bootloader_CalcPacketChecksum
00F3 EF                MOV     A,R7
00F4 6500        R     XRL     A,pktChecksum+01H
00F6 7003              JNZ     ?C0159
00F8 EE                MOV     A,R6
00F9 6500        R     XRL     A,pktChecksum
00FB         ?C0159:
00FB 6003              JZ      ?C0063
                                           ; SOURCE LINE # 1760
                                           ; SOURCE LINE # 1761
00FD 750008      R     MOV     ackCode,#08H
                                           ; SOURCE LINE # 1762
                                           ; SOURCE LINE # 1764
                                           ; SOURCE LINE # 1766
                                           ; SOURCE LINE # 1767
                                           ; SOURCE LINE # 1768
0100         ?C0063:
                                           ; SOURCE LINE # 1770
0100 E4                CLR     A
0101 F500        R     MOV     rspSize,A
0103 F500        R     MOV     rspSize+01H,A
                                           ; SOURCE LINE # 1771
0105 E500        R     MOV     A,ackCode
0107 6003              JZ      $ + 5H
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 67  

0109 020000      R     LJMP    ?C0071
                                           ; SOURCE LINE # 1772
                                           ; SOURCE LINE # 1773
010C 900000      R     MOV     DPTR,#packetBuffer+04H
010F E0                MOVX    A,@DPTR
0110 F500        R     MOV     btldrData,A
                                           ; SOURCE LINE # 1775
0112 750004      R     MOV     ackCode,#04H
                                           ; SOURCE LINE # 1776
0115 900000      R     MOV     DPTR,#packetBuffer+01H
0118 E0                MOVX    A,@DPTR
0119 120000      E     LCALL   ?C?CCASE
011C 0000        R     DW      ?C0073
011E 31                DB      031H
011F 0000        R     DW      ?C0077
0121 32                DB      032H
0122 0000        R     DW      ?C0085
0124 34                DB      034H
0125 0000        R     DW      ?C0105
0127 35                DB      035H
0128 0000        R     DW      ?C0107
012A 37                DB      037H
012B 0000        R     DW      ?C0111
012D 38                DB      038H
012E 0000        R     DW      ?C0085
0130 39                DB      039H
0131 0000        R     DW      ?C0114
0133 3A                DB      03AH
0134 0000        R     DW      ?C0129
0136 3B                DB      03BH
0137 0000              DW      00H
0139 0000        R     DW      ?C0131
                                           ; SOURCE LINE # 1777
                                           ; SOURCE LINE # 1822
013B         ?C0073:
                                           ; SOURCE LINE # 1824
013B 200003      R     JB      communicationState,$ + 6H
013E 020000      R     LJMP    ?C0071
0141 E500        R     MOV     A,pktSize+01H
0143 4500        R     ORL     A,pktSize
0145 6003              JZ      $ + 5H
0147 020000      R     LJMP    ?C0071
                                           ; SOURCE LINE # 1825
                                           ; SOURCE LINE # 1827
014A FF                MOV     R7,A
014B 120000      R     LCALL   _Bootloader_ValidateBootloadable
014E EF                MOV     A,R7
014F 7004              JNZ     ?C0075
0151 7F01              MOV     R7,#01H
0153 8002              SJMP    ?C0076
0155         ?C0075:
0155 7F00              MOV     R7,#00H
0157         ?C0076:
0157 900000      R     MOV     DPTR,#packetBuffer+04H
015A EF                MOV     A,R7
015B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1829
015C 750000      R     MOV     rspSize,#00H
015F 750001      R     MOV     rspSize+01H,#01H
                                           ; SOURCE LINE # 1830
0162 E4                CLR     A
0163 F500        R     MOV     ackCode,A
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 68  

                                           ; SOURCE LINE # 1831
                                           ; SOURCE LINE # 1832
0165 020000      R     LJMP    ?C0071
                                           ; SOURCE LINE # 1956
0168         ?C0077:
                                           ; SOURCE LINE # 1959
0168 200003      R     JB      communicationState,$ + 6H
016B 020000      R     LJMP    ?C0071
016E E500        R     MOV     A,pktSize+01H
0170 6401              XRL     A,#01H
0172 4500        R     ORL     A,pktSize
0174 6003              JZ      $ + 5H
0176 020000      R     LJMP    ?C0071
                                           ; SOURCE LINE # 1960
                                           ; SOURCE LINE # 1961
0179 E500        R     MOV     A,btldrData
017B C3                CLR     C
017C 9401              SUBB    A,#01H
017E 4003              JC      $ + 5H
0180 020000      R     LJMP    ?C0071
                                           ; SOURCE LINE # 1962
                                           ; SOURCE LINE # 1981
0183 900000      R     MOV     DPTR,#Bootloader_SizeBytesAccess
0186 E0                MOVX    A,@DPTR
0187 FE                MOV     R6,A
0188 A3                INC     DPTR
0189 E0                MOVX    A,@DPTR
018A F582              MOV     DPL,A
018C 8E83              MOV     DPH,R6
018E 120000      E     LCALL   ?C?LLDCODE
0191 E4                CLR     A
0192 FB                MOV     R3,A
0193 FA                MOV     R2,A
0194 7901              MOV     R1,#01H
0196 F8                MOV     R0,A
0197 120000      E     LCALL   ?C?ULDIV
019A 8F00        R     MOV     arrayIdBtlderEnds,R7
                                           ; SOURCE LINE # 1983
019C E500        R     MOV     A,btldrData
019E B5001E            CJNE    A,arrayIdBtlderEnds,?C0080
                                           ; SOURCE LINE # 1984
                                           ; SOURCE LINE # 1986
01A1 900000      R     MOV     DPTR,#Bootloader_SizeBytesAccess
01A4 E0                MOVX    A,@DPTR
01A5 FE                MOV     R6,A
01A6 A3                INC     DPTR
01A7 E0                MOVX    A,@DPTR
01A8 F582              MOV     DPL,A
01AA 8E83              MOV     DPH,R6
01AC 120000      E     LCALL   ?C?LLDCODE
01AF E4                CLR     A
01B0 FB                MOV     R3,A
01B1 7A01              MOV     R2,#01H
01B3 F9                MOV     R1,A
01B4 F8                MOV     R0,A
01B5 120000      E     LCALL   ?C?ULDIV
01B8 750000      R     MOV     startRow,#00H
01BB 8F00        R     MOV     startRow+01H,R7
                                           ; SOURCE LINE # 1987
01BD 8014              SJMP    ?C0081
01BF         ?C0080:
                                           ; SOURCE LINE # 1998
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 69  

01BF E500        R     MOV     A,btldrData
01C1 D3                SETB    C
01C2 9500        R     SUBB    A,arrayIdBtlderEnds
01C4 4007              JC      ?C0082
                                           ; SOURCE LINE # 1999
                                           ; SOURCE LINE # 2000
01C6 E4                CLR     A
01C7 F500        R     MOV     startRow,A
01C9 F500        R     MOV     startRow+01H,A
                                           ; SOURCE LINE # 2001
01CB 8006              SJMP    ?C0081
01CD         ?C0082:
                                           ; SOURCE LINE # 2003
                                           ; SOURCE LINE # 2004
01CD 750001      R     MOV     startRow,#01H
01D0 750000      R     MOV     startRow+01H,#00H
                                           ; SOURCE LINE # 2005
01D3         ?C0081:
                                           ; SOURCE LINE # 2007
01D3 E500        R     MOV     A,startRow+01H
01D5 900000      R     MOV     DPTR,#packetBuffer+04H
01D8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2008
01D9 E500        R     MOV     A,startRow
01DB A3                INC     DPTR
01DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2011
01DD A3                INC     DPTR
01DE 74FF              MOV     A,#0FFH
01E0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2014
01E1 E4                CLR     A
01E2 A3                INC     DPTR
01E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2016
01E4 F500        R     MOV     rspSize,A
01E6 750004      R     MOV     rspSize+01H,#04H
                                           ; SOURCE LINE # 2017
01E9 F500        R     MOV     ackCode,A
                                           ; SOURCE LINE # 2018
                                           ; SOURCE LINE # 2020
                                           ; SOURCE LINE # 2021
01EB 020000      R     LJMP    ?C0071
                                           ; SOURCE LINE # 2056
                                           ; SOURCE LINE # 2062
01EE         ?C0085:
                                           ; SOURCE LINE # 2063
01EE 900000      R     MOV     DPTR,#packetBuffer+01H
01F1 E0                MOVX    A,@DPTR
01F2 6434              XRL     A,#034H
01F4 703C              JNZ     ?C0086
                                           ; SOURCE LINE # 2064
                                           ; SOURCE LINE # 2065
01F6 200003      R     JB      communicationState,$ + 6H
01F9 020000      R     LJMP    ?C0071
01FC E500        R     MOV     A,pktSize+01H
01FE 6403              XRL     A,#03H
0200 4500        R     ORL     A,pktSize
0202 6003              JZ      $ + 5H
0204 020000      R     LJMP    ?C0071
                                           ; SOURCE LINE # 2066
                                           ; SOURCE LINE # 2068
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 70  

0207 E500        R     MOV     A,btldrData
0209 C3                CLR     C
020A 9440              SUBB    A,#040H
020C 400F              JC      ?C0088
020E E500        R     MOV     A,btldrData
0210 D3                SETB    C
0211 947F              SUBB    A,#07FH
0213 5008              JNC     ?C0088
                                           ; SOURCE LINE # 2070
                                           ; SOURCE LINE # 2072
0215 750000      R     MOV     dataOffset,#00H
0218 750010      R     MOV     dataOffset+01H,#010H
                                           ; SOURCE LINE # 2073
021B 8006              SJMP    ?C0089
021D         ?C0088:
                                           ; SOURCE LINE # 2075
                                           ; SOURCE LINE # 2077
021D 750001      R     MOV     dataOffset,#01H
0220 750020      R     MOV     dataOffset+01H,#020H
                                           ; SOURCE LINE # 2078
0223         ?C0089:
                                           ; SOURCE LINE # 2085
0223 AE00        R     MOV     R6,dataOffset
0225 AF00        R     MOV     R7,dataOffset+01H
0227 7D00              MOV     R5,#00H
0229 7B01              MOV     R3,#01H
022B 7A00        R     MOV     R2,#HIGH dataBuffer
022D 7900        R     MOV     R1,#LOW dataBuffer
022F 120000      E     LCALL   ?C?MEMSET
                                           ; SOURCE LINE # 2089
                                           ; SOURCE LINE # 2091
                                           ; SOURCE LINE # 2092
                                           ; SOURCE LINE # 2093
                                           ; SOURCE LINE # 2094
0232         ?C0086:
                                           ; SOURCE LINE # 2099
0232 200003      R     JB      communicationState,$ + 6H
0235 020000      R     LJMP    ?C0071
0238 C3                CLR     C
0239 E500        R     MOV     A,pktSize+01H
023B 9403              SUBB    A,#03H
023D E500        R     MOV     A,pktSize
023F 9400              SUBB    A,#00H
0241 5003              JNC     $ + 5H
0243 020000      R     LJMP    ?C0071
                                           ; SOURCE LINE # 2100
                                           ; SOURCE LINE # 2107
0246 E500        R     MOV     A,pktSize+01H
0248 24FD              ADD     A,#0FDH
024A FF                MOV     R7,A
024B E500        R     MOV     A,pktSize
024D 34FF              ADDC    A,#0FFH
024F FE                MOV     R6,A
0250 7400        R     MOV     A,#LOW dataBuffer
0252 2500        R     ADD     A,dataOffset+01H
0254 F9                MOV     R1,A
0255 7400        R     MOV     A,#HIGH dataBuffer
0257 3500        R     ADDC    A,dataOffset
0259 A801              MOV     R0,AR1
025B FC                MOV     R4,A
025C 7D01              MOV     R5,#01H
025E 7B01              MOV     R3,#01H
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 71  

0260 7A00        R     MOV     R2,#HIGH packetBuffer+07H
0262 7900        R     MOV     R1,#LOW packetBuffer+07H
0264 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 2114
0267 E500        R     MOV     A,pktSize+01H
0269 24FD              ADD     A,#0FDH
026B FF                MOV     R7,A
026C E500        R     MOV     A,pktSize
026E 34FF              ADDC    A,#0FFH
0270 FE                MOV     R6,A
0271 EF                MOV     A,R7
0272 2500        R     ADD     A,dataOffset+01H
0274 F500        R     MOV     dataOffset+01H,A
0276 EE                MOV     A,R6
0277 3500        R     ADDC    A,dataOffset
0279 F500        R     MOV     dataOffset,A
                                           ; SOURCE LINE # 2117
027B E500        R     MOV     A,btldrData
027D C3                CLR     C
027E 9440              SUBB    A,#040H
0280 401B              JC      ?C0092
0282 E500        R     MOV     A,btldrData
0284 D3                SETB    C
0285 947F              SUBB    A,#07FH
0287 5014              JNC     ?C0092
                                           ; SOURCE LINE # 2119
                                           ; SOURCE LINE # 2120
0289 120000      E     LCALL   CyEEPROM_Start
                                           ; SOURCE LINE # 2123
028C 750000      R     MOV     pktSize,#00H
028F 750010      R     MOV     pktSize+01H,#010H
                                           ; SOURCE LINE # 2124
0292 900000      R     MOV     DPTR,#upperRange
0295 E4                CLR     A
0296 F0                MOVX    @DPTR,A
0297 A3                INC     DPTR
0298 7440              MOV     A,#040H
029A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2125
029B 800F              SJMP    ?C0093
029D         ?C0092:
                                           ; SOURCE LINE # 2127
                                           ; SOURCE LINE # 2129
029D 750001      R     MOV     pktSize,#01H
02A0 750020      R     MOV     pktSize+01H,#020H
                                           ; SOURCE LINE # 2130
02A3 900000      R     MOV     DPTR,#upperRange
02A6 7401              MOV     A,#01H
02A8 F0                MOVX    @DPTR,A
02A9 A3                INC     DPTR
02AA E4                CLR     A
02AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2131
02AC         ?C0093:
                                           ; SOURCE LINE # 2139
02AC E500        R     MOV     A,dataOffset+01H
02AE 6500        R     XRL     A,pktSize+01H
02B0 7004              JNZ     ?C0160
02B2 E500        R     MOV     A,dataOffset
02B4 6500        R     XRL     A,pktSize
02B6         ?C0160:
02B6 6003              JZ      $ + 5H
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 72  

02B8 020000      R     LJMP    ?C0094
                                           ; SOURCE LINE # 2140
                                           ; SOURCE LINE # 2150
02BB 900000      R     MOV     DPTR,#packetBuffer+06H
02BE E0                MOVX    A,@DPTR
02BF FE                MOV     R6,A
02C0 900000      R     MOV     DPTR,#packetBuffer+05H
02C3 E0                MOVX    A,@DPTR
02C4 FD                MOV     R5,A
02C5 EE                MOV     A,R6
02C6 F500        R     MOV     dataOffset,A
02C8 ED                MOV     A,R5
02C9 F500        R     MOV     dataOffset+01H,A
                                           ; SOURCE LINE # 2154
02CB D3                SETB    C
02CC 900000      R     MOV     DPTR,#upperRange+01H
02CF E0                MOVX    A,@DPTR
02D0 9500        R     SUBB    A,dataOffset+01H
02D2 900000      R     MOV     DPTR,#upperRange
02D5 E0                MOVX    A,@DPTR
02D6 9500        R     SUBB    A,dataOffset
02D8 4004              JC      ?C0095
02DA 7F00              MOV     R7,#00H
02DC 8002              SJMP    ?C0096
02DE         ?C0095:
02DE 7F0A              MOV     R7,#0AH
02E0         ?C0096:
02E0 8F00        R     MOV     ackCode,R7
                                           ; SOURCE LINE # 2156
02E2 E500        R     MOV     A,ackCode
02E4 6003              JZ      $ + 5H
02E6 020000      R     LJMP    ?C0071
                                           ; SOURCE LINE # 2157
                                           ; SOURCE LINE # 2158
                                           ; SOURCE LINE # 2159
02E9         ?C0097:
                                           ; SOURCE LINE # 2163
02E9 E500        R     MOV     A,btldrData
02EB D3                SETB    C
02EC 943F              SUBB    A,#03FH
02EE 4003              JC      $ + 5H
02F0 020000      R     LJMP    ?C0098
                                           ; SOURCE LINE # 2164
                                           ; SOURCE LINE # 2169
02F3 E500        R     MOV     A,btldrData
02F5 7F00              MOV     R7,#00H
02F7 FE                MOV     R6,A
02F8 EF                MOV     A,R7
02F9 2500        R     ADD     A,dataOffset+01H
02FB FF                MOV     R7,A
02FC E500        R     MOV     A,dataOffset
02FE 3E                ADDC    A,R6
02FF 900000      R     MOV     DPTR,#row
0302 F0                MOVX    @DPTR,A
0303 A3                INC     DPTR
0304 EF                MOV     A,R7
0305 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2177
0306 900000      R     MOV     DPTR,#Bootloader_SizeBytesAccess
0309 E0                MOVX    A,@DPTR
030A FE                MOV     R6,A
030B A3                INC     DPTR
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 73  

030C E0                MOVX    A,@DPTR
030D F582              MOV     DPL,A
030F 8E83              MOV     DPH,R6
0311 120000      E     LCALL   ?C?LLDCODE
0314 E4                CLR     A
0315 FB                MOV     R3,A
0316 7A01              MOV     R2,#01H
0318 F9                MOV     R1,A
0319 F8                MOV     R0,A
031A 120000      E     LCALL   ?C?ULDIV
031D 900000      R     MOV     DPTR,#firstRow
0320 EE                MOV     A,R6
0321 F0                MOVX    @DPTR,A
0322 A3                INC     DPTR
0323 EF                MOV     A,R7
0324 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2178
0325 900000      R     MOV     DPTR,#Bootloader_SizeBytesAccess
0328 E0                MOVX    A,@DPTR
0329 FE                MOV     R6,A
032A A3                INC     DPTR
032B E0                MOVX    A,@DPTR
032C F582              MOV     DPL,A
032E 8E83              MOV     DPH,R6
0330 120000      E     LCALL   ?C?LLDCODE
0333 EF                MOV     A,R7
0334 E4                CLR     A
0335 EF                MOV     A,R7
0336 600A              JZ      ?C0099
                                           ; SOURCE LINE # 2179
                                           ; SOURCE LINE # 2180
0338 900000      R     MOV     DPTR,#firstRow
033B E4                CLR     A
033C 75F001            MOV     B,#01H
033F 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 2181
0342         ?C0099:
                                           ; SOURCE LINE # 2199
0342 900000      R     MOV     DPTR,#firstRow
0345 E0                MOVX    A,@DPTR
0346 FE                MOV     R6,A
0347 A3                INC     DPTR
0348 E0                MOVX    A,@DPTR
0349 FF                MOV     R7,A
034A C3                CLR     C
034B 900000      R     MOV     DPTR,#row+01H
034E E0                MOVX    A,@DPTR
034F 9F                SUBB    A,R7
0350 900000      R     MOV     DPTR,#row
0353 E0                MOVX    A,@DPTR
0354 9E                SUBB    A,R6
0355 500B              JNC     ?C0100
                                           ; SOURCE LINE # 2200
                                           ; SOURCE LINE # 2201
0357 75000A      R     MOV     ackCode,#0AH
                                           ; SOURCE LINE # 2202
035A E4                CLR     A
035B F500        R     MOV     dataOffset,A
035D F500        R     MOV     dataOffset+01H,A
                                           ; SOURCE LINE # 2203
035F 020000      R     LJMP    ?C0071
                                           ; SOURCE LINE # 2204
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 74  

0362         ?C0100:
                                           ; SOURCE LINE # 2280
0362 E500        R     MOV     A,clearedMetaData
0364 7037              JNZ     ?C0098
                                           ; SOURCE LINE # 2281
                                           ; SOURCE LINE # 2289
0366 7E01              MOV     R6,#01H
0368 7F20              MOV     R7,#020H
036A FD                MOV     R5,A
036B 7B01              MOV     R3,#01H
036D 7A00        R     MOV     R2,#HIGH erase
036F 7900        R     MOV     R1,#LOW erase
0371 120000      E     LCALL   ?C?MEMSET
                                           ; SOURCE LINE # 2306
0374 E4                CLR     A
0375 900000      R     MOV     DPTR,#Bootloader_notActiveApp
0378 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2317
0379 E0                MOVX    A,@DPTR
037A FF                MOV     R7,A
037B E4                CLR     A
037C C3                CLR     C
037D 74FF              MOV     A,#0FFH
037F 9F                SUBB    A,R7
0380 FD                MOV     R5,A
0381 E4                CLR     A
0382 9400              SUBB    A,#00H
0384 FC                MOV     R4,A
0385 7B01              MOV     R3,#01H
0387 7A00        R     MOV     R2,#HIGH erase
0389 7900        R     MOV     R1,#LOW erase
038B 900000      E     MOV     DPTR,#?_CyWriteRowFull?BYTE+06H
038E 7401              MOV     A,#01H
0390 F0                MOVX    @DPTR,A
0391 A3                INC     DPTR
0392 7420              MOV     A,#020H
0394 F0                MOVX    @DPTR,A
0395 E4                CLR     A
0396 FF                MOV     R7,A
0397 120000      E     LCALL   _CyWriteRowFull
                                           ; SOURCE LINE # 2325
039A 750001      R     MOV     clearedMetaData,#01H
                                           ; SOURCE LINE # 2326
                                           ; SOURCE LINE # 2332
039D         ?C0098:
                                           ; SOURCE LINE # 2341
039D 7B01              MOV     R3,#01H
039F 7A00        R     MOV     R2,#HIGH dataBuffer
03A1 7900        R     MOV     R1,#LOW dataBuffer
03A3 900000      E     MOV     DPTR,#?_CyWriteRowFull?BYTE+06H
03A6 E500        R     MOV     A,pktSize
03A8 F0                MOVX    @DPTR,A
03A9 A3                INC     DPTR
03AA E500        R     MOV     A,pktSize+01H
03AC F0                MOVX    @DPTR,A
03AD AD00        R     MOV     R5,dataOffset+01H
03AF AC00        R     MOV     R4,dataOffset
03B1 AF00        R     MOV     R7,btldrData
03B3 120000      E     LCALL   _CyWriteRowFull
03B6 EF                MOV     A,R7
03B7 6004              JZ      ?C0102
03B9 7F0A              MOV     R7,#0AH
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 75  

03BB 8002              SJMP    ?C0103
03BD         ?C0102:
03BD 7F00              MOV     R7,#00H
03BF         ?C0103:
03BF 8F00        R     MOV     ackCode,R7
                                           ; SOURCE LINE # 2357
03C1 8003              SJMP    ?C0104
03C3         ?C0094:
                                           ; SOURCE LINE # 2359
                                           ; SOURCE LINE # 2360
03C3 750003      R     MOV     ackCode,#03H
                                           ; SOURCE LINE # 2361
03C6         ?C0104:
                                           ; SOURCE LINE # 2363
03C6 E4                CLR     A
03C7 F500        R     MOV     dataOffset,A
03C9 F500        R     MOV     dataOffset+01H,A
                                           ; SOURCE LINE # 2364
                                           ; SOURCE LINE # 2365
03CB 020000      R     LJMP    ?C0071
                                           ; SOURCE LINE # 2373
03CE         ?C0105:
                                           ; SOURCE LINE # 2375
03CE 200003      R     JB      communicationState,$ + 6H
03D1 020000      R     LJMP    ?C0071
                                           ; SOURCE LINE # 2376
                                           ; SOURCE LINE # 2378
03D4 E4                CLR     A
03D5 F500        R     MOV     dataOffset,A
03D7 F500        R     MOV     dataOffset+01H,A
                                           ; SOURCE LINE # 2381
03D9 020000      R     LJMP    ?C0050
                                           ; SOURCE LINE # 2382
                                           ; SOURCE LINE # 2383
                                           ; SOURCE LINE # 2420
03DC         ?C0107:
                                           ; SOURCE LINE # 2422
03DC 200003      R     JB      communicationState,$ + 6H
03DF 020000      R     LJMP    ?C0071
                                           ; SOURCE LINE # 2423
                                           ; SOURCE LINE # 2425
03E2 E500        R     MOV     A,dataOffset+01H
03E4 2500        R     ADD     A,pktSize+01H
03E6 FF                MOV     R7,A
03E7 E500        R     MOV     A,dataOffset
03E9 3500        R     ADDC    A,pktSize
03EB FE                MOV     R6,A
03EC D3                SETB    C
03ED EF                MOV     A,R7
03EE 942C              SUBB    A,#02CH
03F0 EE                MOV     A,R6
03F1 9401              SUBB    A,#01H
03F3 502D              JNC     ?C0109
                                           ; SOURCE LINE # 2426
                                           ; SOURCE LINE # 2427
03F5 E4                CLR     A
03F6 F500        R     MOV     ackCode,A
                                           ; SOURCE LINE # 2432
03F8 AE00        R     MOV     R6,pktSize
03FA AF00        R     MOV     R7,pktSize+01H
03FC 7400        R     MOV     A,#LOW dataBuffer
03FE 2500        R     ADD     A,dataOffset+01H
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 76  

0400 F9                MOV     R1,A
0401 7400        R     MOV     A,#HIGH dataBuffer
0403 3500        R     ADDC    A,dataOffset
0405 A801              MOV     R0,AR1
0407 FC                MOV     R4,A
0408 7D01              MOV     R5,#01H
040A 7B01              MOV     R3,#01H
040C 7A00        R     MOV     R2,#HIGH packetBuffer+04H
040E 7900        R     MOV     R1,#LOW packetBuffer+04H
0410 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 2439
0413 E500        R     MOV     A,pktSize+01H
0415 2500        R     ADD     A,dataOffset+01H
0417 F500        R     MOV     dataOffset+01H,A
0419 E500        R     MOV     A,pktSize
041B 3500        R     ADDC    A,dataOffset
041D F500        R     MOV     dataOffset,A
                                           ; SOURCE LINE # 2440
041F 020000      R     LJMP    ?C0071
0422         ?C0109:
                                           ; SOURCE LINE # 2442
                                           ; SOURCE LINE # 2443
0422 750003      R     MOV     ackCode,#03H
                                           ; SOURCE LINE # 2444
                                           ; SOURCE LINE # 2445
                                           ; SOURCE LINE # 2447
0425 020000      R     LJMP    ?C0071
                                           ; SOURCE LINE # 2455
0428         ?C0111:
                                           ; SOURCE LINE # 2460
0428 E500        R     MOV     A,pktSize+01H
042A 4500        R     ORL     A,pktSize
042C 7036              JNZ     ?C0112
                                           ; SOURCE LINE # 2462
                                           ; SOURCE LINE # 2465
042E 7800        R     MOV     R0,#LOW BtldrVersion
0430 7C00        R     MOV     R4,#HIGH BtldrVersion
0432 FD                MOV     R5,A
0433 7BFF              MOV     R3,#0FFH
0435 7A00        R     MOV     R2,#HIGH _?ix1000
0437 7900        R     MOV     R1,#LOW _?ix1000
0439 FE                MOV     R6,A
043A 7F08              MOV     R7,#08H
043C 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 2501
043F D200        R     SETB    communicationState
                                           ; SOURCE LINE # 2503
0441 750000      R     MOV     rspSize,#00H
0444 750008      R     MOV     rspSize+01H,#08H
                                           ; SOURCE LINE # 2504
0447 E4                CLR     A
0448 F500        R     MOV     dataOffset,A
044A F500        R     MOV     dataOffset+01H,A
                                           ; SOURCE LINE # 2509
044C AE00        R     MOV     R6,rspSize
044E AF00        R     MOV     R7,rspSize+01H
0450 7800        R     MOV     R0,#LOW packetBuffer+04H
0452 7C00        R     MOV     R4,#HIGH packetBuffer+04H
0454 7D01              MOV     R5,#01H
0456 FB                MOV     R3,A
0457 7A00        R     MOV     R2,#HIGH BtldrVersion
0459 7900        R     MOV     R1,#LOW BtldrVersion
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 77  

045B 120000      E     LCALL   ?C?COPYAMD
                                           ; SOURCE LINE # 2516
045E E4                CLR     A
045F F500        R     MOV     ackCode,A
                                           ; SOURCE LINE # 2517
0461 020000      R     LJMP    ?C0071
0464         ?C0112:
                                           ; SOURCE LINE # 2519
                                           ; SOURCE LINE # 2520
0464 750004      R     MOV     ackCode,#04H
                                           ; SOURCE LINE # 2521
                                           ; SOURCE LINE # 2522
0467 020000      R     LJMP    ?C0071
                                           ; SOURCE LINE # 2530
046A         ?C0114:
                                           ; SOURCE LINE # 2532
046A 200003      R     JB      communicationState,$ + 6H
046D 020000      R     LJMP    ?C0071
0470 E500        R     MOV     A,pktSize+01H
0472 6403              XRL     A,#03H
0474 4500        R     ORL     A,pktSize
0476 6003              JZ      $ + 5H
0478 020000      R     LJMP    ?C0071
                                           ; SOURCE LINE # 2533
                                           ; SOURCE LINE # 2535
047B 900000      R     MOV     DPTR,#packetBuffer+06H
047E E0                MOVX    A,@DPTR
047F FE                MOV     R6,A
0480 900000      R     MOV     DPTR,#packetBuffer+05H
0483 E0                MOVX    A,@DPTR
0484 FD                MOV     R5,A
0485 EE                MOV     A,R6
0486 F500        R     MOV     rowNum,A
0488 ED                MOV     A,R5
0489 F500        R     MOV     rowNum+01H,A
                                           ; SOURCE LINE # 2544
048B E500        R     MOV     A,btldrData
048D C3                CLR     C
048E 9440              SUBB    A,#040H
0490 4056              JC      ?C0116
0492 E500        R     MOV     A,btldrData
0494 D3                SETB    C
0495 947F              SUBB    A,#07FH
0497 504F              JNC     ?C0116
                                           ; SOURCE LINE # 2546
                                           ; SOURCE LINE # 2549
0499 AE00        R     MOV     R6,rowNum
049B AF00        R     MOV     R7,rowNum+01H
049D 7C00              MOV     R4,#00H
049F 7D10              MOV     R5,#010H
04A1 120000      E     LCALL   ?C?LIMUL
04A4 8F00        R     MOV     rowAddr+03H,R7
04A6 8E00        R     MOV     rowAddr+02H,R6
04A8 8D00        R     MOV     rowAddr+01H,R5
04AA 8C00        R     MOV     rowAddr,R4
                                           ; SOURCE LINE # 2552
04AC C3                CLR     C
04AD E500        R     MOV     A,rowNum+01H
04AF 9440              SUBB    A,#040H
04B1 E500        R     MOV     A,rowNum
04B3 9400              SUBB    A,#00H
04B5 5004              JNC     ?C0117
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 78  

04B7 7F00              MOV     R7,#00H
04B9 8002              SJMP    ?C0118
04BB         ?C0117:
04BB 7F0A              MOV     R7,#0AH
04BD         ?C0118:
04BD 8F00        R     MOV     ackCode,R7
                                           ; SOURCE LINE # 2555
04BF E500        R     MOV     A,ackCode
04C1 6003              JZ      $ + 5H
04C3 020000      R     LJMP    ?C0071
                                           ; SOURCE LINE # 2556
                                           ; SOURCE LINE # 2557
                                           ; SOURCE LINE # 2558
04C6         ?C0119:
                                           ; SOURCE LINE # 2560
04C6 850000      R     MOV     ?_Bootloader_Calc8BitSum?BYTE+07H,rowAddr+03H
04C9 850000      R     MOV     ?_Bootloader_Calc8BitSum?BYTE+06H,rowAddr+02H
04CC 850000      R     MOV     ?_Bootloader_Calc8BitSum?BYTE+05H,rowAddr+01H
04CF 850000      R     MOV     ?_Bootloader_Calc8BitSum?BYTE+04H,rowAddr
04D2 E4                CLR     A
04D3 750010      R     MOV     ?_Bootloader_Calc8BitSum?BYTE+0BH,#010H
04D6 F500        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+0AH,A
04D8 F500        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+09H,A
04DA F500        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+08H,A
04DC FF                MOV     R7,A
04DD 7E80              MOV     R6,#080H
04DF FD                MOV     R5,A
04E0 FC                MOV     R4,A
04E1 120000      R     LCALL   _Bootloader_Calc8BitSum
04E4 8F00        R     MOV     checksum,R7
                                           ; SOURCE LINE # 2561
04E6 806A              SJMP    ?C0120
04E8         ?C0116:
                                           ; SOURCE LINE # 2563
                                           ; SOURCE LINE # 2566
04E8 AE00        R     MOV     R6,rowNum
04EA AF00        R     MOV     R7,rowNum+01H
04EC 7C01              MOV     R4,#01H
04EE 7D00              MOV     R5,#00H
04F0 120000      E     LCALL   ?C?LIMUL
04F3 C004              PUSH    AR4
04F5 C005              PUSH    AR5
04F7 C006              PUSH    AR6
04F9 C007              PUSH    AR7
04FB AF00        R     MOV     R7,btldrData
04FD E4                CLR     A
04FE FC                MOV     R4,A
04FF FD                MOV     R5,A
0500 FE                MOV     R6,A
0501 FB                MOV     R3,A
0502 FA                MOV     R2,A
0503 7901              MOV     R1,#01H
0505 F8                MOV     R0,A
0506 120000      E     LCALL   ?C?LMUL
0509 D003              POP     AR3
050B D002              POP     AR2
050D D001              POP     AR1
050F D000              POP     AR0
0511 120000      E     LCALL   ?C?LADD
0514 8F00        R     MOV     rowAddr+03H,R7
0516 8E00        R     MOV     rowAddr+02H,R6
0518 8D00        R     MOV     rowAddr+01H,R5
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 79  

051A 8C00        R     MOV     rowAddr,R4
                                           ; SOURCE LINE # 2570
051C C3                CLR     C
051D E500        R     MOV     A,rowNum
051F 9401              SUBB    A,#01H
0521 5004              JNC     ?C0121
0523 7F00              MOV     R7,#00H
0525 8002              SJMP    ?C0122
0527         ?C0121:
0527 7F0A              MOV     R7,#0AH
0529         ?C0122:
0529 8F00        R     MOV     ackCode,R7
                                           ; SOURCE LINE # 2572
052B E500        R     MOV     A,ackCode
052D 6003              JZ      $ + 5H
052F 020000      R     LJMP    ?C0071
                                           ; SOURCE LINE # 2573
                                           ; SOURCE LINE # 2574
                                           ; SOURCE LINE # 2575
0532         ?C0123:
                                           ; SOURCE LINE # 2577
0532 850000      R     MOV     ?_Bootloader_Calc8BitSum?BYTE+07H,rowAddr+03H
0535 850000      R     MOV     ?_Bootloader_Calc8BitSum?BYTE+06H,rowAddr+02H
0538 850000      R     MOV     ?_Bootloader_Calc8BitSum?BYTE+05H,rowAddr+01H
053B 850000      R     MOV     ?_Bootloader_Calc8BitSum?BYTE+04H,rowAddr
053E E4                CLR     A
053F F500        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+0BH,A
0541 750001      R     MOV     ?_Bootloader_Calc8BitSum?BYTE+0AH,#01H
0544 F500        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+09H,A
0546 F500        R     MOV     ?_Bootloader_Calc8BitSum?BYTE+08H,A
0548 FF                MOV     R7,A
0549 FE                MOV     R6,A
054A 7D10              MOV     R5,#010H
054C FC                MOV     R4,A
054D 120000      R     LCALL   _Bootloader_Calc8BitSum
0550 8F00        R     MOV     checksum,R7
                                           ; SOURCE LINE # 2578
0552         ?C0120:
                                           ; SOURCE LINE # 2604
0552 E500        R     MOV     A,btldrData
0554 D3                SETB    C
0555 943F              SUBB    A,#03FH
0557 5072              JNC     ?C0124
                                           ; SOURCE LINE # 2605
                                           ; SOURCE LINE # 2609
0559 AF00        R     MOV     R7,btldrData
055B 7E00              MOV     R6,#00H
055D 7C20              MOV     R4,#020H
055F 7D00              MOV     R5,#00H
0561 120000      E     LCALL   ?C?LIMUL
0564 E4                CLR     A
0565 2F                ADD     A,R7
0566 FF                MOV     R7,A
0567 E4                CLR     A
0568 3E                ADDC    A,R6
0569 FE                MOV     R6,A
056A ED                MOV     A,R5
056B 3408              ADDC    A,#08H
056D FD                MOV     R5,A
056E E4                CLR     A
056F 3C                ADDC    A,R4
0570 FC                MOV     R4,A
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 80  

0571 C004              PUSH    AR4
0573 A905              MOV     R1,AR5
0575 AA06              MOV     R2,AR6
0577 AB07              MOV     R3,AR7
0579 AE00        R     MOV     R6,rowNum
057B AF00        R     MOV     R7,rowNum+01H
057D 7C00              MOV     R4,#00H
057F 7D20              MOV     R5,#020H
0581 120000      E     LCALL   ?C?LIMUL
0584 D000              POP     AR0
0586 120000      E     LCALL   ?C?LADD
0589 8F00        R     MOV     rowAddr+03H,R7
058B 8E00        R     MOV     rowAddr+02H,R6
058D 8D00        R     MOV     rowAddr+01H,R5
058F 8C00        R     MOV     rowAddr,R4
                                           ; SOURCE LINE # 2611
0591 E4                CLR     A
0592 F500        R     MOV     tmpIndex,A
0594 F500        R     MOV     tmpIndex+01H,A
0596         ?C0125:
0596 C3                CLR     C
0597 E500        R     MOV     A,tmpIndex+01H
0599 9420              SUBB    A,#020H
059B E500        R     MOV     A,tmpIndex
059D 9400              SUBB    A,#00H
059F 502A              JNC     ?C0124
                                           ; SOURCE LINE # 2612
                                           ; SOURCE LINE # 2613
05A1 E4                CLR     A
05A2 E500        R     MOV     A,tmpIndex+01H
05A4 2500        R     ADD     A,rowAddr+03H
05A6 FF                MOV     R7,A
05A7 E500        R     MOV     A,tmpIndex
05A9 3500        R     ADDC    A,rowAddr+02H
05AB FE                MOV     R6,A
05AC E4                CLR     A
05AD 3500        R     ADDC    A,rowAddr+01H
05AF FD                MOV     R5,A
05B0 E4                CLR     A
05B1 3500        R     ADDC    A,rowAddr
05B3 A907              MOV     R1,AR7
05B5 AA06              MOV     R2,AR6
05B7 AB05              MOV     R3,AR5
05B9 120000      E     LCALL   _cyread8
05BC EF                MOV     A,R7
05BD 2500        R     ADD     A,checksum
05BF F500        R     MOV     checksum,A
                                           ; SOURCE LINE # 2614
05C1 0500        R     INC     tmpIndex+01H
05C3 E500        R     MOV     A,tmpIndex+01H
05C5 7002              JNZ     ?C0161
05C7 0500        R     INC     tmpIndex
05C9         ?C0161:
05C9 80CB              SJMP    ?C0125
                                           ; SOURCE LINE # 2615
05CB         ?C0124:
                                           ; SOURCE LINE # 2626
05CB 850000      R     MOV     tmpRowNum,rowNum
05CE 850000      R     MOV     tmpRowNum+01H,rowNum+01H
                                           ; SOURCE LINE # 2631
05D1 E500        R     MOV     A,btldrData
05D3 702A              JNZ     ?C0128
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 81  

05D5 AE00        R     MOV     R6,tmpRowNum
05D7 AF00        R     MOV     R7,tmpRowNum+01H
05D9 FC                MOV     R4,A
05DA FD                MOV     R5,A
05DB 7BFF              MOV     R3,#0FFH
05DD FA                MOV     R2,A
05DE F9                MOV     R1,A
05DF F8                MOV     R0,A
05E0 C3                CLR     C
05E1 120000      E     LCALL   ?C?ULCMP
05E4 7019              JNZ     ?C0128
                                           ; SOURCE LINE # 2632
                                           ; SOURCE LINE # 2634
05E6 FD                MOV     R5,A
05E7 7F05              MOV     R7,#05H
05E9 120000      R     LCALL   _Bootloader_GetMetadata
05EC C3                CLR     C
05ED E500        R     MOV     A,checksum
05EF 9F                SUBB    A,R7
05F0 F500        R     MOV     checksum,A
                                           ; SOURCE LINE # 2637
05F2 E4                CLR     A
05F3 FD                MOV     R5,A
05F4 7F06              MOV     R7,#06H
05F6 120000      R     LCALL   _Bootloader_GetMetadata
05F9 C3                CLR     C
05FA E500        R     MOV     A,checksum
05FC 9F                SUBB    A,R7
05FD F500        R     MOV     checksum,A
                                           ; SOURCE LINE # 2639
05FF         ?C0128:
                                           ; SOURCE LINE # 2641
05FF E500        R     MOV     A,checksum
0601 F4                CPL     A
0602 04                INC     A
0603 900000      R     MOV     DPTR,#packetBuffer+04H
0606 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2642
0607 E4                CLR     A
0608 F500        R     MOV     ackCode,A
                                           ; SOURCE LINE # 2643
060A F500        R     MOV     rspSize,A
060C 750001      R     MOV     rspSize+01H,#01H
                                           ; SOURCE LINE # 2644
                                           ; SOURCE LINE # 2645
060F 8016              SJMP    ?C0071
                                           ; SOURCE LINE # 2653
0611         ?C0129:
                                           ; SOURCE LINE # 2672
0611 E4                CLR     A
0612 FF                MOV     R7,A
0613 120000      R     LCALL   _Bootloader_ValidateBootloadable
0616 EF                MOV     A,R7
0617 7006              JNZ     ?C0130
                                           ; SOURCE LINE # 2673
                                           ; SOURCE LINE # 2674
0619 9046FA            MOV     DPTR,#046FAH
061C 7480              MOV     A,#080H
061E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2675
061F         ?C0130:
                                           ; SOURCE LINE # 2681
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 82  

061F 120000      E     LCALL   CySoftwareReset
                                           ; SOURCE LINE # 2684
0622 8003              SJMP    ?C0071
                                           ; SOURCE LINE # 2690
0624         ?C0131:
                                           ; SOURCE LINE # 2726
                                           ; SOURCE LINE # 2727
0624 750005      R     MOV     ackCode,#05H
                                           ; SOURCE LINE # 2728
                                           ; SOURCE LINE # 2729
                                           ; SOURCE LINE # 2730
                                           ; SOURCE LINE # 2731
0627         ?C0071:
                                           ; SOURCE LINE # 2734
0627 7B01              MOV     R3,#01H
0629 7A00        R     MOV     R2,#HIGH packetBuffer
062B 7900        R     MOV     R1,#LOW packetBuffer
062D 850000      R     MOV     ?_Bootloader_WritePacket?BYTE+04H,rspSize
0630 850000      R     MOV     ?_Bootloader_WritePacket?BYTE+05H,rspSize+01H
0633 AF00        R     MOV     R7,ackCode
0635 120000      R     LCALL   _Bootloader_WritePacket
                                           ; SOURCE LINE # 2736
0638         ?C0050:
0638 900000      R     MOV     DPTR,#timeOut
063B E0                MOVX    A,@DPTR
063C 7003              JNZ     $ + 5H
063E 020000      R     LJMP    ?C0052
0641 300003      R     JNB     communicationState,$ + 6H
0644 020000      R     LJMP    ?C0052
                                           ; SOURCE LINE # 2737
0647 22                RET     
             ; FUNCTION _Bootloader_HostLink (END)

             ; FUNCTION _Bootloader_WritePacket (BEGIN)
                                           ; SOURCE LINE # 2761
;---- Variable 'status' assigned to Register 'R7' ----
0000 8B00        R     MOV     buffer,R3
0002 8A00        R     MOV     buffer+01H,R2
0004 8900        R     MOV     buffer+02H,R1
                                           ; SOURCE LINE # 2767
0006 7401              MOV     A,#01H
0008 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 2768
000B AB00        R     MOV     R3,buffer
000D 2500        R     ADD     A,buffer+02H
000F F9                MOV     R1,A
0010 E4                CLR     A
0011 3500        R     ADDC    A,buffer+01H
0013 FA                MOV     R2,A
0014 EF                MOV     A,R7
0015 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 2769
0018 E500        R     MOV     A,size+01H
001A AB00        R     MOV     R3,buffer
001C E500        R     MOV     A,buffer+02H
001E 2402              ADD     A,#02H
0020 F9                MOV     R1,A
0021 E4                CLR     A
0022 3500        R     ADDC    A,buffer+01H
0024 FA                MOV     R2,A
0025 E500        R     MOV     A,size+01H
0027 120000      E     LCALL   ?C?CSTPTR
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 83  

                                           ; SOURCE LINE # 2770
002A E500        R     MOV     A,size
002C FF                MOV     R7,A
002D AB00        R     MOV     R3,buffer
002F E500        R     MOV     A,buffer+02H
0031 2403              ADD     A,#03H
0033 F9                MOV     R1,A
0034 E4                CLR     A
0035 3500        R     ADDC    A,buffer+01H
0037 FA                MOV     R2,A
0038 EF                MOV     A,R7
0039 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 2773
003C AB00        R     MOV     R3,buffer
003E AA00        R     MOV     R2,buffer+01H
0040 A900        R     MOV     R1,buffer+02H
0042 E500        R     MOV     A,size+01H
0044 2404              ADD     A,#04H
0046 FD                MOV     R5,A
0047 E4                CLR     A
0048 3500        R     ADDC    A,size
004A FC                MOV     R4,A
004B 120000      R     LCALL   _Bootloader_CalcPacketChecksum
004E 8E00        R     MOV     checksum,R6
0050 8F00        R     MOV     checksum+01H,R7
                                           ; SOURCE LINE # 2775
0052 EF                MOV     A,R7
0053 AB00        R     MOV     R3,buffer
0055 E500        R     MOV     A,size+01H
0057 2404              ADD     A,#04H
0059 FD                MOV     R5,A
005A E4                CLR     A
005B 3500        R     ADDC    A,size
005D FC                MOV     R4,A
005E E500        R     MOV     A,buffer+02H
0060 2D                ADD     A,R5
0061 F9                MOV     R1,A
0062 E500        R     MOV     A,buffer+01H
0064 3C                ADDC    A,R4
0065 FA                MOV     R2,A
0066 EF                MOV     A,R7
0067 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 2776
006A E500        R     MOV     A,checksum
006C FF                MOV     R7,A
006D AB00        R     MOV     R3,buffer
006F E500        R     MOV     A,size+01H
0071 2405              ADD     A,#05H
0073 FD                MOV     R5,A
0074 E4                CLR     A
0075 3500        R     ADDC    A,size
0077 FC                MOV     R4,A
0078 E500        R     MOV     A,buffer+02H
007A 2D                ADD     A,R5
007B F9                MOV     R1,A
007C E500        R     MOV     A,buffer+01H
007E 3C                ADDC    A,R4
007F FA                MOV     R2,A
0080 EF                MOV     A,R7
0081 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 2777
0084 AB00        R     MOV     R3,buffer
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 84  

0086 E500        R     MOV     A,size+01H
0088 2406              ADD     A,#06H
008A FF                MOV     R7,A
008B E4                CLR     A
008C 3500        R     ADDC    A,size
008E FE                MOV     R6,A
008F E500        R     MOV     A,buffer+02H
0091 2F                ADD     A,R7
0092 F9                MOV     R1,A
0093 E500        R     MOV     A,buffer+01H
0095 3E                ADDC    A,R6
0096 FA                MOV     R2,A
0097 7417              MOV     A,#017H
0099 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 2780
009C E500        R     MOV     A,size+01H
009E 2407              ADD     A,#07H
00A0 FD                MOV     R5,A
00A1 E4                CLR     A
00A2 3500        R     ADDC    A,size
00A4 FC                MOV     R4,A
00A5 750000      E     MOV     ?_USBFS_CyBtldrCommWrite?BYTE+05H,#00H
00A8 750000      R     MOV     ?_USBFS_CyBtldrCommWrite?BYTE+06H,#HIGH size
00AB 750000      R     MOV     ?_USBFS_CyBtldrCommWrite?BYTE+07H,#LOW size
00AE 750096      E     MOV     ?_USBFS_CyBtldrCommWrite?BYTE+08H,#096H
00B1 AB00        R     MOV     R3,buffer
00B3 AA00        R     MOV     R2,buffer+01H
00B5 A900        R     MOV     R1,buffer+02H
00B7 120000      E     LCALL   _USBFS_CyBtldrCommWrite
                                           ; SOURCE LINE # 2781
00BA         ?C0133:
00BA 22                RET     
             ; FUNCTION _Bootloader_WritePacket (END)

             ; FUNCTION _Bootloader_SetFlashByte (BEGIN)
                                           ; SOURCE LINE # 2797
0000 900000      R     MOV     DPTR,#address
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2798
                                           ; SOURCE LINE # 2799
0006 900000      R     MOV     DPTR,#address
0009 120000      E     LCALL   ?C?LLDXDATA
000C E4                CLR     A
000D 2F                ADD     A,R7
000E FF                MOV     R7,A
000F E4                CLR     A
0010 3E                ADDC    A,R6
0011 FE                MOV     R6,A
0012 ED                MOV     A,R5
0013 34F0              ADDC    A,#0F0H
0015 FD                MOV     R5,A
0016 EC                MOV     A,R4
0017 34FF              ADDC    A,#0FFH
0019 FC                MOV     R4,A
001A 900000      R     MOV     DPTR,#flsAddr
001D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2803
0020 E4                CLR     A
0021 FB                MOV     R3,A
0022 FA                MOV     R2,A
0023 7901              MOV     R1,#01H
0025 F8                MOV     R0,A
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 85  

0026 900000      R     MOV     DPTR,#flsAddr
0029 120000      E     LCALL   ?C?LLDXDATA
002C 120000      E     LCALL   ?C?ULDIV
002F 900000      R     MOV     DPTR,#arrayId
0032 EF                MOV     A,R7
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2809
0034 900000      R     MOV     DPTR,#flsAddr
0037 120000      E     LCALL   ?C?LLDXDATA
003A EF                MOV     A,R7
003B EE                MOV     A,R6
003C E4                CLR     A
003D FD                MOV     R5,A
003E FC                MOV     R4,A
003F FB                MOV     R3,A
0040 7A01              MOV     R2,#01H
0042 F9                MOV     R1,A
0043 F8                MOV     R0,A
0044 120000      E     LCALL   ?C?ULDIV
0047 900000      R     MOV     DPTR,#rowNum
004A EE                MOV     A,R6
004B F0                MOVX    @DPTR,A
004C A3                INC     DPTR
004D EF                MOV     A,R7
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2812
004F 900000      R     MOV     DPTR,#address
0052 120000      E     LCALL   ?C?LLDXDATA
0055 EF                MOV     A,R7
0056 FB                MOV     R3,A
0057 E4                CLR     A
0058 FA                MOV     R2,A
0059 F9                MOV     R1,A
005A F8                MOV     R0,A
005B 900000      R     MOV     DPTR,#address
005E 120000      E     LCALL   ?C?LLDXDATA
0061 120000      E     LCALL   ?C?LSUB
0064 900000      R     MOV     DPTR,#baseAddr
0067 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2815
;---- Variable 'idx' assigned to Register 'R2/R3' ----
006A E4                CLR     A
006B FB                MOV     R3,A
006C         ?C0134:
006C C3                CLR     C
006D EA                MOV     A,R2
006E 9401              SUBB    A,#01H
0070 5025              JNC     ?C0135
                                           ; SOURCE LINE # 2816
                                           ; SOURCE LINE # 2817
0072 900000      R     MOV     DPTR,#baseAddr
0075 120000      E     LCALL   ?C?LLDXDATA
0078 EF                MOV     A,R7
0079 2B                ADD     A,R3
007A FF                MOV     R7,A
007B EE                MOV     A,R6
007C 3A                ADDC    A,R2
007D 8F82              MOV     DPL,R7
007F F583              MOV     DPH,A
0081 E4                CLR     A
0082 93                MOVC    A,@A+DPTR
0083 FF                MOV     R7,A
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 86  

0084 7400        R     MOV     A,#LOW rowData
0086 2B                ADD     A,R3
0087 F582              MOV     DPL,A
0089 7400        R     MOV     A,#HIGH rowData
008B 3A                ADDC    A,R2
008C F583              MOV     DPH,A
008E EF                MOV     A,R7
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2818
0090 0B                INC     R3
0091 EB                MOV     A,R3
0092 7001              JNZ     ?C0162
0094 0A                INC     R2
0095         ?C0162:
0095 80D5              SJMP    ?C0134
0097         ?C0135:
                                           ; SOURCE LINE # 2820
0097 900000      R     MOV     DPTR,#runType
009A E0                MOVX    A,@DPTR
009B FB                MOV     R3,A
009C 900000      R     MOV     DPTR,#address
009F 120000      E     LCALL   ?C?LLDXDATA
00A2 EF                MOV     A,R7
00A3 E4                CLR     A
00A4 FE                MOV     R6,A
00A5 7400        R     MOV     A,#LOW rowData
00A7 2F                ADD     A,R7
00A8 F582              MOV     DPL,A
00AA EE                MOV     A,R6
00AB 3400        R     ADDC    A,#HIGH rowData
00AD F583              MOV     DPH,A
00AF EB                MOV     A,R3
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2825
00B1 900000      R     MOV     DPTR,#arrayId
00B4 E0                MOVX    A,@DPTR
00B5 FF                MOV     R7,A
00B6 A3                INC     DPTR
00B7 E0                MOVX    A,@DPTR
00B8 FC                MOV     R4,A
00B9 A3                INC     DPTR
00BA E0                MOVX    A,@DPTR
00BB FD                MOV     R5,A
00BC 7B01              MOV     R3,#01H
00BE 7A00        R     MOV     R2,#HIGH rowData
00C0 7900        R     MOV     R1,#LOW rowData
00C2 120000      E     LCALL   _CyWriteRowData
                                           ; SOURCE LINE # 2837
00C5 22                RET     
             ; FUNCTION _Bootloader_SetFlashByte (END)

             ; FUNCTION _Bootloader_GetMetadata (BEGIN)
                                           ; SOURCE LINE # 2858
0000 900000      R     MOV     DPTR,#appId
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
;---- Variable 'field' assigned to Register 'R3' ----
0005 AB07              MOV     R3,AR7
                                           ; SOURCE LINE # 2859
                                           ; SOURCE LINE # 2861
0007 900000      R     MOV     DPTR,#fieldSize
000A 7402              MOV     A,#02H
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 87  

000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2862
000D E4                CLR     A
000E FF                MOV     R7,A
000F FE                MOV     R6,A
0010 FD                MOV     R5,A
0011 FC                MOV     R4,A
0012 A3                INC     DPTR
0013 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2864
0016 EB                MOV     A,R3
0017 120000      E     LCALL   ?C?CCASE
001A 0000        R     DW      ?C0139
001C 01                DB      01H
001D 0000        R     DW      ?C0140
001F 02                DB      02H
0020 0000        R     DW      ?C0141
0022 03                DB      03H
0023 0000        R     DW      ?C0142
0025 04                DB      04H
0026 0000        R     DW      ?C0143
0028 05                DB      05H
0029 0000        R     DW      ?C0144
002B 06                DB      06H
002C 0000        R     DW      ?C0146
002E 07                DB      07H
002F 0000        R     DW      ?C0145
0031 08                DB      08H
0032 0000        R     DW      ?C0147
0034 09                DB      09H
0035 0000        R     DW      ?C0148
0037 0A                DB      0AH
0038 0000        R     DW      ?C0149
003A 0B                DB      0BH
003B 0000        R     DW      ?C0150
003D 0C                DB      0CH
003E 0000              DW      00H
0040 0000        R     DW      ?C0151
                                           ; SOURCE LINE # 2865
                                           ; SOURCE LINE # 2866
0042         ?C0139:
                                           ; SOURCE LINE # 2867
0042 900000      R     MOV     DPTR,#appId
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 7E00              MOV     R6,#00H
0049 7C01              MOV     R4,#01H
004B 7D00              MOV     R5,#00H
004D 120000      E     LCALL   ?C?LIMUL
0050 120000      E     LCALL   ?C?LNEG
0053 EF                MOV     A,R7
0054 24C0              ADD     A,#0C0H
0056 FF                MOV     R7,A
0057 EE                MOV     A,R6
0058 34FF              ADDC    A,#0FFH
005A FE                MOV     R6,A
005B ED                MOV     A,R5
005C 3410              ADDC    A,#010H
005E FD                MOV     R5,A
005F E4                CLR     A
0060 3C                ADDC    A,R4
0061 FC                MOV     R4,A
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 88  

0062 A3                INC     DPTR
0063 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2868
0066 900000      R     MOV     DPTR,#fieldSize
0069 7401              MOV     A,#01H
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2869
006C 020000      R     LJMP    ?C0138
                                           ; SOURCE LINE # 2871
006F         ?C0140:
                                           ; SOURCE LINE # 2872
006F 900000      R     MOV     DPTR,#appId
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 7E00              MOV     R6,#00H
0076 7C01              MOV     R4,#01H
0078 7D00              MOV     R5,#00H
007A 120000      E     LCALL   ?C?LIMUL
007D C3                CLR     C
007E 74C3              MOV     A,#0C3H
0080 9F                SUBB    A,R7
0081 FF                MOV     R7,A
0082 74FF              MOV     A,#0FFH
0084 9E                SUBB    A,R6
0085 FE                MOV     R6,A
0086 7410              MOV     A,#010H
0088 9D                SUBB    A,R5
0089 FD                MOV     R5,A
008A E4                CLR     A
008B 9C                SUBB    A,R4
008C FC                MOV     R4,A
008D A3                INC     DPTR
008E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2876
0091 020000      R     LJMP    ?C0138
                                           ; SOURCE LINE # 2878
0094         ?C0141:
                                           ; SOURCE LINE # 2879
0094 900000      R     MOV     DPTR,#appId
0097 E0                MOVX    A,@DPTR
0098 FF                MOV     R7,A
0099 7E00              MOV     R6,#00H
009B 7C01              MOV     R4,#01H
009D 7D00              MOV     R5,#00H
009F 120000      E     LCALL   ?C?LIMUL
00A2 C3                CLR     C
00A3 74C7              MOV     A,#0C7H
00A5 9F                SUBB    A,R7
00A6 FF                MOV     R7,A
00A7 74FF              MOV     A,#0FFH
00A9 9E                SUBB    A,R6
00AA FE                MOV     R6,A
00AB 7410              MOV     A,#010H
00AD 9D                SUBB    A,R5
00AE FD                MOV     R5,A
00AF E4                CLR     A
00B0 9C                SUBB    A,R4
00B1 FC                MOV     R4,A
00B2 A3                INC     DPTR
00B3 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2880
00B6 020000      R     LJMP    ?C0138
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 89  

                                           ; SOURCE LINE # 2882
00B9         ?C0142:
                                           ; SOURCE LINE # 2883
00B9 900000      R     MOV     DPTR,#appId
00BC E0                MOVX    A,@DPTR
00BD FF                MOV     R7,A
00BE 7E00              MOV     R6,#00H
00C0 7C01              MOV     R4,#01H
00C2 7D00              MOV     R5,#00H
00C4 120000      E     LCALL   ?C?LIMUL
00C7 C3                CLR     C
00C8 74CB              MOV     A,#0CBH
00CA 9F                SUBB    A,R7
00CB FF                MOV     R7,A
00CC 74FF              MOV     A,#0FFH
00CE 9E                SUBB    A,R6
00CF FE                MOV     R6,A
00D0 7410              MOV     A,#010H
00D2 9D                SUBB    A,R5
00D3 FD                MOV     R5,A
00D4 E4                CLR     A
00D5 9C                SUBB    A,R4
00D6 FC                MOV     R4,A
00D7 A3                INC     DPTR
00D8 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2887
00DB 020000      R     LJMP    ?C0138
                                           ; SOURCE LINE # 2889
00DE         ?C0143:
                                           ; SOURCE LINE # 2890
00DE 900000      R     MOV     DPTR,#appId
00E1 E0                MOVX    A,@DPTR
00E2 FF                MOV     R7,A
00E3 7E00              MOV     R6,#00H
00E5 7C01              MOV     R4,#01H
00E7 7D00              MOV     R5,#00H
00E9 120000      E     LCALL   ?C?LIMUL
00EC C3                CLR     C
00ED 74D0              MOV     A,#0D0H
00EF 9F                SUBB    A,R7
00F0 FF                MOV     R7,A
00F1 74FF              MOV     A,#0FFH
00F3 9E                SUBB    A,R6
00F4 FE                MOV     R6,A
00F5 7410              MOV     A,#010H
00F7 9D                SUBB    A,R5
00F8 FD                MOV     R5,A
00F9 E4                CLR     A
00FA 9C                SUBB    A,R4
00FB FC                MOV     R4,A
00FC A3                INC     DPTR
00FD 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2891
0100 900000      R     MOV     DPTR,#fieldSize
0103 7401              MOV     A,#01H
0105 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2892
0106 020000      R     LJMP    ?C0138
                                           ; SOURCE LINE # 2894
0109         ?C0144:
                                           ; SOURCE LINE # 2895
0109 900000      R     MOV     DPTR,#appId
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 90  

010C E0                MOVX    A,@DPTR
010D FF                MOV     R7,A
010E 7E00              MOV     R6,#00H
0110 7C01              MOV     R4,#01H
0112 7D00              MOV     R5,#00H
0114 120000      E     LCALL   ?C?LIMUL
0117 C3                CLR     C
0118 74D1              MOV     A,#0D1H
011A 9F                SUBB    A,R7
011B FF                MOV     R7,A
011C 74FF              MOV     A,#0FFH
011E 9E                SUBB    A,R6
011F FE                MOV     R6,A
0120 7410              MOV     A,#010H
0122 9D                SUBB    A,R5
0123 FD                MOV     R5,A
0124 E4                CLR     A
0125 9C                SUBB    A,R4
0126 FC                MOV     R4,A
0127 A3                INC     DPTR
0128 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2896
012B 900000      R     MOV     DPTR,#fieldSize
012E 7401              MOV     A,#01H
0130 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2897
0131 020000      R     LJMP    ?C0138
                                           ; SOURCE LINE # 2899
0134         ?C0145:
                                           ; SOURCE LINE # 2900
0134 900000      R     MOV     DPTR,#appId
0137 E0                MOVX    A,@DPTR
0138 FF                MOV     R7,A
0139 7E00              MOV     R6,#00H
013B 7C01              MOV     R4,#01H
013D 7D00              MOV     R5,#00H
013F 120000      E     LCALL   ?C?LIMUL
0142 C3                CLR     C
0143 74D6              MOV     A,#0D6H
0145 9F                SUBB    A,R7
0146 FF                MOV     R7,A
0147 74FF              MOV     A,#0FFH
0149 9E                SUBB    A,R6
014A FE                MOV     R6,A
014B 7410              MOV     A,#010H
014D 9D                SUBB    A,R5
014E FD                MOV     R5,A
014F E4                CLR     A
0150 9C                SUBB    A,R4
0151 FC                MOV     R4,A
0152 A3                INC     DPTR
0153 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2901
0156 020000      R     LJMP    ?C0138
                                           ; SOURCE LINE # 2903
0159         ?C0146:
                                           ; SOURCE LINE # 2904
0159 900000      R     MOV     DPTR,#appId
015C E0                MOVX    A,@DPTR
015D FF                MOV     R7,A
015E 7E00              MOV     R6,#00H
0160 7C01              MOV     R4,#01H
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 91  

0162 7D00              MOV     R5,#00H
0164 120000      E     LCALL   ?C?LIMUL
0167 C3                CLR     C
0168 74D2              MOV     A,#0D2H
016A 9F                SUBB    A,R7
016B FF                MOV     R7,A
016C 74FF              MOV     A,#0FFH
016E 9E                SUBB    A,R6
016F FE                MOV     R6,A
0170 7410              MOV     A,#010H
0172 9D                SUBB    A,R5
0173 FD                MOV     R5,A
0174 E4                CLR     A
0175 9C                SUBB    A,R4
0176 FC                MOV     R4,A
0177 A3                INC     DPTR
0178 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2905
017B 020000      R     LJMP    ?C0138
                                           ; SOURCE LINE # 2907
017E         ?C0147:
                                           ; SOURCE LINE # 2908
017E 900000      R     MOV     DPTR,#appId
0181 E0                MOVX    A,@DPTR
0182 FF                MOV     R7,A
0183 7E00              MOV     R6,#00H
0185 7C01              MOV     R4,#01H
0187 7D00              MOV     R5,#00H
0189 120000      E     LCALL   ?C?LIMUL
018C C3                CLR     C
018D 74D4              MOV     A,#0D4H
018F 9F                SUBB    A,R7
0190 FF                MOV     R7,A
0191 74FF              MOV     A,#0FFH
0193 9E                SUBB    A,R6
0194 FE                MOV     R6,A
0195 7410              MOV     A,#010H
0197 9D                SUBB    A,R5
0198 FD                MOV     R5,A
0199 E4                CLR     A
019A 9C                SUBB    A,R4
019B FC                MOV     R4,A
019C A3                INC     DPTR
019D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2909
01A0 020000      R     LJMP    ?C0138
                                           ; SOURCE LINE # 2911
01A3         ?C0148:
                                           ; SOURCE LINE # 2912
01A3 900000      R     MOV     DPTR,#appId
01A6 E0                MOVX    A,@DPTR
01A7 FF                MOV     R7,A
01A8 7E00              MOV     R6,#00H
01AA 7C01              MOV     R4,#01H
01AC 7D00              MOV     R5,#00H
01AE 120000      E     LCALL   ?C?LIMUL
01B1 C3                CLR     C
01B2 74D8              MOV     A,#0D8H
01B4 9F                SUBB    A,R7
01B5 FF                MOV     R7,A
01B6 74FF              MOV     A,#0FFH
01B8 9E                SUBB    A,R6
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 92  

01B9 FE                MOV     R6,A
01BA 7410              MOV     A,#010H
01BC 9D                SUBB    A,R5
01BD FD                MOV     R5,A
01BE E4                CLR     A
01BF 9C                SUBB    A,R4
01C0 FC                MOV     R4,A
01C1 A3                INC     DPTR
01C2 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2913
01C5 900000      R     MOV     DPTR,#fieldSize
01C8 7404              MOV     A,#04H
01CA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2914
01CB 8064              SJMP    ?C0138
                                           ; SOURCE LINE # 2916
01CD         ?C0149:
                                           ; SOURCE LINE # 2917
01CD 900000      R     MOV     DPTR,#appId
01D0 E0                MOVX    A,@DPTR
01D1 FF                MOV     R7,A
01D2 7E00              MOV     R6,#00H
01D4 7C01              MOV     R4,#01H
01D6 7D00              MOV     R5,#00H
01D8 120000      E     LCALL   ?C?LIMUL
01DB C3                CLR     C
01DC 74DC              MOV     A,#0DCH
01DE 9F                SUBB    A,R7
01DF FF                MOV     R7,A
01E0 74FF              MOV     A,#0FFH
01E2 9E                SUBB    A,R6
01E3 FE                MOV     R6,A
01E4 7410              MOV     A,#010H
01E6 9D                SUBB    A,R5
01E7 FD                MOV     R5,A
01E8 E4                CLR     A
01E9 9C                SUBB    A,R4
01EA FC                MOV     R4,A
01EB A3                INC     DPTR
01EC 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2918
01EF 900000      R     MOV     DPTR,#fieldSize
01F2 7401              MOV     A,#01H
01F4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2919
01F5 803A              SJMP    ?C0138
                                           ; SOURCE LINE # 2921
01F7         ?C0150:
                                           ; SOURCE LINE # 2922
01F7 900000      R     MOV     DPTR,#appId
01FA E0                MOVX    A,@DPTR
01FB FF                MOV     R7,A
01FC 7E00              MOV     R6,#00H
01FE 7C01              MOV     R4,#01H
0200 7D00              MOV     R5,#00H
0202 120000      E     LCALL   ?C?LIMUL
0205 C3                CLR     C
0206 74E0              MOV     A,#0E0H
0208 9F                SUBB    A,R7
0209 FF                MOV     R7,A
020A 74FF              MOV     A,#0FFH
020C 9E                SUBB    A,R6
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 93  

020D FE                MOV     R6,A
020E 7410              MOV     A,#010H
0210 9D                SUBB    A,R5
0211 FD                MOV     R5,A
0212 E4                CLR     A
0213 9C                SUBB    A,R4
0214 FC                MOV     R4,A
0215 A3                INC     DPTR
0216 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2923
0219 900000      R     MOV     DPTR,#fieldSize
021C 7404              MOV     A,#04H
021E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2924
021F 8010              SJMP    ?C0138
                                           ; SOURCE LINE # 2926
0221         ?C0151:
                                           ; SOURCE LINE # 2928
0221 7F00              MOV     R7,#00H
0223 120000      E     LCALL   _?CyHalt
                                           ; SOURCE LINE # 2929
0226 E4                CLR     A
0227 FF                MOV     R7,A
0228 FE                MOV     R6,A
0229 FD                MOV     R5,A
022A FC                MOV     R4,A
022B 900000      R     MOV     DPTR,#fieldPtr
022E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2930
                                           ; SOURCE LINE # 2931
0231         ?C0138:
                                           ; SOURCE LINE # 2934
0231 900000      R     MOV     DPTR,#fieldSize
0234 E0                MOVX    A,@DPTR
0235 B40119            CJNE    A,#01H,?C0153
                                           ; SOURCE LINE # 2935
                                           ; SOURCE LINE # 2936
0238 900000      R     MOV     DPTR,#fieldPtr
023B 120000      E     LCALL   ?C?LLDXDATA
023E A907              MOV     R1,AR7
0240 AA06              MOV     R2,AR6
0242 AB05              MOV     R3,AR5
0244 120000      E     LCALL   _cyread8
0247 E4                CLR     A
0248 FC                MOV     R4,A
0249 FD                MOV     R5,A
024A FE                MOV     R6,A
024B 900000      R     MOV     DPTR,#result
024E 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2937
0251         ?C0153:
                                           ; SOURCE LINE # 2941
0251 900000      R     MOV     DPTR,#fieldSize
0254 E0                MOVX    A,@DPTR
0255 6402              XRL     A,#02H
0257 705C              JNZ     ?C0154
                                           ; SOURCE LINE # 2942
                                           ; SOURCE LINE # 2943
0259 900000      R     MOV     DPTR,#fieldPtr
025C 120000      E     LCALL   ?C?LLDXDATA
025F EF                MOV     A,R7
0260 2401              ADD     A,#01H
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 94  

0262 FF                MOV     R7,A
0263 E4                CLR     A
0264 3E                ADDC    A,R6
0265 FE                MOV     R6,A
0266 E4                CLR     A
0267 3D                ADDC    A,R5
0268 FD                MOV     R5,A
0269 E4                CLR     A
026A 3C                ADDC    A,R4
026B A907              MOV     R1,AR7
026D AA06              MOV     R2,AR6
026F AB05              MOV     R3,AR5
0271 120000      E     LCALL   _cyread8
0274 E4                CLR     A
0275 FC                MOV     R4,A
0276 FD                MOV     R5,A
0277 FE                MOV     R6,A
0278 900000      R     MOV     DPTR,#result
027B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2944
027E 900000      R     MOV     DPTR,#result
0281 120000      E     LCALL   ?C?LLDXDATA0
0284 C000              PUSH    AR0
0286 C001              PUSH    AR1
0288 C002              PUSH    AR2
028A C003              PUSH    AR3
028C 900000      R     MOV     DPTR,#fieldPtr
028F 120000      E     LCALL   ?C?LLDXDATA
0292 A907              MOV     R1,AR7
0294 AA06              MOV     R2,AR6
0296 AB05              MOV     R3,AR5
0298 120000      E     LCALL   _cyread8
029B E4                CLR     A
029C FC                MOV     R4,A
029D FD                MOV     R5,A
029E FE                MOV     R6,A
029F 7808              MOV     R0,#08H
02A1 120000      E     LCALL   ?C?LSHL
02A4 D003              POP     AR3
02A6 D002              POP     AR2
02A8 D001              POP     AR1
02AA D000              POP     AR0
02AC 120000      E     LCALL   ?C?LOR
02AF 900000      R     MOV     DPTR,#result
02B2 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2945
02B5         ?C0154:
                                           ; SOURCE LINE # 2947
02B5 900000      R     MOV     DPTR,#fieldSize
02B8 E0                MOVX    A,@DPTR
02B9 6404              XRL     A,#04H
02BB 6003              JZ      $ + 5H
02BD 020000      R     LJMP    ?C0155
                                           ; SOURCE LINE # 2948
                                           ; SOURCE LINE # 2949
02C0 900000      R     MOV     DPTR,#fieldPtr
02C3 120000      E     LCALL   ?C?LLDXDATA
02C6 EF                MOV     A,R7
02C7 2403              ADD     A,#03H
02C9 FF                MOV     R7,A
02CA E4                CLR     A
02CB 3E                ADDC    A,R6
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 95  

02CC FE                MOV     R6,A
02CD E4                CLR     A
02CE 3D                ADDC    A,R5
02CF FD                MOV     R5,A
02D0 E4                CLR     A
02D1 3C                ADDC    A,R4
02D2 A907              MOV     R1,AR7
02D4 AA06              MOV     R2,AR6
02D6 AB05              MOV     R3,AR5
02D8 120000      E     LCALL   _cyread8
02DB E4                CLR     A
02DC FC                MOV     R4,A
02DD FD                MOV     R5,A
02DE FE                MOV     R6,A
02DF 900000      R     MOV     DPTR,#result
02E2 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2950
02E5 900000      R     MOV     DPTR,#result
02E8 120000      E     LCALL   ?C?LLDXDATA0
02EB C000              PUSH    AR0
02ED C001              PUSH    AR1
02EF C002              PUSH    AR2
02F1 C003              PUSH    AR3
02F3 900000      R     MOV     DPTR,#fieldPtr
02F6 120000      E     LCALL   ?C?LLDXDATA
02F9 EF                MOV     A,R7
02FA 2402              ADD     A,#02H
02FC FF                MOV     R7,A
02FD E4                CLR     A
02FE 3E                ADDC    A,R6
02FF FE                MOV     R6,A
0300 E4                CLR     A
0301 3D                ADDC    A,R5
0302 FD                MOV     R5,A
0303 E4                CLR     A
0304 3C                ADDC    A,R4
0305 A907              MOV     R1,AR7
0307 AA06              MOV     R2,AR6
0309 AB05              MOV     R3,AR5
030B 120000      E     LCALL   _cyread8
030E E4                CLR     A
030F FC                MOV     R4,A
0310 FD                MOV     R5,A
0311 FE                MOV     R6,A
0312 7808              MOV     R0,#08H
0314 120000      E     LCALL   ?C?LSHL
0317 D003              POP     AR3
0319 D002              POP     AR2
031B D001              POP     AR1
031D D000              POP     AR0
031F 120000      E     LCALL   ?C?LOR
0322 900000      R     MOV     DPTR,#result
0325 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2951
0328 900000      R     MOV     DPTR,#result
032B 120000      E     LCALL   ?C?LLDXDATA0
032E C000              PUSH    AR0
0330 C001              PUSH    AR1
0332 C002              PUSH    AR2
0334 C003              PUSH    AR3
0336 900000      R     MOV     DPTR,#fieldPtr
0339 120000      E     LCALL   ?C?LLDXDATA
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 96  

033C EF                MOV     A,R7
033D 2401              ADD     A,#01H
033F FF                MOV     R7,A
0340 E4                CLR     A
0341 3E                ADDC    A,R6
0342 FE                MOV     R6,A
0343 E4                CLR     A
0344 3D                ADDC    A,R5
0345 FD                MOV     R5,A
0346 E4                CLR     A
0347 3C                ADDC    A,R4
0348 A907              MOV     R1,AR7
034A AA06              MOV     R2,AR6
034C AB05              MOV     R3,AR5
034E 120000      E     LCALL   _cyread8
0351 E4                CLR     A
0352 FC                MOV     R4,A
0353 FD                MOV     R5,A
0354 FE                MOV     R6,A
0355 7810              MOV     R0,#010H
0357 120000      E     LCALL   ?C?LSHL
035A D003              POP     AR3
035C D002              POP     AR2
035E D001              POP     AR1
0360 D000              POP     AR0
0362 120000      E     LCALL   ?C?LOR
0365 900000      R     MOV     DPTR,#result
0368 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2952
036B 900000      R     MOV     DPTR,#result
036E 120000      E     LCALL   ?C?LLDXDATA0
0371 C000              PUSH    AR0
0373 C001              PUSH    AR1
0375 C002              PUSH    AR2
0377 C003              PUSH    AR3
0379 900000      R     MOV     DPTR,#fieldPtr
037C 120000      E     LCALL   ?C?LLDXDATA
037F A907              MOV     R1,AR7
0381 AA06              MOV     R2,AR6
0383 AB05              MOV     R3,AR5
0385 120000      E     LCALL   _cyread8
0388 E4                CLR     A
0389 FC                MOV     R4,A
038A FD                MOV     R5,A
038B FE                MOV     R6,A
038C 7818              MOV     R0,#018H
038E 120000      E     LCALL   ?C?LSHL
0391 D003              POP     AR3
0393 D002              POP     AR2
0395 D001              POP     AR1
0397 D000              POP     AR0
0399 120000      E     LCALL   ?C?LOR
039C 900000      R     MOV     DPTR,#result
039F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 2953
03A2         ?C0155:
                                           ; SOURCE LINE # 2973
03A2 900000      R     MOV     DPTR,#result
03A5 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 2974
03A8         ?C0156:
03A8 22                RET     
C51 COMPILER V9.51   BOOTLOADER                                                            01/18/2016 13:18:02 PAGE 97  

             ; FUNCTION _Bootloader_GetMetadata (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3969    ----
   CONSTANT SIZE    =     13    ----
   XDATA SIZE       =      4    1178
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      84
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
