C51 COMPILER V9.51   USBFS_CLS                                                             07/29/2016 09:50:43 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USBFS_CLS
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\USBFS_cls.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\USBFS_cls.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(DEBU
                    -G) WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/USBFS_cls.lst) CD OT(5,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\USBFS_cls.obj)

line level    source

   1          /***************************************************************************//**
   2          * \file USBFS_cls.c
   3          * \version 3.0
   4          *
   5          * \brief
   6          *  This file contains the USB Class request handler.
   7          *
   8          ********************************************************************************
   9          * \copyright
  10          * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  11          * You may use this file only in accordance with the license, terms, conditions,
  12          * disclaimers, and limitations in the end user license agreement accompanying
  13          * the software package with which this file was provided.
  14          *******************************************************************************/
  15          
  16          #include "USBFS_pvt.h"
  17          
  18          
  19          #if(USBFS_EXTERN_CLS == USBFS_FALSE)
  20          
  21          /***************************************
  22          * User Implemented Class Driver Declarations.
  23          ***************************************/
  24          /* `#START USER_DEFINED_CLASS_DECLARATIONS` Place your declaration here */
  25          
  26          /* `#END` */
  27          
  28          
  29          /*******************************************************************************
  30          * Function Name: USBFS_DispatchClassRqst
  31          ****************************************************************************//**
  32          *  This routine dispatches class specific requests depend on interface class.
  33          *
  34          * \return
  35          *  requestHandled.
  36          *
  37          * \reentrant
  38          *  No.
  39          *
  40          *******************************************************************************/
  41          uint8 USBFS_DispatchClassRqst(void) 
  42          {
  43   1          uint8 requestHandled;
  44   1          uint8 interfaceNumber;
  45   1      
  46   1          /* Get interface to which request is intended. */
  47   1          switch (USBFS_bmRequestTypeReg & USBFS_RQST_RCPT_MASK)
  48   1          {
  49   2              case USBFS_RQST_RCPT_IFC:
  50   2                  /* Class-specific request directed to interface: wIndexLoReg 
  51   2                  * contains interface number.
  52   2                  */
  53   2                  interfaceNumber = (uint8) USBFS_wIndexLoReg;
C51 COMPILER V9.51   USBFS_CLS                                                             07/29/2016 09:50:43 PAGE 2   

  54   2                  break;
  55   2              
  56   2              case USBFS_RQST_RCPT_EP:
  57   2                  /* Class-specific request directed to endpoint: wIndexLoReg contains 
  58   2                  * endpoint number. Find interface related to endpoint, 
  59   2                  */
  60   2                  interfaceNumber = USBFS_EP[USBFS_wIndexLoReg & USBFS_DIR_UNUSED].interface;
  61   2                  break;
  62   2                  
  63   2              default:
  64   2                  /* Default interface is zero. */
  65   2                  interfaceNumber = 0u;
  66   2                  break;
  67   2          }
  68   1      
  69   1      #if (defined(USBFS_ENABLE_HID_CLASS) ||\
  70   1                  defined(USBFS_ENABLE_AUDIO_CLASS) ||\
  71   1                  defined(USBFS_ENABLE_CDC_CLASS) ||\
  72   1                  USBFS_ENABLE_MSC_CLASS)
  73   1      
  74   1          /* Handle class request depends on interface type. */
  75   1          switch (USBFS_interfaceClass[interfaceNumber])
  76   1          {
  77   2          #if defined(USBFS_ENABLE_HID_CLASS)
  78   2              case USBFS_CLASS_HID:
  79   2                  requestHandled = USBFS_DispatchHIDClassRqst();
  80   2                  break;
  81   2          #endif /* (USBFS_ENABLE_HID_CLASS) */
  82   2                  
  83   2          #if defined(USBFS_ENABLE_AUDIO_CLASS)
                      case USBFS_CLASS_AUDIO:
                          requestHandled = USBFS_DispatchAUDIOClassRqst();
                          break;
                  #endif /* (USBFS_CLASS_AUDIO) */
  88   2                  
  89   2          #if defined(USBFS_ENABLE_CDC_CLASS)
                      case USBFS_CLASS_CDC:
                          requestHandled = USBFS_DispatchCDCClassRqst();
                          break;
                  #endif /* (USBFS_ENABLE_CDC_CLASS) */
  94   2              
  95   2          #if (USBFS_ENABLE_MSC_CLASS)
                      case USBFS_CLASS_MSD:
                      #if (USBFS_HANDLE_MSC_REQUESTS)
                          /* MSC requests are handled by the component. */
                          requestHandled = USBFS_DispatchMSCClassRqst();
                      #elif defined(USBFS_DISPATCH_MSC_CLASS_RQST_CALLBACK)
                          /* MSC requests are handled by user defined callbcak. */
                          requestHandled = USBFS_DispatchMSCClassRqst_Callback();
                      #else
                          /* MSC requests are not handled. */
                          requestHandled = USBFS_FALSE;
                      #endif /* (USBFS_HANDLE_MSC_REQUESTS) */
                          break;
                  #endif /* (USBFS_ENABLE_MSC_CLASS) */
 109   2              
 110   2              default:
 111   2                  /* Request is not handled: unknown class request type. */
 112   2                  requestHandled = USBFS_FALSE;
 113   2                  break;
 114   2          }
 115   1      #else /*No class is defined*/
C51 COMPILER V9.51   USBFS_CLS                                                             07/29/2016 09:50:43 PAGE 3   

                  if (0u != interfaceNumber)
                  {
                      /* Suppress warning message */
                  }
                  requestHandled = USBFS_FALSE;
              #endif /*HID or AUDIO or MSC or CDC class enabled*/
 122   1      
 123   1          /* `#START USER_DEFINED_CLASS_CODE` Place your Class request here */
 124   1      
 125   1          /* `#END` */
 126   1      
 127   1      #ifdef USBFS_DISPATCH_CLASS_RQST_CALLBACK
                  if (USBFS_FALSE == requestHandled)
                  {
                      requestHandled = USBFS_DispatchClassRqst_Callback(interfaceNumber);
                  }
              #endif /* (USBFS_DISPATCH_CLASS_RQST_CALLBACK) */
 133   1      
 134   1          return (requestHandled);
 135   1      }
 136          
 137          
 138          /*******************************************************************************
 139          * Additional user functions supporting Class Specific Requests
 140          ********************************************************************************/
 141          
 142          /* `#START CLASS_SPECIFIC_FUNCTIONS` Place any additional functions here */
 143          
 144          /* `#END` */
 145          
 146          #endif /* USBFS_EXTERN_CLS */
 147          
 148          
 149          /* [] END OF FILE */
C51 COMPILER V9.51   USBFS_CLS                                                             07/29/2016 09:50:43 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION USBFS_DispatchClassRqst (BEGIN)
                                           ; SOURCE LINE # 41
                                           ; SOURCE LINE # 42
                                           ; SOURCE LINE # 47
0000 906000            MOV     DPTR,#06000H
0003 E0                MOVX    A,@DPTR
0004 5403              ANL     A,#03H
0006 24FE              ADD     A,#0FEH
0008 600D              JZ      ?C0003
000A 04                INC     A
000B 7024              JNZ     ?C0004
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 49
000D         ?C0002:
                                           ; SOURCE LINE # 53
000D 906004            MOV     DPTR,#06004H
0010 E0                MOVX    A,@DPTR
0011 900000      R     MOV     DPTR,#interfaceNumber
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 54
0015 801F              SJMP    ?C0001
                                           ; SOURCE LINE # 56
0017         ?C0003:
                                           ; SOURCE LINE # 60
0017 906004            MOV     DPTR,#06004H
001A E0                MOVX    A,@DPTR
001B 547F              ANL     A,#07FH
001D 75F00B            MOV     B,#0BH
0020 A4                MUL     AB
0021 2400        E     ADD     A,#LOW USBFS_EP+0AH
0023 F582              MOV     DPL,A
0025 E4                CLR     A
0026 3400        E     ADDC    A,#HIGH USBFS_EP+0AH
0028 F583              MOV     DPH,A
002A E0                MOVX    A,@DPTR
002B 900000      R     MOV     DPTR,#interfaceNumber
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 61
002F 8005              SJMP    ?C0001
                                           ; SOURCE LINE # 63
0031         ?C0004:
                                           ; SOURCE LINE # 65
0031 E4                CLR     A
0032 900000      R     MOV     DPTR,#interfaceNumber
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 66
                                           ; SOURCE LINE # 67
0036         ?C0001:
                                           ; SOURCE LINE # 75
0036 900000      R     MOV     DPTR,#interfaceNumber
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B 900000      E     MOV     DPTR,#USBFS_interfaceClass
003E E0                MOVX    A,@DPTR
003F FC                MOV     R4,A
0040 A3                INC     DPTR
0041 E0                MOVX    A,@DPTR
0042 2F                ADD     A,R7
0043 F582              MOV     DPL,A
C51 COMPILER V9.51   USBFS_CLS                                                             07/29/2016 09:50:43 PAGE 5   

0045 E4                CLR     A
0046 3C                ADDC    A,R4
0047 F583              MOV     DPH,A
0049 E4                CLR     A
004A 93                MOVC    A,@A+DPTR
004B 24FD              ADD     A,#0FDH
004D 700A              JNZ     ?C0007
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 78
004F         ?C0006:
                                           ; SOURCE LINE # 79
004F 120000      E     LCALL   USBFS_DispatchHIDClassRqst
0052 900000      R     MOV     DPTR,#requestHandled
0055 EF                MOV     A,R7
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 80
0057 8005              SJMP    ?C0005
                                           ; SOURCE LINE # 110
0059         ?C0007:
                                           ; SOURCE LINE # 112
0059 E4                CLR     A
005A 900000      R     MOV     DPTR,#requestHandled
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 114
005E         ?C0005:
                                           ; SOURCE LINE # 134
005E 900000      R     MOV     DPTR,#requestHandled
0061 E0                MOVX    A,@DPTR
0062 FF                MOV     R7,A
                                           ; SOURCE LINE # 135
0063         ?C0008:
0063 22                RET     
             ; FUNCTION USBFS_DispatchClassRqst (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    100    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
