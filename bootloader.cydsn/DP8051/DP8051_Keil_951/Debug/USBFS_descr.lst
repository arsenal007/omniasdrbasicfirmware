C51 COMPILER V9.51   USBFS_DESCR                                                           01/07/2016 22:10:56 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USBFS_DESCR
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\USBFS_descr.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\USBFS_descr.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(DE
                    -BUG) WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/USBFS_descr.lst) CD OT(5,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\USBFS_desc
                    -r.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: USBFS_descr.c
   3          * Version 2.80
   4          *
   5          * Description:
   6          *  USB descriptors and storage.
   7          *
   8          *  Note:
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "USBFS.h"
  18          #include "USBFS_pvt.h"
  19          
  20          
  21          /*****************************************************************************
  22          *  User supplied descriptors.  If you want to specify your own descriptors,
  23          *  define USER_SUPPLIED_DESCRIPTORS below and add your descriptors.
  24          *****************************************************************************/
  25          /* `#START USER_DESCRIPTORS_DECLARATIONS` Place your declaration here */
  26          
  27          /* `#END` */
  28          
  29          
  30          /***************************************
  31          *  USB Customizer Generated Descriptors
  32          ***************************************/
  33          
  34          #if !defined(USER_SUPPLIED_DESCRIPTORS)
  35          /*********************************************************************
  36          * Device Descriptors
  37          *********************************************************************/
  38          const uint8 CYCODE USBFS_DEVICE0_DESCR[18u] = {
  39          /* Descriptor Length                       */ 0x12u,
  40          /* DescriptorType: DEVICE                  */ 0x01u,
  41          /* bcdUSB (ver 2.0)                        */ 0x00u, 0x02u,
  42          /* bDeviceClass                            */ 0x00u,
  43          /* bDeviceSubClass                         */ 0x00u,
  44          /* bDeviceProtocol                         */ 0x00u,
  45          /* bMaxPacketSize0                         */ 0x08u,
  46          /* idVendor                                */ 0xB4u, 0x04u,
  47          /* idProduct                               */ 0x1Du, 0xB7u,
  48          /* bcdDevice                               */ 0x01u, 0x30u,
  49          /* iManufacturer                           */ 0x02u,
  50          /* iProduct                                */ 0x03u,
  51          /* iSerialNumber                           */ 0x80u,
  52          /* bNumConfigurations                      */ 0x01u
C51 COMPILER V9.51   USBFS_DESCR                                                           01/07/2016 22:10:56 PAGE 2   

  53          };
  54          /*********************************************************************
  55          * Config Descriptor  
  56          *********************************************************************/
  57          const uint8 CYCODE USBFS_DEVICE0_CONFIGURATION0_DESCR[41u] = {
  58          /*  Config Descriptor Length               */ 0x09u,
  59          /*  DescriptorType: CONFIG                 */ 0x02u,
  60          /*  wTotalLength                           */ 0x29u, 0x00u,
  61          /*  bNumInterfaces                         */ 0x01u,
  62          /*  bConfigurationValue                    */ 0x01u,
  63          /*  iConfiguration                         */ 0x00u,
  64          /*  bmAttributes                           */ 0xC0u,
  65          /*  bMaxPower                              */ 0x02u,
  66          /*********************************************************************
  67          * Interface Descriptor
  68          *********************************************************************/
  69          /*  Interface Descriptor Length            */ 0x09u,
  70          /*  DescriptorType: INTERFACE              */ 0x04u,
  71          /*  bInterfaceNumber                       */ 0x00u,
  72          /*  bAlternateSetting                      */ 0x00u,
  73          /*  bNumEndpoints                          */ 0x02u,
  74          /*  bInterfaceClass                        */ 0x03u,
  75          /*  bInterfaceSubClass                     */ 0x00u,
  76          /*  bInterfaceProtocol                     */ 0x00u,
  77          /*  iInterface                             */ 0x03u,
  78          /*********************************************************************
  79          * HID Class Descriptor
  80          *********************************************************************/
  81          /*  HID Class Descriptor Length            */ 0x09u,
  82          /*  DescriptorType: HID_CLASS              */ 0x21u,
  83          /*  bcdHID                                 */ 0x11u, 0x01u,
  84          /*  bCountryCode                           */ 0x00u,
  85          /*  bNumDescriptors                        */ 0x01u,
  86          /*  bDescriptorType                        */ 0x22u,
  87          /*  wDescriptorLength (LSB)                */ USBFS_HID_RPT_2_SIZE_LSB,
  88          /*  wDescriptorLength (MSB)                */ USBFS_HID_RPT_2_SIZE_MSB,
  89          /*********************************************************************
  90          * Endpoint Descriptor
  91          *********************************************************************/
  92          /*  Endpoint Descriptor Length             */ 0x07u,
  93          /*  DescriptorType: ENDPOINT               */ 0x05u,
  94          /*  bEndpointAddress                       */ 0x01u,
  95          /*  bmAttributes                           */ 0x03u,
  96          /*  wMaxPacketSize                         */ 0x40u, 0x00u,
  97          /*  bInterval                              */ 0x01u,
  98          /*********************************************************************
  99          * Endpoint Descriptor
 100          *********************************************************************/
 101          /*  Endpoint Descriptor Length             */ 0x07u,
 102          /*  DescriptorType: ENDPOINT               */ 0x05u,
 103          /*  bEndpointAddress                       */ 0x82u,
 104          /*  bmAttributes                           */ 0x03u,
 105          /*  wMaxPacketSize                         */ 0x40u, 0x00u,
 106          /*  bInterval                              */ 0x01u
 107          };
 108          
 109          /*********************************************************************
 110          * String Descriptor Table
 111          *********************************************************************/
 112          const uint8 CYCODE USBFS_STRING_DESCRIPTORS[95u] = {
 113          /*********************************************************************
 114          * Language ID Descriptor
C51 COMPILER V9.51   USBFS_DESCR                                                           01/07/2016 22:10:56 PAGE 3   

 115          *********************************************************************/
 116          /* Descriptor Length                       */ 0x04u,
 117          /* DescriptorType: STRING                  */ 0x03u,
 118          /* Language Id                             */ 0x09u, 0x04u,
 119          /*********************************************************************
 120          * String Descriptor: "AE9RB"
 121          *********************************************************************/
 122          /* Descriptor Length                       */ 0x0Cu,
 123          /* DescriptorType: STRING                  */ 0x03u,
 124           (uint8)'A', 0u,(uint8)'E', 0u,(uint8)'9', 0u,(uint8)'R', 0u,(uint8)'B', 0u,
 125          /*********************************************************************
 126          * String Descriptor: "Cypress Semiconductor"
 127          *********************************************************************/
 128          /* Descriptor Length                       */ 0x2Cu,
 129          /* DescriptorType: STRING                  */ 0x03u,
 130           (uint8)'C', 0u,(uint8)'y', 0u,(uint8)'p', 0u,(uint8)'r', 0u,(uint8)'e', 0u,
 131           (uint8)'s', 0u,(uint8)'s', 0u,(uint8)' ', 0u,(uint8)'S', 0u,(uint8)'e', 0u,
 132           (uint8)'m', 0u,(uint8)'i', 0u,(uint8)'c', 0u,(uint8)'o', 0u,(uint8)'n', 0u,
 133           (uint8)'d', 0u,(uint8)'u', 0u,(uint8)'c', 0u,(uint8)'t', 0u,(uint8)'o', 0u,
 134           (uint8)'r', 0u,
 135          /*********************************************************************
 136          * String Descriptor: "PSoC3 Bootloader"
 137          *********************************************************************/
 138          /* Descriptor Length                       */ 0x22u,
 139          /* DescriptorType: STRING                  */ 0x03u,
 140           (uint8)'P', 0u,(uint8)'S', 0u,(uint8)'o', 0u,(uint8)'C', 0u,(uint8)'3', 0u,
 141           (uint8)' ', 0u,(uint8)'B', 0u,(uint8)'o', 0u,(uint8)'o', 0u,(uint8)'t', 0u,
 142           (uint8)'l', 0u,(uint8)'o', 0u,(uint8)'a', 0u,(uint8)'d', 0u,(uint8)'e', 0u,
 143           (uint8)'r', 0u,
 144          /*********************************************************************/
 145          /* Marks the end of the list.              */ 0x00u};
 146          /*********************************************************************/
 147          
 148          /*********************************************************************
 149          * Serial Number String Descriptor
 150          *********************************************************************/
 151          const uint8 CYCODE USBFS_SN_STRING_DESCRIPTOR[10] = {
 152          /* Descriptor Length                       */ 0x0Au,
 153          /* DescriptorType: STRING                  */ 0x03u,
 154          (uint8)'0', 0u,(uint8)'0', 0u,(uint8)'0', 0u,(uint8)'1', 0u
 155          };
 156          
 157          /*********************************************************************
 158          * HID Report Descriptor: Generic HID
 159          *********************************************************************/
 160          const uint8 CYCODE USBFS_HIDREPORT_DESCRIPTOR1[40u] = {
 161          /*  Descriptor Size (Not part of descriptor)*/ USBFS_HID_RPT_1_SIZE_LSB,
 162          USBFS_HID_RPT_1_SIZE_MSB,
 163          /* USAGE_PAGE                              */ 0x05u, 0x01u, 
 164          /* USAGE                                   */ 0x09u, 0x00u, 
 165          /* COLLECTION                              */ 0xA1u, 0x00u, 
 166          /* USAGE                                   */ 0x09u, 0x00u, 
 167          /* COLLECTION                              */ 0xA1u, 0x00u, 
 168          /* USAGE                                   */ 0x09u, 0x00u, 
 169          /* LOGICAL_MINIMUM                         */ 0x15u, 0x00u, 
 170          /* LOGICAL_MAXIMUM                         */ 0x25u, 0xFFu, 
 171          /* REPORT_SIZE                             */ 0x75u, 0x08u, 
 172          /* REPORT_COUNT                            */ 0x95u, 0x40u, 
 173          /* OUTPUT                                  */ 0x91u, 0x02u, 
 174          /* USAGE                                   */ 0x09u, 0x00u, 
 175          /* LOGICAL_MINIMUM                         */ 0x15u, 0x00u, 
 176          /* LOGICAL_MAXIMUM                         */ 0x25u, 0xFFu, 
C51 COMPILER V9.51   USBFS_DESCR                                                           01/07/2016 22:10:56 PAGE 4   

 177          /* REPORT_SIZE                             */ 0x75u, 0x08u, 
 178          /* REPORT_COUNT                            */ 0x95u, 0x40u, 
 179          /* INPUT                                   */ 0x81u, 0x02u, 
 180          /* END_COLLECTION                          */ 0xC0u, 
 181          /* END_COLLECTION                          */ 0xC0u, 
 182          /*********************************************************************/
 183          /* End of the HID Report Descriptor        */ 0x00u, 0x00u};
 184          /*********************************************************************/
 185          /*********************************************************************
 186          * HID Report Descriptor: Generic HID
 187          *********************************************************************/
 188          const uint8 CYCODE USBFS_HIDREPORT_DESCRIPTOR2[40u] = {
 189          /*  Descriptor Size (Not part of descriptor)*/ USBFS_HID_RPT_2_SIZE_LSB,
 190          USBFS_HID_RPT_2_SIZE_MSB,
 191          /* USAGE_PAGE                              */ 0x05u, 0x01u, 
 192          /* USAGE                                   */ 0x09u, 0x00u, 
 193          /* COLLECTION                              */ 0xA1u, 0x00u, 
 194          /* USAGE                                   */ 0x09u, 0x00u, 
 195          /* COLLECTION                              */ 0xA1u, 0x00u, 
 196          /* USAGE                                   */ 0x09u, 0x00u, 
 197          /* LOGICAL_MINIMUM                         */ 0x15u, 0x00u, 
 198          /* LOGICAL_MAXIMUM                         */ 0x25u, 0xFFu, 
 199          /* REPORT_SIZE                             */ 0x75u, 0x08u, 
 200          /* REPORT_COUNT                            */ 0x95u, 0x40u, 
 201          /* OUTPUT                                  */ 0x91u, 0x02u, 
 202          /* USAGE                                   */ 0x09u, 0x00u, 
 203          /* LOGICAL_MINIMUM                         */ 0x15u, 0x00u, 
 204          /* LOGICAL_MAXIMUM                         */ 0x25u, 0xFFu, 
 205          /* REPORT_SIZE                             */ 0x75u, 0x08u, 
 206          /* REPORT_COUNT                            */ 0x95u, 0x40u, 
 207          /* INPUT                                   */ 0x81u, 0x02u, 
 208          /* END_COLLECTION                          */ 0xC0u, 
 209          /* END_COLLECTION                          */ 0xC0u, 
 210          /*********************************************************************/
 211          /* End of the HID Report Descriptor        */ 0x00u, 0x00u};
 212          /*********************************************************************/
 213          
 214          #if !defined(USER_DEFINE_USBFS_DEVICE0_CONFIGURATION0_INTERFACE0_ALTERNATE0_HID_HID_RPT_STORAGE)
 215          /*********************************************************************
 216          * HID Input Report Storage
 217          *********************************************************************/
 218          T_USBFS_XFER_STATUS_BLOCK USBFS_DEVICE0_CONFIGURATION0_INTERFACE0_ALTERNATE0_HID_IN_RPT_SCB;
 219          uint8 USBFS_DEVICE0_CONFIGURATION0_INTERFACE0_ALTERNATE0_HID_IN_BUF[
 220                      USBFS_DEVICE0_CONFIGURATION0_INTERFACE0_ALTERNATE0_HID_IN_BUF_SIZE];
 221          
 222          /*********************************************************************
 223          * HID Input Report TD Table
 224          *********************************************************************/
 225          const T_USBFS_TD CYCODE USBFS_DEVICE0_CONFIGURATION0_INTERFACE0_ALTERNATE0_HID_IN_RPT_TABLE[1u] = {
 226              {USBFS_DEVICE0_CONFIGURATION0_INTERFACE0_ALTERNATE0_HID_IN_BUF_SIZE,
 227              &USBFS_DEVICE0_CONFIGURATION0_INTERFACE0_ALTERNATE0_HID_IN_BUF[0u],
 228              &USBFS_DEVICE0_CONFIGURATION0_INTERFACE0_ALTERNATE0_HID_IN_RPT_SCB},
 229          };
 230          /*********************************************************************
 231          * HID Output Report Storage
 232          *********************************************************************/
 233          T_USBFS_XFER_STATUS_BLOCK USBFS_DEVICE0_CONFIGURATION0_INTERFACE0_ALTERNATE0_HID_OUT_RPT_SCB;
 234          uint8 USBFS_DEVICE0_CONFIGURATION0_INTERFACE0_ALTERNATE0_HID_OUT_BUF[
 235                      USBFS_DEVICE0_CONFIGURATION0_INTERFACE0_ALTERNATE0_HID_OUT_BUF_SIZE];
 236          
 237          /*********************************************************************
 238          * HID Output Report TD Table
C51 COMPILER V9.51   USBFS_DESCR                                                           01/07/2016 22:10:56 PAGE 5   

 239          *********************************************************************/
 240          const T_USBFS_TD CYCODE USBFS_DEVICE0_CONFIGURATION0_INTERFACE0_ALTERNATE0_HID_OUT_RPT_TABLE[1u] = {
 241              {USBFS_DEVICE0_CONFIGURATION0_INTERFACE0_ALTERNATE0_HID_OUT_BUF_SIZE,
 242              &USBFS_DEVICE0_CONFIGURATION0_INTERFACE0_ALTERNATE0_HID_OUT_BUF[0u],
 243              &USBFS_DEVICE0_CONFIGURATION0_INTERFACE0_ALTERNATE0_HID_OUT_RPT_SCB},
 244          };
 245          /*********************************************************************
 246          * HID Report Look Up Table         This table has four entries:
 247          *                                        IN Report Table
 248          *                                        OUT Report Table
 249          *                                        Feature Report Table
 250          *                                        HID Report Descriptor
 251          *                                        HID Class Descriptor
 252          *********************************************************************/
 253          const T_USBFS_LUT CYCODE USBFS_DEVICE0_CONFIGURATION0_INTERFACE0_ALTERNATE0_HID_TABLE[5u] = {
 254              {0x00u,     &USBFS_DEVICE0_CONFIGURATION0_INTERFACE0_ALTERNATE0_HID_IN_RPT_TABLE},
 255              {0x00u,     &USBFS_DEVICE0_CONFIGURATION0_INTERFACE0_ALTERNATE0_HID_OUT_RPT_TABLE},
 256              {0x00u,    NULL},
 257              {0x01u,     (const void *)&USBFS_HIDREPORT_DESCRIPTOR2[0]},
 258              {0x01u,     (const void *)&USBFS_DEVICE0_CONFIGURATION0_DESCR[18]}
 259          };
 260          #endif /* USER_DEFINE_USBFS_DEVICE0_CONFIGURATION0_INTERFACE0_ALTERNATE0_HID_HID_RPT_STORAGE */
 261          
 262          /*********************************************************************
 263          * Interface Dispatch Table -- Points to the Class Dispatch Tables
 264          *********************************************************************/
 265          const T_USBFS_LUT CYCODE USBFS_DEVICE0_CONFIGURATION0_INTERFACE0_TABLE[1u] = {
 266              {USBFS_DEVICE0_CONFIGURATION0_INTERFACE0_ALTERNATE0_HID_COUNT, 
 267              &USBFS_DEVICE0_CONFIGURATION0_INTERFACE0_ALTERNATE0_HID_TABLE}
 268          };
 269          /*********************************************************************
 270          * Endpoint Setting Table -- This table contain the endpoint setting
 271          *                           for each endpoint in the configuration. It
 272          *                           contains the necessary information to
 273          *                           configure the endpoint hardware for each
 274          *                           interface and alternate setting.
 275          *********************************************************************/
 276          const T_USBFS_EP_SETTINGS_BLOCK CYCODE USBFS_DEVICE0_CONFIGURATION0_EP_SETTINGS_TABLE[2u] = {
 277          /* IFC  ALT    EPAddr bmAttr MaxPktSize Class ********************/
 278          {0x00u, 0x00u, 0x01u, 0x03u, 0x0040u,   0x03u},
 279          {0x00u, 0x00u, 0x82u, 0x03u, 0x0040u,   0x03u}
 280          };
 281          const uint8 CYCODE USBFS_DEVICE0_CONFIGURATION0_INTERFACE_CLASS[1u] = {
 282          0x03u
 283          };
 284          /*********************************************************************
 285          * Config Dispatch Table -- Points to the Config Descriptor and each of
 286          *                          and endpoint setup table and to each
 287          *                          interface table if it specifies a USB Class
 288          *********************************************************************/
 289          const T_USBFS_LUT CYCODE USBFS_DEVICE0_CONFIGURATION0_TABLE[4u] = {
 290              {0x01u,     &USBFS_DEVICE0_CONFIGURATION0_DESCR},
 291              {0x02u,     &USBFS_DEVICE0_CONFIGURATION0_EP_SETTINGS_TABLE},
 292              {0x01u,     &USBFS_DEVICE0_CONFIGURATION0_INTERFACE0_TABLE},
 293              {0x00u,     &USBFS_DEVICE0_CONFIGURATION0_INTERFACE_CLASS}
 294          };
 295          /*********************************************************************
 296          * Device Dispatch Table -- Points to the Device Descriptor and each of
 297          *                          and Configuration Tables for this Device 
 298          *********************************************************************/
 299          const T_USBFS_LUT CYCODE USBFS_DEVICE0_TABLE[2u] = {
 300              {0x01u,     &USBFS_DEVICE0_DESCR},
C51 COMPILER V9.51   USBFS_DESCR                                                           01/07/2016 22:10:56 PAGE 6   

 301              {0x01u,     &USBFS_DEVICE0_CONFIGURATION0_TABLE}
 302          };
 303          /*********************************************************************
 304          * Device Table -- Indexed by the device number.
 305          *********************************************************************/
 306          const T_USBFS_LUT CYCODE USBFS_TABLE[1u] = {
 307              {0x01u,     &USBFS_DEVICE0_TABLE}
 308          };
 309          
 310          #endif /* USER_SUPPLIED_DESCRIPTORS */
 311          
 312          #if defined(USBFS_ENABLE_MSOS_STRING)
              
                  /******************************************************************************
                  *  USB Microsoft OS String Descriptor
                  *  "MSFT" identifies a Microsoft host
                  *  "100" specifies version 1.00
                  *  USBFS_GET_EXTENDED_CONFIG_DESCRIPTOR becomes the bRequest value
                  *  in a host vendor device/class request
                  ******************************************************************************/
              
                  const uint8 CYCODE USBFS_MSOS_DESCRIPTOR[USBFS_MSOS_DESCRIPTOR_LENGTH] = {
                  /* Descriptor Length                       */   0x12u,
                  /* DescriptorType: STRING                  */   0x03u,
                  /* qwSignature - "MSFT100"                 */   (uint8)'M', 0u, (uint8)'S', 0u, (uint8)'F', 0u, (uint8
             -)'T', 0u,
                                                                  (uint8)'1', 0u, (uint8)'0', 0u, (uint8)'0', 0u,
                  /* bMS_VendorCode:                         */   USBFS_GET_EXTENDED_CONFIG_DESCRIPTOR,
                  /* bPad                                    */   0x00u
                  };
              
                  /* Extended Configuration Descriptor */
              
                  const uint8 CYCODE USBFS_MSOS_CONFIGURATION_DESCR[USBFS_MSOS_CONF_DESCR_LENGTH] = {
                  /*  Length of the descriptor 4 bytes       */   0x28u, 0x00u, 0x00u, 0x00u,
                  /*  Version of the descriptor 2 bytes      */   0x00u, 0x01u,
                  /*  wIndex - Fixed:INDEX_CONFIG_DESCRIPTOR */   0x04u, 0x00u,
                  /*  bCount - Count of device functions.    */   0x01u,
                  /*  Reserved : 7 bytes                     */   0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u,
                  /*  bFirstInterfaceNumber                  */   0x00u,
                  /*  Reserved                               */   0x01u,
                  /*  compatibleID    - "CYUSB\0\0"          */   (uint8)'C', (uint8)'Y', (uint8)'U', (uint8)'S', (uint8
             -)'B',
                                                                  0x00u, 0x00u, 0x00u,
                  /*  subcompatibleID - "00001\0\0"          */   (uint8)'0', (uint8)'0', (uint8)'0', (uint8)'0', (uint8
             -)'1',
                                                                  0x00u, 0x00u, 0x00u,
                  /*  Reserved : 6 bytes                     */   0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u
                  };
              
              #endif /* USBFS_ENABLE_MSOS_STRING */
 349          
 350          /* DIE ID string descriptor for 8 bytes ID */
 351          #if defined(USBFS_ENABLE_IDSN_STRING)
                  uint8 USBFS_idSerialNumberStringDescriptor[USBFS_IDSN_DESCR_LENGTH];
              #endif /* USBFS_ENABLE_IDSN_STRING */
 354          
 355          
 356          /* [] END OF FILE */
C51 COMPILER V9.51   USBFS_DESCR                                                           01/07/2016 22:10:56 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =    327    ----
   XDATA SIZE       =    136    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
