C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USBFS_DRV
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\USBFS_drv.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\USBFS_drv.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(DEBU
                    -G) WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/USBFS_drv.lst) CD OT(5,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\USBFS_drv.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: USBFS_drv.c
   3          * Version 2.80
   4          *
   5          * Description:
   6          *  Endpoint 0 Driver for the USBFS Component.
   7          *
   8          * Note:
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "USBFS.h"
  18          #include "USBFS_pvt.h"
  19          
  20          
  21          
  22          /***************************************
  23          * Global data allocation
  24          ***************************************/
  25          
  26          volatile T_USBFS_EP_CTL_BLOCK USBFS_EP[USBFS_MAX_EP];
  27          volatile uint8 USBFS_configuration;
  28          volatile uint8 USBFS_interfaceNumber;
  29          volatile uint8 USBFS_configurationChanged;
  30          volatile uint8 USBFS_deviceAddress;
  31          volatile uint8 USBFS_deviceStatus;
  32          volatile uint8 USBFS_interfaceSetting[USBFS_MAX_INTERFACES_NUMBER];
  33          volatile uint8 USBFS_interfaceSetting_last[USBFS_MAX_INTERFACES_NUMBER];
  34          volatile uint8 USBFS_interfaceStatus[USBFS_MAX_INTERFACES_NUMBER];
  35          volatile uint8 USBFS_device;
  36          const uint8 CYCODE *USBFS_interfaceClass;
  37          
  38          
  39          /***************************************
  40          * Local data allocation
  41          ***************************************/
  42          
  43          volatile uint8 USBFS_ep0Toggle;
  44          volatile uint8 USBFS_lastPacketSize;
  45          volatile uint8 USBFS_transferState;
  46          volatile T_USBFS_TD USBFS_currentTD;
  47          volatile uint8 USBFS_ep0Mode;
  48          volatile uint8 USBFS_ep0Count;
  49          volatile uint16 USBFS_transferByteCount;
  50          
  51          
  52          /*******************************************************************************
  53          * Function Name: USBFS_ep_0_Interrupt
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 2   

  54          ********************************************************************************
  55          *
  56          * Summary:
  57          *  This Interrupt Service Routine handles Endpoint 0 (Control Pipe) traffic.
  58          *  It dispatches setup requests and handles the data and status stages.
  59          *
  60          * Parameters:
  61          *  None.
  62          *
  63          * Return:
  64          *  None.
  65          *
  66          *******************************************************************************/
  67          CY_ISR(USBFS_EP_0_ISR)
  68          {
  69   1          uint8 bRegTemp;
  70   1          uint8 modifyReg;
  71   1      
  72   1          #ifdef USBFS_EP_0_ISR_ENTRY_CALLBACK
                      USBFS_EP_0_ISR_EntryCallback();
                  #endif /* USBFS_EP_0_ISR_ENTRY_CALLBACK */
  75   1          
  76   1          bRegTemp = CY_GET_REG8(USBFS_EP0_CR_PTR);
  77   1          if ((bRegTemp & USBFS_MODE_ACKD) != 0u)
  78   1          {
  79   2              modifyReg = 1u;
  80   2              if ((bRegTemp & USBFS_MODE_SETUP_RCVD) != 0u)
  81   2              {
  82   3                  if((bRegTemp & USBFS_MODE_MASK) != USBFS_MODE_NAK_IN_OUT)
  83   3                  {
  84   4                      modifyReg = 0u;                                     /* When mode not NAK_IN_OUT => invalid
             - setup */
  85   4                  }
  86   3                  else
  87   3                  {
  88   4                      USBFS_HandleSetup();
  89   4                      if((USBFS_ep0Mode & USBFS_MODE_SETUP_RCVD) != 0u)
  90   4                      {
  91   5                          modifyReg = 0u;                         /* if SETUP bit set -> exit without modifying 
             -the mode */
  92   5                      }
  93   4      
  94   4                  }
  95   3              }
  96   2              else if ((bRegTemp & USBFS_MODE_IN_RCVD) != 0u)
  97   2              {
  98   3                  USBFS_HandleIN();
  99   3              }
 100   2              else if ((bRegTemp & USBFS_MODE_OUT_RCVD) != 0u)
 101   2              {
 102   3                  USBFS_HandleOUT();
 103   3              }
 104   2              else
 105   2              {
 106   3                  modifyReg = 0u;
 107   3              }
 108   2              if(modifyReg != 0u)
 109   2              {
 110   3                  bRegTemp = CY_GET_REG8(USBFS_EP0_CR_PTR);    /* unlock registers */
 111   3                  if((bRegTemp & USBFS_MODE_SETUP_RCVD) == 0u)  /* Check if SETUP bit is not set, otherwise exit
             - */
 112   3                  {
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 3   

 113   4                      /* Update the count register */
 114   4                      bRegTemp = USBFS_ep0Toggle | USBFS_ep0Count;
 115   4                      CY_SET_REG8(USBFS_EP0_CNT_PTR, bRegTemp);
 116   4                      if(bRegTemp == CY_GET_REG8(USBFS_EP0_CNT_PTR))   /* continue if writing was successful */
 117   4                      {
 118   5                          do
 119   5                          {
 120   6                              modifyReg = USBFS_ep0Mode;       /* Init temporary variable */
 121   6                              /* Unlock registers */
 122   6                              bRegTemp = CY_GET_REG8(USBFS_EP0_CR_PTR) & USBFS_MODE_SETUP_RCVD;
 123   6                              if(bRegTemp == 0u)                          /* Check if SETUP bit is not set */
 124   6                              {
 125   7                                  /* Set the Mode Register  */
 126   7                                  CY_SET_REG8(USBFS_EP0_CR_PTR, USBFS_ep0Mode);
 127   7                                  /* Writing check */
 128   7                                  modifyReg = CY_GET_REG8(USBFS_EP0_CR_PTR) & USBFS_MODE_MASK;
 129   7                              }
 130   6                          }while(modifyReg != USBFS_ep0Mode);  /* Repeat if writing was not successful */
 131   5                      }
 132   4                  }
 133   3              }
 134   2          }
 135   1          #ifdef USBFS_EP_0_ISR_EXIT_CALLBACK
                      USBFS_EP_0_ISR_ExitCallback();
                  #endif /* USBFS_EP_0_ISR_EXIT_CALLBACK */
 138   1      }
 139          
 140          
 141          /*******************************************************************************
 142          * Function Name: USBFS_HandleSetup
 143          ********************************************************************************
 144          *
 145          * Summary:
 146          *  This Routine dispatches requests for the four USB request types
 147          *
 148          * Parameters:
 149          *  None.
 150          *
 151          * Return:
 152          *  None.
 153          *
 154          * Reentrant:
 155          *  No.
 156          *
 157          *******************************************************************************/
 158          void USBFS_HandleSetup(void) 
 159          {
 160   1          uint8 requestHandled;
 161   1      
 162   1          requestHandled = CY_GET_REG8(USBFS_EP0_CR_PTR);      /* unlock registers */
 163   1          CY_SET_REG8(USBFS_EP0_CR_PTR, requestHandled);       /* clear setup bit */
 164   1          requestHandled = CY_GET_REG8(USBFS_EP0_CR_PTR);      /* reread register */
 165   1          if((requestHandled & USBFS_MODE_SETUP_RCVD) != 0u)
 166   1          {
 167   2              USBFS_ep0Mode = requestHandled;        /* if SETUP bit set -> exit without modifying the mode */
 168   2          }
 169   1          else
 170   1          {
 171   2              /* In case the previous transfer did not complete, close it out */
 172   2              USBFS_UpdateStatusBlock(USBFS_XFER_PREMATURE);
 173   2      
 174   2              switch (CY_GET_REG8(USBFS_bmRequestType) & USBFS_RQST_TYPE_MASK)
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 4   

 175   2              {
 176   3                  case USBFS_RQST_TYPE_STD:
 177   3                      requestHandled = USBFS_HandleStandardRqst();
 178   3                      break;
 179   3                  case USBFS_RQST_TYPE_CLS:
 180   3                      requestHandled = USBFS_DispatchClassRqst();
 181   3                      break;
 182   3                  case USBFS_RQST_TYPE_VND:
 183   3                      requestHandled = USBFS_HandleVendorRqst();
 184   3                      break;
 185   3                  default:
 186   3                      requestHandled = USBFS_FALSE;
 187   3                      break;
 188   3              }
 189   2              if (requestHandled == USBFS_FALSE)
 190   2              {
 191   3                  USBFS_ep0Mode = USBFS_MODE_STALL_IN_OUT;
 192   3              }
 193   2          }
 194   1      }
 195          
 196          
 197          /*******************************************************************************
 198          * Function Name: USBFS_HandleIN
 199          ********************************************************************************
 200          *
 201          * Summary:
 202          *  This routine handles EP0 IN transfers.
 203          *
 204          * Parameters:
 205          *  None.
 206          *
 207          * Return:
 208          *  None.
 209          *
 210          * Reentrant:
 211          *  No.
 212          *
 213          *******************************************************************************/
 214          void USBFS_HandleIN(void) 
 215          {
 216   1          switch (USBFS_transferState)
 217   1          {
 218   2              case USBFS_TRANS_STATE_IDLE:
 219   2                  break;
 220   2              case USBFS_TRANS_STATE_CONTROL_READ:
 221   2                  USBFS_ControlReadDataStage();
 222   2                  break;
 223   2              case USBFS_TRANS_STATE_CONTROL_WRITE:
 224   2                  USBFS_ControlWriteStatusStage();
 225   2                  break;
 226   2              case USBFS_TRANS_STATE_NO_DATA_CONTROL:
 227   2                  USBFS_NoDataControlStatusStage();
 228   2                  break;
 229   2              default:    /* there are no more states */
 230   2                  break;
 231   2          }
 232   1      }
 233          
 234          
 235          /*******************************************************************************
 236          * Function Name: USBFS_HandleOUT
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 5   

 237          ********************************************************************************
 238          *
 239          * Summary:
 240          *  This routine handles EP0 OUT transfers.
 241          *
 242          * Parameters:
 243          *  None.
 244          *
 245          * Return:
 246          *  None.
 247          *
 248          * Reentrant:
 249          *  No.
 250          *
 251          *******************************************************************************/
 252          void USBFS_HandleOUT(void) 
 253          {
 254   1          switch (USBFS_transferState)
 255   1          {
 256   2              case USBFS_TRANS_STATE_IDLE:
 257   2                  break;
 258   2              case USBFS_TRANS_STATE_CONTROL_READ:
 259   2                  USBFS_ControlReadStatusStage();
 260   2                  break;
 261   2              case USBFS_TRANS_STATE_CONTROL_WRITE:
 262   2                  USBFS_ControlWriteDataStage();
 263   2                  break;
 264   2              case USBFS_TRANS_STATE_NO_DATA_CONTROL:
 265   2                  /* Update the completion block */
 266   2                  USBFS_UpdateStatusBlock(USBFS_XFER_ERROR);
 267   2                  /* We expect no more data, so stall INs and OUTs */
 268   2                  USBFS_ep0Mode = USBFS_MODE_STALL_IN_OUT;
 269   2                  break;
 270   2              default:    /* There are no more states */
 271   2                  break;
 272   2          }
 273   1      }
 274          
 275          
 276          /*******************************************************************************
 277          * Function Name: USBFS_LoadEP0
 278          ********************************************************************************
 279          *
 280          * Summary:
 281          *  This routine loads the EP0 data registers for OUT transfers.  It uses the
 282          *  currentTD (previously initialized by the _InitControlWrite function and
 283          *  updated for each OUT transfer, and the bLastPacketSize) to determine how
 284          *  many uint8s to transfer on the current OUT.
 285          *
 286          *  If the number of uint8s remaining is zero and the last transfer was full,
 287          *  we need to send a zero length packet.  Otherwise we send the minimum
 288          *  of the control endpoint size (8) or remaining number of uint8s for the
 289          *  transaction.
 290          *
 291          * Parameters:
 292          *  None.
 293          *
 294          * Return:
 295          *  None.
 296          *
 297          * Global variables:
 298          *  USBFS_transferByteCount - Update the transfer byte count from the
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 6   

 299          *     last transaction.
 300          *  USBFS_ep0Count - counts the data loaded to the SIE memory in
 301          *     current packet.
 302          *  USBFS_lastPacketSize - remembers the USBFS_ep0Count value for the
 303          *     next packet.
 304          *  USBFS_transferByteCount - sum of the previous bytes transferred
 305          *     on previous packets(sum of USBFS_lastPacketSize)
 306          *  USBFS_ep0Toggle - inverted
 307          *  USBFS_ep0Mode  - prepare for mode register content.
 308          *  USBFS_transferState - set to TRANS_STATE_CONTROL_READ
 309          *
 310          * Reentrant:
 311          *  No.
 312          *
 313          *******************************************************************************/
 314          void USBFS_LoadEP0(void) 
 315          {
 316   1          uint8 ep0Count = 0u;
 317   1      
 318   1          /* Update the transfer byte count from the last transaction */
 319   1          USBFS_transferByteCount += USBFS_lastPacketSize;
 320   1          /* Now load the next transaction */
 321   1          while ((USBFS_currentTD.count > 0u) && (ep0Count < 8u))
 322   1          {
 323   2              CY_SET_REG8((reg8 *)(USBFS_EP0_DR0_IND + ep0Count), *USBFS_currentTD.pData);
 324   2              USBFS_currentTD.pData = &USBFS_currentTD.pData[1u];
 325   2              ep0Count++;
 326   2              USBFS_currentTD.count--;
 327   2          }
 328   1          /* Support zero-length packet*/
 329   1          if( (USBFS_lastPacketSize == 8u) || (ep0Count > 0u) )
 330   1          {
 331   2              /* Update the data toggle */
 332   2              USBFS_ep0Toggle ^= USBFS_EP0_CNT_DATA_TOGGLE;
 333   2              /* Set the Mode Register  */
 334   2              USBFS_ep0Mode = USBFS_MODE_ACK_IN_STATUS_OUT;
 335   2              /* Update the state (or stay the same) */
 336   2              USBFS_transferState = USBFS_TRANS_STATE_CONTROL_READ;
 337   2          }
 338   1          else
 339   1          {
 340   2              /* Expect Status Stage Out */
 341   2              USBFS_ep0Mode = USBFS_MODE_STATUS_OUT_ONLY;
 342   2              /* Update the state (or stay the same) */
 343   2              USBFS_transferState = USBFS_TRANS_STATE_CONTROL_READ;
 344   2          }
 345   1      
 346   1          /* Save the packet size for next time */
 347   1          USBFS_lastPacketSize = ep0Count;
 348   1          USBFS_ep0Count = ep0Count;
 349   1      }
 350          
 351          
 352          /*******************************************************************************
 353          * Function Name: USBFS_InitControlRead
 354          ********************************************************************************
 355          *
 356          * Summary:
 357          *  Initialize a control read transaction, usable to send data to the host.
 358          *  The following global variables should be initialized before this function
 359          *  called. To send zero length packet use InitZeroLengthControlTransfer
 360          *  function.
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 7   

 361          *
 362          * Parameters:
 363          *  None.
 364          *
 365          * Return:
 366          *  requestHandled state.
 367          *
 368          * Global variables:
 369          *  USBFS_currentTD.count - counts of data to be sent.
 370          *  USBFS_currentTD.pData - data pointer.
 371          *
 372          * Reentrant:
 373          *  No.
 374          *
 375          *******************************************************************************/
 376          uint8 USBFS_InitControlRead(void) 
 377          {
 378   1          uint16 xferCount;
 379   1          if(USBFS_currentTD.count == 0u)
 380   1          {
 381   2              (void) USBFS_InitZeroLengthControlTransfer();
 382   2          }
 383   1          else
 384   1          {
 385   2              /* Set up the state machine */
 386   2              USBFS_transferState = USBFS_TRANS_STATE_CONTROL_READ;
 387   2              /* Set the toggle, it gets updated in LoadEP */
 388   2              USBFS_ep0Toggle = 0u;
 389   2              /* Initialize the Status Block */
 390   2              USBFS_InitializeStatusBlock();
 391   2              xferCount = (((uint16)CY_GET_REG8(USBFS_lengthHi) << 8u) | (CY_GET_REG8(USBFS_lengthLo)));
 392   2      
 393   2              if (USBFS_currentTD.count > xferCount)
 394   2              {
 395   3                  USBFS_currentTD.count = xferCount;
 396   3              }
 397   2              USBFS_LoadEP0();
 398   2          }
 399   1      
 400   1          return(USBFS_TRUE);
 401   1      }
 402          
 403          
 404          /*******************************************************************************
 405          * Function Name: USBFS_InitZeroLengthControlTransfer
 406          ********************************************************************************
 407          *
 408          * Summary:
 409          *  Initialize a zero length data IN transfer.
 410          *
 411          * Parameters:
 412          *  None.
 413          *
 414          * Return:
 415          *  requestHandled state.
 416          *
 417          * Global variables:
 418          *  USBFS_ep0Toggle - set to EP0_CNT_DATA_TOGGLE
 419          *  USBFS_ep0Mode  - prepare for mode register content.
 420          *  USBFS_transferState - set to TRANS_STATE_CONTROL_READ
 421          *  USBFS_ep0Count - cleared, means the zero-length packet.
 422          *  USBFS_lastPacketSize - cleared.
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 8   

 423          *
 424          * Reentrant:
 425          *  No.
 426          *
 427          *******************************************************************************/
 428          uint8 USBFS_InitZeroLengthControlTransfer(void)
 429                                                          
 430          {
 431   1          /* Update the state */
 432   1          USBFS_transferState = USBFS_TRANS_STATE_CONTROL_READ;
 433   1          /* Set the data toggle */
 434   1          USBFS_ep0Toggle = USBFS_EP0_CNT_DATA_TOGGLE;
 435   1          /* Set the Mode Register  */
 436   1          USBFS_ep0Mode = USBFS_MODE_ACK_IN_STATUS_OUT;
 437   1          /* Save the packet size for next time */
 438   1          USBFS_lastPacketSize = 0u;
 439   1          USBFS_ep0Count = 0u;
 440   1      
 441   1          return(USBFS_TRUE);
 442   1      }
 443          
 444          
 445          /*******************************************************************************
 446          * Function Name: USBFS_ControlReadDataStage
 447          ********************************************************************************
 448          *
 449          * Summary:
 450          *  Handle the Data Stage of a control read transfer.
 451          *
 452          * Parameters:
 453          *  None.
 454          *
 455          * Return:
 456          *  None.
 457          *
 458          * Reentrant:
 459          *  No.
 460          *
 461          *******************************************************************************/
 462          void USBFS_ControlReadDataStage(void) 
 463          
 464          {
 465   1          USBFS_LoadEP0();
 466   1      }
 467          
 468          
 469          /*******************************************************************************
 470          * Function Name: USBFS_ControlReadStatusStage
 471          ********************************************************************************
 472          *
 473          * Summary:
 474          *  Handle the Status Stage of a control read transfer.
 475          *
 476          * Parameters:
 477          *  None.
 478          *
 479          * Return:
 480          *  None.
 481          *
 482          * Global variables:
 483          *  USBFS_USBFS_transferByteCount - updated with last packet size.
 484          *  USBFS_transferState - set to TRANS_STATE_IDLE.
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 9   

 485          *  USBFS_ep0Mode  - set to MODE_STALL_IN_OUT.
 486          *
 487          * Reentrant:
 488          *  No.
 489          *
 490          *******************************************************************************/
 491          void USBFS_ControlReadStatusStage(void) 
 492          {
 493   1          /* Update the transfer byte count */
 494   1          USBFS_transferByteCount += USBFS_lastPacketSize;
 495   1          /* Go Idle */
 496   1          USBFS_transferState = USBFS_TRANS_STATE_IDLE;
 497   1          /* Update the completion block */
 498   1          USBFS_UpdateStatusBlock(USBFS_XFER_STATUS_ACK);
 499   1          /* We expect no more data, so stall INs and OUTs */
 500   1          USBFS_ep0Mode =  USBFS_MODE_STALL_IN_OUT;
 501   1      }
 502          
 503          
 504          /*******************************************************************************
 505          * Function Name: USBFS_InitControlWrite
 506          ********************************************************************************
 507          *
 508          * Summary:
 509          *  Initialize a control write transaction
 510          *
 511          * Parameters:
 512          *  None.
 513          *
 514          * Return:
 515          *  requestHandled state.
 516          *
 517          * Global variables:
 518          *  USBFS_USBFS_transferState - set to TRANS_STATE_CONTROL_WRITE
 519          *  USBFS_ep0Toggle - set to EP0_CNT_DATA_TOGGLE
 520          *  USBFS_ep0Mode  - set to MODE_ACK_OUT_STATUS_IN
 521          *
 522          * Reentrant:
 523          *  No.
 524          *
 525          *******************************************************************************/
 526          uint8 USBFS_InitControlWrite(void) 
 527          {
 528   1          uint16 xferCount;
 529   1      
 530   1          /* Set up the state machine */
 531   1          USBFS_transferState = USBFS_TRANS_STATE_CONTROL_WRITE;
 532   1          /* This might not be necessary */
 533   1          USBFS_ep0Toggle = USBFS_EP0_CNT_DATA_TOGGLE;
 534   1          /* Initialize the Status Block */
 535   1          USBFS_InitializeStatusBlock();
 536   1      
 537   1          xferCount = (((uint16)CY_GET_REG8(USBFS_lengthHi) << 8u) | (CY_GET_REG8(USBFS_lengthLo)));
 538   1      
 539   1          if (USBFS_currentTD.count > xferCount)
 540   1          {
 541   2              USBFS_currentTD.count = xferCount;
 542   2          }
 543   1      
 544   1          /* Expect Data or Status Stage */
 545   1          USBFS_ep0Mode = USBFS_MODE_ACK_OUT_STATUS_IN;
 546   1      
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 10  

 547   1          return(USBFS_TRUE);
 548   1      }
 549          
 550          
 551          /*******************************************************************************
 552          * Function Name: USBFS_ControlWriteDataStage
 553          ********************************************************************************
 554          *
 555          * Summary:
 556          *  Handle the Data Stage of a control write transfer
 557          *       1. Get the data (We assume the destination was validated previously)
 558          *       2. Update the count and data toggle
 559          *       3. Update the mode register for the next transaction
 560          *
 561          * Parameters:
 562          *  None.
 563          *
 564          * Return:
 565          *  None.
 566          *
 567          * Global variables:
 568          *  USBFS_transferByteCount - Update the transfer byte count from the
 569          *    last transaction.
 570          *  USBFS_ep0Count - counts the data loaded from the SIE memory
 571          *    in current packet.
 572          *  USBFS_transferByteCount - sum of the previous bytes transferred
 573          *    on previous packets(sum of USBFS_lastPacketSize)
 574          *  USBFS_ep0Toggle - inverted
 575          *  USBFS_ep0Mode  - set to MODE_ACK_OUT_STATUS_IN.
 576          *
 577          * Reentrant:
 578          *  No.
 579          *
 580          *******************************************************************************/
 581          void USBFS_ControlWriteDataStage(void) 
 582          {
 583   1          uint8 ep0Count;
 584   1          uint8 regIndex = 0u;
 585   1      
 586   1          ep0Count = (CY_GET_REG8(USBFS_EP0_CNT_PTR) & USBFS_EPX_CNT0_MASK) -
 587   1                     USBFS_EPX_CNTX_CRC_COUNT;
 588   1      
 589   1          USBFS_transferByteCount += ep0Count;
 590   1      
 591   1          while ((USBFS_currentTD.count > 0u) && (ep0Count > 0u))
 592   1          {
 593   2              *USBFS_currentTD.pData = CY_GET_REG8((reg8 *)(USBFS_EP0_DR0_IND + regIndex));
 594   2              USBFS_currentTD.pData = &USBFS_currentTD.pData[1u];
 595   2              regIndex++;
 596   2              ep0Count--;
 597   2              USBFS_currentTD.count--;
 598   2          }
 599   1          USBFS_ep0Count = ep0Count;
 600   1          /* Update the data toggle */
 601   1          USBFS_ep0Toggle ^= USBFS_EP0_CNT_DATA_TOGGLE;
 602   1          /* Expect Data or Status Stage */
 603   1          USBFS_ep0Mode = USBFS_MODE_ACK_OUT_STATUS_IN;
 604   1      }
 605          
 606          
 607          /*******************************************************************************
 608          * Function Name: USBFS_ControlWriteStatusStage
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 11  

 609          ********************************************************************************
 610          *
 611          * Summary:
 612          *  Handle the Status Stage of a control write transfer
 613          *
 614          * Parameters:
 615          *  None.
 616          *
 617          * Return:
 618          *  None.
 619          *
 620          * Global variables:
 621          *  USBFS_transferState - set to TRANS_STATE_IDLE.
 622          *  USBFS_USBFS_ep0Mode  - set to MODE_STALL_IN_OUT.
 623          *
 624          * Reentrant:
 625          *  No.
 626          *
 627          *******************************************************************************/
 628          void USBFS_ControlWriteStatusStage(void) 
 629          {
 630   1          /* Go Idle */
 631   1          USBFS_transferState = USBFS_TRANS_STATE_IDLE;
 632   1          /* Update the completion block */
 633   1          USBFS_UpdateStatusBlock(USBFS_XFER_STATUS_ACK);
 634   1          /* We expect no more data, so stall INs and OUTs */
 635   1          USBFS_ep0Mode = USBFS_MODE_STALL_IN_OUT;
 636   1      }
 637          
 638          
 639          /*******************************************************************************
 640          * Function Name: USBFS_InitNoDataControlTransfer
 641          ********************************************************************************
 642          *
 643          * Summary:
 644          *  Initialize a no data control transfer
 645          *
 646          * Parameters:
 647          *  None.
 648          *
 649          * Return:
 650          *  requestHandled state.
 651          *
 652          * Global variables:
 653          *  USBFS_transferState - set to TRANS_STATE_NO_DATA_CONTROL.
 654          *  USBFS_ep0Mode  - set to MODE_STATUS_IN_ONLY.
 655          *  USBFS_ep0Count - cleared.
 656          *  USBFS_ep0Toggle - set to EP0_CNT_DATA_TOGGLE
 657          *
 658          * Reentrant:
 659          *  No.
 660          *
 661          *******************************************************************************/
 662          uint8 USBFS_InitNoDataControlTransfer(void) 
 663          {
 664   1          USBFS_transferState = USBFS_TRANS_STATE_NO_DATA_CONTROL;
 665   1          USBFS_ep0Mode = USBFS_MODE_STATUS_IN_ONLY;
 666   1          USBFS_ep0Toggle = USBFS_EP0_CNT_DATA_TOGGLE;
 667   1          USBFS_ep0Count = 0u;
 668   1      
 669   1          return(USBFS_TRUE);
 670   1      }
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 12  

 671          
 672          
 673          /*******************************************************************************
 674          * Function Name: USBFS_NoDataControlStatusStage
 675          ********************************************************************************
 676          * Summary:
 677          *  Handle the Status Stage of a no data control transfer.
 678          *
 679          *  SET_ADDRESS is special, since we need to receive the status stage with
 680          *  the old address.
 681          *
 682          * Parameters:
 683          *  None.
 684          *
 685          * Return:
 686          *  None.
 687          *
 688          * Global variables:
 689          *  USBFS_transferState - set to TRANS_STATE_IDLE.
 690          *  USBFS_ep0Mode  - set to MODE_STALL_IN_OUT.
 691          *  USBFS_ep0Toggle - set to EP0_CNT_DATA_TOGGLE
 692          *  USBFS_deviceAddress - used to set new address and cleared
 693          *
 694          * Reentrant:
 695          *  No.
 696          *
 697          *******************************************************************************/
 698          void USBFS_NoDataControlStatusStage(void) 
 699          {
 700   1          /* Change the USB address register if we got a SET_ADDRESS. */
 701   1          if (USBFS_deviceAddress != 0u)
 702   1          {
 703   2              CY_SET_REG8(USBFS_CR0_PTR, USBFS_deviceAddress | USBFS_CR0_ENABLE);
 704   2              USBFS_deviceAddress = 0u;
 705   2          }
 706   1          /* Go Idle */
 707   1          USBFS_transferState = USBFS_TRANS_STATE_IDLE;
 708   1          /* Update the completion block */
 709   1          USBFS_UpdateStatusBlock(USBFS_XFER_STATUS_ACK);
 710   1           /* We expect no more data, so stall INs and OUTs */
 711   1          USBFS_ep0Mode = USBFS_MODE_STALL_IN_OUT;
 712   1      }
 713          
 714          
 715          /*******************************************************************************
 716          * Function Name: USBFS_UpdateStatusBlock
 717          ********************************************************************************
 718          *
 719          * Summary:
 720          *  Update the Completion Status Block for a Request.  The block is updated
 721          *  with the completion code the USBFS_transferByteCount.  The
 722          *  StatusBlock Pointer is set to NULL.
 723          *
 724          * Parameters:
 725          *  completionCode - status.
 726          *
 727          * Return:
 728          *  None.
 729          *
 730          * Global variables:
 731          *  USBFS_currentTD.pStatusBlock->status - updated by the
 732          *    completionCode parameter.
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 13  

 733          *  USBFS_currentTD.pStatusBlock->length - updated.
 734          *  USBFS_currentTD.pStatusBlock - cleared.
 735          *
 736          * Reentrant:
 737          *  No.
 738          *
 739          *******************************************************************************/
 740          void USBFS_UpdateStatusBlock(uint8 completionCode) 
 741          {
 742   1          if (USBFS_currentTD.pStatusBlock != NULL)
 743   1          {
 744   2              USBFS_currentTD.pStatusBlock->status = completionCode;
 745   2              USBFS_currentTD.pStatusBlock->length = USBFS_transferByteCount;
 746   2              USBFS_currentTD.pStatusBlock = NULL;
 747   2          }
 748   1      }
 749          
 750          
 751          /*******************************************************************************
 752          * Function Name: USBFS_InitializeStatusBlock
 753          ********************************************************************************
 754          *
 755          * Summary:
 756          *  Initialize the Completion Status Block for a Request.  The completion
 757          *  code is set to USB_XFER_IDLE.
 758          *
 759          *  Also, initializes USBFS_transferByteCount.  Save some space,
 760          *  this is the only consumer.
 761          *
 762          * Parameters:
 763          *  None.
 764          *
 765          * Return:
 766          *  None.
 767          *
 768          * Global variables:
 769          *  USBFS_currentTD.pStatusBlock->status - set to XFER_IDLE.
 770          *  USBFS_currentTD.pStatusBlock->length - cleared.
 771          *  USBFS_transferByteCount - cleared.
 772          *
 773          * Reentrant:
 774          *  No.
 775          *
 776          *******************************************************************************/
 777          void USBFS_InitializeStatusBlock(void) 
 778          {
 779   1          USBFS_transferByteCount = 0u;
 780   1          if(USBFS_currentTD.pStatusBlock != NULL)
 781   1          {
 782   2              USBFS_currentTD.pStatusBlock->status = USBFS_XFER_IDLE;
 783   2              USBFS_currentTD.pStatusBlock->length = 0u;
 784   2          }
 785   1      }
 786          
 787          
 788          /* [] END OF FILE */
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 14  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION USBFS_EP_0_ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 67
                                           ; SOURCE LINE # 76
002B 906028            MOV     DPTR,#06028H
002E E0                MOVX    A,@DPTR
002F 900000      R     MOV     DPTR,#bRegTemp
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 5410              ANL     A,#010H
0037 7003              JNZ     $ + 5H
0039 020000      R     LJMP    ?C0018
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 79
003C A3                INC     DPTR
003D 7401              MOV     A,#01H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 80
0040 EF                MOV     A,R7
0041 5480              ANL     A,#080H
0043 6021              JZ      ?C0002
                                           ; SOURCE LINE # 81
                                           ; SOURCE LINE # 82
0045 900000      R     MOV     DPTR,#bRegTemp
0048 E0                MOVX    A,@DPTR
0049 540F              ANL     A,#0FH
004B 6401              XRL     A,#01H
004D 6005              JZ      ?C0003
                                           ; SOURCE LINE # 83
                                           ; SOURCE LINE # 84
004F A3                INC     DPTR
0050 E4                CLR     A
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 85
0052 8031              SJMP    ?C0006
0054         ?C0003:
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 88
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 15  

0054 120000      R     LCALL   USBFS_HandleSetup
                                           ; SOURCE LINE # 89
0057 900000      R     MOV     DPTR,#USBFS_ep0Mode
005A E0                MOVX    A,@DPTR
005B 5480              ANL     A,#080H
005D 6026              JZ      ?C0006
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
005F 900000      R     MOV     DPTR,#modifyReg
0062 E4                CLR     A
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 92
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 95
0064 801F              SJMP    ?C0006
0066         ?C0002:
                                           ; SOURCE LINE # 96
0066 900000      R     MOV     DPTR,#bRegTemp
0069 E0                MOVX    A,@DPTR
006A 5440              ANL     A,#040H
006C 6005              JZ      ?C0007
                                           ; SOURCE LINE # 97
                                           ; SOURCE LINE # 98
006E 120000      R     LCALL   USBFS_HandleIN
                                           ; SOURCE LINE # 99
0071 8012              SJMP    ?C0006
0073         ?C0007:
                                           ; SOURCE LINE # 100
0073 900000      R     MOV     DPTR,#bRegTemp
0076 E0                MOVX    A,@DPTR
0077 5420              ANL     A,#020H
0079 6005              JZ      ?C0009
                                           ; SOURCE LINE # 101
                                           ; SOURCE LINE # 102
007B 120000      R     LCALL   USBFS_HandleOUT
                                           ; SOURCE LINE # 103
007E 8005              SJMP    ?C0006
0080         ?C0009:
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
0080 900000      R     MOV     DPTR,#modifyReg
0083 E4                CLR     A
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
0085         ?C0006:
                                           ; SOURCE LINE # 108
0085 900000      R     MOV     DPTR,#modifyReg
0088 E0                MOVX    A,@DPTR
0089 6057              JZ      ?C0018
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 110
008B 906028            MOV     DPTR,#06028H
008E E0                MOVX    A,@DPTR
008F 900000      R     MOV     DPTR,#bRegTemp
0092 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 111
0093 E0                MOVX    A,@DPTR
0094 5480              ANL     A,#080H
0096 704A              JNZ     ?C0018
                                           ; SOURCE LINE # 112
                                           ; SOURCE LINE # 114
0098 900000      R     MOV     DPTR,#USBFS_ep0Count
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 16  

009B E0                MOVX    A,@DPTR
009C FF                MOV     R7,A
009D 900000      R     MOV     DPTR,#USBFS_ep0Toggle
00A0 E0                MOVX    A,@DPTR
00A1 4F                ORL     A,R7
00A2 900000      R     MOV     DPTR,#bRegTemp
00A5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 115
00A6 E0                MOVX    A,@DPTR
00A7 FF                MOV     R7,A
00A8 906029            MOV     DPTR,#06029H
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 116
00AC E0                MOVX    A,@DPTR
00AD FE                MOV     R6,A
00AE EF                MOV     A,R7
00AF 6E                XRL     A,R6
00B0 7030              JNZ     ?C0018
                                           ; SOURCE LINE # 117
00B2         ?C0016:
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 120
00B2 900000      R     MOV     DPTR,#USBFS_ep0Mode
00B5 E0                MOVX    A,@DPTR
00B6 900000      R     MOV     DPTR,#modifyReg
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 122
00BA 906028            MOV     DPTR,#06028H
00BD E0                MOVX    A,@DPTR
00BE 5480              ANL     A,#080H
00C0 900000      R     MOV     DPTR,#bRegTemp
00C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 123
00C4 E0                MOVX    A,@DPTR
00C5 700F              JNZ     ?C0014
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 126
00C7 900000      R     MOV     DPTR,#USBFS_ep0Mode
00CA E0                MOVX    A,@DPTR
00CB 906028            MOV     DPTR,#06028H
00CE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 128
00CF E0                MOVX    A,@DPTR
00D0 540F              ANL     A,#0FH
00D2 900000      R     MOV     DPTR,#modifyReg
00D5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 130
00D6         ?C0014:
00D6 900000      R     MOV     DPTR,#USBFS_ep0Mode
00D9 E0                MOVX    A,@DPTR
00DA FF                MOV     R7,A
00DB 900000      R     MOV     DPTR,#modifyReg
00DE E0                MOVX    A,@DPTR
00DF B507D0            CJNE    A,AR7,?C0016
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 132
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
                                           ; SOURCE LINE # 138
00E2         ?C0018:
00E2 D007              POP     AR7
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 17  

00E4 D006              POP     AR6
00E6 D005              POP     AR5
00E8 D004              POP     AR4
00EA D003              POP     AR3
00EC D002              POP     AR2
00EE D001              POP     AR1
00F0 D000              POP     AR0
00F2 D0D0              POP     PSW
00F4 D000        E     POP     ?C?XPAGE1SFR
00F6 D086              POP     DPS
00F8 D084              POP     DPL1
00FA D085              POP     DPH1
00FC D082              POP     DPL
00FE D083              POP     DPH
0100 D0F0              POP     B
0102 D0E0              POP     ACC
0104 32                RETI    
             ; FUNCTION USBFS_EP_0_ISR (END)

             ; FUNCTION USBFS_HandleSetup (BEGIN)
                                           ; SOURCE LINE # 158
                                           ; SOURCE LINE # 159
                                           ; SOURCE LINE # 162
0000 906028            MOV     DPTR,#06028H
0003 E0                MOVX    A,@DPTR
0004 900000      R     MOV     DPTR,#requestHandled
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 163
0008 E0                MOVX    A,@DPTR
0009 906028            MOV     DPTR,#06028H
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 164
000D E0                MOVX    A,@DPTR
000E 900000      R     MOV     DPTR,#requestHandled
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 165
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 5480              ANL     A,#080H
0016 6006              JZ      ?C0019
                                           ; SOURCE LINE # 166
                                           ; SOURCE LINE # 167
0018 900000      R     MOV     DPTR,#USBFS_ep0Mode
001B EF                MOV     A,R7
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 168
001D 22                RET     
001E         ?C0019:
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 172
001E 7F02              MOV     R7,#02H
0020 120000      R     LCALL   _USBFS_UpdateStatusBlock
                                           ; SOURCE LINE # 174
0023 906000            MOV     DPTR,#06000H
0026 E0                MOVX    A,@DPTR
0027 5460              ANL     A,#060H
0029 24E0              ADD     A,#0E0H
002B 6012              JZ      ?C0023
002D 24E0              ADD     A,#0E0H
002F 6018              JZ      ?C0024
0031 2440              ADD     A,#040H
0033 701E              JNZ     ?C0025
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 18  

                                           ; SOURCE LINE # 175
                                           ; SOURCE LINE # 176
0035         ?C0022:
                                           ; SOURCE LINE # 177
0035 120000      E     LCALL   USBFS_HandleStandardRqst
0038 900000      R     MOV     DPTR,#requestHandled
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 178
003D 8019              SJMP    ?C0021
                                           ; SOURCE LINE # 179
003F         ?C0023:
                                           ; SOURCE LINE # 180
003F 120000      E     LCALL   USBFS_DispatchClassRqst
0042 900000      R     MOV     DPTR,#requestHandled
0045 EF                MOV     A,R7
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 181
0047 800F              SJMP    ?C0021
                                           ; SOURCE LINE # 182
0049         ?C0024:
                                           ; SOURCE LINE # 183
0049 120000      E     LCALL   USBFS_HandleVendorRqst
004C 900000      R     MOV     DPTR,#requestHandled
004F EF                MOV     A,R7
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 184
0051 8005              SJMP    ?C0021
                                           ; SOURCE LINE # 185
0053         ?C0025:
                                           ; SOURCE LINE # 186
0053 E4                CLR     A
0054 900000      R     MOV     DPTR,#requestHandled
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
0058         ?C0021:
                                           ; SOURCE LINE # 189
0058 900000      R     MOV     DPTR,#requestHandled
005B E0                MOVX    A,@DPTR
005C 7006              JNZ     ?C0027
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
005E 900000      R     MOV     DPTR,#USBFS_ep0Mode
0061 7403              MOV     A,#03H
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
                                           ; SOURCE LINE # 194
0064         ?C0027:
0064 22                RET     
             ; FUNCTION USBFS_HandleSetup (END)

             ; FUNCTION USBFS_HandleIN (BEGIN)
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
0000 900000      R     MOV     DPTR,#USBFS_transferState
0003 E0                MOVX    A,@DPTR
0004 24FC              ADD     A,#0FCH
0006 600C              JZ      ?C0031
0008 24FE              ADD     A,#0FEH
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 19  

000A 600C              JZ      ?C0032
000C 2404              ADD     A,#04H
000E 700B              JNZ     ?C0034
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 220
0010         ?C0030:
                                           ; SOURCE LINE # 221
0010 120000      R     LCALL   USBFS_ControlReadDataStage
                                           ; SOURCE LINE # 222
0013 22                RET     
                                           ; SOURCE LINE # 223
0014         ?C0031:
                                           ; SOURCE LINE # 224
0014 120000      R     LCALL   USBFS_ControlWriteStatusStage
                                           ; SOURCE LINE # 225
0017 22                RET     
                                           ; SOURCE LINE # 226
0018         ?C0032:
                                           ; SOURCE LINE # 227
0018 120000      R     LCALL   USBFS_NoDataControlStatusStage
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 230
                                           ; SOURCE LINE # 231
                                           ; SOURCE LINE # 232
001B         ?C0034:
001B 22                RET     
             ; FUNCTION USBFS_HandleIN (END)

             ; FUNCTION USBFS_HandleOUT (BEGIN)
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 254
0000 900000      R     MOV     DPTR,#USBFS_transferState
0003 E0                MOVX    A,@DPTR
0004 24FC              ADD     A,#0FCH
0006 600C              JZ      ?C0038
0008 24FE              ADD     A,#0FEH
000A 600C              JZ      ?C0039
000C 2404              ADD     A,#04H
000E 7013              JNZ     ?C0041
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 258
0010         ?C0037:
                                           ; SOURCE LINE # 259
0010 120000      R     LCALL   USBFS_ControlReadStatusStage
                                           ; SOURCE LINE # 260
0013 22                RET     
                                           ; SOURCE LINE # 261
0014         ?C0038:
                                           ; SOURCE LINE # 262
0014 120000      R     LCALL   USBFS_ControlWriteDataStage
                                           ; SOURCE LINE # 263
0017 22                RET     
                                           ; SOURCE LINE # 264
0018         ?C0039:
                                           ; SOURCE LINE # 266
0018 7F03              MOV     R7,#03H
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 20  

001A 120000      R     LCALL   _USBFS_UpdateStatusBlock
                                           ; SOURCE LINE # 268
001D 900000      R     MOV     DPTR,#USBFS_ep0Mode
0020 7403              MOV     A,#03H
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 269
                                           ; SOURCE LINE # 270
                                           ; SOURCE LINE # 271
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 273
0023         ?C0041:
0023 22                RET     
             ; FUNCTION USBFS_HandleOUT (END)

             ; FUNCTION USBFS_LoadEP0 (BEGIN)
                                           ; SOURCE LINE # 314
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 316
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#ep0Count
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 319
0005 900000      R     MOV     DPTR,#USBFS_lastPacketSize
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#USBFS_transferByteCount
000D E4                CLR     A
000E 8FF0              MOV     B,R7
0010 120000      E     LCALL   ?C?IILDX
0013         ?C0042:
                                           ; SOURCE LINE # 321
0013 D3                SETB    C
0014 900000      R     MOV     DPTR,#USBFS_currentTD+01H
0017 E0                MOVX    A,@DPTR
0018 9400              SUBB    A,#00H
001A 900000      R     MOV     DPTR,#USBFS_currentTD
001D E0                MOVX    A,@DPTR
001E 9400              SUBB    A,#00H
0020 4045              JC      ?C0043
0022 900000      R     MOV     DPTR,#ep0Count
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 9408              SUBB    A,#08H
0029 503C              JNC     ?C0043
                                           ; SOURCE LINE # 322
                                           ; SOURCE LINE # 323
002B 900000      R     MOV     DPTR,#USBFS_currentTD+02H
002E 120000      E     LCALL   ?C?PLDXDATA
0031 120000      E     LCALL   ?C?CLDPTR
0034 FE                MOV     R6,A
0035 EF                MOV     A,R7
0036 2400              ADD     A,#00H
0038 FD                MOV     R5,A
0039 E4                CLR     A
003A 3460              ADDC    A,#060H
003C 8D82              MOV     DPL,R5
003E F583              MOV     DPH,A
0040 EE                MOV     A,R6
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 324
0042 900000      R     MOV     DPTR,#USBFS_currentTD+02H
0045 120000      E     LCALL   ?C?PLDXDATA
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 21  

0048 E9                MOV     A,R1
0049 2401              ADD     A,#01H
004B F9                MOV     R1,A
004C E4                CLR     A
004D 3A                ADDC    A,R2
004E FA                MOV     R2,A
004F 900000      R     MOV     DPTR,#USBFS_currentTD+02H
0052 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 325
0055 900000      R     MOV     DPTR,#ep0Count
0058 E0                MOVX    A,@DPTR
0059 04                INC     A
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 326
005B 900000      R     MOV     DPTR,#USBFS_currentTD
005E 74FF              MOV     A,#0FFH
0060 F5F0              MOV     B,A
0062 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 327
0065 80AC              SJMP    ?C0042
0067         ?C0043:
                                           ; SOURCE LINE # 329
0067 900000      R     MOV     DPTR,#USBFS_lastPacketSize
006A E0                MOVX    A,@DPTR
006B 6408              XRL     A,#08H
006D 6009              JZ      ?C0045
006F 900000      R     MOV     DPTR,#ep0Count
0072 E0                MOVX    A,@DPTR
0073 D3                SETB    C
0074 9400              SUBB    A,#00H
0076 4015              JC      ?C0044
0078         ?C0045:
                                           ; SOURCE LINE # 330
                                           ; SOURCE LINE # 332
0078 900000      R     MOV     DPTR,#USBFS_ep0Toggle
007B E0                MOVX    A,@DPTR
007C 6480              XRL     A,#080H
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 334
007F 900000      R     MOV     DPTR,#USBFS_ep0Mode
0082 740F              MOV     A,#0FH
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 336
0085 900000      R     MOV     DPTR,#USBFS_transferState
0088 7402              MOV     A,#02H
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 337
008B 800A              SJMP    ?C0046
008D         ?C0044:
                                           ; SOURCE LINE # 339
                                           ; SOURCE LINE # 341
008D 900000      R     MOV     DPTR,#USBFS_ep0Mode
0090 7402              MOV     A,#02H
0092 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 343
0093 900000      R     MOV     DPTR,#USBFS_transferState
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 344
0097         ?C0046:
                                           ; SOURCE LINE # 347
0097 900000      R     MOV     DPTR,#ep0Count
009A E0                MOVX    A,@DPTR
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 22  

009B FF                MOV     R7,A
009C 900000      R     MOV     DPTR,#USBFS_lastPacketSize
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 348
00A0 900000      R     MOV     DPTR,#USBFS_ep0Count
00A3 EF                MOV     A,R7
00A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 349
00A5 22                RET     
             ; FUNCTION USBFS_LoadEP0 (END)

             ; FUNCTION USBFS_InitControlRead (BEGIN)
                                           ; SOURCE LINE # 376
                                           ; SOURCE LINE # 377
                                           ; SOURCE LINE # 379
0000 900000      R     MOV     DPTR,#USBFS_currentTD
0003 E0                MOVX    A,@DPTR
0004 7002              JNZ     ?C0068
0006 A3                INC     DPTR
0007 E0                MOVX    A,@DPTR
0008         ?C0068:
0008 7005              JNZ     ?C0048
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 381
000A 120000      R     LCALL   USBFS_InitZeroLengthControlTransfer
                                           ; SOURCE LINE # 382
000D 8030              SJMP    ?C0049
000F         ?C0048:
                                           ; SOURCE LINE # 384
                                           ; SOURCE LINE # 386
000F 900000      R     MOV     DPTR,#USBFS_transferState
0012 7402              MOV     A,#02H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 388
0015 E4                CLR     A
0016 900000      R     MOV     DPTR,#USBFS_ep0Toggle
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 390
001A 120000      R     LCALL   USBFS_InitializeStatusBlock
                                           ; SOURCE LINE # 391
001D 906007            MOV     DPTR,#06007H
0020 E0                MOVX    A,@DPTR
0021 FE                MOV     R6,A
0022 906006            MOV     DPTR,#06006H
0025 E0                MOVX    A,@DPTR
0026 FD                MOV     R5,A
0027 EE                MOV     A,R6
0028 ED                MOV     A,R5
0029 FF                MOV     R7,A
;---- Variable 'xferCount' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 393
002A D3                SETB    C
002B 900000      R     MOV     DPTR,#USBFS_currentTD+01H
002E E0                MOVX    A,@DPTR
002F 9F                SUBB    A,R7
0030 900000      R     MOV     DPTR,#USBFS_currentTD
0033 E0                MOVX    A,@DPTR
0034 9E                SUBB    A,R6
0035 4005              JC      ?C0050
                                           ; SOURCE LINE # 394
                                           ; SOURCE LINE # 395
0037 EE                MOV     A,R6
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 23  

0038 F0                MOVX    @DPTR,A
0039 A3                INC     DPTR
003A EF                MOV     A,R7
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 396
003C         ?C0050:
                                           ; SOURCE LINE # 397
003C 120000      R     LCALL   USBFS_LoadEP0
                                           ; SOURCE LINE # 398
003F         ?C0049:
                                           ; SOURCE LINE # 400
003F 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 401
0041         ?C0051:
0041 22                RET     
             ; FUNCTION USBFS_InitControlRead (END)

             ; FUNCTION USBFS_InitZeroLengthControlTransfer (BEGIN)
                                           ; SOURCE LINE # 428
                                           ; SOURCE LINE # 430
                                           ; SOURCE LINE # 432
0000 900000      R     MOV     DPTR,#USBFS_transferState
0003 7402              MOV     A,#02H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 434
0006 900000      R     MOV     DPTR,#USBFS_ep0Toggle
0009 7480              MOV     A,#080H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 436
000C 900000      R     MOV     DPTR,#USBFS_ep0Mode
000F 740F              MOV     A,#0FH
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 438
0012 E4                CLR     A
0013 900000      R     MOV     DPTR,#USBFS_lastPacketSize
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 439
0017 900000      R     MOV     DPTR,#USBFS_ep0Count
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 441
001B 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 442
001D         ?C0052:
001D 22                RET     
             ; FUNCTION USBFS_InitZeroLengthControlTransfer (END)

             ; FUNCTION USBFS_ControlReadDataStage (BEGIN)
                                           ; SOURCE LINE # 462
                                           ; SOURCE LINE # 464
                                           ; SOURCE LINE # 465
0000 120000      R     LCALL   USBFS_LoadEP0
                                           ; SOURCE LINE # 466
0003 22                RET     
             ; FUNCTION USBFS_ControlReadDataStage (END)

             ; FUNCTION USBFS_ControlReadStatusStage (BEGIN)
                                           ; SOURCE LINE # 491
                                           ; SOURCE LINE # 492
                                           ; SOURCE LINE # 494
0000 900000      R     MOV     DPTR,#USBFS_lastPacketSize
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 24  

0005 900000      R     MOV     DPTR,#USBFS_transferByteCount
0008 E4                CLR     A
0009 8FF0              MOV     B,R7
000B 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 496
000E E4                CLR     A
000F 900000      R     MOV     DPTR,#USBFS_transferState
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 498
0013 7F01              MOV     R7,#01H
0015 120000      R     LCALL   _USBFS_UpdateStatusBlock
                                           ; SOURCE LINE # 500
0018 900000      R     MOV     DPTR,#USBFS_ep0Mode
001B 7403              MOV     A,#03H
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 501
001E 22                RET     
             ; FUNCTION USBFS_ControlReadStatusStage (END)

             ; FUNCTION USBFS_InitControlWrite (BEGIN)
                                           ; SOURCE LINE # 526
                                           ; SOURCE LINE # 527
                                           ; SOURCE LINE # 531
0000 900000      R     MOV     DPTR,#USBFS_transferState
0003 7404              MOV     A,#04H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 533
0006 900000      R     MOV     DPTR,#USBFS_ep0Toggle
0009 7480              MOV     A,#080H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 535
000C 120000      R     LCALL   USBFS_InitializeStatusBlock
                                           ; SOURCE LINE # 537
000F 906007            MOV     DPTR,#06007H
0012 E0                MOVX    A,@DPTR
0013 FE                MOV     R6,A
0014 906006            MOV     DPTR,#06006H
0017 E0                MOVX    A,@DPTR
0018 FD                MOV     R5,A
0019 EE                MOV     A,R6
001A ED                MOV     A,R5
001B FF                MOV     R7,A
;---- Variable 'xferCount' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 539
001C D3                SETB    C
001D 900000      R     MOV     DPTR,#USBFS_currentTD+01H
0020 E0                MOVX    A,@DPTR
0021 9F                SUBB    A,R7
0022 900000      R     MOV     DPTR,#USBFS_currentTD
0025 E0                MOVX    A,@DPTR
0026 9E                SUBB    A,R6
0027 4005              JC      ?C0055
                                           ; SOURCE LINE # 540
                                           ; SOURCE LINE # 541
0029 EE                MOV     A,R6
002A F0                MOVX    @DPTR,A
002B A3                INC     DPTR
002C EF                MOV     A,R7
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 542
002E         ?C0055:
                                           ; SOURCE LINE # 545
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 25  

002E 900000      R     MOV     DPTR,#USBFS_ep0Mode
0031 740B              MOV     A,#0BH
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 547
0034 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 548
0036         ?C0056:
0036 22                RET     
             ; FUNCTION USBFS_InitControlWrite (END)

             ; FUNCTION USBFS_ControlWriteDataStage (BEGIN)
                                           ; SOURCE LINE # 581
                                           ; SOURCE LINE # 582
                                           ; SOURCE LINE # 584
;---- Variable 'regIndex' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
                                           ; SOURCE LINE # 586
0002 906029            MOV     DPTR,#06029H
0005 E0                MOVX    A,@DPTR
0006 540F              ANL     A,#0FH
0008 24FE              ADD     A,#0FEH
000A FE                MOV     R6,A
;---- Variable 'ep0Count' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 589
000B FD                MOV     R5,A
000C 900000      R     MOV     DPTR,#USBFS_transferByteCount
000F E4                CLR     A
0010 8DF0              MOV     B,R5
0012 120000      E     LCALL   ?C?IILDX
0015         ?C0057:
                                           ; SOURCE LINE # 591
0015 D3                SETB    C
0016 900000      R     MOV     DPTR,#USBFS_currentTD+01H
0019 E0                MOVX    A,@DPTR
001A 9400              SUBB    A,#00H
001C 900000      R     MOV     DPTR,#USBFS_currentTD
001F E0                MOVX    A,@DPTR
0020 9400              SUBB    A,#00H
0022 403E              JC      ?C0058
0024 EE                MOV     A,R6
0025 D3                SETB    C
0026 9400              SUBB    A,#00H
0028 4038              JC      ?C0058
                                           ; SOURCE LINE # 592
                                           ; SOURCE LINE # 593
002A EF                MOV     A,R7
002B 2400              ADD     A,#00H
002D FD                MOV     R5,A
002E E4                CLR     A
002F 3460              ADDC    A,#060H
0031 8D82              MOV     DPL,R5
0033 F583              MOV     DPH,A
0035 E0                MOVX    A,@DPTR
0036 FD                MOV     R5,A
0037 900000      R     MOV     DPTR,#USBFS_currentTD+02H
003A 120000      E     LCALL   ?C?PLDXDATA
003D ED                MOV     A,R5
003E 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 594
0041 900000      R     MOV     DPTR,#USBFS_currentTD+02H
0044 120000      E     LCALL   ?C?PLDXDATA
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 26  

0047 E9                MOV     A,R1
0048 2401              ADD     A,#01H
004A F9                MOV     R1,A
004B E4                CLR     A
004C 3A                ADDC    A,R2
004D FA                MOV     R2,A
004E 900000      R     MOV     DPTR,#USBFS_currentTD+02H
0051 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 595
0054 0F                INC     R7
                                           ; SOURCE LINE # 596
0055 1E                DEC     R6
                                           ; SOURCE LINE # 597
0056 900000      R     MOV     DPTR,#USBFS_currentTD
0059 74FF              MOV     A,#0FFH
005B F5F0              MOV     B,A
005D 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 598
0060 80B3              SJMP    ?C0057
0062         ?C0058:
                                           ; SOURCE LINE # 599
0062 AF06              MOV     R7,AR6
0064 900000      R     MOV     DPTR,#USBFS_ep0Count
0067 EE                MOV     A,R6
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 601
0069 900000      R     MOV     DPTR,#USBFS_ep0Toggle
006C E0                MOVX    A,@DPTR
006D 6480              XRL     A,#080H
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 603
0070 900000      R     MOV     DPTR,#USBFS_ep0Mode
0073 740B              MOV     A,#0BH
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 604
0076 22                RET     
             ; FUNCTION USBFS_ControlWriteDataStage (END)

             ; FUNCTION USBFS_ControlWriteStatusStage (BEGIN)
                                           ; SOURCE LINE # 628
                                           ; SOURCE LINE # 629
                                           ; SOURCE LINE # 631
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#USBFS_transferState
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 633
0005 7F01              MOV     R7,#01H
0007 120000      R     LCALL   _USBFS_UpdateStatusBlock
                                           ; SOURCE LINE # 635
000A 900000      R     MOV     DPTR,#USBFS_ep0Mode
000D 7403              MOV     A,#03H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 636
0010 22                RET     
             ; FUNCTION USBFS_ControlWriteStatusStage (END)

             ; FUNCTION USBFS_InitNoDataControlTransfer (BEGIN)
                                           ; SOURCE LINE # 662
                                           ; SOURCE LINE # 663
                                           ; SOURCE LINE # 664
0000 900000      R     MOV     DPTR,#USBFS_transferState
0003 7406              MOV     A,#06H
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 27  

0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 665
0006 900000      R     MOV     DPTR,#USBFS_ep0Mode
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 666
000A 900000      R     MOV     DPTR,#USBFS_ep0Toggle
000D 7480              MOV     A,#080H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 667
0010 E4                CLR     A
0011 900000      R     MOV     DPTR,#USBFS_ep0Count
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 669
0015 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 670
0017         ?C0061:
0017 22                RET     
             ; FUNCTION USBFS_InitNoDataControlTransfer (END)

             ; FUNCTION USBFS_NoDataControlStatusStage (BEGIN)
                                           ; SOURCE LINE # 698
                                           ; SOURCE LINE # 699
                                           ; SOURCE LINE # 701
0000 900000      R     MOV     DPTR,#USBFS_deviceAddress
0003 E0                MOVX    A,@DPTR
0004 600C              JZ      ?C0062
                                           ; SOURCE LINE # 702
                                           ; SOURCE LINE # 703
0006 E0                MOVX    A,@DPTR
0007 4480              ORL     A,#080H
0009 906008            MOV     DPTR,#06008H
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 704
000D E4                CLR     A
000E 900000      R     MOV     DPTR,#USBFS_deviceAddress
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 705
0012         ?C0062:
                                           ; SOURCE LINE # 707
0012 E4                CLR     A
0013 900000      R     MOV     DPTR,#USBFS_transferState
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 709
0017 7F01              MOV     R7,#01H
0019 120000      R     LCALL   _USBFS_UpdateStatusBlock
                                           ; SOURCE LINE # 711
001C 900000      R     MOV     DPTR,#USBFS_ep0Mode
001F 7403              MOV     A,#03H
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 712
0022 22                RET     
             ; FUNCTION USBFS_NoDataControlStatusStage (END)

             ; FUNCTION _USBFS_UpdateStatusBlock (BEGIN)
                                           ; SOURCE LINE # 740
;---- Variable 'completionCode' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 741
                                           ; SOURCE LINE # 742
0000 900000      R     MOV     DPTR,#USBFS_currentTD+05H
0003 120000      E     LCALL   ?C?PLDXDATA
0006 E9                MOV     A,R1
0007 4A                ORL     A,R2
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 28  

0008 4B                ORL     A,R3
0009 6031              JZ      ?C0065
                                           ; SOURCE LINE # 743
                                           ; SOURCE LINE # 744
000B 900000      R     MOV     DPTR,#USBFS_currentTD+05H
000E 120000      E     LCALL   ?C?PLDXDATA
0011 EF                MOV     A,R7
0012 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 745
0015 900000      R     MOV     DPTR,#USBFS_transferByteCount
0018 E0                MOVX    A,@DPTR
0019 FE                MOV     R6,A
001A A3                INC     DPTR
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D 900000      R     MOV     DPTR,#USBFS_currentTD+05H
0020 120000      E     LCALL   ?C?PLDXDATA
0023 E9                MOV     A,R1
0024 2401              ADD     A,#01H
0026 F9                MOV     R1,A
0027 E4                CLR     A
0028 3A                ADDC    A,R2
0029 FA                MOV     R2,A
002A EE                MOV     A,R6
002B 8FF0              MOV     B,R7
002D 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 746
0030 7B00              MOV     R3,#00H
0032 7A00              MOV     R2,#00H
0034 7900              MOV     R1,#00H
0036 900000      R     MOV     DPTR,#USBFS_currentTD+05H
0039 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 747
                                           ; SOURCE LINE # 748
003C         ?C0065:
003C 22                RET     
             ; FUNCTION _USBFS_UpdateStatusBlock (END)

             ; FUNCTION USBFS_InitializeStatusBlock (BEGIN)
                                           ; SOURCE LINE # 777
                                           ; SOURCE LINE # 778
                                           ; SOURCE LINE # 779
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#USBFS_transferByteCount
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 780
0007 900000      R     MOV     DPTR,#USBFS_currentTD+05H
000A 120000      E     LCALL   ?C?PLDXDATA
000D E9                MOV     A,R1
000E 4A                ORL     A,R2
000F 4B                ORL     A,R3
0010 601D              JZ      ?C0067
                                           ; SOURCE LINE # 781
                                           ; SOURCE LINE # 782
0012 900000      R     MOV     DPTR,#USBFS_currentTD+05H
0015 120000      E     LCALL   ?C?PLDXDATA
0018 E4                CLR     A
0019 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 783
001C 900000      R     MOV     DPTR,#USBFS_currentTD+05H
C51 COMPILER V9.51   USBFS_DRV                                                             02/25/2016 10:46:01 PAGE 29  

001F 120000      E     LCALL   ?C?PLDXDATA
0022 E9                MOV     A,R1
0023 2401              ADD     A,#01H
0025 F9                MOV     R1,A
0026 E4                CLR     A
0027 3A                ADDC    A,R2
0028 FA                MOV     R2,A
0029 E4                CLR     A
002A F5F0              MOV     B,A
002C 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 784
                                           ; SOURCE LINE # 785
002F         ?C0067:
002F 22                RET     
             ; FUNCTION USBFS_InitializeStatusBlock (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1082    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    125       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
