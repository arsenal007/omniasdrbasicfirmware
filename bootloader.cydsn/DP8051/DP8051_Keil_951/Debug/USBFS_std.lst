C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USBFS_STD
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\USBFS_std.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\USBFS_std.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(DEBU
                    -G) WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/USBFS_std.lst) CD OT(5,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\USBFS_std.obj)

line level    source

   1          /***************************************************************************//**
   2          * \file USBFS_std.c
   3          * \version 3.0
   4          *
   5          * \brief
   6          *  This file contains the USB Standard request handler.
   7          *
   8          ********************************************************************************
   9          * \copyright
  10          * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  11          * You may use this file only in accordance with the license, terms, conditions,
  12          * disclaimers, and limitations in the end user license agreement accompanying
  13          * the software package with which this file was provided.
  14          *******************************************************************************/
  15          
  16          #include "USBFS_pvt.h"
  17          
  18          /***************************************
  19          *   Static data allocation
  20          ***************************************/
  21          
  22          #if defined(USBFS_ENABLE_FWSN_STRING)
                  static volatile uint8* USBFS_fwSerialNumberStringDescriptor;
                  static volatile uint8  USBFS_snStringConfirm = USBFS_FALSE;
              #endif  /* (USBFS_ENABLE_FWSN_STRING) */
  26          
  27          #if defined(USBFS_ENABLE_FWSN_STRING)
                  /***************************************************************************
                  * Function Name: USBFS_SerialNumString
                  ************************************************************************//**
                  *
                  *  This function is available only when the User Call Back option in the 
                  *  Serial Number String descriptor properties is selected. Application 
                  *  firmware can provide the source of the USB device serial number string 
                  *  descriptor during run time. The default string is used if the application 
                  *  firmware does not use this function or sets the wrong string descriptor.
                  *
                  *  \param snString:  Pointer to the user-defined string descriptor. The 
                  *  string descriptor should meet the Universal Serial Bus Specification 
                  *  revision 2.0 chapter 9.6.7
                  *  Offset|Size|Value|Description
                  *  ------|----|------|---------------------------------
                  *  0     |1   |N     |Size of this descriptor in bytes
                  *  1     |1   |0x03  |STRING Descriptor Type
                  *  2     |N-2 |Number|UNICODE encoded string
                  *  
                  * *For example:* uint8 snString[16]={0x0E,0x03,'F',0,'W',0,'S',0,'N',0,'0',0,'1',0};
                  *
                  * \reentrant
                  *  No.
                  *
                  ***************************************************************************/
                  void  USBFS_SerialNumString(uint8 snString[]) 
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 2   

                  {
                      USBFS_snStringConfirm = USBFS_FALSE;
                      
                      if (snString != NULL)
                      {
                          /* Check descriptor validation */
                          if ((snString[0u] > 1u) && (snString[1u] == USBFS_DESCR_STRING))
                          {
                              USBFS_fwSerialNumberStringDescriptor = snString;
                              USBFS_snStringConfirm = USBFS_TRUE;
                          }
                      }
                  }
              #endif  /* USBFS_ENABLE_FWSN_STRING */
  68          
  69          
  70          /*******************************************************************************
  71          * Function Name: USBFS_HandleStandardRqst
  72          ****************************************************************************//**
  73          *
  74          *  This Routine dispatches standard requests
  75          *
  76          *
  77          * \return
  78          *  TRUE if request handled.
  79          *
  80          * \reentrant
  81          *  No.
  82          *
  83          *******************************************************************************/
  84          uint8 USBFS_HandleStandardRqst(void) 
  85          {
  86   1          uint8 requestHandled = USBFS_FALSE;
  87   1          uint8 interfaceNumber;
  88   1          uint8 configurationN;
  89   1          uint8 bmRequestType = USBFS_bmRequestTypeReg;
  90   1      
  91   1      #if defined(USBFS_ENABLE_STRINGS)
  92   1          volatile uint8 *pStr = 0u;
  93   1          #if defined(USBFS_ENABLE_DESCRIPTOR_STRINGS)
  94   1              uint8 nStr;
  95   1              uint8 descrLength;
  96   1          #endif /* (USBFS_ENABLE_DESCRIPTOR_STRINGS) */
  97   1      #endif /* (USBFS_ENABLE_STRINGS) */
  98   1          
  99   1          static volatile uint8 USBFS_tBuffer[USBFS_STATUS_LENGTH_MAX];
 100   1          const T_USBFS_LUT CYCODE *pTmp;
 101   1      
 102   1          USBFS_currentTD.count = 0u;
 103   1      
 104   1          if (USBFS_RQST_DIR_D2H == (bmRequestType & USBFS_RQST_DIR_MASK))
 105   1          {
 106   2              /* Control Read */
 107   2              switch (USBFS_bRequestReg)
 108   2              {
 109   3                  case USBFS_GET_DESCRIPTOR:
 110   3                      if (USBFS_DESCR_DEVICE ==USBFS_wValueHiReg)
 111   3                      {
 112   4                          pTmp = USBFS_GetDeviceTablePtr();
 113   4                          USBFS_currentTD.pData = (volatile uint8 *)pTmp->p_list;
 114   4                          USBFS_currentTD.count = USBFS_DEVICE_DESCR_LENGTH;
 115   4                          
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 3   

 116   4                          requestHandled  = USBFS_InitControlRead();
 117   4                      }
 118   3                      else if (USBFS_DESCR_CONFIG == USBFS_wValueHiReg)
 119   3                      {
 120   4                          pTmp = USBFS_GetConfigTablePtr((uint8) USBFS_wValueLoReg);
 121   4                          
 122   4                          /* Verify that requested descriptor exists */
 123   4                          if (pTmp != NULL)
 124   4                          {
 125   5                              USBFS_currentTD.pData = (volatile uint8 *)pTmp->p_list;
 126   5                              USBFS_currentTD.count = (uint16)((uint16)(USBFS_currentTD.pData)[USBFS_CONFIG_DESC
             -R_TOTAL_LENGTH_HI] << 8u) | \
 127   5                                                                                  (USBFS_currentTD.pData)[USBFS_
             -CONFIG_DESCR_TOTAL_LENGTH_LOW];
 128   5                              requestHandled  = USBFS_InitControlRead();
 129   5                          }
 130   4                      }
 131   3                      
 132   3                  #if(USBFS_BOS_ENABLE)
                              else if (USBFS_DESCR_BOS == USBFS_wValueHiReg)
                              {
                                  pTmp = USBFS_GetBOSPtr();
                                  
                                  /* Verify that requested descriptor exists */
                                  if (pTmp != NULL)
                                  {
                                      USBFS_currentTD.pData = (volatile uint8 *)pTmp;
                                      USBFS_currentTD.count = ((uint16)((uint16)(USBFS_currentTD.pData)[USBFS_BOS_DESCR_
             -TOTAL_LENGTH_HI] << 8u)) | \
                                                                                           (USBFS_currentTD.pData)[USBFS
             -_BOS_DESCR_TOTAL_LENGTH_LOW];
                                      requestHandled  = USBFS_InitControlRead();
                                  }
                              }
                          #endif /*(USBFS_BOS_ENABLE)*/
 147   3                  
 148   3                  #if defined(USBFS_ENABLE_STRINGS)
 149   3                      else if (USBFS_DESCR_STRING == USBFS_wValueHiReg)
 150   3                      {
 151   4                      /* Descriptor Strings */
 152   4                      #if defined(USBFS_ENABLE_DESCRIPTOR_STRINGS)
 153   4                          nStr = 0u;
 154   4                          pStr = (volatile uint8 *) &USBFS_STRING_DESCRIPTORS[0u];
 155   4                          
 156   4                          while ((USBFS_wValueLoReg > nStr) && (*pStr != 0u))
 157   4                          {
 158   5                              /* Read descriptor length from 1st byte */
 159   5                              descrLength = *pStr;
 160   5                              /* Move to next string descriptor */
 161   5                              pStr = &pStr[descrLength];
 162   5                              nStr++;
 163   5                          }
 164   4                      #endif /* (USBFS_ENABLE_DESCRIPTOR_STRINGS) */
 165   4                      
 166   4                      /* Microsoft OS String */
 167   4                      #if defined(USBFS_ENABLE_MSOS_STRING)
                                  if (USBFS_STRING_MSOS == USBFS_wValueLoReg)
                                  {
                                      pStr = (volatile uint8 *)& USBFS_MSOS_DESCRIPTOR[0u];
                                  }
                              #endif /* (USBFS_ENABLE_MSOS_STRING) */
 173   4                      
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 4   

 174   4                      /* SN string */
 175   4                      #if defined(USBFS_ENABLE_SN_STRING)
 176   4                          if ((USBFS_wValueLoReg != 0u) && 
 177   4                              (USBFS_wValueLoReg == USBFS_DEVICE0_DESCR[USBFS_DEVICE_DESCR_SN_SHIFT]))
 178   4                          {
 179   5                          #if defined(USBFS_ENABLE_IDSN_STRING)
                                      /* Read DIE ID and generate string descriptor in RAM */
                                      USBFS_ReadDieID(USBFS_idSerialNumberStringDescriptor);
                                      pStr = USBFS_idSerialNumberStringDescriptor;
                                  #elif defined(USBFS_ENABLE_FWSN_STRING)
                                      
                                      if(USBFS_snStringConfirm != USBFS_FALSE)
                                      {
                                          pStr = USBFS_fwSerialNumberStringDescriptor;
                                      }
                                      else
                                      {
                                          pStr = (volatile uint8 *)&USBFS_SN_STRING_DESCRIPTOR[0u];
                                      }
                                  #else
 194   5                              pStr = (volatile uint8 *)&USBFS_SN_STRING_DESCRIPTOR[0u];
 195   5                          #endif  /* (USBFS_ENABLE_IDSN_STRING) */
 196   5                          }
 197   4                      #endif /* (USBFS_ENABLE_SN_STRING) */
 198   4                      
 199   4                          if (*pStr != 0u)
 200   4                          {
 201   5                              USBFS_currentTD.count = *pStr;
 202   5                              USBFS_currentTD.pData = pStr;
 203   5                              requestHandled  = USBFS_InitControlRead();
 204   5                          }
 205   4                      }
 206   3                  #endif /*  USBFS_ENABLE_STRINGS */
 207   3                      else
 208   3                      {
 209   4                          requestHandled = USBFS_DispatchClassRqst();
 210   4                      }
 211   3                      break;
 212   3                      
 213   3                  case USBFS_GET_STATUS:
 214   3                      switch (bmRequestType & USBFS_RQST_RCPT_MASK)
 215   3                      {
 216   4                          case USBFS_RQST_RCPT_EP:
 217   4                              USBFS_currentTD.count = USBFS_EP_STATUS_LENGTH;
 218   4                              USBFS_tBuffer[0u]     = USBFS_EP[USBFS_wIndexLoReg & USBFS_DIR_UNUSED].hwEpState;
 219   4                              USBFS_tBuffer[1u]     = 0u;
 220   4                              USBFS_currentTD.pData = &USBFS_tBuffer[0u];
 221   4                              
 222   4                              requestHandled  = USBFS_InitControlRead();
 223   4                              break;
 224   4                          case USBFS_RQST_RCPT_DEV:
 225   4                              USBFS_currentTD.count = USBFS_DEVICE_STATUS_LENGTH;
 226   4                              USBFS_tBuffer[0u]     = USBFS_deviceStatus;
 227   4                              USBFS_tBuffer[1u]     = 0u;
 228   4                              USBFS_currentTD.pData = &USBFS_tBuffer[0u];
 229   4                              
 230   4                              requestHandled  = USBFS_InitControlRead();
 231   4                              break;
 232   4                          default:    /* requestHandled is initialized as FALSE by default */
 233   4                              break;
 234   4                      }
 235   3                      break;
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 5   

 236   3                      
 237   3                  case USBFS_GET_CONFIGURATION:
 238   3                      USBFS_currentTD.count = 1u;
 239   3                      USBFS_currentTD.pData = (volatile uint8 *) &USBFS_configuration;
 240   3                      requestHandled  = USBFS_InitControlRead();
 241   3                      break;
 242   3                      
 243   3                  case USBFS_GET_INTERFACE:
 244   3                      USBFS_currentTD.count = 1u;
 245   3                      USBFS_currentTD.pData = (volatile uint8 *) &USBFS_interfaceSetting[USBFS_wIndexLoReg];
 246   3                      requestHandled  = USBFS_InitControlRead();
 247   3                      break;
 248   3                      
 249   3                  default: /* requestHandled is initialized as FALSE by default */
 250   3                      break;
 251   3              }
 252   2          }
 253   1          else
 254   1          {
 255   2              /* Control Write */
 256   2              switch (USBFS_bRequestReg)
 257   2              {
 258   3                  case USBFS_SET_ADDRESS:
 259   3                      /* Store address to be set in USBFS_NoDataControlStatusStage(). */
 260   3                      USBFS_deviceAddress = (uint8) USBFS_wValueLoReg;
 261   3                      requestHandled = USBFS_InitNoDataControlTransfer();
 262   3                      break;
 263   3                      
 264   3                  case USBFS_SET_CONFIGURATION:
 265   3                      configurationN = USBFS_wValueLoReg;
 266   3                      
 267   3                      /* Verify that configuration descriptor exists */
 268   3                      if(configurationN > 0u)
 269   3                      {
 270   4                          pTmp = USBFS_GetConfigTablePtr((uint8) configurationN - 1u);
 271   4                      }
 272   3                      
 273   3                      /* Responds with a Request Error when configuration number is invalid */
 274   3                      if (((configurationN > 0u) && (pTmp != NULL)) || (configurationN == 0u))
 275   3                      {
 276   4                          /* Set new configuration if it has been changed */
 277   4                          if(configurationN != USBFS_configuration)
 278   4                          {
 279   5                              USBFS_configuration = (uint8) configurationN;
 280   5                              USBFS_configurationChanged = USBFS_TRUE;
 281   5                              USBFS_Config(USBFS_TRUE);
 282   5                          }
 283   4                          requestHandled = USBFS_InitNoDataControlTransfer();
 284   4                      }
 285   3                      break;
 286   3                      
 287   3                  case USBFS_SET_INTERFACE:
 288   3                      if (0u != USBFS_ValidateAlternateSetting())
 289   3                      {
 290   4                          /* Get interface number from the request. */
 291   4                          interfaceNumber = USBFS_wIndexLoReg;
 292   4                          USBFS_interfaceNumber = (uint8) USBFS_wIndexLoReg;
 293   4                           
 294   4                          /* Check if alternate settings is changed for interface. */
 295   4                          if (USBFS_interfaceSettingLast[interfaceNumber] != USBFS_interfaceSetting[interfaceNum
             -ber])
 296   4                          {
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 6   

 297   5                              USBFS_configurationChanged = USBFS_TRUE;
 298   5                          
 299   5                              /* Change alternate setting for the endpoints. */
 300   5                          #if (USBFS_EP_MANAGEMENT_MANUAL && USBFS_EP_ALLOC_DYNAMIC)
                                      USBFS_Config(USBFS_FALSE);
                                  #else
 303   5                              USBFS_ConfigAltChanged();
 304   5                          #endif /* (USBFS_EP_MANAGEMENT_MANUAL && USBFS_EP_ALLOC_DYNAMIC) */
 305   5                          }
 306   4                          
 307   4                          requestHandled = USBFS_InitNoDataControlTransfer();
 308   4                      }
 309   3                      break;
 310   3                      
 311   3                  case USBFS_CLEAR_FEATURE:
 312   3                      switch (bmRequestType & USBFS_RQST_RCPT_MASK)
 313   3                      {
 314   4                          case USBFS_RQST_RCPT_EP:
 315   4                              if (USBFS_wValueLoReg == USBFS_ENDPOINT_HALT)
 316   4                              {
 317   5                                  requestHandled = USBFS_ClearEndpointHalt();
 318   5                              }
 319   4                              break;
 320   4                          case USBFS_RQST_RCPT_DEV:
 321   4                              /* Clear device REMOTE_WAKEUP */
 322   4                              if (USBFS_wValueLoReg == USBFS_DEVICE_REMOTE_WAKEUP)
 323   4                              {
 324   5                                  USBFS_deviceStatus &= (uint8)~USBFS_DEVICE_STATUS_REMOTE_WAKEUP;
 325   5                                  requestHandled = USBFS_InitNoDataControlTransfer();
 326   5                              }
 327   4                              break;
 328   4                          case USBFS_RQST_RCPT_IFC:
 329   4                              /* Validate interfaceNumber */
 330   4                              if (USBFS_wIndexLoReg < USBFS_MAX_INTERFACES_NUMBER)
 331   4                              {
 332   5                                  USBFS_interfaceStatus[USBFS_wIndexLoReg] &= (uint8) ~USBFS_wValueLoReg;
 333   5                                  requestHandled = USBFS_InitNoDataControlTransfer();
 334   5                              }
 335   4                              break;
 336   4                          default:    /* requestHandled is initialized as FALSE by default */
 337   4                              break;
 338   4                      }
 339   3                      break;
 340   3                      
 341   3                  case USBFS_SET_FEATURE:
 342   3                      switch (bmRequestType & USBFS_RQST_RCPT_MASK)
 343   3                      {
 344   4                          case USBFS_RQST_RCPT_EP:
 345   4                              if (USBFS_wValueLoReg == USBFS_ENDPOINT_HALT)
 346   4                              {
 347   5                                  requestHandled = USBFS_SetEndpointHalt();
 348   5                              }
 349   4                              break;
 350   4                              
 351   4                          case USBFS_RQST_RCPT_DEV:
 352   4                              /* Set device REMOTE_WAKEUP */
 353   4                              if (USBFS_wValueLoReg == USBFS_DEVICE_REMOTE_WAKEUP)
 354   4                              {
 355   5                                  USBFS_deviceStatus |= USBFS_DEVICE_STATUS_REMOTE_WAKEUP;
 356   5                                  requestHandled = USBFS_InitNoDataControlTransfer();
 357   5                              }
 358   4                              break;
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 7   

 359   4                              
 360   4                          case USBFS_RQST_RCPT_IFC:
 361   4                              /* Validate interfaceNumber */
 362   4                              if (USBFS_wIndexLoReg < USBFS_MAX_INTERFACES_NUMBER)
 363   4                              {
 364   5                                  USBFS_interfaceStatus[USBFS_wIndexLoReg] &= (uint8) ~USBFS_wValueLoReg;
 365   5                                  requestHandled = USBFS_InitNoDataControlTransfer();
 366   5                              }
 367   4                              break;
 368   4                          
 369   4                          default:    /* requestHandled is initialized as FALSE by default */
 370   4                              break;
 371   4                      }
 372   3                      break;
 373   3                      
 374   3                  default:    /* requestHandled is initialized as FALSE by default */
 375   3                      break;
 376   3              }
 377   2          }
 378   1          
 379   1          return (requestHandled);
 380   1      }
 381          
 382          
 383          #if defined(USBFS_ENABLE_IDSN_STRING)
                  /***************************************************************************
                  * Function Name: USBFS_ReadDieID
                  ************************************************************************//**
                  *
                  *  This routine read Die ID and generate Serial Number string descriptor.
                  *
                  *  \param descr:  pointer on string descriptor. This string size has to be equal or
                  *          greater than USBFS_IDSN_DESCR_LENGTH.
                  *
                  *
                  * \reentrant
                  *  No.
                  *
                  ***************************************************************************/
                  void USBFS_ReadDieID(uint8 descr[]) 
                  {
                      const char8 CYCODE hex[] = "0123456789ABCDEF";
                      uint8 i;
                      uint8 j = 0u;
                      uint8 uniqueId[8u];
              
                      if (NULL != descr)
                      {
                          /* Initialize descriptor header. */
                          descr[0u] = USBFS_IDSN_DESCR_LENGTH;
                          descr[1u] = USBFS_DESCR_STRING;
                          
                          /* Unique ID size is 8 bytes. */
                          CyGetUniqueId((uint32 *) uniqueId);
              
                          /* Fill descriptor with unique device ID. */
                          for (i = 2u; i < USBFS_IDSN_DESCR_LENGTH; i += 4u)
                          {
                              descr[i]      = (uint8) hex[(uniqueId[j] >> 4u)];
                              descr[i + 1u] = 0u;
                              descr[i + 2u] = (uint8) hex[(uniqueId[j] & 0x0Fu)];
                              descr[i + 3u] = 0u;
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 8   

                              ++j;
                          }
                      }
                  }
              #endif /* (USBFS_ENABLE_IDSN_STRING) */
 426          
 427          
 428          /*******************************************************************************
 429          * Function Name: USBFS_ConfigReg
 430          ****************************************************************************//**
 431          *
 432          *  This routine configures hardware registers from the variables.
 433          *  It is called from USBFS_Config() function and from RestoreConfig
 434          *  after Wakeup.
 435          *
 436          *******************************************************************************/
 437          void USBFS_ConfigReg(void) 
 438          {
 439   1          uint8 ep;
 440   1      
 441   1      #if (USBFS_EP_MANAGEMENT_DMA_AUTO)
                  uint8 epType = 0u;
              #endif /* (USBFS_EP_MANAGEMENT_DMA_AUTO) */
 444   1      
 445   1          /* Go thought all endpoints and set hardware configuration */
 446   1          for (ep = USBFS_EP1; ep < USBFS_MAX_EP; ++ep)
 447   1          {
 448   2              USBFS_ARB_EP_BASE.arbEp[ep].epCfg = USBFS_ARB_EPX_CFG_DEFAULT;
 449   2              
 450   2          #if (USBFS_EP_MANAGEMENT_DMA)
                      /* Enable arbiter endpoint interrupt sources */
                      USBFS_ARB_EP_BASE.arbEp[ep].epIntEn = USBFS_ARB_EPX_INT_MASK;
                  #endif /* (USBFS_EP_MANAGEMENT_DMA) */
 454   2          
 455   2              if (USBFS_EP[ep].epMode != USBFS_MODE_DISABLE)
 456   2              {
 457   3                  if (0u != (USBFS_EP[ep].addr & USBFS_DIR_IN))
 458   3                  {
 459   4                      USBFS_SIE_EP_BASE.sieEp[ep].epCr0 = USBFS_MODE_NAK_IN;
 460   4                      
 461   4                  #if (USBFS_EP_MANAGEMENT_DMA_AUTO && CY_PSOC4)
                              /* Clear DMA_TERMIN for IN endpoint. */
                              USBFS_ARB_EP_BASE.arbEp[ep].epIntEn &= (uint32) ~USBFS_ARB_EPX_INT_DMA_TERMIN;
                          #endif /* (USBFS_EP_MANAGEMENT_DMA_AUTO && CY_PSOC4) */
 465   4                  }
 466   3                  else
 467   3                  {
 468   4                      USBFS_SIE_EP_BASE.sieEp[ep].epCr0 = USBFS_MODE_NAK_OUT;
 469   4      
 470   4                  #if (USBFS_EP_MANAGEMENT_DMA_AUTO)
                              /* (CY_PSOC4): DMA_TERMIN for OUT endpoint is set above. */
                              
                              /* Prepare endpoint type mask. */
                              epType |= (uint8) (0x01u << (ep - USBFS_EP1));
                          #endif /* (USBFS_EP_MANAGEMENT_DMA_AUTO) */
 476   4                  }
 477   3              }
 478   2              else
 479   2              {
 480   3                  USBFS_SIE_EP_BASE.sieEp[ep].epCr0 = USBFS_MODE_STALL_DATA_EP;
 481   3              }
 482   2              
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 9   

 483   2          #if (!USBFS_EP_MANAGEMENT_DMA_AUTO)
 484   2              #if (CY_PSOC4)
                          USBFS_ARB_EP16_BASE.arbEp[ep].rwRa16  = (uint32) USBFS_EP[ep].buffOffset;
                          USBFS_ARB_EP16_BASE.arbEp[ep].rwWa16  = (uint32) USBFS_EP[ep].buffOffset;
                      #else
 488   2                  USBFS_ARB_EP_BASE.arbEp[ep].rwRa    = LO8(USBFS_EP[ep].buffOffset);
 489   2                  USBFS_ARB_EP_BASE.arbEp[ep].rwRaMsb = HI8(USBFS_EP[ep].buffOffset);
 490   2                  USBFS_ARB_EP_BASE.arbEp[ep].rwWa    = LO8(USBFS_EP[ep].buffOffset);
 491   2                  USBFS_ARB_EP_BASE.arbEp[ep].rwWaMsb = HI8(USBFS_EP[ep].buffOffset);
 492   2              #endif /* (CY_PSOC4) */
 493   2          #endif /* (!USBFS_EP_MANAGEMENT_DMA_AUTO) */
 494   2          }
 495   1      
 496   1      #if (USBFS_EP_MANAGEMENT_DMA_AUTO)
                   /* BUF_SIZE depend on DMA_THRESS value:0x55-32 bytes  0x44-16 bytes 0x33-8 bytes 0x22-4 bytes 0x11-2 
             -bytes */
                  USBFS_BUF_SIZE_REG = USBFS_DMA_BUF_SIZE;
              
                  /* Configure DMA burst threshold */
              #if (CY_PSOC4)
                  USBFS_DMA_THRES16_REG   = USBFS_DMA_BYTES_PER_BURST;
              #else
                  USBFS_DMA_THRES_REG     = USBFS_DMA_BYTES_PER_BURST;
                  USBFS_DMA_THRES_MSB_REG = 0u;
              #endif /* (CY_PSOC4) */
                  USBFS_EP_ACTIVE_REG = USBFS_DEFAULT_ARB_INT_EN;
                  USBFS_EP_TYPE_REG   = epType;
                  
                  /* Cfg_cmp bit set to 1 once configuration is complete. */
                  /* Lock arbiter configtuation */
                  USBFS_ARB_CFG_REG |= (uint8)  USBFS_ARB_CFG_CFG_CMP;
                  /* Cfg_cmp bit set to 0 during configuration of PFSUSB Registers. */
                  USBFS_ARB_CFG_REG &= (uint8) ~USBFS_ARB_CFG_CFG_CMP;
              
              #endif /* (USBFS_EP_MANAGEMENT_DMA_AUTO) */
 517   1      
 518   1          /* Enable interrupt SIE interurpt source from EP0-EP1 */
 519   1          USBFS_SIE_EP_INT_EN_REG = (uint8) USBFS_DEFAULT_SIE_EP_INT_EN;
 520   1      }
 521          
 522          
 523          /*******************************************************************************
 524          * Function Name: USBFS_EpStateInit
 525          ****************************************************************************//**
 526          *
 527          *  This routine initialize state of Data end points based of its type: 
 528          *   IN  - USBFS_IN_BUFFER_EMPTY (USBFS_EVENT_PENDING)
 529          *   OUT - USBFS_OUT_BUFFER_EMPTY (USBFS_NO_EVENT_PENDING)
 530          *
 531          *******************************************************************************/
 532          void USBFS_EpStateInit(void) 
 533          {
 534   1          uint8 i;
 535   1      
 536   1          for (i = USBFS_EP1; i < USBFS_MAX_EP; i++)
 537   1          { 
 538   2              if (0u != (USBFS_EP[i].addr & USBFS_DIR_IN))
 539   2              {
 540   3                  /* IN Endpoint */
 541   3                  USBFS_EP[i].apiEpState = USBFS_EVENT_PENDING;
 542   3              }
 543   2              else
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 10  

 544   2              {
 545   3                  /* OUT Endpoint */
 546   3                  USBFS_EP[i].apiEpState = USBFS_NO_EVENT_PENDING;
 547   3              }
 548   2          }
 549   1                          
 550   1      }
 551          
 552          
 553          /*******************************************************************************
 554          * Function Name: USBFS_Config
 555          ****************************************************************************//**
 556          *
 557          *  This routine configures endpoints for the entire configuration by scanning
 558          *  the configuration descriptor.
 559          *
 560          *  \param clearAltSetting: It configures the bAlternateSetting 0 for each interface.
 561          *
 562          * USBFS_interfaceClass - Initialized class array for each interface.
 563          *   It is used for handling Class specific requests depend on interface class.
 564          *   Different classes in multiple Alternate settings does not supported.
 565          *
 566          * \reentrant
 567          *  No.
 568          *
 569          *******************************************************************************/
 570          void USBFS_Config(uint8 clearAltSetting) 
 571          {
 572   1          uint8 ep;
 573   1          uint8 curEp;
 574   1          uint8 i;
 575   1          uint8 epType;
 576   1          const uint8 *pDescr;
 577   1          
 578   1          #if (!USBFS_EP_MANAGEMENT_DMA_AUTO)
 579   1              uint16 buffCount = 0u;
 580   1          #endif /* (!USBFS_EP_MANAGEMENT_DMA_AUTO) */
 581   1      
 582   1          const T_USBFS_LUT CYCODE *pTmp;
 583   1          const T_USBFS_EP_SETTINGS_BLOCK CYCODE *pEP;
 584   1      
 585   1          /* Clear endpoints settings */
 586   1          for (ep = 0u; ep < USBFS_MAX_EP; ++ep)
 587   1          {
 588   2              USBFS_EP[ep].attrib     = 0u;
 589   2              USBFS_EP[ep].hwEpState  = 0u;
 590   2              USBFS_EP[ep].epToggle   = 0u;
 591   2              USBFS_EP[ep].bufferSize = 0u;
 592   2              USBFS_EP[ep].interface  = 0u;
 593   2              USBFS_EP[ep].apiEpState = USBFS_NO_EVENT_PENDING;
 594   2              USBFS_EP[ep].epMode     = USBFS_MODE_DISABLE;   
 595   2          }
 596   1      
 597   1          /* Clear Alternate settings for all interfaces. */
 598   1          if (0u != clearAltSetting)
 599   1          {
 600   2              for (i = 0u; i < USBFS_MAX_INTERFACES_NUMBER; ++i)
 601   2              {
 602   3                  USBFS_interfaceSetting[i]     = 0u;
 603   3                  USBFS_interfaceSettingLast[i] = 0u;
 604   3              }
 605   2          }
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 11  

 606   1      
 607   1          /* Init Endpoints and Device Status if configured */
 608   1          if (USBFS_configuration > 0u)
 609   1          {
 610   2              #if defined(USBFS_ENABLE_CDC_CLASS)
                          uint8 cdcComNums = 0u;
                      #endif  /* (USBFS_ENABLE_CDC_CLASS) */  
 613   2      
 614   2              pTmp = USBFS_GetConfigTablePtr(USBFS_configuration - 1u);
 615   2              
 616   2              /* Set Power status for current configuration */
 617   2              pDescr = (const uint8 *)pTmp->p_list;
 618   2              if ((pDescr[USBFS_CONFIG_DESCR_ATTRIB] & USBFS_CONFIG_DESCR_ATTRIB_SELF_POWERED) != 0u)
 619   2              {
 620   3                  USBFS_deviceStatus |= (uint8)  USBFS_DEVICE_STATUS_SELF_POWERED;
 621   3              }
 622   2              else
 623   2              {
 624   3                  USBFS_deviceStatus &= (uint8) ~USBFS_DEVICE_STATUS_SELF_POWERED;
 625   3              }
 626   2              
 627   2              /* Move to next element */
 628   2              pTmp = &pTmp[1u];
 629   2              ep = pTmp->c;  /* For this table, c is the number of endpoints configurations  */
 630   2      
 631   2              #if (USBFS_EP_MANAGEMENT_MANUAL && USBFS_EP_ALLOC_DYNAMIC)
                          /* Configure for dynamic EP memory allocation */
                          /* p_list points the endpoint setting table. */
                          pEP = (T_USBFS_EP_SETTINGS_BLOCK *) pTmp->p_list;
                          
                          for (i = 0u; i < ep; i++)
                          {     
                              /* Compare current Alternate setting with EP Alt */
                              if (USBFS_interfaceSetting[pEP->interface] == pEP->altSetting)
                              {                                                          
                                  curEp  = pEP->addr & USBFS_DIR_UNUSED;
                                  epType = pEP->attributes & USBFS_EP_TYPE_MASK;
                                  
                                  USBFS_EP[curEp].addr       = pEP->addr;
                                  USBFS_EP[curEp].attrib     = pEP->attributes;
                                  USBFS_EP[curEp].bufferSize = pEP->bufferSize;
              
                                  if (0u != (pEP->addr & USBFS_DIR_IN))
                                  {
                                      /* IN Endpoint */
                                      USBFS_EP[curEp].epMode     = USBFS_GET_ACTIVE_IN_EP_CR0_MODE(epType);
                                      USBFS_EP[curEp].apiEpState = USBFS_EVENT_PENDING;
                                  
                                  #if (defined(USBFS_ENABLE_MIDI_STREAMING) && (USBFS_MIDI_IN_BUFF_SIZE > 0))
                                      if ((pEP->bMisc == USBFS_CLASS_AUDIO) && (epType == USBFS_EP_TYPE_BULK))
                                      {
                                          USBFS_midi_in_ep = curEp;
                                      }
                                  #endif  /* (USBFS_ENABLE_MIDI_STREAMING) */
                                  }
                                  else
                                  {
                                      /* OUT Endpoint */
                                      USBFS_EP[curEp].epMode     = USBFS_GET_ACTIVE_OUT_EP_CR0_MODE(epType);
                                      USBFS_EP[curEp].apiEpState = USBFS_NO_EVENT_PENDING;
                                      
                                  #if (defined(USBFS_ENABLE_MIDI_STREAMING) && (USBFS_MIDI_OUT_BUFF_SIZE > 0))
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 12  

                                      if ((pEP->bMisc == USBFS_CLASS_AUDIO) && (epType == USBFS_EP_TYPE_BULK))
                                      {
                                          USBFS_midi_out_ep = curEp;
                                      }
                                  #endif  /* (USBFS_ENABLE_MIDI_STREAMING) */
                                  }
              
                              #if(defined (USBFS_ENABLE_CDC_CLASS))
                                  if((pEP->bMisc == USBFS_CLASS_CDC_DATA) ||(pEP->bMisc == USBFS_CLASS_CDC))
                                  {
                                      cdcComNums = USBFS_Cdc_EpInit(pEP, curEp, cdcComNums);
                                  }
                              #endif  /* (USBFS_ENABLE_CDC_CLASS) */
                              }
                              
                              pEP = &pEP[1u];
                          }
                          
                      #else
 687   2                  for (i = USBFS_EP1; i < USBFS_MAX_EP; ++i)
 688   2                  {
 689   3                      /* p_list points the endpoint setting table. */
 690   3                      pEP = (const T_USBFS_EP_SETTINGS_BLOCK CYCODE *) pTmp->p_list;
 691   3                      /* Find max length for each EP and select it (length could be different in different Alt s
             -ettings) */
 692   3                      /* but other settings should be correct with regards to Interface alt Setting */
 693   3                      
 694   3                      for (curEp = 0u; curEp < ep; ++curEp)
 695   3                      {
 696   4                          if (i == (pEP->addr & USBFS_DIR_UNUSED))
 697   4                          {
 698   5                              /* Compare endpoint buffers size with current size to find greater. */
 699   5                              if (USBFS_EP[i].bufferSize < pEP->bufferSize)
 700   5                              {
 701   6                                  USBFS_EP[i].bufferSize = pEP->bufferSize;
 702   6                              }
 703   5                              
 704   5                              /* Compare current Alternate setting with EP Alt */
 705   5                              if (USBFS_interfaceSetting[pEP->interface] == pEP->altSetting)
 706   5                              {                            
 707   6                                  USBFS_EP[i].addr = pEP->addr;
 708   6                                  USBFS_EP[i].attrib = pEP->attributes;
 709   6                                  
 710   6                                  epType = pEP->attributes & USBFS_EP_TYPE_MASK;
 711   6                                  
 712   6                                  if (0u != (pEP->addr & USBFS_DIR_IN))
 713   6                                  {
 714   7                                      /* IN Endpoint */
 715   7                                      USBFS_EP[i].epMode     = USBFS_GET_ACTIVE_IN_EP_CR0_MODE(epType);
 716   7                                      USBFS_EP[i].apiEpState = USBFS_EVENT_PENDING;
 717   7                                      
 718   7                                  #if (defined(USBFS_ENABLE_MIDI_STREAMING) && (USBFS_MIDI_IN_BUFF_SIZE > 0))
                                              if ((pEP->bMisc == USBFS_CLASS_AUDIO) && (epType == USBFS_EP_TYPE_BULK))
                                              {
                                                  USBFS_midi_in_ep = i;
                                              }
                                          #endif  /* (USBFS_ENABLE_MIDI_STREAMING) */
 724   7                                  }
 725   6                                  else
 726   6                                  {
 727   7                                      /* OUT Endpoint */
 728   7                                      USBFS_EP[i].epMode     = USBFS_GET_ACTIVE_OUT_EP_CR0_MODE(epType);
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 13  

 729   7                                      USBFS_EP[i].apiEpState = USBFS_NO_EVENT_PENDING;
 730   7                                      
 731   7                                  #if (defined(USBFS_ENABLE_MIDI_STREAMING) && (USBFS_MIDI_OUT_BUFF_SIZE > 0))
                                              if ((pEP->bMisc == USBFS_CLASS_AUDIO) && (epType == USBFS_EP_TYPE_BULK))
                                              {
                                                  USBFS_midi_out_ep = i;
                                              }
                                          #endif  /* (USBFS_ENABLE_MIDI_STREAMING) */
 737   7                                  }
 738   6      
 739   6                              #if (defined(USBFS_ENABLE_CDC_CLASS))
                                          if((pEP->bMisc == USBFS_CLASS_CDC_DATA) ||(pEP->bMisc == USBFS_CLASS_CDC))
                                          {
                                              cdcComNums = USBFS_Cdc_EpInit(pEP, i, cdcComNums);
                                          }
                                      #endif  /* (USBFS_ENABLE_CDC_CLASS) */
 745   6      
 746   6                                  #if (USBFS_EP_MANAGEMENT_DMA_AUTO)
                                              break;  /* Use first EP setting in Auto memory management */
                                          #endif /* (USBFS_EP_MANAGEMENT_DMA_AUTO) */
 749   6                              }
 750   5                          }
 751   4                          
 752   4                          pEP = &pEP[1u];
 753   4                      }
 754   3                  }
 755   2              #endif /*  (USBFS_EP_MANAGEMENT_MANUAL && USBFS_EP_ALLOC_DYNAMIC) */
 756   2      
 757   2              /* Init class array for each interface and interface number for each EP.
 758   2              *  It is used for handling Class specific requests directed to either an
 759   2              *  interface or the endpoint.
 760   2              */
 761   2              /* p_list points the endpoint setting table. */
 762   2              pEP = (const T_USBFS_EP_SETTINGS_BLOCK CYCODE *) pTmp->p_list;
 763   2              for (i = 0u; i < ep; i++)
 764   2              {
 765   3                  /* Configure interface number for each EP */
 766   3                  USBFS_EP[pEP->addr & USBFS_DIR_UNUSED].interface = pEP->interface;
 767   3                  pEP = &pEP[1u];
 768   3              }
 769   2              
 770   2              /* Init pointer on interface class table */
 771   2              USBFS_interfaceClass = USBFS_GetInterfaceClassTablePtr();
 772   2              
 773   2          /* Set the endpoint buffer addresses */
 774   2          #if (!USBFS_EP_MANAGEMENT_DMA_AUTO)
 775   2              buffCount = 0u;
 776   2              for (ep = USBFS_EP1; ep < USBFS_MAX_EP; ++ep)
 777   2              {
 778   3                  USBFS_EP[ep].buffOffset = buffCount;        
 779   3                  buffCount += USBFS_EP[ep].bufferSize;
 780   3                  
 781   3              #if (USBFS_GEN_16BITS_EP_ACCESS)
                          /* Align EP buffers to be event size to access 16-bits DR register. */
                          buffCount += (0u != (buffCount & 0x01u)) ? 1u : 0u;
                      #endif /* (USBFS_GEN_16BITS_EP_ACCESS) */            
 785   3              }
 786   2          #endif /* (!USBFS_EP_MANAGEMENT_DMA_AUTO) */
 787   2      
 788   2              /* Configure hardware registers */
 789   2              USBFS_ConfigReg();
 790   2          }
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 14  

 791   1      }
 792          
 793          
 794          /*******************************************************************************
 795          * Function Name: USBFS_ConfigAltChanged
 796          ****************************************************************************//**
 797          *
 798          *  This routine update configuration for the required endpoints only.
 799          *  It is called after SET_INTERFACE request when Static memory allocation used.
 800          *
 801          * \reentrant
 802          *  No.
 803          *
 804          *******************************************************************************/
 805          void USBFS_ConfigAltChanged(void) 
 806          {
 807   1          uint8 ep;
 808   1          uint8 curEp;
 809   1          uint8 epType;
 810   1          uint8 i;
 811   1          uint8 interfaceNum;
 812   1      
 813   1          const T_USBFS_LUT CYCODE *pTmp;
 814   1          const T_USBFS_EP_SETTINGS_BLOCK CYCODE *pEP;
 815   1      
 816   1          /* Init Endpoints and Device Status if configured */
 817   1          if (USBFS_configuration > 0u)
 818   1          {
 819   2              /* Get number of endpoints configurations (ep). */
 820   2              pTmp = USBFS_GetConfigTablePtr(USBFS_configuration - 1u);
 821   2              pTmp = &pTmp[1u];
 822   2              ep = pTmp->c;
 823   2      
 824   2              /* Get pointer to endpoints setting table (pEP). */
 825   2              pEP = (const T_USBFS_EP_SETTINGS_BLOCK CYCODE *) pTmp->p_list;
 826   2              
 827   2              /* Look through all possible endpoint configurations. Find endpoints 
 828   2              * which belong to current interface and alternate settings for 
 829   2              * re-configuration.
 830   2              */
 831   2              interfaceNum = USBFS_interfaceNumber;
 832   2              for (i = 0u; i < ep; i++)
 833   2              {
 834   3                  /* Find endpoints which belong to current interface and alternate settings. */
 835   3                  if ((interfaceNum == pEP->interface) && 
 836   3                      (USBFS_interfaceSetting[interfaceNum] == pEP->altSetting))
 837   3                  {
 838   4                      curEp  = ((uint8) pEP->addr & USBFS_DIR_UNUSED);
 839   4                      epType = ((uint8) pEP->attributes & USBFS_EP_TYPE_MASK);
 840   4                      
 841   4                      /* Change the SIE mode for the selected EP to NAK ALL */
 842   4                      USBFS_EP[curEp].epToggle   = 0u;
 843   4                      USBFS_EP[curEp].addr       = pEP->addr;
 844   4                      USBFS_EP[curEp].attrib     = pEP->attributes;
 845   4                      USBFS_EP[curEp].bufferSize = pEP->bufferSize;
 846   4      
 847   4                      if (0u != (pEP->addr & USBFS_DIR_IN))
 848   4                      {
 849   5                          /* IN Endpoint */
 850   5                          USBFS_EP[curEp].epMode     = USBFS_GET_ACTIVE_IN_EP_CR0_MODE(epType);
 851   5                          USBFS_EP[curEp].apiEpState = USBFS_EVENT_PENDING;
 852   5                      }
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 15  

 853   4                      else
 854   4                      {
 855   5                          /* OUT Endpoint */
 856   5                          USBFS_EP[curEp].epMode     = USBFS_GET_ACTIVE_OUT_EP_CR0_MODE(epType);
 857   5                          USBFS_EP[curEp].apiEpState = USBFS_NO_EVENT_PENDING;
 858   5                      }
 859   4                      
 860   4                      /* Make SIE to NAK any endpoint requests */
 861   4                      USBFS_SIE_EP_BASE.sieEp[curEp].epCr0 = USBFS_MODE_NAK_IN_OUT;
 862   4      
 863   4                  #if (USBFS_EP_MANAGEMENT_DMA_AUTO)
                              /* Clear IN data ready. */
                              USBFS_ARB_EP_BASE.arbEp[curEp].epCfg &= (uint8) ~USBFS_ARB_EPX_CFG_IN_DATA_RDY;
              
                              /* Select endpoint number of reconfiguration */
                              USBFS_DYN_RECONFIG_REG = (uint8) ((curEp - 1u) << USBFS_DYN_RECONFIG_EP_SHIFT);
                              
                              /* Request for dynamic re-configuration of endpoint. */
                              USBFS_DYN_RECONFIG_REG |= USBFS_DYN_RECONFIG_ENABLE;
                              
                              /* Wait until block is ready for re-configuration */
                              while (0u == (USBFS_DYN_RECONFIG_REG & USBFS_DYN_RECONFIG_RDY_STS))
                              {
                              }
                              
                              /* Once DYN_RECONFIG_RDY_STS bit is set, FW can change the EP configuration. */
                              /* Change EP Type with new direction */
                              if (0u != (pEP->addr & USBFS_DIR_IN))
                              {
                                  /* Set endpoint type: 0 - IN and 1 - OUT. */
                                  USBFS_EP_TYPE_REG &= (uint8) ~(uint8)((uint8) 0x01u << (curEp - 1u));
                                  
                              #if (CY_PSOC4)
                                  /* Clear DMA_TERMIN for IN endpoint */
                                  USBFS_ARB_EP_BASE.arbEp[curEp].epIntEn &= (uint32) ~USBFS_ARB_EPX_INT_DMA_TERMIN;
                              #endif /* (CY_PSOC4) */
                              }
                              else
                              {
                                  /* Set endpoint type: 0 - IN and 1- OUT. */
                                  USBFS_EP_TYPE_REG |= (uint8) ((uint8) 0x01u << (curEp - 1u));
                                  
                              #if (CY_PSOC4)
                                  /* Set DMA_TERMIN for OUT endpoint */
                                  USBFS_ARB_EP_BASE.arbEp[curEp].epIntEn |= (uint32) USBFS_ARB_EPX_INT_DMA_TERMIN;
                              #endif /* (CY_PSOC4) */
                              }
                              
                              /* Complete dynamic re-configuration: all endpoint related status and signals 
                              * are set into the default state.
                              */
                              USBFS_DYN_RECONFIG_REG &= (uint8) ~USBFS_DYN_RECONFIG_ENABLE;
              
                          #else
 907   4                      USBFS_SIE_EP_BASE.sieEp[curEp].epCnt0 = HI8(USBFS_EP[curEp].bufferSize);
 908   4                      USBFS_SIE_EP_BASE.sieEp[curEp].epCnt1 = LO8(USBFS_EP[curEp].bufferSize);
 909   4                      
 910   4                      #if (CY_PSOC4)
                                  USBFS_ARB_EP16_BASE.arbEp[curEp].rwRa16  = (uint32) USBFS_EP[curEp].buffOffset;
                                  USBFS_ARB_EP16_BASE.arbEp[curEp].rwWa16  = (uint32) USBFS_EP[curEp].buffOffset;
                              #else
 914   4                          USBFS_ARB_EP_BASE.arbEp[curEp].rwRa    = LO8(USBFS_EP[curEp].buffOffset);
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 16  

 915   4                          USBFS_ARB_EP_BASE.arbEp[curEp].rwRaMsb = HI8(USBFS_EP[curEp].buffOffset);
 916   4                          USBFS_ARB_EP_BASE.arbEp[curEp].rwWa    = LO8(USBFS_EP[curEp].buffOffset);
 917   4                          USBFS_ARB_EP_BASE.arbEp[curEp].rwWaMsb = HI8(USBFS_EP[curEp].buffOffset);
 918   4                      #endif /* (CY_PSOC4) */                
 919   4                  #endif /* (USBFS_EP_MANAGEMENT_DMA_AUTO) */
 920   4                  }
 921   3                  
 922   3                  pEP = &pEP[1u]; /* Get next EP element */
 923   3              }
 924   2              
 925   2              /* The main loop has to re-enable DMA and OUT endpoint */
 926   2          }
 927   1      }
 928          
 929          
 930          /*******************************************************************************
 931          * Function Name: USBFS_GetConfigTablePtr
 932          ****************************************************************************//**
 933          *
 934          *  This routine returns a pointer a configuration table entry
 935          *
 936          *  \param confIndex:  Configuration Index
 937          *
 938          * \return
 939          *  Device Descriptor pointer or NULL when descriptor does not exist.
 940          *
 941          *******************************************************************************/
 942          const T_USBFS_LUT CYCODE *USBFS_GetConfigTablePtr(uint8 confIndex)
 943                                                                  
 944          {
 945   1          /* Device Table */
 946   1          const T_USBFS_LUT CYCODE *pTmp;
 947   1      
 948   1          pTmp = (const T_USBFS_LUT CYCODE *) USBFS_TABLE[USBFS_device].p_list;
 949   1      
 950   1          /* The first entry points to the Device Descriptor,
 951   1          *  the second entry point to the BOS Descriptor
 952   1          *  the rest configuration entries.
 953   1          *  Set pointer to the first Configuration Descriptor
 954   1          */
 955   1          pTmp = &pTmp[2u];
 956   1          /* For this table, c is the number of configuration descriptors  */
 957   1          if(confIndex >= pTmp->c)   /* Verify that required configuration descriptor exists */
 958   1          {
 959   2              pTmp = (const T_USBFS_LUT CYCODE *) NULL;
 960   2          }
 961   1          else
 962   1          {
 963   2              pTmp = (const T_USBFS_LUT CYCODE *) pTmp[confIndex].p_list;
 964   2          }
 965   1      
 966   1          return (pTmp);
 967   1      }
 968          
 969          
 970          #if (USBFS_BOS_ENABLE)
                  /*******************************************************************************
                  * Function Name: USBFS_GetBOSPtr
                  ****************************************************************************//**
                  *
                  *  This routine returns a pointer a BOS table entry
                  *
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 17  

                  *  
                  *
                  * \return
                  *  BOS Descriptor pointer or NULL when descriptor does not exist.
                  *
                  *******************************************************************************/
                  const T_USBFS_LUT CYCODE *USBFS_GetBOSPtr(void)
                                                                          
                  {
                      /* Device Table */
                      const T_USBFS_LUT CYCODE *pTmp;
              
                      pTmp = (const T_USBFS_LUT CYCODE *) USBFS_TABLE[USBFS_device].p_list;
              
                      /* The first entry points to the Device Descriptor,
                      *  the second entry points to the BOS Descriptor
                      */
                      pTmp = &pTmp[1u];
                      pTmp = (const T_USBFS_LUT CYCODE *) pTmp->p_list;
                      return (pTmp);
                  }
              #endif /* (USBFS_BOS_ENABLE) */
 999          
1000          
1001          /*******************************************************************************
1002          * Function Name: USBFS_GetDeviceTablePtr
1003          ****************************************************************************//**
1004          *
1005          *  This routine returns a pointer to the Device table
1006          *
1007          * \return
1008          *  Device Table pointer
1009          *
1010          *******************************************************************************/
1011          const T_USBFS_LUT CYCODE *USBFS_GetDeviceTablePtr(void)
1012                                                                      
1013          {
1014   1          /* Device Table */
1015   1          return( (const T_USBFS_LUT CYCODE *) USBFS_TABLE[USBFS_device].p_list );
1016   1      }
1017          
1018          
1019          /*******************************************************************************
1020          * Function Name: USB_GetInterfaceClassTablePtr
1021          ****************************************************************************//**
1022          *
1023          *  This routine returns Interface Class table pointer, which contains
1024          *  the relation between interface number and interface class.
1025          *
1026          * \return
1027          *  Interface Class table pointer.
1028          *
1029          *******************************************************************************/
1030          const uint8 CYCODE *USBFS_GetInterfaceClassTablePtr(void)
1031                                                                  
1032          {
1033   1          const T_USBFS_LUT CYCODE *pTmp;
1034   1          const uint8 CYCODE *pInterfaceClass;
1035   1          uint8 currentInterfacesNum;
1036   1      
1037   1          pTmp = USBFS_GetConfigTablePtr(USBFS_configuration - 1u);
1038   1          if (pTmp != NULL)
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 18  

1039   1          {
1040   2              currentInterfacesNum  = ((const uint8 *) pTmp->p_list)[USBFS_CONFIG_DESCR_NUM_INTERFACES];
1041   2              /* Third entry in the LUT starts the Interface Table pointers */
1042   2              /* The INTERFACE_CLASS table is located after all interfaces */
1043   2              pTmp = &pTmp[currentInterfacesNum + 2u];
1044   2              pInterfaceClass = (const uint8 CYCODE *) pTmp->p_list;
1045   2          }
1046   1          else
1047   1          {
1048   2              pInterfaceClass = (const uint8 CYCODE *) NULL;
1049   2          }
1050   1      
1051   1          return (pInterfaceClass);
1052   1      }
1053          
1054          
1055          /*******************************************************************************
1056          * Function Name: USBFS_TerminateEP
1057          ****************************************************************************//**
1058          *
1059          *  This function terminates the specified USBFS endpoint.
1060          *  This function should be used before endpoint reconfiguration.
1061          *
1062          *  \param ep Contains the data endpoint number.
1063          *
1064          *  \reentrant
1065          *  No.
1066          *
1067          * \sideeffect
1068          * 
1069          * The device responds with a NAK for any transactions on the selected endpoint.
1070          *   
1071          *******************************************************************************/
1072          void USBFS_TerminateEP(uint8 epNumber) 
1073          {
1074   1          /* Get endpoint number */
1075   1          epNumber &= USBFS_DIR_UNUSED;
1076   1      
1077   1          if ((epNumber > USBFS_EP0) && (epNumber < USBFS_MAX_EP))
1078   1          {
1079   2              /* Set the endpoint Halt */
1080   2              USBFS_EP[epNumber].hwEpState |= USBFS_ENDPOINT_STATUS_HALT;
1081   2      
1082   2              /* Clear the data toggle */
1083   2              USBFS_EP[epNumber].epToggle = 0u;
1084   2              USBFS_EP[epNumber].apiEpState = USBFS_NO_EVENT_ALLOWED;
1085   2      
1086   2              if ((USBFS_EP[epNumber].addr & USBFS_DIR_IN) != 0u)
1087   2              {   
1088   3                  /* IN Endpoint */
1089   3                  USBFS_SIE_EP_BASE.sieEp[epNumber].epCr0 = USBFS_MODE_NAK_IN;
1090   3              }
1091   2              else
1092   2              {
1093   3                  /* OUT Endpoint */
1094   3                  USBFS_SIE_EP_BASE.sieEp[epNumber].epCr0 = USBFS_MODE_NAK_OUT;
1095   3              }
1096   2          }
1097   1      }
1098          
1099          
1100          /*******************************************************************************
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 19  

1101          * Function Name: USBFS_SetEndpointHalt
1102          ****************************************************************************//**
1103          *
1104          *  This routine handles set endpoint halt.
1105          *
1106          * \return
1107          *  requestHandled.
1108          *
1109          * \reentrant
1110          *  No.
1111          *
1112          *******************************************************************************/
1113          uint8 USBFS_SetEndpointHalt(void) 
1114          {
1115   1          uint8 requestHandled = USBFS_FALSE;
1116   1          uint8 ep;
1117   1          
1118   1          /* Set endpoint halt */
1119   1          ep = USBFS_wIndexLoReg & USBFS_DIR_UNUSED;
1120   1      
1121   1          if ((ep > USBFS_EP0) && (ep < USBFS_MAX_EP))
1122   1          {
1123   2              /* Set the endpoint Halt */
1124   2              USBFS_EP[ep].hwEpState |= (USBFS_ENDPOINT_STATUS_HALT);
1125   2      
1126   2              /* Clear the data toggle */
1127   2              USBFS_EP[ep].epToggle = 0u;
1128   2              USBFS_EP[ep].apiEpState |= USBFS_NO_EVENT_ALLOWED;
1129   2      
1130   2              if ((USBFS_EP[ep].addr & USBFS_DIR_IN) != 0u)
1131   2              {
1132   3                  /* IN Endpoint */
1133   3                  USBFS_SIE_EP_BASE.sieEp[ep].epCr0 = (USBFS_MODE_STALL_DATA_EP | 
1134   3                                                                  USBFS_MODE_ACK_IN);
1135   3              }
1136   2              else
1137   2              {
1138   3                  /* OUT Endpoint */
1139   3                  USBFS_SIE_EP_BASE.sieEp[ep].epCr0 = (USBFS_MODE_STALL_DATA_EP | 
1140   3                                                                  USBFS_MODE_ACK_OUT);
1141   3              }
1142   2              requestHandled = USBFS_InitNoDataControlTransfer();
1143   2          }
1144   1      
1145   1          return (requestHandled);
1146   1      }
1147          
1148          
1149          /*******************************************************************************
1150          * Function Name: USBFS_ClearEndpointHalt
1151          ****************************************************************************//**
1152          *
1153          *  This routine handles clear endpoint halt.
1154          *
1155          * \return
1156          *  requestHandled.
1157          *
1158          * \reentrant
1159          *  No.
1160          *
1161          *******************************************************************************/
1162          uint8 USBFS_ClearEndpointHalt(void) 
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 20  

1163          {
1164   1          uint8 requestHandled = USBFS_FALSE;
1165   1          uint8 ep;
1166   1      
1167   1          /* Clear endpoint halt */
1168   1          ep = USBFS_wIndexLoReg & USBFS_DIR_UNUSED;
1169   1      
1170   1          if ((ep > USBFS_EP0) && (ep < USBFS_MAX_EP))
1171   1          {
1172   2              /* Clear the endpoint Halt */
1173   2              USBFS_EP[ep].hwEpState &= (uint8) ~USBFS_ENDPOINT_STATUS_HALT;
1174   2      
1175   2              /* Clear the data toggle */
1176   2              USBFS_EP[ep].epToggle = 0u;
1177   2              
1178   2              /* Clear toggle bit for already armed packet */
1179   2              USBFS_SIE_EP_BASE.sieEp[ep].epCnt0 = (uint8) ~(uint8)USBFS_EPX_CNT_DATA_TOGGLE;
1180   2              
1181   2              /* Return API State as it was defined before */
1182   2              USBFS_EP[ep].apiEpState &= (uint8) ~USBFS_NO_EVENT_ALLOWED;
1183   2      
1184   2              if ((USBFS_EP[ep].addr & USBFS_DIR_IN) != 0u)
1185   2              {
1186   3                  /* IN Endpoint */
1187   3                  if(USBFS_EP[ep].apiEpState == USBFS_IN_BUFFER_EMPTY)
1188   3                  {       
1189   4                      /* Wait for next packet from application */
1190   4                      USBFS_SIE_EP_BASE.sieEp[ep].epCr0 = USBFS_MODE_NAK_IN;
1191   4                  }
1192   3                  else    /* Continue armed transfer */
1193   3                  {
1194   4                      USBFS_SIE_EP_BASE.sieEp[ep].epCr0 = USBFS_MODE_ACK_IN;
1195   4                  }
1196   3              }
1197   2              else
1198   2              {
1199   3                  /* OUT Endpoint */
1200   3                  if (USBFS_EP[ep].apiEpState == USBFS_OUT_BUFFER_FULL)
1201   3                  {       
1202   4                      /* Allow application to read full buffer */
1203   4                      USBFS_SIE_EP_BASE.sieEp[ep].epCr0 = USBFS_MODE_NAK_OUT;
1204   4                  }
1205   3                  else    /* Mark endpoint as empty, so it will be reloaded */
1206   3                  {
1207   4                      USBFS_SIE_EP_BASE.sieEp[ep].epCr0 = USBFS_MODE_ACK_OUT;
1208   4                  }
1209   3              }
1210   2              
1211   2              requestHandled = USBFS_InitNoDataControlTransfer();
1212   2          }
1213   1      
1214   1          return(requestHandled);
1215   1      }
1216          
1217          
1218          /*******************************************************************************
1219          * Function Name: USBFS_ValidateAlternateSetting
1220          ****************************************************************************//**
1221          *
1222          *  Validates (and records) a SET INTERFACE request.
1223          *
1224          * \return
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 21  

1225          *  requestHandled.
1226          *
1227          * \reentrant
1228          *  No.
1229          *
1230          *******************************************************************************/
1231          uint8 USBFS_ValidateAlternateSetting(void) 
1232          {
1233   1          uint8 requestHandled = USBFS_FALSE;
1234   1          
1235   1          uint8 interfaceNum;
1236   1          uint8 curInterfacesNum;
1237   1          const T_USBFS_LUT CYCODE *pTmp;
1238   1          
1239   1          /* Get interface number from the request. */
1240   1          interfaceNum = (uint8) USBFS_wIndexLoReg;
1241   1          
1242   1          /* Get number of interfaces for current configuration. */
1243   1          pTmp = USBFS_GetConfigTablePtr(USBFS_configuration - 1u);
1244   1          curInterfacesNum  = ((const uint8 *) pTmp->p_list)[USBFS_CONFIG_DESCR_NUM_INTERFACES];
1245   1      
1246   1          /* Validate that interface number is within range. */
1247   1          if ((interfaceNum <= curInterfacesNum) || (interfaceNum <= USBFS_MAX_INTERFACES_NUMBER))
1248   1          {
1249   2              /* Save current and new alternate settings (come with request) to make 
1250   2              * desicion about following endpoint re-configuration.
1251   2              */
1252   2              USBFS_interfaceSettingLast[interfaceNum] = USBFS_interfaceSetting[interfaceNum];
1253   2              USBFS_interfaceSetting[interfaceNum]     = (uint8) USBFS_wValueLoReg;
1254   2              
1255   2              requestHandled = USBFS_TRUE;
1256   2          }
1257   1      
1258   1          return (requestHandled);
1259   1      }
1260          
1261          
1262          /* [] END OF FILE */
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 22  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION USBFS_HandleStandardRqst (BEGIN)
                                           ; SOURCE LINE # 84
                                           ; SOURCE LINE # 85
                                           ; SOURCE LINE # 86
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#requestHandled
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 89
0005 906000            MOV     DPTR,#06000H
0008 E0                MOVX    A,@DPTR
0009 900000      R     MOV     DPTR,#bmRequestType
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 92
000D 7B00              MOV     R3,#00H
000F 7A00              MOV     R2,#00H
0011 7900              MOV     R1,#00H
0013 A3                INC     DPTR
0014 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 102
0017 E4                CLR     A
0018 900000      E     MOV     DPTR,#USBFS_currentTD
001B F0                MOVX    @DPTR,A
001C A3                INC     DPTR
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 104
001E 900000      R     MOV     DPTR,#bmRequestType
0021 E0                MOVX    A,@DPTR
0022 5480              ANL     A,#080H
0024 6480              XRL     A,#080H
0026 6003              JZ      $ + 5H
0028 020000      R     LJMP    ?C0001
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 107
002B 906001            MOV     DPTR,#06001H
002E E0                MOVX    A,@DPTR
002F 7003              JNZ     $ + 5H
0031 020000      R     LJMP    ?C0015
0034 24F8              ADD     A,#0F8H
0036 7003              JNZ     $ + 5H
0038 020000      R     LJMP    ?C0020
003B 24FE              ADD     A,#0FEH
003D 7003              JNZ     $ + 5H
003F 020000      R     LJMP    ?C0021
0042 2404              ADD     A,#04H
0044 6003              JZ      $ + 5H
0046 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 109
0049         ?C0003:
                                           ; SOURCE LINE # 110
0049 906003            MOV     DPTR,#06003H
004C E0                MOVX    A,@DPTR
004D B4012D            CJNE    A,#01H,?C0004
                                           ; SOURCE LINE # 111
                                           ; SOURCE LINE # 112
0050 120000      R     LCALL   USBFS_GetDeviceTablePtr
0053 900000      R     MOV     DPTR,#pTmp
0056 EE                MOV     A,R6
0057 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 23  

0058 A3                INC     DPTR
0059 EF                MOV     A,R7
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 113
005B F582              MOV     DPL,A
005D 8E83              MOV     DPH,R6
005F A3                INC     DPTR
0060 120000      E     LCALL   ?C?PLDCODE
0063 900000      E     MOV     DPTR,#USBFS_currentTD+02H
0066 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 114
0069 900000      E     MOV     DPTR,#USBFS_currentTD
006C E4                CLR     A
006D F0                MOVX    @DPTR,A
006E A3                INC     DPTR
006F 7412              MOV     A,#012H
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 116
0072 120000      E     LCALL   USBFS_InitControlRead
0075 900000      R     MOV     DPTR,#requestHandled
0078 EF                MOV     A,R7
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 117
007A 020000      R     LJMP    ?C0023
007D         ?C0004:
                                           ; SOURCE LINE # 118
007D 906003            MOV     DPTR,#06003H
0080 E0                MOVX    A,@DPTR
0081 6402              XRL     A,#02H
0083 7063              JNZ     ?C0006
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 120
0085 906002            MOV     DPTR,#06002H
0088 E0                MOVX    A,@DPTR
0089 FF                MOV     R7,A
008A 120000      R     LCALL   _USBFS_GetConfigTablePtr
008D 900000      R     MOV     DPTR,#pTmp
0090 EE                MOV     A,R6
0091 F0                MOVX    @DPTR,A
0092 A3                INC     DPTR
0093 EF                MOV     A,R7
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 123
0095 4E                ORL     A,R6
0096 7003              JNZ     $ + 5H
0098 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 125
009B 900000      R     MOV     DPTR,#pTmp
009E E0                MOVX    A,@DPTR
009F FE                MOV     R6,A
00A0 A3                INC     DPTR
00A1 E0                MOVX    A,@DPTR
00A2 F582              MOV     DPL,A
00A4 8E83              MOV     DPH,R6
00A6 A3                INC     DPTR
00A7 120000      E     LCALL   ?C?PLDCODE
00AA 900000      E     MOV     DPTR,#USBFS_currentTD+02H
00AD 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 126
00B0 900000      E     MOV     DPTR,#USBFS_currentTD+02H
00B3 120000      E     LCALL   ?C?PLDXDATA
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 24  

00B6 E9                MOV     A,R1
00B7 2403              ADD     A,#03H
00B9 F9                MOV     R1,A
00BA E4                CLR     A
00BB 3A                ADDC    A,R2
00BC FA                MOV     R2,A
00BD 120000      E     LCALL   ?C?CLDPTR
00C0 FE                MOV     R6,A
00C1 900000      E     MOV     DPTR,#USBFS_currentTD+02H
00C4 120000      E     LCALL   ?C?PLDXDATA
00C7 E9                MOV     A,R1
00C8 2402              ADD     A,#02H
00CA F9                MOV     R1,A
00CB E4                CLR     A
00CC 3A                ADDC    A,R2
00CD FA                MOV     R2,A
00CE 120000      E     LCALL   ?C?CLDPTR
00D1 FD                MOV     R5,A
00D2 EE                MOV     A,R6
00D3 ED                MOV     A,R5
00D4 FF                MOV     R7,A
00D5 900000      E     MOV     DPTR,#USBFS_currentTD
00D8 EE                MOV     A,R6
00D9 F0                MOVX    @DPTR,A
00DA A3                INC     DPTR
00DB EF                MOV     A,R7
00DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 128
00DD 120000      E     LCALL   USBFS_InitControlRead
00E0 900000      R     MOV     DPTR,#requestHandled
00E3 EF                MOV     A,R7
00E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 130
00E5 020000      R     LJMP    ?C0023
00E8         ?C0006:
                                           ; SOURCE LINE # 149
00E8 906003            MOV     DPTR,#06003H
00EB E0                MOVX    A,@DPTR
00EC 6403              XRL     A,#03H
00EE 707C              JNZ     ?C0009
                                           ; SOURCE LINE # 150
                                           ; SOURCE LINE # 153
;---- Variable 'nStr' assigned to Register 'R7' ----
00F0 FF                MOV     R7,A
                                           ; SOURCE LINE # 154
00F1 7BFF              MOV     R3,#0FFH
00F3 7A00        E     MOV     R2,#HIGH USBFS_STRING_DESCRIPTORS
00F5 7900        E     MOV     R1,#LOW USBFS_STRING_DESCRIPTORS
00F7 900000      R     MOV     DPTR,#pStr
00FA 120000      E     LCALL   ?C?PSTXDATA
00FD         ?C0010:
                                           ; SOURCE LINE # 156
00FD 906002            MOV     DPTR,#06002H
0100 E0                MOVX    A,@DPTR
0101 D3                SETB    C
0102 9F                SUBB    A,R7
0103 401F              JC      ?C0011
0105 900000      R     MOV     DPTR,#pStr
0108 120000      E     LCALL   ?C?PLDXDATA
010B 120000      E     LCALL   ?C?CLDPTR
010E 6014              JZ      ?C0011
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 25  

                                           ; SOURCE LINE # 157
                                           ; SOURCE LINE # 159
0110 120000      E     LCALL   ?C?CLDPTR
0113 FE                MOV     R6,A
;---- Variable 'descrLength' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 161
0114 7C00              MOV     R4,#00H
0116 29                ADD     A,R1
0117 F9                MOV     R1,A
0118 EC                MOV     A,R4
0119 3A                ADDC    A,R2
011A FA                MOV     R2,A
011B 900000      R     MOV     DPTR,#pStr
011E 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 162
0121 0F                INC     R7
                                           ; SOURCE LINE # 163
0122 80D9              SJMP    ?C0010
0124         ?C0011:
                                           ; SOURCE LINE # 177
0124 906002            MOV     DPTR,#06002H
0127 E0                MOVX    A,@DPTR
0128 FF                MOV     R7,A
0129 6016              JZ      ?C0012
012B 900000      E     MOV     DPTR,#USBFS_DEVICE0_DESCR+010H
012E E4                CLR     A
012F 93                MOVC    A,@A+DPTR
0130 FE                MOV     R6,A
0131 EF                MOV     A,R7
0132 B5060C            CJNE    A,AR6,?C0012
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 194
0135 7BFF              MOV     R3,#0FFH
0137 7A00        E     MOV     R2,#HIGH USBFS_SN_STRING_DESCRIPTOR
0139 7900        E     MOV     R1,#LOW USBFS_SN_STRING_DESCRIPTOR
013B 900000      R     MOV     DPTR,#pStr
013E 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 196
0141         ?C0012:
                                           ; SOURCE LINE # 199
0141 900000      R     MOV     DPTR,#pStr
0144 120000      E     LCALL   ?C?PLDXDATA
0147 120000      E     LCALL   ?C?CLDPTR
014A 7003              JNZ     $ + 5H
014C 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 201
014F 120000      E     LCALL   ?C?CLDPTR
0152 FF                MOV     R7,A
0153 900000      E     MOV     DPTR,#USBFS_currentTD
0156 E4                CLR     A
0157 F0                MOVX    @DPTR,A
0158 A3                INC     DPTR
0159 EF                MOV     A,R7
015A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
015B 900000      E     MOV     DPTR,#USBFS_currentTD+02H
015E 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 203
0161 120000      E     LCALL   USBFS_InitControlRead
0164 900000      R     MOV     DPTR,#requestHandled
0167 EF                MOV     A,R7
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 26  

0168 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
                                           ; SOURCE LINE # 205
0169 020000      R     LJMP    ?C0023
016C         ?C0009:
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 209
016C 120000      E     LCALL   USBFS_DispatchClassRqst
016F 900000      R     MOV     DPTR,#requestHandled
0172 EF                MOV     A,R7
0173 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
0174 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 213
0177         ?C0015:
                                           ; SOURCE LINE # 214
0177 900000      R     MOV     DPTR,#bmRequestType
017A E0                MOVX    A,@DPTR
017B 5403              ANL     A,#03H
017D 6042              JZ      ?C0018
017F 24FE              ADD     A,#0FEH
0181 6003              JZ      $ + 5H
0183 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
0186         ?C0017:
                                           ; SOURCE LINE # 217
0186 900000      E     MOV     DPTR,#USBFS_currentTD
0189 E4                CLR     A
018A F0                MOVX    @DPTR,A
018B A3                INC     DPTR
018C 7402              MOV     A,#02H
018E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 218
018F 906004            MOV     DPTR,#06004H
0192 E0                MOVX    A,@DPTR
0193 547F              ANL     A,#07FH
0195 75F00B            MOV     B,#0BH
0198 A4                MUL     AB
0199 2400        E     ADD     A,#LOW USBFS_EP+02H
019B F582              MOV     DPL,A
019D E4                CLR     A
019E 3400        E     ADDC    A,#HIGH USBFS_EP+02H
01A0 F583              MOV     DPH,A
01A2 E0                MOVX    A,@DPTR
01A3 900000      R     MOV     DPTR,#USBFS_tBuffer
01A6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 219
01A7 E4                CLR     A
01A8 A3                INC     DPTR
01A9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 220
01AA 7B01              MOV     R3,#01H
01AC 7A00        R     MOV     R2,#HIGH USBFS_tBuffer
01AE 7900        R     MOV     R1,#LOW USBFS_tBuffer
01B0 900000      E     MOV     DPTR,#USBFS_currentTD+02H
01B3 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 222
01B6 120000      E     LCALL   USBFS_InitControlRead
01B9 900000      R     MOV     DPTR,#requestHandled
01BC EF                MOV     A,R7
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 27  

01BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 223
01BE 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 224
01C1         ?C0018:
                                           ; SOURCE LINE # 225
01C1 900000      E     MOV     DPTR,#USBFS_currentTD
01C4 E4                CLR     A
01C5 F0                MOVX    @DPTR,A
01C6 A3                INC     DPTR
01C7 7402              MOV     A,#02H
01C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 226
01CA 900000      E     MOV     DPTR,#USBFS_deviceStatus
01CD E0                MOVX    A,@DPTR
01CE 900000      R     MOV     DPTR,#USBFS_tBuffer
01D1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 227
01D2 E4                CLR     A
01D3 A3                INC     DPTR
01D4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 228
01D5 7B01              MOV     R3,#01H
01D7 7A00        R     MOV     R2,#HIGH USBFS_tBuffer
01D9 7900        R     MOV     R1,#LOW USBFS_tBuffer
01DB 900000      E     MOV     DPTR,#USBFS_currentTD+02H
01DE 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 230
01E1 120000      E     LCALL   USBFS_InitControlRead
01E4 900000      R     MOV     DPTR,#requestHandled
01E7 EF                MOV     A,R7
01E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 231
01E9 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 233
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
01EC 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 237
01EF         ?C0020:
                                           ; SOURCE LINE # 238
01EF 900000      E     MOV     DPTR,#USBFS_currentTD
01F2 E4                CLR     A
01F3 F0                MOVX    @DPTR,A
01F4 A3                INC     DPTR
01F5 04                INC     A
01F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 239
01F7 FB                MOV     R3,A
01F8 7A00        E     MOV     R2,#HIGH USBFS_configuration
01FA 7900        E     MOV     R1,#LOW USBFS_configuration
01FC 900000      E     MOV     DPTR,#USBFS_currentTD+02H
01FF 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 240
0202 120000      E     LCALL   USBFS_InitControlRead
0205 900000      R     MOV     DPTR,#requestHandled
0208 EF                MOV     A,R7
0209 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 241
020A 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 243
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 28  

020D         ?C0021:
                                           ; SOURCE LINE # 244
020D 900000      E     MOV     DPTR,#USBFS_currentTD
0210 E4                CLR     A
0211 F0                MOVX    @DPTR,A
0212 A3                INC     DPTR
0213 04                INC     A
0214 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 245
0215 906004            MOV     DPTR,#06004H
0218 E0                MOVX    A,@DPTR
0219 2400        E     ADD     A,#LOW USBFS_interfaceSetting
021B F9                MOV     R1,A
021C E4                CLR     A
021D 3400        E     ADDC    A,#HIGH USBFS_interfaceSetting
021F FA                MOV     R2,A
0220 7B01              MOV     R3,#01H
0222 900000      E     MOV     DPTR,#USBFS_currentTD+02H
0225 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 246
0228 120000      E     LCALL   USBFS_InitControlRead
022B 900000      R     MOV     DPTR,#requestHandled
022E EF                MOV     A,R7
022F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
0230 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 249
                                           ; SOURCE LINE # 250
                                           ; SOURCE LINE # 251
                                           ; SOURCE LINE # 252
0233 020000      R     LJMP    ?C0023
0236         ?C0001:
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 256
0236 906001            MOV     DPTR,#06001H
0239 E0                MOVX    A,@DPTR
023A 14                DEC     A
023B 7003              JNZ     $ + 5H
023D 020000      R     LJMP    ?C0035
0240 24FE              ADD     A,#0FEH
0242 7003              JNZ     $ + 5H
0244 020000      R     LJMP    ?C0044
0247 24FA              ADD     A,#0FAH
0249 601E              JZ      ?C0026
024B 24FE              ADD     A,#0FEH
024D 6076              JZ      ?C0032
024F 2406              ADD     A,#06H
0251 6003              JZ      $ + 5H
0253 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 258
0256         ?C0025:
                                           ; SOURCE LINE # 260
0256 906002            MOV     DPTR,#06002H
0259 E0                MOVX    A,@DPTR
025A 900000      E     MOV     DPTR,#USBFS_deviceAddress
025D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 261
025E 120000      E     LCALL   USBFS_InitNoDataControlTransfer
0261 900000      R     MOV     DPTR,#requestHandled
0264 EF                MOV     A,R7
0265 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 29  

                                           ; SOURCE LINE # 262
0266 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 264
0269         ?C0026:
                                           ; SOURCE LINE # 265
0269 906002            MOV     DPTR,#06002H
026C E0                MOVX    A,@DPTR
026D 900000      R     MOV     DPTR,#configurationN
0270 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 268
0271 D3                SETB    C
0272 9400              SUBB    A,#00H
0274 400E              JC      ?C0027
                                           ; SOURCE LINE # 269
                                           ; SOURCE LINE # 270
0276 E0                MOVX    A,@DPTR
0277 14                DEC     A
0278 FF                MOV     R7,A
0279 120000      R     LCALL   _USBFS_GetConfigTablePtr
027C 900000      R     MOV     DPTR,#pTmp
027F EE                MOV     A,R6
0280 F0                MOVX    @DPTR,A
0281 A3                INC     DPTR
0282 EF                MOV     A,R7
0283 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 271
0284         ?C0027:
                                           ; SOURCE LINE # 274
0284 900000      R     MOV     DPTR,#configurationN
0287 E0                MOVX    A,@DPTR
0288 FF                MOV     R7,A
0289 D3                SETB    C
028A 9400              SUBB    A,#00H
028C 400A              JC      ?C0030
028E 900000      R     MOV     DPTR,#pTmp
0291 E0                MOVX    A,@DPTR
0292 7002              JNZ     ?C0139
0294 A3                INC     DPTR
0295 E0                MOVX    A,@DPTR
0296         ?C0139:
0296 7006              JNZ     ?C0029
0298         ?C0030:
0298 EF                MOV     A,R7
0299 6003              JZ      $ + 5H
029B 020000      R     LJMP    ?C0023
029E         ?C0029:
                                           ; SOURCE LINE # 275
                                           ; SOURCE LINE # 277
029E 900000      E     MOV     DPTR,#USBFS_configuration
02A1 E0                MOVX    A,@DPTR
02A2 FF                MOV     R7,A
02A3 900000      R     MOV     DPTR,#configurationN
02A6 E0                MOVX    A,@DPTR
02A7 FE                MOV     R6,A
02A8 6F                XRL     A,R7
02A9 600F              JZ      ?C0031
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 279
02AB 900000      E     MOV     DPTR,#USBFS_configuration
02AE EE                MOV     A,R6
02AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 280
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 30  

02B0 900000      E     MOV     DPTR,#USBFS_configurationChanged
02B3 7401              MOV     A,#01H
02B5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 281
02B6 FF                MOV     R7,A
02B7 120000      R     LCALL   _USBFS_Config
                                           ; SOURCE LINE # 282
02BA         ?C0031:
                                           ; SOURCE LINE # 283
02BA 120000      E     LCALL   USBFS_InitNoDataControlTransfer
02BD 900000      R     MOV     DPTR,#requestHandled
02C0 EF                MOV     A,R7
02C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 284
                                           ; SOURCE LINE # 285
02C2 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 287
02C5         ?C0032:
                                           ; SOURCE LINE # 288
02C5 120000      R     LCALL   USBFS_ValidateAlternateSetting
02C8 EF                MOV     A,R7
02C9 7003              JNZ     $ + 5H
02CB 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 289
                                           ; SOURCE LINE # 291
02CE 906004            MOV     DPTR,#06004H
02D1 E0                MOVX    A,@DPTR
;---- Variable 'interfaceNumber' assigned to Register 'R6' ----
02D2 FE                MOV     R6,A
                                           ; SOURCE LINE # 292
02D3 900000      E     MOV     DPTR,#USBFS_interfaceNumber
02D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 295
02D7 7400        E     MOV     A,#LOW USBFS_interfaceSetting
02D9 2E                ADD     A,R6
02DA F582              MOV     DPL,A
02DC E4                CLR     A
02DD 3400        E     ADDC    A,#HIGH USBFS_interfaceSetting
02DF F583              MOV     DPH,A
02E1 E0                MOVX    A,@DPTR
02E2 FF                MOV     R7,A
02E3 7400        E     MOV     A,#LOW USBFS_interfaceSettingLast
02E5 2E                ADD     A,R6
02E6 F582              MOV     DPL,A
02E8 E4                CLR     A
02E9 3400        E     ADDC    A,#HIGH USBFS_interfaceSettingLast
02EB F583              MOV     DPH,A
02ED E0                MOVX    A,@DPTR
02EE 6F                XRL     A,R7
02EF 6009              JZ      ?C0034
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 297
02F1 900000      E     MOV     DPTR,#USBFS_configurationChanged
02F4 7401              MOV     A,#01H
02F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 303
02F7 120000      R     LCALL   USBFS_ConfigAltChanged
                                           ; SOURCE LINE # 305
02FA         ?C0034:
                                           ; SOURCE LINE # 307
02FA 120000      E     LCALL   USBFS_InitNoDataControlTransfer
02FD 900000      R     MOV     DPTR,#requestHandled
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 31  

0300 EF                MOV     A,R7
0301 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 308
                                           ; SOURCE LINE # 309
0302 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 311
0305         ?C0035:
                                           ; SOURCE LINE # 312
0305 900000      R     MOV     DPTR,#bmRequestType
0308 E0                MOVX    A,@DPTR
0309 5403              ANL     A,#03H
030B 601D              JZ      ?C0039
030D 14                DEC     A
030E 6037              JZ      ?C0041
0310 14                DEC     A
0311 6003              JZ      $ + 5H
0313 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 313
                                           ; SOURCE LINE # 314
0316         ?C0037:
                                           ; SOURCE LINE # 315
0316 906002            MOV     DPTR,#06002H
0319 E0                MOVX    A,@DPTR
031A 6003              JZ      $ + 5H
031C 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 317
031F 120000      R     LCALL   USBFS_ClearEndpointHalt
0322 900000      R     MOV     DPTR,#requestHandled
0325 EF                MOV     A,R7
0326 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 319
0327 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 320
032A         ?C0039:
                                           ; SOURCE LINE # 322
032A 906002            MOV     DPTR,#06002H
032D E0                MOVX    A,@DPTR
032E 6401              XRL     A,#01H
0330 6003              JZ      $ + 5H
0332 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 323
                                           ; SOURCE LINE # 324
0335 900000      E     MOV     DPTR,#USBFS_deviceStatus
0338 E0                MOVX    A,@DPTR
0339 54FD              ANL     A,#0FDH
033B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 325
033C 120000      E     LCALL   USBFS_InitNoDataControlTransfer
033F 900000      R     MOV     DPTR,#requestHandled
0342 EF                MOV     A,R7
0343 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 326
                                           ; SOURCE LINE # 327
0344 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 328
0347         ?C0041:
                                           ; SOURCE LINE # 330
0347 906004            MOV     DPTR,#06004H
034A E0                MOVX    A,@DPTR
034B FF                MOV     R7,A
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 32  

034C C3                CLR     C
034D 9401              SUBB    A,#01H
034F 4003              JC      $ + 5H
0351 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 331
                                           ; SOURCE LINE # 332
0354 7400        E     MOV     A,#LOW USBFS_interfaceStatus
0356 2F                ADD     A,R7
0357 F582              MOV     DPL,A
0359 E4                CLR     A
035A 3400        E     ADDC    A,#HIGH USBFS_interfaceStatus
035C F583              MOV     DPH,A
035E C083              PUSH    DPH
0360 C082              PUSH    DPL
0362 E0                MOVX    A,@DPTR
0363 FF                MOV     R7,A
0364 906002            MOV     DPTR,#06002H
0367 E0                MOVX    A,@DPTR
0368 F4                CPL     A
0369 FE                MOV     R6,A
036A EF                MOV     A,R7
036B 5E                ANL     A,R6
036C D082              POP     DPL
036E D083              POP     DPH
0370 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 333
0371 120000      E     LCALL   USBFS_InitNoDataControlTransfer
0374 900000      R     MOV     DPTR,#requestHandled
0377 EF                MOV     A,R7
0378 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 334
                                           ; SOURCE LINE # 335
0379 8068              SJMP    ?C0023
                                           ; SOURCE LINE # 336
                                           ; SOURCE LINE # 337
                                           ; SOURCE LINE # 338
                                           ; SOURCE LINE # 339
037B 8066              SJMP    ?C0023
                                           ; SOURCE LINE # 341
037D         ?C0044:
                                           ; SOURCE LINE # 342
037D 900000      R     MOV     DPTR,#bmRequestType
0380 E0                MOVX    A,@DPTR
0381 5403              ANL     A,#03H
0383 6016              JZ      ?C0048
0385 14                DEC     A
0386 602C              JZ      ?C0050
0388 14                DEC     A
0389 7058              JNZ     ?C0023
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 344
038B         ?C0046:
                                           ; SOURCE LINE # 345
038B 906002            MOV     DPTR,#06002H
038E E0                MOVX    A,@DPTR
038F 7052              JNZ     ?C0023
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 347
0391 120000      R     LCALL   USBFS_SetEndpointHalt
0394 900000      R     MOV     DPTR,#requestHandled
0397 EF                MOV     A,R7
0398 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 33  

                                           ; SOURCE LINE # 348
                                           ; SOURCE LINE # 349
0399 8048              SJMP    ?C0023
                                           ; SOURCE LINE # 351
039B         ?C0048:
                                           ; SOURCE LINE # 353
039B 906002            MOV     DPTR,#06002H
039E E0                MOVX    A,@DPTR
039F 6401              XRL     A,#01H
03A1 7040              JNZ     ?C0023
                                           ; SOURCE LINE # 354
                                           ; SOURCE LINE # 355
03A3 900000      E     MOV     DPTR,#USBFS_deviceStatus
03A6 E0                MOVX    A,@DPTR
03A7 4402              ORL     A,#02H
03A9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 356
03AA 120000      E     LCALL   USBFS_InitNoDataControlTransfer
03AD 900000      R     MOV     DPTR,#requestHandled
03B0 EF                MOV     A,R7
03B1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 358
03B2 802F              SJMP    ?C0023
                                           ; SOURCE LINE # 360
03B4         ?C0050:
                                           ; SOURCE LINE # 362
03B4 906004            MOV     DPTR,#06004H
03B7 E0                MOVX    A,@DPTR
03B8 FF                MOV     R7,A
03B9 C3                CLR     C
03BA 9401              SUBB    A,#01H
03BC 5025              JNC     ?C0023
                                           ; SOURCE LINE # 363
                                           ; SOURCE LINE # 364
03BE 7400        E     MOV     A,#LOW USBFS_interfaceStatus
03C0 2F                ADD     A,R7
03C1 F582              MOV     DPL,A
03C3 E4                CLR     A
03C4 3400        E     ADDC    A,#HIGH USBFS_interfaceStatus
03C6 F583              MOV     DPH,A
03C8 C083              PUSH    DPH
03CA C082              PUSH    DPL
03CC E0                MOVX    A,@DPTR
03CD FF                MOV     R7,A
03CE 906002            MOV     DPTR,#06002H
03D1 E0                MOVX    A,@DPTR
03D2 F4                CPL     A
03D3 FE                MOV     R6,A
03D4 EF                MOV     A,R7
03D5 5E                ANL     A,R6
03D6 D082              POP     DPL
03D8 D083              POP     DPH
03DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 365
03DB 120000      E     LCALL   USBFS_InitNoDataControlTransfer
03DE 900000      R     MOV     DPTR,#requestHandled
03E1 EF                MOV     A,R7
03E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 366
                                           ; SOURCE LINE # 367
                                           ; SOURCE LINE # 369
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 34  

                                           ; SOURCE LINE # 370
                                           ; SOURCE LINE # 371
                                           ; SOURCE LINE # 372
                                           ; SOURCE LINE # 374
                                           ; SOURCE LINE # 375
                                           ; SOURCE LINE # 376
                                           ; SOURCE LINE # 377
03E3         ?C0023:
                                           ; SOURCE LINE # 379
03E3 900000      R     MOV     DPTR,#requestHandled
03E6 E0                MOVX    A,@DPTR
03E7 FF                MOV     R7,A
                                           ; SOURCE LINE # 380
03E8         ?C0054:
03E8 22                RET     
             ; FUNCTION USBFS_HandleStandardRqst (END)

             ; FUNCTION USBFS_ConfigReg (BEGIN)
                                           ; SOURCE LINE # 437
                                           ; SOURCE LINE # 438
                                           ; SOURCE LINE # 446
;---- Variable 'ep' assigned to Register 'R5' ----
0000 7D01              MOV     R5,#01H
0002         ?C0055:
0002 ED                MOV     A,R5
0003 C3                CLR     C
0004 9409              SUBB    A,#09H
0006 4003              JC      $ + 5H
0008 020000      R     LJMP    ?C0056
                                           ; SOURCE LINE # 447
                                           ; SOURCE LINE # 448
000B 75F010            MOV     B,#010H
000E ED                MOV     A,R5
000F 906070            MOV     DPTR,#06070H
0012 120000      E     LCALL   ?C?OFFXADD
0015 740C              MOV     A,#0CH
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 455
0018 ED                MOV     A,R5
0019 75F00B            MOV     B,#0BH
001C A4                MUL     AB
001D 2400        E     ADD     A,#LOW USBFS_EP+05H
001F F582              MOV     DPL,A
0021 E4                CLR     A
0022 3400        E     ADDC    A,#HIGH USBFS_EP+05H
0024 F583              MOV     DPH,A
0026 E0                MOVX    A,@DPTR
0027 6031              JZ      ?C0058
                                           ; SOURCE LINE # 456
                                           ; SOURCE LINE # 457
0029 ED                MOV     A,R5
002A 75F00B            MOV     B,#0BH
002D A4                MUL     AB
002E 2400        E     ADD     A,#LOW USBFS_EP+04H
0030 F582              MOV     DPL,A
0032 E4                CLR     A
0033 3400        E     ADDC    A,#HIGH USBFS_EP+04H
0035 F583              MOV     DPH,A
0037 E0                MOVX    A,@DPTR
0038 5480              ANL     A,#080H
003A 600F              JZ      ?C0059
                                           ; SOURCE LINE # 458
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 35  

                                           ; SOURCE LINE # 459
003C 75F010            MOV     B,#010H
003F ED                MOV     A,R5
0040 905FFE            MOV     DPTR,#05FFEH
0043 120000      E     LCALL   ?C?OFFXADD
0046 740C              MOV     A,#0CH
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 465
0049 801C              SJMP    ?C0061
004B         ?C0059:
                                           ; SOURCE LINE # 467
                                           ; SOURCE LINE # 468
004B 75F010            MOV     B,#010H
004E ED                MOV     A,R5
004F 905FFE            MOV     DPTR,#05FFEH
0052 120000      E     LCALL   ?C?OFFXADD
0055 7408              MOV     A,#08H
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 476
                                           ; SOURCE LINE # 477
0058 800D              SJMP    ?C0061
005A         ?C0058:
                                           ; SOURCE LINE # 479
                                           ; SOURCE LINE # 480
005A 75F010            MOV     B,#010H
005D ED                MOV     A,R5
005E 905FFE            MOV     DPTR,#05FFEH
0061 120000      E     LCALL   ?C?OFFXADD
0064 7480              MOV     A,#080H
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 481
0067         ?C0061:
                                           ; SOURCE LINE # 488
0067 ED                MOV     A,R5
0068 75F00B            MOV     B,#0BH
006B A4                MUL     AB
006C 2400        E     ADD     A,#LOW USBFS_EP+06H
006E F582              MOV     DPL,A
0070 E4                CLR     A
0071 3400        E     ADDC    A,#HIGH USBFS_EP+06H
0073 F583              MOV     DPH,A
0075 E0                MOVX    A,@DPTR
0076 A3                INC     DPTR
0077 E0                MOVX    A,@DPTR
0078 FF                MOV     R7,A
0079 75F010            MOV     B,#010H
007C ED                MOV     A,R5
007D 906076            MOV     DPTR,#06076H
0080 120000      E     LCALL   ?C?OFFXADD
0083 EF                MOV     A,R7
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 489
0085 ED                MOV     A,R5
0086 75F00B            MOV     B,#0BH
0089 A4                MUL     AB
008A 2400        E     ADD     A,#LOW USBFS_EP+06H
008C F582              MOV     DPL,A
008E E4                CLR     A
008F 3400        E     ADDC    A,#HIGH USBFS_EP+06H
0091 F583              MOV     DPH,A
0093 E0                MOVX    A,@DPTR
0094 FF                MOV     R7,A
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 36  

0095 75F010            MOV     B,#010H
0098 ED                MOV     A,R5
0099 906077            MOV     DPTR,#06077H
009C 120000      E     LCALL   ?C?OFFXADD
009F EF                MOV     A,R7
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 490
00A1 ED                MOV     A,R5
00A2 75F00B            MOV     B,#0BH
00A5 A4                MUL     AB
00A6 2400        E     ADD     A,#LOW USBFS_EP+06H
00A8 F582              MOV     DPL,A
00AA E4                CLR     A
00AB 3400        E     ADDC    A,#HIGH USBFS_EP+06H
00AD F583              MOV     DPH,A
00AF E0                MOVX    A,@DPTR
00B0 A3                INC     DPTR
00B1 E0                MOVX    A,@DPTR
00B2 FF                MOV     R7,A
00B3 75F010            MOV     B,#010H
00B6 ED                MOV     A,R5
00B7 906074            MOV     DPTR,#06074H
00BA 120000      E     LCALL   ?C?OFFXADD
00BD EF                MOV     A,R7
00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 491
00BF ED                MOV     A,R5
00C0 75F00B            MOV     B,#0BH
00C3 A4                MUL     AB
00C4 2400        E     ADD     A,#LOW USBFS_EP+06H
00C6 F582              MOV     DPL,A
00C8 E4                CLR     A
00C9 3400        E     ADDC    A,#HIGH USBFS_EP+06H
00CB F583              MOV     DPH,A
00CD E0                MOVX    A,@DPTR
00CE FF                MOV     R7,A
00CF 75F010            MOV     B,#010H
00D2 ED                MOV     A,R5
00D3 906075            MOV     DPTR,#06075H
00D6 120000      E     LCALL   ?C?OFFXADD
00D9 EF                MOV     A,R7
00DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 494
00DB 0D                INC     R5
00DC 020000      R     LJMP    ?C0055
00DF         ?C0056:
                                           ; SOURCE LINE # 519
00DF 90600A            MOV     DPTR,#0600AH
00E2 74FF              MOV     A,#0FFH
00E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 520
00E5 22                RET     
             ; FUNCTION USBFS_ConfigReg (END)

             ; FUNCTION USBFS_EpStateInit (BEGIN)
                                           ; SOURCE LINE # 532
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 536
;---- Variable 'i' assigned to Register 'R7' ----
0000 7F01              MOV     R7,#01H
0002         ?C0063:
0002 EF                MOV     A,R7
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 37  

0003 C3                CLR     C
0004 9409              SUBB    A,#09H
0006 5039              JNC     ?C0068
                                           ; SOURCE LINE # 537
                                           ; SOURCE LINE # 538
0008 EF                MOV     A,R7
0009 75F00B            MOV     B,#0BH
000C A4                MUL     AB
000D 2400        E     ADD     A,#LOW USBFS_EP+04H
000F F582              MOV     DPL,A
0011 E4                CLR     A
0012 3400        E     ADDC    A,#HIGH USBFS_EP+04H
0014 F583              MOV     DPH,A
0016 E0                MOVX    A,@DPTR
0017 5480              ANL     A,#080H
0019 6013              JZ      ?C0066
                                           ; SOURCE LINE # 539
                                           ; SOURCE LINE # 541
001B EF                MOV     A,R7
001C 75F00B            MOV     B,#0BH
001F A4                MUL     AB
0020 2400        E     ADD     A,#LOW USBFS_EP+01H
0022 F582              MOV     DPL,A
0024 E4                CLR     A
0025 3400        E     ADDC    A,#HIGH USBFS_EP+01H
0027 F583              MOV     DPH,A
0029 7401              MOV     A,#01H
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 542
002C 8010              SJMP    ?C0065
002E         ?C0066:
                                           ; SOURCE LINE # 544
                                           ; SOURCE LINE # 546
002E EF                MOV     A,R7
002F 75F00B            MOV     B,#0BH
0032 A4                MUL     AB
0033 2400        E     ADD     A,#LOW USBFS_EP+01H
0035 F582              MOV     DPL,A
0037 E4                CLR     A
0038 3400        E     ADDC    A,#HIGH USBFS_EP+01H
003A F583              MOV     DPH,A
003C E4                CLR     A
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 547
                                           ; SOURCE LINE # 548
003E         ?C0065:
003E 0F                INC     R7
003F 80C1              SJMP    ?C0063
                                           ; SOURCE LINE # 550
0041         ?C0068:
0041 22                RET     
             ; FUNCTION USBFS_EpStateInit (END)

             ; FUNCTION _USBFS_Config (BEGIN)
                                           ; SOURCE LINE # 570
;---- Variable 'clearAltSetting' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 571
                                           ; SOURCE LINE # 579
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#buffCount
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 38  

0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 586
0007 900000      R     MOV     DPTR,#ep
000A F0                MOVX    @DPTR,A
000B         ?C0069:
000B 900000      R     MOV     DPTR,#ep
000E E0                MOVX    A,@DPTR
000F FE                MOV     R6,A
0010 C3                CLR     C
0011 9409              SUBB    A,#09H
0013 507B              JNC     ?C0070
                                           ; SOURCE LINE # 587
                                           ; SOURCE LINE # 588
0015 EE                MOV     A,R6
0016 75F00B            MOV     B,#0BH
0019 A4                MUL     AB
001A 2400        E     ADD     A,#LOW USBFS_EP
001C F582              MOV     DPL,A
001E E4                CLR     A
001F 3400        E     ADDC    A,#HIGH USBFS_EP
0021 F583              MOV     DPH,A
0023 E4                CLR     A
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 589
0025 EE                MOV     A,R6
0026 75F00B            MOV     B,#0BH
0029 A4                MUL     AB
002A 2400        E     ADD     A,#LOW USBFS_EP+02H
002C F582              MOV     DPL,A
002E E4                CLR     A
002F 3400        E     ADDC    A,#HIGH USBFS_EP+02H
0031 F583              MOV     DPH,A
0033 E4                CLR     A
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 590
0035 EE                MOV     A,R6
0036 75F00B            MOV     B,#0BH
0039 A4                MUL     AB
003A 2400        E     ADD     A,#LOW USBFS_EP+03H
003C F582              MOV     DPL,A
003E E4                CLR     A
003F 3400        E     ADDC    A,#HIGH USBFS_EP+03H
0041 F583              MOV     DPH,A
0043 E4                CLR     A
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 591
0045 EE                MOV     A,R6
0046 75F00B            MOV     B,#0BH
0049 A4                MUL     AB
004A 2400        E     ADD     A,#LOW USBFS_EP+08H
004C F582              MOV     DPL,A
004E E4                CLR     A
004F 3400        E     ADDC    A,#HIGH USBFS_EP+08H
0051 F583              MOV     DPH,A
0053 E4                CLR     A
0054 F0                MOVX    @DPTR,A
0055 A3                INC     DPTR
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 592
0057 EE                MOV     A,R6
0058 75F00B            MOV     B,#0BH
005B A4                MUL     AB
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 39  

005C 2400        E     ADD     A,#LOW USBFS_EP+0AH
005E F582              MOV     DPL,A
0060 E4                CLR     A
0061 3400        E     ADDC    A,#HIGH USBFS_EP+0AH
0063 F583              MOV     DPH,A
0065 E4                CLR     A
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 593
0067 EE                MOV     A,R6
0068 75F00B            MOV     B,#0BH
006B A4                MUL     AB
006C 2400        E     ADD     A,#LOW USBFS_EP+01H
006E F582              MOV     DPL,A
0070 E4                CLR     A
0071 3400        E     ADDC    A,#HIGH USBFS_EP+01H
0073 F583              MOV     DPH,A
0075 E4                CLR     A
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 594
0077 EE                MOV     A,R6
0078 75F00B            MOV     B,#0BH
007B A4                MUL     AB
007C 2400        E     ADD     A,#LOW USBFS_EP+05H
007E F582              MOV     DPL,A
0080 E4                CLR     A
0081 3400        E     ADDC    A,#HIGH USBFS_EP+05H
0083 F583              MOV     DPH,A
0085 E4                CLR     A
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 595
0087 900000      R     MOV     DPTR,#ep
008A E0                MOVX    A,@DPTR
008B 04                INC     A
008C F0                MOVX    @DPTR,A
008D 020000      R     LJMP    ?C0069
0090         ?C0070:
                                           ; SOURCE LINE # 598
0090 EF                MOV     A,R7
0091 602F              JZ      ?C0072
                                           ; SOURCE LINE # 599
                                           ; SOURCE LINE # 600
0093 E4                CLR     A
0094 900000      R     MOV     DPTR,#i
0097 F0                MOVX    @DPTR,A
0098         ?C0073:
0098 900000      R     MOV     DPTR,#i
009B E0                MOVX    A,@DPTR
009C FF                MOV     R7,A
009D C3                CLR     C
009E 9401              SUBB    A,#01H
00A0 5020              JNC     ?C0072
                                           ; SOURCE LINE # 601
                                           ; SOURCE LINE # 602
00A2 7400        E     MOV     A,#LOW USBFS_interfaceSetting
00A4 2F                ADD     A,R7
00A5 F582              MOV     DPL,A
00A7 E4                CLR     A
00A8 3400        E     ADDC    A,#HIGH USBFS_interfaceSetting
00AA F583              MOV     DPH,A
00AC E4                CLR     A
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 603
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 40  

00AE 7400        E     MOV     A,#LOW USBFS_interfaceSettingLast
00B0 2F                ADD     A,R7
00B1 F582              MOV     DPL,A
00B3 E4                CLR     A
00B4 3400        E     ADDC    A,#HIGH USBFS_interfaceSettingLast
00B6 F583              MOV     DPH,A
00B8 E4                CLR     A
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 604
00BA 900000      R     MOV     DPTR,#i
00BD E0                MOVX    A,@DPTR
00BE 04                INC     A
00BF F0                MOVX    @DPTR,A
00C0 80D6              SJMP    ?C0073
                                           ; SOURCE LINE # 605
00C2         ?C0072:
                                           ; SOURCE LINE # 608
00C2 900000      E     MOV     DPTR,#USBFS_configuration
00C5 E0                MOVX    A,@DPTR
00C6 D3                SETB    C
00C7 9400              SUBB    A,#00H
00C9 5003              JNC     $ + 5H
00CB 020000      R     LJMP    ?C0100
                                           ; SOURCE LINE # 609
                                           ; SOURCE LINE # 614
00CE E0                MOVX    A,@DPTR
00CF 14                DEC     A
00D0 FF                MOV     R7,A
00D1 120000      R     LCALL   _USBFS_GetConfigTablePtr
00D4 900000      R     MOV     DPTR,#pTmp
00D7 EE                MOV     A,R6
00D8 F0                MOVX    @DPTR,A
00D9 A3                INC     DPTR
00DA EF                MOV     A,R7
00DB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 617
00DC 900000      R     MOV     DPTR,#pTmp
00DF E0                MOVX    A,@DPTR
00E0 FC                MOV     R4,A
00E1 A3                INC     DPTR
00E2 E0                MOVX    A,@DPTR
00E3 FD                MOV     R5,A
00E4 F582              MOV     DPL,A
00E6 8C83              MOV     DPH,R4
00E8 A3                INC     DPTR
00E9 120000      E     LCALL   ?C?PLDCODE
;---- Variable 'pDescr' assigned to Register 'R1/R2/R3' ----
                                           ; SOURCE LINE # 618
00EC E9                MOV     A,R1
00ED 2407              ADD     A,#07H
00EF F9                MOV     R1,A
00F0 E4                CLR     A
00F1 3A                ADDC    A,R2
00F2 FA                MOV     R2,A
00F3 120000      E     LCALL   ?C?CLDPTR
00F6 5440              ANL     A,#040H
00F8 6009              JZ      ?C0077
                                           ; SOURCE LINE # 619
                                           ; SOURCE LINE # 620
00FA 900000      E     MOV     DPTR,#USBFS_deviceStatus
00FD E0                MOVX    A,@DPTR
00FE 4401              ORL     A,#01H
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 41  

0100 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 621
0101 8007              SJMP    ?C0078
0103         ?C0077:
                                           ; SOURCE LINE # 623
                                           ; SOURCE LINE # 624
0103 900000      E     MOV     DPTR,#USBFS_deviceStatus
0106 E0                MOVX    A,@DPTR
0107 54FE              ANL     A,#0FEH
0109 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 625
010A         ?C0078:
                                           ; SOURCE LINE # 628
010A ED                MOV     A,R5
010B 2404              ADD     A,#04H
010D FF                MOV     R7,A
010E E4                CLR     A
010F 3C                ADDC    A,R4
0110 FE                MOV     R6,A
0111 900000      R     MOV     DPTR,#pTmp
0114 F0                MOVX    @DPTR,A
0115 A3                INC     DPTR
0116 EF                MOV     A,R7
0117 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 629
0118 F582              MOV     DPL,A
011A 8E83              MOV     DPH,R6
011C E4                CLR     A
011D 93                MOVC    A,@A+DPTR
011E 900000      R     MOV     DPTR,#ep
0121 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 687
0122 A3                INC     DPTR
0123 7401              MOV     A,#01H
0125 F0                MOVX    @DPTR,A
0126         ?C0079:
0126 900000      R     MOV     DPTR,#i
0129 E0                MOVX    A,@DPTR
012A C3                CLR     C
012B 9409              SUBB    A,#09H
012D 4003              JC      $ + 5H
012F 020000      R     LJMP    ?C0080
                                           ; SOURCE LINE # 688
                                           ; SOURCE LINE # 690
0132 900000      R     MOV     DPTR,#pTmp
0135 E0                MOVX    A,@DPTR
0136 FE                MOV     R6,A
0137 A3                INC     DPTR
0138 E0                MOVX    A,@DPTR
0139 F582              MOV     DPL,A
013B 8E83              MOV     DPH,R6
013D A3                INC     DPTR
013E 120000      E     LCALL   ?C?PLDCODE
0141 AF01              MOV     R7,AR1
0143 900000      R     MOV     DPTR,#pEP
0146 EA                MOV     A,R2
0147 F0                MOVX    @DPTR,A
0148 A3                INC     DPTR
0149 EF                MOV     A,R7
014A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 694
;---- Variable 'curEp' assigned to Register 'R7' ----
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 42  

014B E4                CLR     A
014C FF                MOV     R7,A
014D         ?C0082:
014D 900000      R     MOV     DPTR,#ep
0150 E0                MOVX    A,@DPTR
0151 FE                MOV     R6,A
0152 EF                MOV     A,R7
0153 C3                CLR     C
0154 9E                SUBB    A,R6
0155 4003              JC      $ + 5H
0157 020000      R     LJMP    ?C0081
                                           ; SOURCE LINE # 695
                                           ; SOURCE LINE # 696
015A 900000      R     MOV     DPTR,#pEP
015D E0                MOVX    A,@DPTR
015E FC                MOV     R4,A
015F A3                INC     DPTR
0160 E0                MOVX    A,@DPTR
0161 F582              MOV     DPL,A
0163 8C83              MOV     DPH,R4
0165 7402              MOV     A,#02H
0167 93                MOVC    A,@A+DPTR
0168 547F              ANL     A,#07FH
016A FD                MOV     R5,A
016B 900000      R     MOV     DPTR,#i
016E E0                MOVX    A,@DPTR
016F FE                MOV     R6,A
0170 6D                XRL     A,R5
0171 7001              JNZ     ?C0140
0173 E4                CLR     A
0174         ?C0140:
0174 6003              JZ      $ + 5H
0176 020000      R     LJMP    ?C0085
                                           ; SOURCE LINE # 697
                                           ; SOURCE LINE # 699
0179 900000      R     MOV     DPTR,#pEP
017C E0                MOVX    A,@DPTR
017D A3                INC     DPTR
017E E0                MOVX    A,@DPTR
017F F582              MOV     DPL,A
0181 8C83              MOV     DPH,R4
0183 7404              MOV     A,#04H
0185 93                MOVC    A,@A+DPTR
0186 FC                MOV     R4,A
0187 7405              MOV     A,#05H
0189 93                MOVC    A,@A+DPTR
018A FD                MOV     R5,A
018B EE                MOV     A,R6
018C 75F00B            MOV     B,#0BH
018F A4                MUL     AB
0190 2400        E     ADD     A,#LOW USBFS_EP+08H
0192 F582              MOV     DPL,A
0194 E4                CLR     A
0195 3400        E     ADDC    A,#HIGH USBFS_EP+08H
0197 F583              MOV     DPH,A
0199 E0                MOVX    A,@DPTR
019A FA                MOV     R2,A
019B A3                INC     DPTR
019C E0                MOVX    A,@DPTR
019D C3                CLR     C
019E 9D                SUBB    A,R5
019F EA                MOV     A,R2
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 43  

01A0 9C                SUBB    A,R4
01A1 5029              JNC     ?C0086
                                           ; SOURCE LINE # 700
                                           ; SOURCE LINE # 701
01A3 900000      R     MOV     DPTR,#pEP
01A6 E0                MOVX    A,@DPTR
01A7 FC                MOV     R4,A
01A8 A3                INC     DPTR
01A9 E0                MOVX    A,@DPTR
01AA F582              MOV     DPL,A
01AC 8C83              MOV     DPH,R4
01AE 7404              MOV     A,#04H
01B0 93                MOVC    A,@A+DPTR
01B1 FC                MOV     R4,A
01B2 7405              MOV     A,#05H
01B4 93                MOVC    A,@A+DPTR
01B5 FD                MOV     R5,A
01B6 900000      R     MOV     DPTR,#i
01B9 E0                MOVX    A,@DPTR
01BA 75F00B            MOV     B,#0BH
01BD A4                MUL     AB
01BE 2400        E     ADD     A,#LOW USBFS_EP+08H
01C0 F582              MOV     DPL,A
01C2 E4                CLR     A
01C3 3400        E     ADDC    A,#HIGH USBFS_EP+08H
01C5 F583              MOV     DPH,A
01C7 EC                MOV     A,R4
01C8 F0                MOVX    @DPTR,A
01C9 A3                INC     DPTR
01CA ED                MOV     A,R5
01CB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 702
01CC         ?C0086:
                                           ; SOURCE LINE # 705
01CC 900000      R     MOV     DPTR,#pEP
01CF E0                MOVX    A,@DPTR
01D0 FC                MOV     R4,A
01D1 A3                INC     DPTR
01D2 E0                MOVX    A,@DPTR
01D3 FD                MOV     R5,A
01D4 F582              MOV     DPL,A
01D6 8C83              MOV     DPH,R4
01D8 E4                CLR     A
01D9 93                MOVC    A,@A+DPTR
01DA 2400        E     ADD     A,#LOW USBFS_interfaceSetting
01DC F582              MOV     DPL,A
01DE E4                CLR     A
01DF 3400        E     ADDC    A,#HIGH USBFS_interfaceSetting
01E1 F583              MOV     DPH,A
01E3 E0                MOVX    A,@DPTR
01E4 FE                MOV     R6,A
01E5 8D82              MOV     DPL,R5
01E7 8C83              MOV     DPH,R4
01E9 7401              MOV     A,#01H
01EB 93                MOVC    A,@A+DPTR
01EC FD                MOV     R5,A
01ED EE                MOV     A,R6
01EE 6D                XRL     A,R5
01EF 6003              JZ      $ + 5H
01F1 020000      R     LJMP    ?C0085
                                           ; SOURCE LINE # 706
                                           ; SOURCE LINE # 707
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 44  

01F4 900000      R     MOV     DPTR,#pEP
01F7 E0                MOVX    A,@DPTR
01F8 A3                INC     DPTR
01F9 E0                MOVX    A,@DPTR
01FA FD                MOV     R5,A
01FB F582              MOV     DPL,A
01FD 8C83              MOV     DPH,R4
01FF 7402              MOV     A,#02H
0201 93                MOVC    A,@A+DPTR
0202 FE                MOV     R6,A
0203 900000      R     MOV     DPTR,#i
0206 E0                MOVX    A,@DPTR
0207 FB                MOV     R3,A
0208 75F00B            MOV     B,#0BH
020B A4                MUL     AB
020C 2400        E     ADD     A,#LOW USBFS_EP+04H
020E F582              MOV     DPL,A
0210 E4                CLR     A
0211 3400        E     ADDC    A,#HIGH USBFS_EP+04H
0213 F583              MOV     DPH,A
0215 EE                MOV     A,R6
0216 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 708
0217 8D82              MOV     DPL,R5
0219 8C83              MOV     DPH,R4
021B 7403              MOV     A,#03H
021D 93                MOVC    A,@A+DPTR
021E FE                MOV     R6,A
021F EB                MOV     A,R3
0220 75F00B            MOV     B,#0BH
0223 A4                MUL     AB
0224 2400        E     ADD     A,#LOW USBFS_EP
0226 F582              MOV     DPL,A
0228 E4                CLR     A
0229 3400        E     ADDC    A,#HIGH USBFS_EP
022B F583              MOV     DPH,A
022D EE                MOV     A,R6
022E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 710
022F 900000      R     MOV     DPTR,#pEP
0232 E0                MOVX    A,@DPTR
0233 FC                MOV     R4,A
0234 A3                INC     DPTR
0235 E0                MOVX    A,@DPTR
0236 F582              MOV     DPL,A
0238 8C83              MOV     DPH,R4
023A 7403              MOV     A,#03H
023C 93                MOVC    A,@A+DPTR
023D 5403              ANL     A,#03H
023F FE                MOV     R6,A
;---- Variable 'epType' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 712
0240 900000      R     MOV     DPTR,#pEP
0243 E0                MOVX    A,@DPTR
0244 A3                INC     DPTR
0245 E0                MOVX    A,@DPTR
0246 F582              MOV     DPL,A
0248 8C83              MOV     DPH,R4
024A 7402              MOV     A,#02H
024C 93                MOVC    A,@A+DPTR
024D 5480              ANL     A,#080H
024F 6031              JZ      ?C0088
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 45  

                                           ; SOURCE LINE # 713
                                           ; SOURCE LINE # 715
0251 EE                MOV     A,R6
0252 B40104            CJNE    A,#01H,?C0089
0255 7D07              MOV     R5,#07H
0257 8002              SJMP    ?C0090
0259         ?C0089:
0259 7D0D              MOV     R5,#0DH
025B         ?C0090:
025B 900000      R     MOV     DPTR,#i
025E E0                MOVX    A,@DPTR
025F FC                MOV     R4,A
0260 75F00B            MOV     B,#0BH
0263 A4                MUL     AB
0264 2400        E     ADD     A,#LOW USBFS_EP+05H
0266 F582              MOV     DPL,A
0268 E4                CLR     A
0269 3400        E     ADDC    A,#HIGH USBFS_EP+05H
026B F583              MOV     DPH,A
026D ED                MOV     A,R5
026E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 716
026F EC                MOV     A,R4
0270 75F00B            MOV     B,#0BH
0273 A4                MUL     AB
0274 2400        E     ADD     A,#LOW USBFS_EP+01H
0276 F582              MOV     DPL,A
0278 E4                CLR     A
0279 3400        E     ADDC    A,#HIGH USBFS_EP+01H
027B F583              MOV     DPH,A
027D 7401              MOV     A,#01H
027F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 724
0280 802E              SJMP    ?C0085
0282         ?C0088:
                                           ; SOURCE LINE # 726
                                           ; SOURCE LINE # 728
0282 EE                MOV     A,R6
0283 B40104            CJNE    A,#01H,?C0092
0286 7E05              MOV     R6,#05H
0288 8002              SJMP    ?C0093
028A         ?C0092:
028A 7E09              MOV     R6,#09H
028C         ?C0093:
028C 900000      R     MOV     DPTR,#i
028F E0                MOVX    A,@DPTR
0290 FD                MOV     R5,A
0291 75F00B            MOV     B,#0BH
0294 A4                MUL     AB
0295 2400        E     ADD     A,#LOW USBFS_EP+05H
0297 F582              MOV     DPL,A
0299 E4                CLR     A
029A 3400        E     ADDC    A,#HIGH USBFS_EP+05H
029C F583              MOV     DPH,A
029E EE                MOV     A,R6
029F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 729
02A0 ED                MOV     A,R5
02A1 75F00B            MOV     B,#0BH
02A4 A4                MUL     AB
02A5 2400        E     ADD     A,#LOW USBFS_EP+01H
02A7 F582              MOV     DPL,A
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 46  

02A9 E4                CLR     A
02AA 3400        E     ADDC    A,#HIGH USBFS_EP+01H
02AC F583              MOV     DPH,A
02AE E4                CLR     A
02AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 737
                                           ; SOURCE LINE # 749
                                           ; SOURCE LINE # 750
02B0         ?C0085:
                                           ; SOURCE LINE # 752
02B0 900000      R     MOV     DPTR,#pEP+01H
02B3 E0                MOVX    A,@DPTR
02B4 2407              ADD     A,#07H
02B6 F0                MOVX    @DPTR,A
02B7 900000      R     MOV     DPTR,#pEP
02BA E0                MOVX    A,@DPTR
02BB 3400              ADDC    A,#00H
02BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 753
02BE 0F                INC     R7
02BF 020000      R     LJMP    ?C0082
                                           ; SOURCE LINE # 754
02C2         ?C0081:
02C2 900000      R     MOV     DPTR,#i
02C5 E0                MOVX    A,@DPTR
02C6 04                INC     A
02C7 F0                MOVX    @DPTR,A
02C8 020000      R     LJMP    ?C0079
02CB         ?C0080:
                                           ; SOURCE LINE # 762
02CB 900000      R     MOV     DPTR,#pTmp
02CE E0                MOVX    A,@DPTR
02CF FE                MOV     R6,A
02D0 A3                INC     DPTR
02D1 E0                MOVX    A,@DPTR
02D2 F582              MOV     DPL,A
02D4 8E83              MOV     DPH,R6
02D6 A3                INC     DPTR
02D7 120000      E     LCALL   ?C?PLDCODE
02DA AF01              MOV     R7,AR1
02DC 900000      R     MOV     DPTR,#pEP
02DF EA                MOV     A,R2
02E0 F0                MOVX    @DPTR,A
02E1 A3                INC     DPTR
02E2 EF                MOV     A,R7
02E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 763
02E4 E4                CLR     A
02E5 900000      R     MOV     DPTR,#i
02E8 F0                MOVX    @DPTR,A
02E9         ?C0094:
02E9 900000      R     MOV     DPTR,#ep
02EC E0                MOVX    A,@DPTR
02ED FF                MOV     R7,A
02EE A3                INC     DPTR
02EF E0                MOVX    A,@DPTR
02F0 C3                CLR     C
02F1 9F                SUBB    A,R7
02F2 5038              JNC     ?C0095
                                           ; SOURCE LINE # 764
                                           ; SOURCE LINE # 766
02F4 900000      R     MOV     DPTR,#pEP
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 47  

02F7 E0                MOVX    A,@DPTR
02F8 FE                MOV     R6,A
02F9 A3                INC     DPTR
02FA E0                MOVX    A,@DPTR
02FB F582              MOV     DPL,A
02FD 8E83              MOV     DPH,R6
02FF E4                CLR     A
0300 93                MOVC    A,@A+DPTR
0301 FD                MOV     R5,A
0302 7402              MOV     A,#02H
0304 93                MOVC    A,@A+DPTR
0305 547F              ANL     A,#07FH
0307 75F00B            MOV     B,#0BH
030A A4                MUL     AB
030B 2400        E     ADD     A,#LOW USBFS_EP+0AH
030D F582              MOV     DPL,A
030F E4                CLR     A
0310 3400        E     ADDC    A,#HIGH USBFS_EP+0AH
0312 F583              MOV     DPH,A
0314 ED                MOV     A,R5
0315 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 767
0316 900000      R     MOV     DPTR,#pEP+01H
0319 E0                MOVX    A,@DPTR
031A 2407              ADD     A,#07H
031C F0                MOVX    @DPTR,A
031D 900000      R     MOV     DPTR,#pEP
0320 E0                MOVX    A,@DPTR
0321 3400              ADDC    A,#00H
0323 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 768
0324 900000      R     MOV     DPTR,#i
0327 E0                MOVX    A,@DPTR
0328 04                INC     A
0329 F0                MOVX    @DPTR,A
032A 80BD              SJMP    ?C0094
032C         ?C0095:
                                           ; SOURCE LINE # 771
032C 120000      R     LCALL   USBFS_GetInterfaceClassTablePtr
032F 900000      E     MOV     DPTR,#USBFS_interfaceClass
0332 EE                MOV     A,R6
0333 F0                MOVX    @DPTR,A
0334 A3                INC     DPTR
0335 EF                MOV     A,R7
0336 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 775
0337 E4                CLR     A
0338 900000      R     MOV     DPTR,#buffCount
033B F0                MOVX    @DPTR,A
033C A3                INC     DPTR
033D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 776
033E 900000      R     MOV     DPTR,#ep
0341 04                INC     A
0342 F0                MOVX    @DPTR,A
0343         ?C0097:
0343 900000      R     MOV     DPTR,#ep
0346 E0                MOVX    A,@DPTR
0347 FF                MOV     R7,A
0348 C3                CLR     C
0349 9409              SUBB    A,#09H
034B 503F              JNC     ?C0098
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 48  

                                           ; SOURCE LINE # 777
                                           ; SOURCE LINE # 778
034D 900000      R     MOV     DPTR,#buffCount
0350 E0                MOVX    A,@DPTR
0351 FC                MOV     R4,A
0352 A3                INC     DPTR
0353 E0                MOVX    A,@DPTR
0354 FD                MOV     R5,A
0355 EF                MOV     A,R7
0356 75F00B            MOV     B,#0BH
0359 A4                MUL     AB
035A 2400        E     ADD     A,#LOW USBFS_EP+06H
035C F582              MOV     DPL,A
035E E4                CLR     A
035F 3400        E     ADDC    A,#HIGH USBFS_EP+06H
0361 F583              MOV     DPH,A
0363 EC                MOV     A,R4
0364 F0                MOVX    @DPTR,A
0365 A3                INC     DPTR
0366 ED                MOV     A,R5
0367 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 779
0368 EF                MOV     A,R7
0369 75F00B            MOV     B,#0BH
036C A4                MUL     AB
036D 2400        E     ADD     A,#LOW USBFS_EP+08H
036F F582              MOV     DPL,A
0371 E4                CLR     A
0372 3400        E     ADDC    A,#HIGH USBFS_EP+08H
0374 F583              MOV     DPH,A
0376 E0                MOVX    A,@DPTR
0377 FE                MOV     R6,A
0378 A3                INC     DPTR
0379 E0                MOVX    A,@DPTR
037A FF                MOV     R7,A
037B 900000      R     MOV     DPTR,#buffCount
037E EE                MOV     A,R6
037F 8FF0              MOV     B,R7
0381 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 785
0384 900000      R     MOV     DPTR,#ep
0387 E0                MOVX    A,@DPTR
0388 04                INC     A
0389 F0                MOVX    @DPTR,A
038A 80B7              SJMP    ?C0097
038C         ?C0098:
                                           ; SOURCE LINE # 789
038C 120000      R     LCALL   USBFS_ConfigReg
                                           ; SOURCE LINE # 790
                                           ; SOURCE LINE # 791
038F         ?C0100:
038F 22                RET     
             ; FUNCTION _USBFS_Config (END)

             ; FUNCTION USBFS_ConfigAltChanged (BEGIN)
                                           ; SOURCE LINE # 805
                                           ; SOURCE LINE # 806
                                           ; SOURCE LINE # 817
0000 900000      E     MOV     DPTR,#USBFS_configuration
0003 E0                MOVX    A,@DPTR
0004 D3                SETB    C
0005 9400              SUBB    A,#00H
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 49  

0007 5003              JNC     $ + 5H
0009 020000      R     LJMP    ?C0112
                                           ; SOURCE LINE # 818
                                           ; SOURCE LINE # 820
000C E0                MOVX    A,@DPTR
000D 14                DEC     A
000E FF                MOV     R7,A
000F 120000      R     LCALL   _USBFS_GetConfigTablePtr
;---- Variable 'pTmp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 821
0012 EF                MOV     A,R7
0013 2404              ADD     A,#04H
0015 FF                MOV     R7,A
0016 E4                CLR     A
0017 3E                ADDC    A,R6
0018 FE                MOV     R6,A
                                           ; SOURCE LINE # 822
0019 8F82              MOV     DPL,R7
001B F583              MOV     DPH,A
001D E4                CLR     A
001E 93                MOVC    A,@A+DPTR
001F 900000      R     MOV     DPTR,#ep
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 825
0023 8F82              MOV     DPL,R7
0025 8E83              MOV     DPH,R6
0027 A3                INC     DPTR
0028 120000      E     LCALL   ?C?PLDCODE
;---- Variable 'pEP' assigned to Register 'R4/R5' ----
002B AD01              MOV     R5,AR1
002D AC02              MOV     R4,AR2
                                           ; SOURCE LINE # 831
002F 900000      E     MOV     DPTR,#USBFS_interfaceNumber
0032 E0                MOVX    A,@DPTR
0033 900000      R     MOV     DPTR,#interfaceNum
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 832
;---- Variable 'i' assigned to Register 'R3' ----
0037 E4                CLR     A
0038 FB                MOV     R3,A
0039         ?C0102:
0039 900000      R     MOV     DPTR,#ep
003C E0                MOVX    A,@DPTR
003D FF                MOV     R7,A
003E EB                MOV     A,R3
003F C3                CLR     C
0040 9F                SUBB    A,R7
0041 4003              JC      $ + 5H
0043 020000      R     LJMP    ?C0112
                                           ; SOURCE LINE # 833
                                           ; SOURCE LINE # 835
0046 8D82              MOV     DPL,R5
0048 8C83              MOV     DPH,R4
004A E4                CLR     A
004B 93                MOVC    A,@A+DPTR
004C FF                MOV     R7,A
004D 900000      R     MOV     DPTR,#interfaceNum
0050 E0                MOVX    A,@DPTR
0051 FE                MOV     R6,A
0052 6F                XRL     A,R7
0053 6003              JZ      $ + 5H
0055 020000      R     LJMP    ?C0105
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 50  

0058 8D82              MOV     DPL,R5
005A 8C83              MOV     DPH,R4
005C 04                INC     A
005D 93                MOVC    A,@A+DPTR
005E FF                MOV     R7,A
005F 7400        E     MOV     A,#LOW USBFS_interfaceSetting
0061 2E                ADD     A,R6
0062 F582              MOV     DPL,A
0064 E4                CLR     A
0065 3400        E     ADDC    A,#HIGH USBFS_interfaceSetting
0067 F583              MOV     DPH,A
0069 E0                MOVX    A,@DPTR
006A 6F                XRL     A,R7
006B 6003              JZ      $ + 5H
006D 020000      R     LJMP    ?C0105
                                           ; SOURCE LINE # 837
                                           ; SOURCE LINE # 838
0070 8D82              MOV     DPL,R5
0072 8C83              MOV     DPH,R4
0074 7402              MOV     A,#02H
0076 93                MOVC    A,@A+DPTR
0077 547F              ANL     A,#07FH
;---- Variable 'curEp' assigned to Register 'R2' ----
0079 FA                MOV     R2,A
                                           ; SOURCE LINE # 839
007A 7403              MOV     A,#03H
007C 93                MOVC    A,@A+DPTR
007D 5403              ANL     A,#03H
;---- Variable 'epType' assigned to Register 'R1' ----
007F F9                MOV     R1,A
                                           ; SOURCE LINE # 842
0080 EA                MOV     A,R2
0081 75F00B            MOV     B,#0BH
0084 A4                MUL     AB
0085 2400        E     ADD     A,#LOW USBFS_EP+03H
0087 F582              MOV     DPL,A
0089 E4                CLR     A
008A 3400        E     ADDC    A,#HIGH USBFS_EP+03H
008C F583              MOV     DPH,A
008E E4                CLR     A
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 843
0090 8D82              MOV     DPL,R5
0092 8C83              MOV     DPH,R4
0094 7402              MOV     A,#02H
0096 93                MOVC    A,@A+DPTR
0097 FF                MOV     R7,A
0098 EA                MOV     A,R2
0099 75F00B            MOV     B,#0BH
009C A4                MUL     AB
009D 2400        E     ADD     A,#LOW USBFS_EP+04H
009F F582              MOV     DPL,A
00A1 E4                CLR     A
00A2 3400        E     ADDC    A,#HIGH USBFS_EP+04H
00A4 F583              MOV     DPH,A
00A6 EF                MOV     A,R7
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 844
00A8 8D82              MOV     DPL,R5
00AA 8C83              MOV     DPH,R4
00AC 7403              MOV     A,#03H
00AE 93                MOVC    A,@A+DPTR
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 51  

00AF FF                MOV     R7,A
00B0 EA                MOV     A,R2
00B1 75F00B            MOV     B,#0BH
00B4 A4                MUL     AB
00B5 2400        E     ADD     A,#LOW USBFS_EP
00B7 F582              MOV     DPL,A
00B9 E4                CLR     A
00BA 3400        E     ADDC    A,#HIGH USBFS_EP
00BC F583              MOV     DPH,A
00BE EF                MOV     A,R7
00BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 845
00C0 8D82              MOV     DPL,R5
00C2 8C83              MOV     DPH,R4
00C4 7404              MOV     A,#04H
00C6 93                MOVC    A,@A+DPTR
00C7 FE                MOV     R6,A
00C8 7405              MOV     A,#05H
00CA 93                MOVC    A,@A+DPTR
00CB FF                MOV     R7,A
00CC EA                MOV     A,R2
00CD 75F00B            MOV     B,#0BH
00D0 A4                MUL     AB
00D1 2400        E     ADD     A,#LOW USBFS_EP+08H
00D3 F582              MOV     DPL,A
00D5 E4                CLR     A
00D6 3400        E     ADDC    A,#HIGH USBFS_EP+08H
00D8 F583              MOV     DPH,A
00DA EE                MOV     A,R6
00DB F0                MOVX    @DPTR,A
00DC A3                INC     DPTR
00DD EF                MOV     A,R7
00DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 847
00DF 8D82              MOV     DPL,R5
00E1 8C83              MOV     DPH,R4
00E3 7402              MOV     A,#02H
00E5 93                MOVC    A,@A+DPTR
00E6 5480              ANL     A,#080H
00E8 602D              JZ      ?C0106
                                           ; SOURCE LINE # 848
                                           ; SOURCE LINE # 850
00EA E9                MOV     A,R1
00EB B40104            CJNE    A,#01H,?C0107
00EE 7F07              MOV     R7,#07H
00F0 8002              SJMP    ?C0108
00F2         ?C0107:
00F2 7F0D              MOV     R7,#0DH
00F4         ?C0108:
00F4 EA                MOV     A,R2
00F5 75F00B            MOV     B,#0BH
00F8 A4                MUL     AB
00F9 2400        E     ADD     A,#LOW USBFS_EP+05H
00FB F582              MOV     DPL,A
00FD E4                CLR     A
00FE 3400        E     ADDC    A,#HIGH USBFS_EP+05H
0100 F583              MOV     DPH,A
0102 EF                MOV     A,R7
0103 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 851
0104 EA                MOV     A,R2
0105 75F00B            MOV     B,#0BH
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 52  

0108 A4                MUL     AB
0109 2400        E     ADD     A,#LOW USBFS_EP+01H
010B F582              MOV     DPL,A
010D E4                CLR     A
010E 3400        E     ADDC    A,#HIGH USBFS_EP+01H
0110 F583              MOV     DPH,A
0112 7401              MOV     A,#01H
0114 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 852
0115 802A              SJMP    ?C0109
0117         ?C0106:
                                           ; SOURCE LINE # 854
                                           ; SOURCE LINE # 856
0117 E9                MOV     A,R1
0118 B40104            CJNE    A,#01H,?C0110
011B 7F05              MOV     R7,#05H
011D 8002              SJMP    ?C0111
011F         ?C0110:
011F 7F09              MOV     R7,#09H
0121         ?C0111:
0121 EA                MOV     A,R2
0122 75F00B            MOV     B,#0BH
0125 A4                MUL     AB
0126 2400        E     ADD     A,#LOW USBFS_EP+05H
0128 F582              MOV     DPL,A
012A E4                CLR     A
012B 3400        E     ADDC    A,#HIGH USBFS_EP+05H
012D F583              MOV     DPH,A
012F EF                MOV     A,R7
0130 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 857
0131 EA                MOV     A,R2
0132 75F00B            MOV     B,#0BH
0135 A4                MUL     AB
0136 2400        E     ADD     A,#LOW USBFS_EP+01H
0138 F582              MOV     DPL,A
013A E4                CLR     A
013B 3400        E     ADDC    A,#HIGH USBFS_EP+01H
013D F583              MOV     DPH,A
013F E4                CLR     A
0140 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 858
0141         ?C0109:
                                           ; SOURCE LINE # 861
0141 75F010            MOV     B,#010H
0144 EA                MOV     A,R2
0145 905FFE            MOV     DPTR,#05FFEH
0148 120000      E     LCALL   ?C?OFFXADD
014B 7401              MOV     A,#01H
014D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 907
014E EA                MOV     A,R2
014F 75F00B            MOV     B,#0BH
0152 A4                MUL     AB
0153 2400        E     ADD     A,#LOW USBFS_EP+08H
0155 F582              MOV     DPL,A
0157 E4                CLR     A
0158 3400        E     ADDC    A,#HIGH USBFS_EP+08H
015A F583              MOV     DPH,A
015C E0                MOVX    A,@DPTR
015D FF                MOV     R7,A
015E 75F010            MOV     B,#010H
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 53  

0161 EA                MOV     A,R2
0162 905FFC            MOV     DPTR,#05FFCH
0165 120000      E     LCALL   ?C?OFFXADD
0168 EF                MOV     A,R7
0169 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 908
016A EA                MOV     A,R2
016B 75F00B            MOV     B,#0BH
016E A4                MUL     AB
016F 2400        E     ADD     A,#LOW USBFS_EP+08H
0171 F582              MOV     DPL,A
0173 E4                CLR     A
0174 3400        E     ADDC    A,#HIGH USBFS_EP+08H
0176 F583              MOV     DPH,A
0178 E0                MOVX    A,@DPTR
0179 A3                INC     DPTR
017A E0                MOVX    A,@DPTR
017B FF                MOV     R7,A
017C 75F010            MOV     B,#010H
017F EA                MOV     A,R2
0180 905FFD            MOV     DPTR,#05FFDH
0183 120000      E     LCALL   ?C?OFFXADD
0186 EF                MOV     A,R7
0187 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 914
0188 EA                MOV     A,R2
0189 75F00B            MOV     B,#0BH
018C A4                MUL     AB
018D 2400        E     ADD     A,#LOW USBFS_EP+06H
018F F582              MOV     DPL,A
0191 E4                CLR     A
0192 3400        E     ADDC    A,#HIGH USBFS_EP+06H
0194 F583              MOV     DPH,A
0196 E0                MOVX    A,@DPTR
0197 A3                INC     DPTR
0198 E0                MOVX    A,@DPTR
0199 FF                MOV     R7,A
019A 75F010            MOV     B,#010H
019D EA                MOV     A,R2
019E 906076            MOV     DPTR,#06076H
01A1 120000      E     LCALL   ?C?OFFXADD
01A4 EF                MOV     A,R7
01A5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 915
01A6 EA                MOV     A,R2
01A7 75F00B            MOV     B,#0BH
01AA A4                MUL     AB
01AB 2400        E     ADD     A,#LOW USBFS_EP+06H
01AD F582              MOV     DPL,A
01AF E4                CLR     A
01B0 3400        E     ADDC    A,#HIGH USBFS_EP+06H
01B2 F583              MOV     DPH,A
01B4 E0                MOVX    A,@DPTR
01B5 FF                MOV     R7,A
01B6 75F010            MOV     B,#010H
01B9 EA                MOV     A,R2
01BA 906077            MOV     DPTR,#06077H
01BD 120000      E     LCALL   ?C?OFFXADD
01C0 EF                MOV     A,R7
01C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 916
01C2 EA                MOV     A,R2
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 54  

01C3 75F00B            MOV     B,#0BH
01C6 A4                MUL     AB
01C7 2400        E     ADD     A,#LOW USBFS_EP+06H
01C9 F582              MOV     DPL,A
01CB E4                CLR     A
01CC 3400        E     ADDC    A,#HIGH USBFS_EP+06H
01CE F583              MOV     DPH,A
01D0 E0                MOVX    A,@DPTR
01D1 A3                INC     DPTR
01D2 E0                MOVX    A,@DPTR
01D3 FF                MOV     R7,A
01D4 75F010            MOV     B,#010H
01D7 EA                MOV     A,R2
01D8 906074            MOV     DPTR,#06074H
01DB 120000      E     LCALL   ?C?OFFXADD
01DE EF                MOV     A,R7
01DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 917
01E0 EA                MOV     A,R2
01E1 75F00B            MOV     B,#0BH
01E4 A4                MUL     AB
01E5 2400        E     ADD     A,#LOW USBFS_EP+06H
01E7 F582              MOV     DPL,A
01E9 E4                CLR     A
01EA 3400        E     ADDC    A,#HIGH USBFS_EP+06H
01EC F583              MOV     DPH,A
01EE E0                MOVX    A,@DPTR
01EF FF                MOV     R7,A
01F0 75F010            MOV     B,#010H
01F3 EA                MOV     A,R2
01F4 906075            MOV     DPTR,#06075H
01F7 120000      E     LCALL   ?C?OFFXADD
01FA EF                MOV     A,R7
01FB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 920
01FC         ?C0105:
                                           ; SOURCE LINE # 922
01FC ED                MOV     A,R5
01FD 2407              ADD     A,#07H
01FF FD                MOV     R5,A
0200 E4                CLR     A
0201 3C                ADDC    A,R4
0202 FC                MOV     R4,A
                                           ; SOURCE LINE # 923
0203 0B                INC     R3
0204 020000      R     LJMP    ?C0102
                                           ; SOURCE LINE # 926
                                           ; SOURCE LINE # 927
0207         ?C0112:
0207 22                RET     
             ; FUNCTION USBFS_ConfigAltChanged (END)

             ; FUNCTION _USBFS_GetConfigTablePtr (BEGIN)
                                           ; SOURCE LINE # 942
0000 900000      R     MOV     DPTR,#confIndex
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 944
                                           ; SOURCE LINE # 948
0005 900000      E     MOV     DPTR,#USBFS_device
0008 E0                MOVX    A,@DPTR
0009 25E0              ADD     A,ACC
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 55  

000B 25E0              ADD     A,ACC
000D 2400        E     ADD     A,#LOW USBFS_TABLE+01H
000F F582              MOV     DPL,A
0011 E4                CLR     A
0012 3400        E     ADDC    A,#HIGH USBFS_TABLE+01H
0014 F583              MOV     DPH,A
0016 120000      E     LCALL   ?C?PLDCODE
0019 AE02              MOV     R6,AR2
001B AF01              MOV     R7,AR1
;---- Variable 'pTmp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 955
001D EF                MOV     A,R7
001E 2408              ADD     A,#08H
0020 FF                MOV     R7,A
0021 E4                CLR     A
0022 3E                ADDC    A,R6
0023 FE                MOV     R6,A
                                           ; SOURCE LINE # 957
0024 8F82              MOV     DPL,R7
0026 F583              MOV     DPH,A
0028 E4                CLR     A
0029 93                MOVC    A,@A+DPTR
002A FD                MOV     R5,A
002B 900000      R     MOV     DPTR,#confIndex
002E E0                MOVX    A,@DPTR
002F FC                MOV     R4,A
0030 C3                CLR     C
0031 9D                SUBB    A,R5
0032 4005              JC      ?C0113
                                           ; SOURCE LINE # 958
                                           ; SOURCE LINE # 959
0034 E4                CLR     A
0035 FE                MOV     R6,A
0036 FF                MOV     R7,A
                                           ; SOURCE LINE # 960
0037 8013              SJMP    ?C0114
0039         ?C0113:
                                           ; SOURCE LINE # 962
                                           ; SOURCE LINE # 963
0039 8F82              MOV     DPL,R7
003B 8E83              MOV     DPH,R6
003D 75F004            MOV     B,#04H
0040 EC                MOV     A,R4
0041 120000      E     LCALL   ?C?OFFXADD
0044 A3                INC     DPTR
0045 120000      E     LCALL   ?C?PLDCODE
0048 AE02              MOV     R6,AR2
004A AF01              MOV     R7,AR1
                                           ; SOURCE LINE # 964
004C         ?C0114:
                                           ; SOURCE LINE # 966
                                           ; SOURCE LINE # 967
004C         ?C0115:
004C 22                RET     
             ; FUNCTION _USBFS_GetConfigTablePtr (END)

             ; FUNCTION USBFS_GetDeviceTablePtr (BEGIN)
                                           ; SOURCE LINE # 1011
                                           ; SOURCE LINE # 1013
                                           ; SOURCE LINE # 1015
0000 900000      E     MOV     DPTR,#USBFS_device
0003 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 56  

0004 25E0              ADD     A,ACC
0006 25E0              ADD     A,ACC
0008 2400        E     ADD     A,#LOW USBFS_TABLE+01H
000A F582              MOV     DPL,A
000C E4                CLR     A
000D 3400        E     ADDC    A,#HIGH USBFS_TABLE+01H
000F F583              MOV     DPH,A
0011 120000      E     LCALL   ?C?PLDCODE
0014 AE02              MOV     R6,AR2
0016 AF01              MOV     R7,AR1
                                           ; SOURCE LINE # 1016
0018         ?C0116:
0018 22                RET     
             ; FUNCTION USBFS_GetDeviceTablePtr (END)

             ; FUNCTION USBFS_GetInterfaceClassTablePtr (BEGIN)
                                           ; SOURCE LINE # 1030
                                           ; SOURCE LINE # 1032
                                           ; SOURCE LINE # 1037
0000 900000      E     MOV     DPTR,#USBFS_configuration
0003 E0                MOVX    A,@DPTR
0004 14                DEC     A
0005 FF                MOV     R7,A
0006 120000      R     LCALL   _USBFS_GetConfigTablePtr
;---- Variable 'pTmp' assigned to Register 'R4/R5' ----
0009 AD07              MOV     R5,AR7
000B AC06              MOV     R4,AR6
                                           ; SOURCE LINE # 1038
000D ED                MOV     A,R5
000E 4C                ORL     A,R4
000F 603D              JZ      ?C0117
                                           ; SOURCE LINE # 1039
                                           ; SOURCE LINE # 1040
0011 8D82              MOV     DPL,R5
0013 8C83              MOV     DPH,R4
0015 A3                INC     DPTR
0016 120000      E     LCALL   ?C?PLDCODE
0019 E9                MOV     A,R1
001A 2404              ADD     A,#04H
001C F9                MOV     R1,A
001D E4                CLR     A
001E 3A                ADDC    A,R2
001F FA                MOV     R2,A
0020 120000      E     LCALL   ?C?CLDPTR
;---- Variable 'currentInterfacesNum' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1043
0023 2402              ADD     A,#02H
0025 FF                MOV     R7,A
0026 E4                CLR     A
0027 33                RLC     A
0028 FE                MOV     R6,A
0029 EF                MOV     A,R7
002A 7802              MOV     R0,#02H
002C         ?C0141:
002C C3                CLR     C
002D 33                RLC     A
002E CE                XCH     A,R6
002F 33                RLC     A
0030 CE                XCH     A,R6
0031 D8F9              DJNZ    R0,?C0141
0033 2D                ADD     A,R5
0034 FD                MOV     R5,A
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 57  

0035 EE                MOV     A,R6
0036 3C                ADDC    A,R4
0037 FC                MOV     R4,A
                                           ; SOURCE LINE # 1044
0038 AF05              MOV     R7,AR5
003A 8D82              MOV     DPL,R5
003C F583              MOV     DPH,A
003E A3                INC     DPTR
003F 120000      E     LCALL   ?C?PLDCODE
0042 AF01              MOV     R7,AR1
0044 900000      R     MOV     DPTR,#pInterfaceClass
0047 EA                MOV     A,R2
0048 F0                MOVX    @DPTR,A
0049 A3                INC     DPTR
004A EF                MOV     A,R7
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1045
004C 8007              SJMP    ?C0118
004E         ?C0117:
                                           ; SOURCE LINE # 1047
                                           ; SOURCE LINE # 1048
004E E4                CLR     A
004F 900000      R     MOV     DPTR,#pInterfaceClass
0052 F0                MOVX    @DPTR,A
0053 A3                INC     DPTR
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1049
0055         ?C0118:
                                           ; SOURCE LINE # 1051
0055 900000      R     MOV     DPTR,#pInterfaceClass
0058 E0                MOVX    A,@DPTR
0059 FE                MOV     R6,A
005A A3                INC     DPTR
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
                                           ; SOURCE LINE # 1052
005D         ?C0119:
005D 22                RET     
             ; FUNCTION USBFS_GetInterfaceClassTablePtr (END)

             ; FUNCTION _USBFS_TerminateEP (BEGIN)
                                           ; SOURCE LINE # 1072
;---- Variable 'epNumber' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1073
                                           ; SOURCE LINE # 1075
0000 EF                MOV     A,R7
0001 547F              ANL     A,#07FH
0003 FF                MOV     R7,A
                                           ; SOURCE LINE # 1077
0004 D3                SETB    C
0005 9400              SUBB    A,#00H
0007 4066              JC      ?C0123
0009 EF                MOV     A,R7
000A 9409              SUBB    A,#09H
000C 5061              JNC     ?C0123
                                           ; SOURCE LINE # 1078
                                           ; SOURCE LINE # 1080
000E EF                MOV     A,R7
000F 75F00B            MOV     B,#0BH
0012 A4                MUL     AB
0013 2400        E     ADD     A,#LOW USBFS_EP+02H
0015 F582              MOV     DPL,A
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 58  

0017 E4                CLR     A
0018 3400        E     ADDC    A,#HIGH USBFS_EP+02H
001A F583              MOV     DPH,A
001C E0                MOVX    A,@DPTR
001D 4401              ORL     A,#01H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1083
0020 EF                MOV     A,R7
0021 75F00B            MOV     B,#0BH
0024 A4                MUL     AB
0025 2400        E     ADD     A,#LOW USBFS_EP+03H
0027 F582              MOV     DPL,A
0029 E4                CLR     A
002A 3400        E     ADDC    A,#HIGH USBFS_EP+03H
002C F583              MOV     DPH,A
002E E4                CLR     A
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1084
0030 EF                MOV     A,R7
0031 75F00B            MOV     B,#0BH
0034 A4                MUL     AB
0035 2400        E     ADD     A,#LOW USBFS_EP+01H
0037 F582              MOV     DPL,A
0039 E4                CLR     A
003A 3400        E     ADDC    A,#HIGH USBFS_EP+01H
003C F583              MOV     DPH,A
003E 7402              MOV     A,#02H
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1086
0041 EF                MOV     A,R7
0042 75F00B            MOV     B,#0BH
0045 A4                MUL     AB
0046 2400        E     ADD     A,#LOW USBFS_EP+04H
0048 F582              MOV     DPL,A
004A E4                CLR     A
004B 3400        E     ADDC    A,#HIGH USBFS_EP+04H
004D F583              MOV     DPH,A
004F E0                MOVX    A,@DPTR
0050 5480              ANL     A,#080H
0052 600E              JZ      ?C0121
                                           ; SOURCE LINE # 1087
                                           ; SOURCE LINE # 1089
0054 75F010            MOV     B,#010H
0057 EF                MOV     A,R7
0058 905FFE            MOV     DPTR,#05FFEH
005B 120000      E     LCALL   ?C?OFFXADD
005E 740C              MOV     A,#0CH
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1090
0061 22                RET     
0062         ?C0121:
                                           ; SOURCE LINE # 1092
                                           ; SOURCE LINE # 1094
0062 75F010            MOV     B,#010H
0065 EF                MOV     A,R7
0066 905FFE            MOV     DPTR,#05FFEH
0069 120000      E     LCALL   ?C?OFFXADD
006C 7408              MOV     A,#08H
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1095
                                           ; SOURCE LINE # 1096
                                           ; SOURCE LINE # 1097
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 59  

006F         ?C0123:
006F 22                RET     
             ; FUNCTION _USBFS_TerminateEP (END)

             ; FUNCTION USBFS_SetEndpointHalt (BEGIN)
                                           ; SOURCE LINE # 1113
                                           ; SOURCE LINE # 1114
                                           ; SOURCE LINE # 1115
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#requestHandled
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1119
0005 906004            MOV     DPTR,#06004H
0008 E0                MOVX    A,@DPTR
0009 547F              ANL     A,#07FH
000B FF                MOV     R7,A
;---- Variable 'ep' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1121
000C D3                SETB    C
000D 9400              SUBB    A,#00H
000F 4070              JC      ?C0124
0011 EF                MOV     A,R7
0012 9409              SUBB    A,#09H
0014 506B              JNC     ?C0124
                                           ; SOURCE LINE # 1122
                                           ; SOURCE LINE # 1124
0016 EF                MOV     A,R7
0017 75F00B            MOV     B,#0BH
001A A4                MUL     AB
001B 2400        E     ADD     A,#LOW USBFS_EP+02H
001D F582              MOV     DPL,A
001F E4                CLR     A
0020 3400        E     ADDC    A,#HIGH USBFS_EP+02H
0022 F583              MOV     DPH,A
0024 E0                MOVX    A,@DPTR
0025 4401              ORL     A,#01H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1127
0028 EF                MOV     A,R7
0029 75F00B            MOV     B,#0BH
002C A4                MUL     AB
002D 2400        E     ADD     A,#LOW USBFS_EP+03H
002F F582              MOV     DPL,A
0031 E4                CLR     A
0032 3400        E     ADDC    A,#HIGH USBFS_EP+03H
0034 F583              MOV     DPH,A
0036 E4                CLR     A
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1128
0038 EF                MOV     A,R7
0039 75F00B            MOV     B,#0BH
003C A4                MUL     AB
003D 2400        E     ADD     A,#LOW USBFS_EP+01H
003F F582              MOV     DPL,A
0041 E4                CLR     A
0042 3400        E     ADDC    A,#HIGH USBFS_EP+01H
0044 F583              MOV     DPH,A
0046 E0                MOVX    A,@DPTR
0047 4402              ORL     A,#02H
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1130
004A EF                MOV     A,R7
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 60  

004B 75F00B            MOV     B,#0BH
004E A4                MUL     AB
004F 2400        E     ADD     A,#LOW USBFS_EP+04H
0051 F582              MOV     DPL,A
0053 E4                CLR     A
0054 3400        E     ADDC    A,#HIGH USBFS_EP+04H
0056 F583              MOV     DPH,A
0058 E0                MOVX    A,@DPTR
0059 5480              ANL     A,#080H
005B 600F              JZ      ?C0125
                                           ; SOURCE LINE # 1131
                                           ; SOURCE LINE # 1133
005D 75F010            MOV     B,#010H
0060 EF                MOV     A,R7
0061 905FFE            MOV     DPTR,#05FFEH
0064 120000      E     LCALL   ?C?OFFXADD
0067 748D              MOV     A,#08DH
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1135
006A 800D              SJMP    ?C0126
006C         ?C0125:
                                           ; SOURCE LINE # 1137
                                           ; SOURCE LINE # 1139
006C 75F010            MOV     B,#010H
006F EF                MOV     A,R7
0070 905FFE            MOV     DPTR,#05FFEH
0073 120000      E     LCALL   ?C?OFFXADD
0076 7489              MOV     A,#089H
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1141
0079         ?C0126:
                                           ; SOURCE LINE # 1142
0079 120000      E     LCALL   USBFS_InitNoDataControlTransfer
007C 900000      R     MOV     DPTR,#requestHandled
007F EF                MOV     A,R7
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1143
0081         ?C0124:
                                           ; SOURCE LINE # 1145
0081 900000      R     MOV     DPTR,#requestHandled
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
                                           ; SOURCE LINE # 1146
0086         ?C0127:
0086 22                RET     
             ; FUNCTION USBFS_SetEndpointHalt (END)

             ; FUNCTION USBFS_ClearEndpointHalt (BEGIN)
                                           ; SOURCE LINE # 1162
                                           ; SOURCE LINE # 1163
                                           ; SOURCE LINE # 1164
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#requestHandled
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1168
0005 906004            MOV     DPTR,#06004H
0008 E0                MOVX    A,@DPTR
0009 547F              ANL     A,#07FH
000B FF                MOV     R7,A
;---- Variable 'ep' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1170
000C D3                SETB    C
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 61  

000D 9400              SUBB    A,#00H
000F 5003              JNC     $ + 5H
0011 020000      R     LJMP    ?C0128
0014 EF                MOV     A,R7
0015 9409              SUBB    A,#09H
0017 4003              JC      $ + 5H
0019 020000      R     LJMP    ?C0128
                                           ; SOURCE LINE # 1171
                                           ; SOURCE LINE # 1173
001C EF                MOV     A,R7
001D 75F00B            MOV     B,#0BH
0020 A4                MUL     AB
0021 2400        E     ADD     A,#LOW USBFS_EP+02H
0023 F582              MOV     DPL,A
0025 E4                CLR     A
0026 3400        E     ADDC    A,#HIGH USBFS_EP+02H
0028 F583              MOV     DPH,A
002A E0                MOVX    A,@DPTR
002B 54FE              ANL     A,#0FEH
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1176
002E EF                MOV     A,R7
002F 75F00B            MOV     B,#0BH
0032 A4                MUL     AB
0033 2400        E     ADD     A,#LOW USBFS_EP+03H
0035 F582              MOV     DPL,A
0037 E4                CLR     A
0038 3400        E     ADDC    A,#HIGH USBFS_EP+03H
003A F583              MOV     DPH,A
003C E4                CLR     A
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1179
003E 75F010            MOV     B,#010H
0041 EF                MOV     A,R7
0042 905FFC            MOV     DPTR,#05FFCH
0045 120000      E     LCALL   ?C?OFFXADD
0048 747F              MOV     A,#07FH
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1182
004B EF                MOV     A,R7
004C 75F00B            MOV     B,#0BH
004F A4                MUL     AB
0050 2400        E     ADD     A,#LOW USBFS_EP+01H
0052 F582              MOV     DPL,A
0054 E4                CLR     A
0055 3400        E     ADDC    A,#HIGH USBFS_EP+01H
0057 F583              MOV     DPH,A
0059 E0                MOVX    A,@DPTR
005A 54FD              ANL     A,#0FDH
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1184
005D EF                MOV     A,R7
005E 75F00B            MOV     B,#0BH
0061 A4                MUL     AB
0062 2400        E     ADD     A,#LOW USBFS_EP+04H
0064 F582              MOV     DPL,A
0066 E4                CLR     A
0067 3400        E     ADDC    A,#HIGH USBFS_EP+04H
0069 F583              MOV     DPH,A
006B E0                MOVX    A,@DPTR
006C 5480              ANL     A,#080H
006E 6030              JZ      ?C0129
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 62  

                                           ; SOURCE LINE # 1185
                                           ; SOURCE LINE # 1187
0070 EF                MOV     A,R7
0071 75F00B            MOV     B,#0BH
0074 A4                MUL     AB
0075 2400        E     ADD     A,#LOW USBFS_EP+01H
0077 F582              MOV     DPL,A
0079 E4                CLR     A
007A 3400        E     ADDC    A,#HIGH USBFS_EP+01H
007C F583              MOV     DPH,A
007E E0                MOVX    A,@DPTR
007F B4010F            CJNE    A,#01H,?C0130
                                           ; SOURCE LINE # 1188
                                           ; SOURCE LINE # 1190
0082 75F010            MOV     B,#010H
0085 EF                MOV     A,R7
0086 905FFE            MOV     DPTR,#05FFEH
0089 120000      E     LCALL   ?C?OFFXADD
008C 740C              MOV     A,#0CH
008E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1191
008F 803D              SJMP    ?C0132
0091         ?C0130:
                                           ; SOURCE LINE # 1193
                                           ; SOURCE LINE # 1194
0091 75F010            MOV     B,#010H
0094 EF                MOV     A,R7
0095 905FFE            MOV     DPTR,#05FFEH
0098 120000      E     LCALL   ?C?OFFXADD
009B 740D              MOV     A,#0DH
009D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1195
                                           ; SOURCE LINE # 1196
009E 802E              SJMP    ?C0132
00A0         ?C0129:
                                           ; SOURCE LINE # 1198
                                           ; SOURCE LINE # 1200
00A0 EF                MOV     A,R7
00A1 75F00B            MOV     B,#0BH
00A4 A4                MUL     AB
00A5 2400        E     ADD     A,#LOW USBFS_EP+01H
00A7 F582              MOV     DPL,A
00A9 E4                CLR     A
00AA 3400        E     ADDC    A,#HIGH USBFS_EP+01H
00AC F583              MOV     DPH,A
00AE E0                MOVX    A,@DPTR
00AF B4010F            CJNE    A,#01H,?C0133
                                           ; SOURCE LINE # 1201
                                           ; SOURCE LINE # 1203
00B2 75F010            MOV     B,#010H
00B5 EF                MOV     A,R7
00B6 905FFE            MOV     DPTR,#05FFEH
00B9 120000      E     LCALL   ?C?OFFXADD
00BC 7408              MOV     A,#08H
00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1204
00BF 800D              SJMP    ?C0132
00C1         ?C0133:
                                           ; SOURCE LINE # 1206
                                           ; SOURCE LINE # 1207
00C1 75F010            MOV     B,#010H
00C4 EF                MOV     A,R7
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 63  

00C5 905FFE            MOV     DPTR,#05FFEH
00C8 120000      E     LCALL   ?C?OFFXADD
00CB 7409              MOV     A,#09H
00CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1208
                                           ; SOURCE LINE # 1209
00CE         ?C0132:
                                           ; SOURCE LINE # 1211
00CE 120000      E     LCALL   USBFS_InitNoDataControlTransfer
00D1 900000      R     MOV     DPTR,#requestHandled
00D4 EF                MOV     A,R7
00D5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1212
00D6         ?C0128:
                                           ; SOURCE LINE # 1214
00D6 900000      R     MOV     DPTR,#requestHandled
00D9 E0                MOVX    A,@DPTR
00DA FF                MOV     R7,A
                                           ; SOURCE LINE # 1215
00DB         ?C0135:
00DB 22                RET     
             ; FUNCTION USBFS_ClearEndpointHalt (END)

             ; FUNCTION USBFS_ValidateAlternateSetting (BEGIN)
                                           ; SOURCE LINE # 1231
                                           ; SOURCE LINE # 1232
                                           ; SOURCE LINE # 1233
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#requestHandled
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1240
0005 906004            MOV     DPTR,#06004H
0008 E0                MOVX    A,@DPTR
0009 900000      R     MOV     DPTR,#interfaceNum
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1243
000D 900000      E     MOV     DPTR,#USBFS_configuration
0010 E0                MOVX    A,@DPTR
0011 14                DEC     A
0012 FF                MOV     R7,A
0013 120000      R     LCALL   _USBFS_GetConfigTablePtr
;---- Variable 'pTmp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1244
0016 8F82              MOV     DPL,R7
0018 8E83              MOV     DPH,R6
001A A3                INC     DPTR
001B 120000      E     LCALL   ?C?PLDCODE
001E E9                MOV     A,R1
001F 2404              ADD     A,#04H
0021 F9                MOV     R1,A
0022 E4                CLR     A
0023 3A                ADDC    A,R2
0024 FA                MOV     R2,A
0025 120000      E     LCALL   ?C?CLDPTR
0028 FF                MOV     R7,A
;---- Variable 'curInterfacesNum' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1247
0029 900000      R     MOV     DPTR,#interfaceNum
002C E0                MOVX    A,@DPTR
002D FE                MOV     R6,A
002E D3                SETB    C
002F 9F                SUBB    A,R7
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 64  

0030 4006              JC      ?C0137
0032 EE                MOV     A,R6
0033 D3                SETB    C
0034 9401              SUBB    A,#01H
0036 502F              JNC     ?C0136
0038         ?C0137:
                                           ; SOURCE LINE # 1248
                                           ; SOURCE LINE # 1252
0038 7400        E     MOV     A,#LOW USBFS_interfaceSetting
003A 2E                ADD     A,R6
003B F582              MOV     DPL,A
003D E4                CLR     A
003E 3400        E     ADDC    A,#HIGH USBFS_interfaceSetting
0040 F583              MOV     DPH,A
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 7400        E     MOV     A,#LOW USBFS_interfaceSettingLast
0046 2E                ADD     A,R6
0047 F582              MOV     DPL,A
0049 E4                CLR     A
004A 3400        E     ADDC    A,#HIGH USBFS_interfaceSettingLast
004C F583              MOV     DPH,A
004E EF                MOV     A,R7
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1253
0050 906002            MOV     DPTR,#06002H
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
0055 7400        E     MOV     A,#LOW USBFS_interfaceSetting
0057 2E                ADD     A,R6
0058 F582              MOV     DPL,A
005A E4                CLR     A
005B 3400        E     ADDC    A,#HIGH USBFS_interfaceSetting
005D F583              MOV     DPH,A
005F EF                MOV     A,R7
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1255
0061 900000      R     MOV     DPTR,#requestHandled
0064 7401              MOV     A,#01H
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1256
0067         ?C0136:
                                           ; SOURCE LINE # 1258
0067 900000      R     MOV     DPTR,#requestHandled
006A E0                MOVX    A,@DPTR
006B FF                MOV     R7,A
                                           ; SOURCE LINE # 1259
006C         ?C0138:
006C 22                RET     
             ; FUNCTION USBFS_ValidateAlternateSetting (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3501    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2      25
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
C51 COMPILER V9.51   USBFS_STD                                                             07/29/2016 09:50:44 PAGE 65  

   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
