C51 COMPILER V9.51   CYFITTER_CFG                                                          10/03/2016 19:53:25 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB DF(D
                    -EBUG) WL(2) PR(.\DP8051\DP8051_Keil_951\Debug/cyfitter_cfg.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\cyfitter
                    -_cfg.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: cyfitter_cfg.c
   3          * 
   4          * PSoC Creator  3.3 CP3
   5          *
   6          * Description:
   7          * This file contains device initialization code.
   8          * Except for the user defined sections in CyClockStartupError(), this file should not be modified.
   9          * This file is automatically generated by PSoC Creator.
  10          *
  11          ********************************************************************************
  12          * Copyright (c) 2007-2016 Cypress Semiconductor.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          ********************************************************************************/
  17          
  18          #include <string.h>
  19          #include "cytypes.h"
  20          #include "cydevice_trm.h"
  21          #include "cyfitter.h"
  22          #include "CyLib.h"
  23          #include "cyfitter_cfg.h"
  24          
  25          
  26          #if defined(__C51__) || defined(__CX51__)
  27                  #define CYPACKED
  28                  #define CYPACKED_ATTR
  29                  #define CYALIGNED
  30                  
  31              #define CY_CFG_UNUSED
  32                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  33          
  34          
  35          
  36                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  37                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  38                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  39          #else
                      #error Unsupported toolchain
              #endif
  42          
  43          
  44          
  45          /* Clock startup error codes                                                   */
  46          #define CYCLOCKSTART_NO_ERROR    0u
  47          #define CYCLOCKSTART_XTAL_ERROR  1u
  48          #define CYCLOCKSTART_32KHZ_ERROR 2u
  49          #define CYCLOCKSTART_PLL_ERROR   3u
  50          
  51          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
              /*******************************************************************************
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/03/2016 19:53:25 PAGE 2   

              * Function Name: CyClockStartupError
              ********************************************************************************
              * Summary:
              *  If an error is encountered during clock configuration (crystal startup error,
              *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
              *  the customer, this function will stop in an infinite loop.
              *
              * Parameters:
              *   void
              *
              * Return:
              *   void
              *
              *******************************************************************************/
              CY_CFG_UNUSED
              static void CyClockStartupError(uint8 errorCode);
              CY_CFG_UNUSED
              static void CyClockStartupError(uint8 errorCode)
              {
                  /* To remove the compiler warning if errorCode not used.                */
                  errorCode = errorCode;
              
                  /* `#START CyClockStartupError` */
              
                  /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
                  /* we will end up here to allow the customer to implement something to  */
                  /* deal with the clock condition.                                       */
              
                  /* `#END` */
              
                  /* If nothing else, stop here since the clocks have not started         */
                  /* correctly.                                                           */
                  while(1) {}
              }
              #endif
  88          
  89          
  90          /*******************************************************************************
  91          * Function Name: ClockSetup
  92          ********************************************************************************
  93          *
  94          * Summary:
  95          *  Performs the initialization of all of the clocks in the device based on the
  96          *  settings in the Clock tab of the DWR.  This includes enabling the requested
  97          *  clocks and setting the necessary dividers to produce the desired frequency. 
  98          *
  99          * Parameters:
 100          *  void
 101          *
 102          * Return:
 103          *  void
 104          *
 105          *******************************************************************************/
 106          static void ClockSetup(void);
 107          static void ClockSetup(void)
 108          {
 109   1              uint32 timeout;
 110   1      
 111   1      
 112   1              /* Configure Digital Clocks based on settings from Clock DWR */
 113   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG0_CFG0), 0x5DBFu);
 114   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG0_CFG0 + 0x2u), 0x19u);
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/03/2016 19:53:25 PAGE 3   

 115   1      
 116   1              /* Configure ILO based on settings from Clock DWR */
 117   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x06u);
 118   1      
 119   1              /* Configure XTAL based on settings from Clock DWR */
 120   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_XMHZ_CFG0), 0x3317u);
 121   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_XMHZ_CSR), 0x05u);
 122   1              /* Wait up to 130000us for the XTAL to lock */
 123   1              CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_XMHZ_CSR);
 124   1              for (timeout = 130000u / 10u; (timeout > 0u) && ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_XMHZ_CSR) & 0
             -x80u) != 0u); timeout--)
 125   1              { 
 126   2                      
 127   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 128   2              }
 129   1      
 130   1              /* Configure IMO based on settings from Clock DWR */
 131   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x52u);
 132   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_USB)));
 133   1      
 134   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 135   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0000u);
 136   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 137   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 138   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 139   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 140   1      
 141   1              /* Configure USB Clock based on settings from Clock DWR */
 142   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_UCFG), 0x00u);
 143   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 144   1      
 145   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG2), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG2) | 0x01u
             -)));
 146   1      }
 147          
 148          
 149          /* Analog API Functions */
 150          
 151          
 152          /*******************************************************************************
 153          * Function Name: AnalogSetDefault
 154          ********************************************************************************
 155          *
 156          * Summary:
 157          *  Sets up the analog portions of the chip to default values based on chip
 158          *  configuration options from the project.
 159          *
 160          * Parameters:
 161          *  void
 162          *
 163          * Return:
 164          *  void
 165          *
 166          *******************************************************************************/
 167          static void AnalogSetDefault(void);
 168          static void AnalogSetDefault(void)
 169          {
 170   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 171   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT0), (bg_xover_inl_trim & 0x07u));
 172   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT1), ((bg_xover_inl_trim >> 4) & 0x0Fu));
 173   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/03/2016 19:53:25 PAGE 4   

 174   1      }
 175          
 176          
 177          /*******************************************************************************
 178          * Function Name: SetAnalogRoutingPumps
 179          ********************************************************************************
 180          *
 181          * Summary:
 182          * Enables or disables the analog pumps feeding analog routing switches.
 183          * Intended to be called at startup, based on the Vdda system configuration;
 184          * may be called during operation when the user informs us that the Vdda voltage
 185          * crossed the pump threshold.
 186          *
 187          * Parameters:
 188          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 189          *
 190          * Return:
 191          *  void
 192          *
 193          *******************************************************************************/
 194          void SetAnalogRoutingPumps(uint8 enabled)
 195          {
 196   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 197   1              if (enabled != 0u)
 198   1              {
 199   2                      regValue |= 0x00u;
 200   2              }
 201   1              else
 202   1              {
 203   2                      regValue &= (uint8)~0x00u;
 204   2              }
 205   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 206   1      }
 207          
 208          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 209          
 210          
 211          /*******************************************************************************
 212          * Function Name: cyfitter_cfg
 213          ********************************************************************************
 214          * Summary:
 215          *  This function is called by the start-up code for the selected device. It
 216          *  performs all of the necessary device configuration based on the design
 217          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 218          *  as Clocks and Pins as well as any component configuration that is necessary.
 219          *
 220          * Parameters:  
 221          *   void
 222          *
 223          * Return:
 224          *   void
 225          *
 226          *******************************************************************************/
 227          
 228          void cyfitter_cfg(void)
 229          {
 230   1              /* IOPINS0_8 Address: CYREG_PRT15_DR Size (bytes): 10 */
 231   1              static const uint8 CYCODE BS_IOPINS0_8_VAL[] = {
 232   1                      0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0xC0u, 0x00u};
 233   1      
 234   1              /* IOPINS0_1 Address: CYREG_PRT1_DM0 Size (bytes): 8 */
 235   1              static const uint8 CYCODE BS_IOPINS0_1_VAL[] = {
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/03/2016 19:53:25 PAGE 5   

 236   1                      0x00u, 0x24u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u};
 237   1      
 238   1              /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
 239   1              static const uint8 CYCODE BS_IOPINS0_2_VAL[] = {
 240   1                      0x00u, 0x00u, 0x60u, 0x00u, 0x60u, 0x00u, 0x00u, 0x00u};
 241   1      
 242   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 243   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x05u));
 244   1      
 245   1              {
 246   2                      static const uint8 CYCODE cfg_byte_table[] = {
 247   2                              0x15u,
 248   2                              0x00u, 0x45u, 0x01u, /* Base address 0x004500 */
 249   2                              /* CYDEV_PICU_INTTYPE_PICU15_BASE */
 250   2                              0x7Eu, 0x02u, 
 251   2                              0x00u, 0x4Fu, 0x01u, /* Base address 0x004F00 */
 252   2                              /* CYREG_TMR0_CFG0 */
 253   2                              0x0Au, 0x1Bu, 
 254   2                              0x00u, 0x52u, 0x03u, /* Base address 0x005200 */
 255   2                              /* CYDEV_PRTDSI_PRT1_BASE */
 256   2                              0x0Cu, 0x20u, 
 257   2                              /* CYDEV_PRTDSI_PRT2_BASE */
 258   2                              0x11u, 0x60u, 
 259   2                              /* CYDEV_PRTDSI_PRT15_BASE */
 260   2                              0x7Cu, 0x40u, 
 261   2                              0x00u, 0x64u, 0x01u, /* Base address 0x006400 */
 262   2                              /* CYDEV_UWRK_UWRK8_B0_BASE + 0x00000070u */
 263   2                              0x79u, 0x01u, 
 264   2                              0x01u, 0x07u, 0x01u, /* Base address 0x010700 */
 265   2                              /* CYDEV_UCFG_B0_P3_ROUTE_BASE + 0x00000080u */
 266   2                              0xEAu, 0x08u, 
 267   2                              0x01u, 0x08u, 0x04u, /* Base address 0x010800 */
 268   2                              /* CYDEV_UCFG_B0_P4_U1_BASE */
 269   2                              0xBEu, 0x01u, 0xD8u, 0x04u, 0xDBu, 0x04u, 0xDFu, 0x01u, 
 270   2                              0x01u, 0x09u, 0x07u, /* Base address 0x010900 */
 271   2                              /* CYDEV_UCFG_B0_P4_ROUTE_BASE */
 272   2                              0x1Au, 0x80u, 0x58u, 0x80u, 0x6Au, 0x40u, 
 273   2                              /* CYDEV_UCFG_B0_P4_ROUTE_BASE + 0x00000080u */
 274   2                              0x82u, 0x40u, 0xD6u, 0x08u, 0xE0u, 0x04u, 0xEAu, 0x08u, 
 275   2                              0x01u, 0x17u, 0x01u, /* Base address 0x011700 */
 276   2                              /* CYDEV_UCFG_B1_P3_ROUTE_BASE + 0x00000080u */
 277   2                              0xEEu, 0x03u, 
 278   2                              0x01u, 0x19u, 0x03u, /* Base address 0x011900 */
 279   2                              /* CYDEV_UCFG_B1_P4_ROUTE_BASE + 0x00000080u */
 280   2                              0x9Cu, 0x80u, 0xAAu, 0x40u, 0xEEu, 0x02u, 
 281   2                              0x01u, 0x1Bu, 0x01u, /* Base address 0x011B00 */
 282   2                              /* CYDEV_UCFG_B1_P5_ROUTE_BASE + 0x00000080u */
 283   2                              0xB0u, 0x80u, 
 284   2                              0x01u, 0x40u, 0x04u, /* Base address 0x014000 */
 285   2                              /* CYDEV_UCFG_DSI0_BASE */
 286   2                              0x30u, 0x80u, 0x32u, 0x04u, 0x36u, 0x40u, 
 287   2                              /* CYDEV_UCFG_DSI0_BASE + 0x00000080u */
 288   2                              0xCCu, 0x70u, 
 289   2                              0x01u, 0x41u, 0x03u, /* Base address 0x014100 */
 290   2                              /* CYDEV_UCFG_DSI1_BASE + 0x00000080u */
 291   2                              0x96u, 0x08u, 0xA4u, 0x80u, 0xA6u, 0x40u, 
 292   2                              0x01u, 0x42u, 0x05u, /* Base address 0x014200 */
 293   2                              /* CYDEV_UCFG_DSI2_BASE */
 294   2                              0x12u, 0x80u, 
 295   2                              /* CYDEV_UCFG_DSI2_BASE + 0x00000080u */
 296   2                              0x96u, 0x08u, 0xA4u, 0x80u, 0xA6u, 0x40u, 0xC4u, 0x10u, 
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/03/2016 19:53:25 PAGE 6   

 297   2                              0x01u, 0x43u, 0x06u, /* Base address 0x014300 */
 298   2                              /* CYDEV_UCFG_DSI3_BASE */
 299   2                              0x63u, 0x20u, 
 300   2                              /* CYDEV_UCFG_DSI3_BASE + 0x00000080u */
 301   2                              0xA6u, 0x40u, 0xACu, 0x80u, 0xAEu, 0x84u, 0xD8u, 0x40u, 0xEAu, 0x10u, 
 302   2                              0x01u, 0x45u, 0x02u, /* Base address 0x014500 */
 303   2                              /* CYDEV_UCFG_DSI5_BASE */
 304   2                              0x63u, 0x80u, 
 305   2                              /* CYDEV_UCFG_DSI5_BASE + 0x00000080u */
 306   2                              0xD8u, 0x02u, 
 307   2                              0x01u, 0x46u, 0x01u, /* Base address 0x014600 */
 308   2                              /* CYDEV_UCFG_DSI6_BASE + 0x00000080u */
 309   2                              0xA7u, 0x40u, 
 310   2                              0x01u, 0x47u, 0x07u, /* Base address 0x014700 */
 311   2                              /* CYDEV_UCFG_DSI7_BASE */
 312   2                              0x0Bu, 0x80u, 0x0Fu, 0x40u, 
 313   2                              /* CYDEV_UCFG_DSI7_BASE + 0x00000080u */
 314   2                              0x83u, 0x40u, 0x97u, 0x80u, 0xA7u, 0x40u, 0xAFu, 0x40u, 0xC2u, 0x0Cu, 
 315   2                              0x01u, 0x48u, 0x03u, /* Base address 0x014800 */
 316   2                              /* CYDEV_UCFG_DSI8_BASE + 0x00000080u */
 317   2                              0xABu, 0x10u, 0xAEu, 0x40u, 0xEEu, 0xC0u, 
 318   2                              0x01u, 0x4Cu, 0x03u, /* Base address 0x014C00 */
 319   2                              /* CYDEV_UCFG_DSI12_BASE */
 320   2                              0x0Fu, 0x40u, 
 321   2                              /* CYDEV_UCFG_DSI12_BASE + 0x00000080u */
 322   2                              0xAFu, 0x40u, 0xC2u, 0x04u, 
 323   2                              0x01u, 0x4Du, 0x02u, /* Base address 0x014D00 */
 324   2                              /* CYDEV_UCFG_DSI13_BASE + 0x00000080u */
 325   2                              0xB3u, 0x40u, 0xEAu, 0x04u, 
 326   2                              0x01u, 0x51u, 0x01u, /* Base address 0x015100 */
 327   2                              /* CYREG_IDMUX_IRQ_CTL0 */
 328   2                              0x00u, 0x3Au, 
 329   2                      };
 330   2                      /* BYTES: 184 */
 331   2      
 332   2      
 333   2                      CYPACKED typedef struct {
 334   2                              void CYFAR *address;
 335   2                              uint16 size;
 336   2                      } CYPACKED_ATTR cfg_memset_t;
 337   2      
 338   2                      static const cfg_memset_t CYCODE cfg_memset_list [] = {
 339   2                              /* address, size */
 340   2                              {(void CYFAR *)(CYREG_TMR0_CFG0), 12u},
 341   2                              {(void CYFAR *)(CYREG_PRT0_DR), 16u},
 342   2                              {(void CYFAR *)(CYREG_PRT3_DR), 64u},
 343   2                              {(void CYFAR *)(CYREG_PRT12_DR), 16u},
 344   2                              {(void CYFAR *)(CYDEV_UCFG_B0_P0_U0_BASE), 4096u},
 345   2                              {(void CYFAR *)(CYDEV_UCFG_B1_P2_U0_BASE), 2048u},
 346   2                              {(void CYFAR *)(CYDEV_UCFG_DSI0_BASE), 2560u},
 347   2                              {(void CYFAR *)(CYDEV_UCFG_DSI12_BASE), 512u},
 348   2                              {(void CYFAR *)(CYREG_BCTL0_MDCLK_EN), 32u},
 349   2                      };
 350   2      
 351   2                      uint8 CYDATA i;
 352   2      
 353   2                      /* Zero out critical memory blocks before beginning configuration */
 354   2                      for (i = 0u; i < (sizeof(cfg_memset_list)/sizeof(cfg_memset_list[0])); i++)
 355   2                      {
 356   3                              const cfg_memset_t CYCODE * CYDATA ms = &cfg_memset_list[i];
 357   3                              CYMEMZERO(ms->address, ms->size);
 358   3                      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/03/2016 19:53:25 PAGE 7   

 359   2      
 360   2                      cfg_write_bytes_code(cfg_byte_table);
 361   2      
 362   2                      /* Enable digital routing */
 363   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 364   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 365   2      
 366   2                      /* Enable UDB array */
 367   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
 368   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 369   2              }
 370   1      
 371   1      
 372   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 373   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_PRT15_DR), (const void CYCODE *)(BS_IOPINS0_8_VAL), 10u);
 374   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_PRT1_DM0), (const void CYCODE *)(BS_IOPINS0_1_VAL), 8u);
 375   1              CYCONFIGCPYCODE((void CYFAR *)(CYREG_PRT2_DM0), (const void CYCODE *)(BS_IOPINS0_2_VAL), 8u);
 376   1              CY_SET_REG8((void CYXDATA *)(CYREG_INTC_CSR_EN), 0x01u);
 377   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 378   1              CY_SET_REG8((void CYXDATA *)CYREG_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYREG_BOOST_CR2) | 0x08u));
 379   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 380   1              {
 381   2                      CY_SET_REG8((void CYXDATA *)CYREG_PWRSYS_WAKE_TR2, 0x3Au);
 382   2              }
 383   1      
 384   1      
 385   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 386   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 387   1              /* Setup clocks based on selections from Clock DWR */
 388   1              ClockSetup();
 389   1              /* Set Flash Cycles based on newly configured 24.00MHz Bus Clock. */
 390   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xB1u : 0x80u));
 391   1      
 392   1              /* Perform basic analog initialization to defaults */
 393   1              AnalogSetDefault();
 394   1      
 395   1              /* Configure alternate active mode */
 396   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 397   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
 398   1      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/03/2016 19:53:25 PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 113
0000 7B00              MOV     R3,#00H
0002 7A40              MOV     R2,#040H
0004 7980              MOV     R1,#080H
0006 7DBF              MOV     R5,#0BFH
0008 7C5D              MOV     R4,#05DH
000A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 114
000D 904082            MOV     DPTR,#04082H
0010 7419              MOV     A,#019H
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 117
0013 904300            MOV     DPTR,#04300H
0016 7406              MOV     A,#06H
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 120
0019 7B00              MOV     R3,#00H
001B 7A42              MOV     R2,#042H
001D 7912              MOV     R1,#012H
001F 7D17              MOV     R5,#017H
0021 7C33              MOV     R4,#033H
0023 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 121
0026 904210            MOV     DPTR,#04210H
0029 7405              MOV     A,#05H
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 123
002C 904210            MOV     DPTR,#04210H
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
                                           ; SOURCE LINE # 124
0031 7FC8              MOV     R7,#0C8H
0033 7E32              MOV     R6,#032H
0035 7D00              MOV     R5,#00H
0037 7C00              MOV     R4,#00H
0039 900000      R     MOV     DPTR,#timeout
003C 120000      E     LCALL   ?C?LSTXDATA
003F         ?C0001:
003F 900000      R     MOV     DPTR,#timeout
0042 120000      E     LCALL   ?C?LLDXDATA
0045 D3                SETB    C
0046 EF                MOV     A,R7
0047 9400              SUBB    A,#00H
0049 EE                MOV     A,R6
004A 9400              SUBB    A,#00H
004C 4033              JC      ?C0002
004E 904210            MOV     DPTR,#04210H
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 EF                MOV     A,R7
0054 5480              ANL     A,#080H
0056 FF                MOV     R7,A
0057 7E00              MOV     R6,#00H
0059 EF                MOV     A,R7
005A 4E                ORL     A,R6
005B 6024              JZ      ?C0002
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/03/2016 19:53:25 PAGE 9   

                                           ; SOURCE LINE # 125
                                           ; SOURCE LINE # 127
005D 7FE0              MOV     R7,#0E0H
005F 7E01              MOV     R6,#01H
0061 7D00              MOV     R5,#00H
0063 7C00              MOV     R4,#00H
0065 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 128
0068 900000      R     MOV     DPTR,#timeout
006B 120000      E     LCALL   ?C?LLDXDATA
006E 7BFF              MOV     R3,#0FFH
0070 7AFF              MOV     R2,#0FFH
0072 79FF              MOV     R1,#0FFH
0074 78FF              MOV     R0,#0FFH
0076 120000      E     LCALL   ?C?LADD
0079 900000      R     MOV     DPTR,#timeout
007C 120000      E     LCALL   ?C?LSTXDATA
007F 80BE              SJMP    ?C0001
0081         ?C0002:
                                           ; SOURCE LINE # 131
0081 904200            MOV     DPTR,#04200H
0084 7452              MOV     A,#052H
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 132
0087 7B0C              MOV     R3,#0CH
0089 7A01              MOV     R2,#01H
008B 790F              MOV     R1,#0FH
008D 120000      E     LCALL   _cyread8
0090 9046A1            MOV     DPTR,#046A1H
0093 EF                MOV     A,R7
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 135
0095 7B00              MOV     R3,#00H
0097 7A40              MOV     R2,#040H
0099 7904              MOV     R1,#04H
009B 7D00              MOV     R5,#00H
009D 7C00              MOV     R4,#00H
009F 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 136
00A2 904004            MOV     DPTR,#04004H
00A5 7407              MOV     A,#07H
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 137
00A8 904006            MOV     DPTR,#04006H
00AB E4                CLR     A
00AC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 138
00AD 904008            MOV     DPTR,#04008H
00B0 7448              MOV     A,#048H
00B2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 139
00B3 904004            MOV     DPTR,#04004H
00B6 E4                CLR     A
00B7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 142
00B8 904009            MOV     DPTR,#04009H
00BB E4                CLR     A
00BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 143
00BD 904001            MOV     DPTR,#04001H
00C0 7402              MOV     A,#02H
00C2 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/03/2016 19:53:25 PAGE 10  

                                           ; SOURCE LINE # 145
00C3 9043A2            MOV     DPTR,#043A2H
00C6 E0                MOVX    A,@DPTR
00C7 FF                MOV     R7,A
00C8 EF                MOV     A,R7
00C9 4401              ORL     A,#01H
00CB FF                MOV     R7,A
00CC 9043A2            MOV     DPTR,#043A2H
00CF EF                MOV     A,R7
00D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 146
00D1 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 170
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
0009 900000      R     MOV     DPTR,#bg_xover_inl_trim
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
000E 900000      R     MOV     DPTR,#bg_xover_inl_trim
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 5407              ANL     A,#07H
0016 FF                MOV     R7,A
0017 90586E            MOV     DPTR,#0586EH
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
001C 900000      R     MOV     DPTR,#bg_xover_inl_trim
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 C4                SWAP    A
0023 540F              ANL     A,#0FH
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 540F              ANL     A,#0FH
0029 FF                MOV     R7,A
002A 90586F            MOV     DPTR,#0586FH
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 173
002F 905876            MOV     DPTR,#05876H
0032 7444              MOV     A,#044H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 174
0035 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 194
0000 900000      R     MOV     DPTR,#enabled
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/03/2016 19:53:25 PAGE 11  

                                           ; SOURCE LINE # 195
                                           ; SOURCE LINE # 196
0005 905876            MOV     DPTR,#05876H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#regValue
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 197
000F 900000      R     MOV     DPTR,#enabled
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 6010              JZ      ?C0006
                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 199
0017 900000      R     MOV     DPTR,#regValue
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 4400              ORL     A,#00H
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#regValue
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 200
0025 800E              SJMP    ?C0007
0027         ?C0006:
                                           ; SOURCE LINE # 202
                                           ; SOURCE LINE # 203
0027 900000      R     MOV     DPTR,#regValue
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 54FF              ANL     A,#0FFH
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#regValue
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
0035         ?C0007:
                                           ; SOURCE LINE # 205
0035 900000      R     MOV     DPTR,#regValue
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 905876            MOV     DPTR,#05876H
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 206
003F 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 228
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 243
0000 7B00              MOV     R3,#00H
0002 7A46              MOV     R2,#046H
0004 79E8              MOV     R1,#0E8H
0006 120000      E     LCALL   _cyread8
0009 EF                MOV     A,R7
000A 4405              ORL     A,#05H
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/03/2016 19:53:25 PAGE 12  

000C FD                MOV     R5,A
000D 7B00              MOV     R3,#00H
000F 7A46              MOV     R2,#046H
0011 79E8              MOV     R1,#0E8H
0013 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 354
0016 750000      R     MOV     i,#00H
0019         ?C0009:
0019 E500        R     MOV     A,i
001B C3                CLR     C
001C 9409              SUBB    A,#09H
001E 503A              JNC     ?C0010
                                           ; SOURCE LINE # 355
                                           ; SOURCE LINE # 356
0020 AF00        R     MOV     R7,i
0022 EF                MOV     A,R7
0023 75F005            MOV     B,#05H
0026 A4                MUL     AB
0027 2400        R     ADD     A,#LOW cfg_memset_list
0029 F582              MOV     DPL,A
002B E4                CLR     A
002C 3400        R     ADDC    A,#HIGH cfg_memset_list
002E F583              MOV     DPH,A
0030 AF82              MOV     R7,DPL
0032 AE83              MOV     R6,DPH
0034 8E00        R     MOV     ms,R6
0036 8F00        R     MOV     ms+01H,R7
                                           ; SOURCE LINE # 357
0038 AE00        R     MOV     R6,ms
003A AF00        R     MOV     R7,ms+01H
003C 8F82              MOV     DPL,R7
003E 8E83              MOV     DPH,R6
0040 120000      E     LCALL   ?C?PLDCODE
0043 AE00        R     MOV     R6,ms
0045 AF00        R     MOV     R7,ms+01H
0047 8F82              MOV     DPL,R7
0049 8E83              MOV     DPH,R6
004B 7403              MOV     A,#03H
004D 93                MOVC    A,@A+DPTR
004E FC                MOV     R4,A
004F 7404              MOV     A,#04H
0051 93                MOVC    A,@A+DPTR
0052 FD                MOV     R5,A
0053 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 358
0056 0500        R     INC     i
0058 80BF              SJMP    ?C0009
005A         ?C0010:
                                           ; SOURCE LINE # 360
005A 7E00        R     MOV     R6,#HIGH cfg_byte_table
005C 7F00        R     MOV     R7,#LOW cfg_byte_table
005E 120000      E     LCALL   _cfg_write_bytes_code
                                           ; SOURCE LINE # 363
0061 7B01              MOV     R3,#01H
0063 7A50              MOV     R2,#050H
0065 7903              MOV     R1,#03H
0067 120000      E     LCALL   _cyread8
006A EF                MOV     A,R7
006B 4402              ORL     A,#02H
006D FD                MOV     R5,A
006E 7B01              MOV     R3,#01H
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/03/2016 19:53:25 PAGE 13  

0070 7A50              MOV     R2,#050H
0072 7903              MOV     R1,#03H
0074 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 364
0077 7B01              MOV     R3,#01H
0079 7A50              MOV     R2,#050H
007B 7913              MOV     R1,#013H
007D 120000      E     LCALL   _cyread8
0080 EF                MOV     A,R7
0081 4402              ORL     A,#02H
0083 FD                MOV     R5,A
0084 7B01              MOV     R3,#01H
0086 7A50              MOV     R2,#050H
0088 7913              MOV     R1,#013H
008A 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 367
008D 9043A0            MOV     DPTR,#043A0H
0090 E0                MOVX    A,@DPTR
0091 FF                MOV     R7,A
0092 EF                MOV     A,R7
0093 4440              ORL     A,#040H
0095 FF                MOV     R7,A
0096 9043A0            MOV     DPTR,#043A0H
0099 EF                MOV     A,R7
009A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 368
009B 9043C2            MOV     DPTR,#043C2H
009E E0                MOVX    A,@DPTR
009F FF                MOV     R7,A
00A0 EF                MOV     A,R7
00A1 4410              ORL     A,#010H
00A3 FF                MOV     R7,A
00A4 9043C2            MOV     DPTR,#043C2H
00A7 EF                MOV     A,R7
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 369
                                           ; SOURCE LINE # 373
00A9 7C00        R     MOV     R4,#HIGH BS_IOPINS0_8_VAL
00AB 7D00        R     MOV     R5,#LOW BS_IOPINS0_8_VAL
00AD 7B00              MOV     R3,#00H
00AF 7A51              MOV     R2,#051H
00B1 79F0              MOV     R1,#0F0H
00B3 7F0A              MOV     R7,#0AH
00B5 7E00              MOV     R6,#00H
00B7 120000      E     LCALL   _cyconfigcpycode
                                           ; SOURCE LINE # 374
00BA 7C00        R     MOV     R4,#HIGH BS_IOPINS0_1_VAL
00BC 7D00        R     MOV     R5,#LOW BS_IOPINS0_1_VAL
00BE 7B00              MOV     R3,#00H
00C0 7A51              MOV     R2,#051H
00C2 7912              MOV     R1,#012H
00C4 7F08              MOV     R7,#08H
00C6 7E00              MOV     R6,#00H
00C8 120000      E     LCALL   _cyconfigcpycode
                                           ; SOURCE LINE # 375
00CB 7C00        R     MOV     R4,#HIGH BS_IOPINS0_2_VAL
00CD 7D00        R     MOV     R5,#LOW BS_IOPINS0_2_VAL
00CF 7B00              MOV     R3,#00H
00D1 7A51              MOV     R2,#051H
00D3 7922              MOV     R1,#022H
00D5 7F08              MOV     R7,#08H
00D7 7E00              MOV     R6,#00H
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/03/2016 19:53:25 PAGE 14  

00D9 120000      E     LCALL   _cyconfigcpycode
                                           ; SOURCE LINE # 376
00DC 9044F4            MOV     DPTR,#044F4H
00DF 7401              MOV     A,#01H
00E1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 378
00E2 904322            MOV     DPTR,#04322H
00E5 E0                MOVX    A,@DPTR
00E6 FF                MOV     R7,A
00E7 EF                MOV     A,R7
00E8 4408              ORL     A,#08H
00EA FF                MOV     R7,A
00EB 904322            MOV     DPTR,#04322H
00EE EF                MOV     A,R7
00EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 379
00F0 9046EC            MOV     DPTR,#046ECH
00F3 E0                MOVX    A,@DPTR
00F4 FF                MOV     R7,A
00F5 EF                MOV     A,R7
00F6 C3                CLR     C
00F7 9405              SUBB    A,#05H
00F9 5006              JNC     ?C0012
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 381
00FB 904689            MOV     DPTR,#04689H
00FE 743A              MOV     A,#03AH
0100 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 382
0101         ?C0012:
                                           ; SOURCE LINE # 386
0101 904800            MOV     DPTR,#04800H
0104 74F1              MOV     A,#0F1H
0106 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 388
0107 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 390
010A 904800            MOV     DPTR,#04800H
010D 74B1              MOV     A,#0B1H
010F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 393
0110 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 396
0113 7B00              MOV     R3,#00H
0115 7A43              MOV     R2,#043H
0117 79A0              MOV     R1,#0A0H
0119 C003              PUSH    AR3
011B C002              PUSH    AR2
011D C001              PUSH    AR1
011F 7B00              MOV     R3,#00H
0121 7A43              MOV     R2,#043H
0123 79B0              MOV     R1,#0B0H
0125 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0128 120000      E     LCALL   ?C?PSTXDATA
012B D001              POP     AR1
012D D002              POP     AR2
012F D003              POP     AR3
0131 7F0E              MOV     R7,#0EH
0133 7E00              MOV     R6,#00H
0135 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 397
0138 9043B0            MOV     DPTR,#043B0H
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/03/2016 19:53:25 PAGE 15  

013B E0                MOVX    A,@DPTR
013C FF                MOV     R7,A
013D EF                MOV     A,R7
013E 54FD              ANL     A,#0FDH
0140 FF                MOV     R7,A
0141 EF                MOV     A,R7
0142 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 398
0143 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    652    ----
   CONSTANT SIZE    =    255    ----
   XDATA SIZE       =   ----       7
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
