C51 COMPILER V9.51   BOOTLOADABLE                                                          10/22/2015 22:07:43 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE BOOTLOADABLE
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\Bootloadable.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\Bootloadable.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2
                    -) PR(.\DP8051\DP8051_Keil_951\Debug/Bootloadable.lst) CD OT(5,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\Bootloadable.obj)

line level    source

   1          /****************************************************************************//**
   2          * \file Bootloadable.c
   3          * \version 1.40
   4          *
   5          * \brief
   6          *   Provides an API for the Bootloadable application.
   7          *
   8          ********************************************************************************
   9          * \copyright
  10          * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  11          * You may use this file only in accordance with the license, terms, conditions,
  12          * disclaimers, and limitations in the end user license agreement accompanying
  13          * the software package with which this file was provided.
  14          *******************************************************************************/
  15          
  16          #include "Bootloadable.h"
  17          
  18          /**
  19           \defgroup functions_group Functions
  20           @{
  21          */
  22          
  23          #if (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)
              static cystatus Bootloadable_WriteFlashByte(const uint32 address, const uint8 inputValue) CYLARGE \
                                             ;
              #endif /*(CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)*/
  27          
  28          /*******************************************************************************
  29          * Function Name: Bootloadable_Load
  30          ****************************************************************************//**
  31          *
  32          * \brief
  33          *  Schedules the Bootloader/Launcher to be launched and then performs
  34          *  a software reset to launch it
  35          *
  36          * \return
  37          *  This method will never return. It will load a new application and reset
  38          *  the device.
  39          *
  40          *******************************************************************************/
  41          void Bootloadable_Load(void) 
  42          {
  43   1          /* Schedule Bootloader to start after reset */
  44   1          Bootloadable_SET_RUN_TYPE(Bootloadable_SCHEDULE_BTLDR);
  45   1      
  46   1          CySoftwareReset();
  47   1      }
  48          
  49          #if (CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)
              /*******************************************************************************
              * Function Name: Bootloadable_GetActiveApplication
              ****************************************************************************//**
              *
C51 COMPILER V9.51   BOOTLOADABLE                                                          10/22/2015 22:07:43 PAGE 2   

              * \brief
              *   Gets the application which will be loaded after a next reset event.
              *   NOTE Intended for the combination project type ONLY!
              *
              * \return 
              *  A number of the current active application set in the metadata section.
              *  \n  0 - app#0 is set as active.
              *  \n  1 - app#1 is set as active.
              *
              * \note If neither of the applications is set active, then the API returns 0x02.
              *
              *******************************************************************************/
              uint8 Bootloadable_GetActiveApplication(void) CYSMALL \
                                        
              {   
                  uint8 result = Bootloadable_MD_BTLDB_ACTIVE_NONE;
                  
                  if (0u != Bootloadable_GET_CODE_DATA( \
                            Bootloadable_MD_BTLDB_ACTIVE_OFFSET(Bootloadable_MD_BTLDB_ACTIVE_0))) 
                  {
                      result = Bootloadable_MD_BTLDB_ACTIVE_0;
                  }
                  else if (0u != Bootloadable_GET_CODE_DATA( \
                                 Bootloadable_MD_BTLDB_ACTIVE_OFFSET(Bootloadable_MD_BTLDB_ACTIVE_1)))
                  {
                      result = Bootloadable_MD_BTLDB_ACTIVE_1;    
                  }
                  else
                  {
                      /*Do nothing, result is none*/
                  }
                  
                  return (result);
              }
              
              /*******************************************************************************
              * Function Name: Bootloadable_SetActiveApplication
              ****************************************************************************//**
              *
              * \brief 
              *   Sets the application which will be loaded after a next reset event.          
              *   
              * \details
              * Theory: 
              *   This API sets in the Flash (metadata section) the given active application 
              *   number.
              *          
              *   NOTE The active application number is not set directly, but the boolean 
              *   mark instead means that the application is active or not for the relative 
              *   metadata. Both metadata sections are updated. For example, if the second 
              *   application is to be set active, then in the metadata section for the first 
              *   application there will be a "0" written, which means that it is not active, and 
              *   for the second metadata section there will be a "1" written, which means that it is 
              *   active. 
              *
              *   NOTE Intended for the combination project type ONLY!
              *
              * \param appId  
              *   The active application number to be written to flash (metadata section) 
              *   NOTE Possible values are:
              *   0 - for the first application
              *   1 - for the second application.
C51 COMPILER V9.51   BOOTLOADABLE                                                          10/22/2015 22:07:43 PAGE 3   

              *   Any other number is considered invalid. 
              *
              * \return 
              *   A status of writing to flash operation.
              *   \n CYRET_SUCCESS - Returned if appId was successfully changed. 
              *   \n CYRET_BAD_PARAM - Returned if the parameter appID passed to the function has the 
              *                       same value as the active application ID. 
              *   \note - The other non-zero value is considered as a failure during writing to flash.  
              *
              *   \note - This API does not update Bootloader_activeApp variable.
              *
              *******************************************************************************/
              cystatus Bootloadable_SetActiveApplication(uint8 appId) CYSMALL \
                              
              {
                  cystatus result = CYRET_SUCCESS;
              
                  uint8 CYDATA idx;
                  
                  /* If invalid application number */
                  if (appId > Bootloadable_MD_BTLDB_ACTIVE_1)
                  {
                      result = CYRET_BAD_PARAM;
                  }
                  else
                  {
                      /* If appID has same value as active application ID */
                      if (1u == Bootloadable_GET_CODE_DATA(Bootloadable_MD_BTLDB_ACTIVE_OFFSET(appId)))
                      {
                          result = CYRET_BAD_PARAM;
                      }
                      else
                      {
                          /* Updating metadata section */
                          for(idx = 0u; idx < Bootloadable_MAX_NUM_OF_BTLDB; idx++)
                          {
                              result |= Bootloadable_WriteFlashByte((uint32) Bootloadable_MD_BTLDB_ACTIVE_OFFSET(idx), \
                                                                                                          (uint8)(idx ==
             - appId));
                          }
                      }
                  }
                  
                  return (result);
              }
              
              /*******************************************************************************
              * Function Name: Bootloadable_WriteFlashByte
              ****************************************************************************//**
              *
              * \brief 
              *   This API writes to flash the specified data.
              *
              * \param address 
              *   The address in flash.
              *
              * \param inputValue 
              *   One-byte data.
              *
              * \return 
              *   A status of the writing to flash procedure.
              *
C51 COMPILER V9.51   BOOTLOADABLE                                                          10/22/2015 22:07:43 PAGE 4   

              *******************************************************************************/
              static cystatus Bootloadable_WriteFlashByte(const uint32 address, const uint8 inputValue) CYLARGE \
                                             
              {
                  cystatus result = CYRET_SUCCESS;
                  uint32 flsAddr = address - CYDEV_FLASH_BASE;
                  uint8  rowData[CYDEV_FLS_ROW_SIZE];
              
                  #if !(CY_PSOC4)
                      uint8 arrayId = ( uint8 )(flsAddr / CYDEV_FLS_SECTOR_SIZE);
                  #endif  /* !(CY_PSOC4) */
              
                  #if (CY_PSOC4)
                      uint16 rowNum = ( uint16 )(flsAddr / CYDEV_FLS_ROW_SIZE);
                  #else
                      uint16 rowNum = ( uint16 )((flsAddr % CYDEV_FLS_SECTOR_SIZE) / CYDEV_FLS_ROW_SIZE);
                  #endif  /* (CY_PSOC4) */
              
                  uint32 baseAddr = address - (address % CYDEV_FLS_ROW_SIZE);
                  uint16 idx;
              
                  for(idx = 0u; idx < CYDEV_FLS_ROW_SIZE; idx++)
                  {
                      rowData[idx] = (uint8)Bootloadable_GET_CODE_DATA(baseAddr + idx);
                  }
              
                  rowData[address % CYDEV_FLS_ROW_SIZE] = inputValue;
              
                  #if(CY_PSOC4)
                      result = CySysFlashWriteRow((uint32) rowNum, rowData);
                  #else
                      result = CyWriteRowData(arrayId, rowNum, rowData);
                  #endif  /* (CY_PSOC4) */
              
                  #if(CY_PSOC5)
                      /***************************************************************************
                      * When writing to flash, data in the instruction cache can become stale.
                      * Therefore, the cache data does not correlate to the data just written to
                      * flash. A call to CyFlushCache() is required to invalidate the data in the
                      * cache and force fresh information to be loaded from flash.
                      ***************************************************************************/
                      CyFlushCache();
                  #endif /* (CY_PSOC5) */
                  return (result);
              }
              #endif /*(CYDEV_PROJ_TYPE == CYDEV_PROJ_TYPE_LOADABLEANDBOOTLOADER)*/
 223          /** @} functions_group */
 224          
 225          /*******************************************************************************
 226          * The following code is OBSOLETE and must not be used.
 227          *******************************************************************************/
 228          void Bootloadable_SetFlashByte(uint32 address, uint8 runType) 
 229          {
 230   1          uint32 flsAddr = address - CYDEV_FLASH_BASE;
 231   1          uint8  rowData[CYDEV_FLS_ROW_SIZE];
 232   1      
 233   1          #if !(CY_PSOC4)
 234   1              uint8 arrayId = ( uint8 )(flsAddr / CYDEV_FLS_SECTOR_SIZE);
 235   1          #endif  /* !(CY_PSOC4) */
 236   1      
 237   1          #if (CY_PSOC4)
                      uint16 rowNum = ( uint16 )(flsAddr / CYDEV_FLS_ROW_SIZE);
C51 COMPILER V9.51   BOOTLOADABLE                                                          10/22/2015 22:07:43 PAGE 5   

                  #else
 240   1              uint16 rowNum = ( uint16 )((flsAddr % CYDEV_FLS_SECTOR_SIZE) / CYDEV_FLS_ROW_SIZE);
 241   1          #endif  /* (CY_PSOC4) */
 242   1      
 243   1          uint32 baseAddr = address - (address % CYDEV_FLS_ROW_SIZE);
 244   1          uint16 idx;
 245   1      
 246   1      
 247   1          for (idx = 0u; idx < CYDEV_FLS_ROW_SIZE; idx++)
 248   1          {
 249   2              rowData[idx] = Bootloadable_GET_CODE_DATA(baseAddr + idx);
 250   2          }
 251   1          rowData[address % CYDEV_FLS_ROW_SIZE] = runType;
 252   1      
 253   1          #if(CY_PSOC4)
                      (void) CySysFlashWriteRow((uint32) rowNum, rowData);
                  #else
 256   1              (void) CyWriteRowData(arrayId, rowNum, rowData);
 257   1          #endif  /* (CY_PSOC4) */
 258   1      
 259   1          #if(CY_PSOC5)
                      /***************************************************************************
                      * When writing to flash, data in the instruction cache can become obsolete.
                      * Therefore, the cache data does not correlate to the data just written to
                      * flash. A call to CyFlushCache() is required to invalidate the data in the
                      * cache and force fresh information to be loaded from flash.
                      ***************************************************************************/
                      CyFlushCache();
                  #endif /* (CY_PSOC5) */
 268   1      }
 269          
 270          /* [] END OF FILE */
C51 COMPILER V9.51   BOOTLOADABLE                                                          10/22/2015 22:07:43 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Bootloadable_Load (BEGIN)
                                           ; SOURCE LINE # 41
                                           ; SOURCE LINE # 42
                                           ; SOURCE LINE # 44
0000 9046FA            MOV     DPTR,#046FAH
0003 7440              MOV     A,#040H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 46
0006 120000      E     LCALL   CySoftwareReset
                                           ; SOURCE LINE # 47
0009 22                RET     
             ; FUNCTION Bootloadable_Load (END)

             ; FUNCTION _Bootloadable_SetFlashByte (BEGIN)
                                           ; SOURCE LINE # 228
0000 900000      R     MOV     DPTR,#address
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 230
0006 900000      R     MOV     DPTR,#address
0009 120000      E     LCALL   ?C?LLDXDATA
000C E4                CLR     A
000D 2F                ADD     A,R7
000E FF                MOV     R7,A
000F E4                CLR     A
0010 3E                ADDC    A,R6
0011 FE                MOV     R6,A
0012 ED                MOV     A,R5
0013 34F0              ADDC    A,#0F0H
0015 FD                MOV     R5,A
0016 EC                MOV     A,R4
0017 34FF              ADDC    A,#0FFH
0019 FC                MOV     R4,A
001A 900000      R     MOV     DPTR,#flsAddr
001D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 234
0020 E4                CLR     A
0021 FB                MOV     R3,A
0022 FA                MOV     R2,A
0023 7901              MOV     R1,#01H
0025 F8                MOV     R0,A
0026 900000      R     MOV     DPTR,#flsAddr
0029 120000      E     LCALL   ?C?LLDXDATA
002C 120000      E     LCALL   ?C?ULDIV
002F 900000      R     MOV     DPTR,#arrayId
0032 EF                MOV     A,R7
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 240
0034 900000      R     MOV     DPTR,#flsAddr
0037 120000      E     LCALL   ?C?LLDXDATA
003A EF                MOV     A,R7
003B EE                MOV     A,R6
003C E4                CLR     A
003D FD                MOV     R5,A
003E FC                MOV     R4,A
003F FB                MOV     R3,A
0040 7A01              MOV     R2,#01H
0042 F9                MOV     R1,A
0043 F8                MOV     R0,A
C51 COMPILER V9.51   BOOTLOADABLE                                                          10/22/2015 22:07:43 PAGE 7   

0044 120000      E     LCALL   ?C?ULDIV
0047 900000      R     MOV     DPTR,#rowNum
004A EE                MOV     A,R6
004B F0                MOVX    @DPTR,A
004C A3                INC     DPTR
004D EF                MOV     A,R7
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 243
004F 900000      R     MOV     DPTR,#address
0052 120000      E     LCALL   ?C?LLDXDATA
0055 EF                MOV     A,R7
0056 FB                MOV     R3,A
0057 E4                CLR     A
0058 FA                MOV     R2,A
0059 F9                MOV     R1,A
005A F8                MOV     R0,A
005B 900000      R     MOV     DPTR,#address
005E 120000      E     LCALL   ?C?LLDXDATA
0061 120000      E     LCALL   ?C?LSUB
0064 900000      R     MOV     DPTR,#baseAddr
0067 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 247
;---- Variable 'idx' assigned to Register 'R2/R3' ----
006A E4                CLR     A
006B FB                MOV     R3,A
006C         ?C0002:
006C C3                CLR     C
006D EA                MOV     A,R2
006E 9401              SUBB    A,#01H
0070 5025              JNC     ?C0003
                                           ; SOURCE LINE # 248
                                           ; SOURCE LINE # 249
0072 900000      R     MOV     DPTR,#baseAddr
0075 120000      E     LCALL   ?C?LLDXDATA
0078 EF                MOV     A,R7
0079 2B                ADD     A,R3
007A FF                MOV     R7,A
007B EE                MOV     A,R6
007C 3A                ADDC    A,R2
007D 8F82              MOV     DPL,R7
007F F583              MOV     DPH,A
0081 E4                CLR     A
0082 93                MOVC    A,@A+DPTR
0083 FF                MOV     R7,A
0084 7400        R     MOV     A,#LOW rowData
0086 2B                ADD     A,R3
0087 F582              MOV     DPL,A
0089 7400        R     MOV     A,#HIGH rowData
008B 3A                ADDC    A,R2
008C F583              MOV     DPH,A
008E EF                MOV     A,R7
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 250
0090 0B                INC     R3
0091 EB                MOV     A,R3
0092 7001              JNZ     ?C0006
0094 0A                INC     R2
0095         ?C0006:
0095 80D5              SJMP    ?C0002
0097         ?C0003:
                                           ; SOURCE LINE # 251
0097 900000      R     MOV     DPTR,#runType
C51 COMPILER V9.51   BOOTLOADABLE                                                          10/22/2015 22:07:43 PAGE 8   

009A E0                MOVX    A,@DPTR
009B FB                MOV     R3,A
009C 900000      R     MOV     DPTR,#address
009F 120000      E     LCALL   ?C?LLDXDATA
00A2 EF                MOV     A,R7
00A3 E4                CLR     A
00A4 FE                MOV     R6,A
00A5 7400        R     MOV     A,#LOW rowData
00A7 2F                ADD     A,R7
00A8 F582              MOV     DPL,A
00AA EE                MOV     A,R6
00AB 3400        R     ADDC    A,#HIGH rowData
00AD F583              MOV     DPH,A
00AF EB                MOV     A,R3
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 256
00B1 900000      R     MOV     DPTR,#arrayId
00B4 E0                MOVX    A,@DPTR
00B5 FF                MOV     R7,A
00B6 A3                INC     DPTR
00B7 E0                MOVX    A,@DPTR
00B8 FC                MOV     R4,A
00B9 A3                INC     DPTR
00BA E0                MOVX    A,@DPTR
00BB FD                MOV     R5,A
00BC 7B01              MOV     R3,#01H
00BE 7A00        R     MOV     R2,#HIGH rowData
00C0 7900        R     MOV     R1,#LOW rowData
00C2 120000      E     LCALL   _CyWriteRowData
                                           ; SOURCE LINE # 268
00C5 22                RET     
             ; FUNCTION _Bootloadable_SetFlashByte (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    208    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----     272
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
