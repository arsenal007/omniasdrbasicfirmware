C51 COMPILER V9.51   CW_HOLD_TIMER                                                         10/22/2015 22:07:44 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CW_HOLD_TIMER
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\CW_Hold_Timer.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\CW_Hold_Timer.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(
                    -2) PR(.\DP8051\DP8051_Keil_951\Debug/CW_Hold_Timer.lst) CD OT(5,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\CW_Hold_Timer.ob
                    -j)

line level    source

   1          /*******************************************************************************
   2          * File Name: CW_Hold_Timer.c
   3          * Version 2.70
   4          *
   5          * Description:
   6          *  The Timer component consists of a 8, 16, 24 or 32-bit timer with
   7          *  a selectable period between 2 and 2^Width - 1.  The timer may free run
   8          *  or be used as a capture timer as well.  The capture can be initiated
   9          *  by a positive or negative edge signal as well as via software.
  10          *  A trigger input can be programmed to enable the timer on rising edge
  11          *  falling edge, either edge or continous run.
  12          *  Interrupts may be generated due to a terminal count condition
  13          *  or a capture event.
  14          *
  15          * Note:
  16          *
  17          ********************************************************************************
  18          * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  19          * You may use this file only in accordance with the license, terms, conditions,
  20          * disclaimers, and limitations in the end user license agreement accompanying
  21          * the software package with which this file was provided.
  22          ********************************************************************************/
  23          
  24          #include "CW_Hold_Timer.h"
  25          
  26          uint8 CW_Hold_Timer_initVar = 0u;
  27          
  28          
  29          /*******************************************************************************
  30          * Function Name: CW_Hold_Timer_Init
  31          ********************************************************************************
  32          *
  33          * Summary:
  34          *  Initialize to the schematic state
  35          *
  36          * Parameters:
  37          *  void
  38          *
  39          * Return:
  40          *  void
  41          *
  42          *******************************************************************************/
  43          void CW_Hold_Timer_Init(void) 
  44          {
  45   1          #if(!CW_Hold_Timer_UsingFixedFunction)
                          /* Interrupt State Backup for Critical Region*/
                          uint8 CW_Hold_Timer_interruptState;
                  #endif /* Interrupt state back up for Fixed Function only */
  49   1      
  50   1          #if (CW_Hold_Timer_UsingFixedFunction)
  51   1              /* Clear all bits but the enable bit (if it's already set) for Timer operation */
  52   1              CW_Hold_Timer_CONTROL &= CW_Hold_Timer_CTRL_ENABLE;
C51 COMPILER V9.51   CW_HOLD_TIMER                                                         10/22/2015 22:07:44 PAGE 2   

  53   1      
  54   1              /* Clear the mode bits for continuous run mode */
  55   1              #if (CY_PSOC5A)
                          CW_Hold_Timer_CONTROL2 &= ((uint8)(~CW_Hold_Timer_CTRL_MODE_MASK));
                      #endif /* Clear bits in CONTROL2 only in PSOC5A */
  58   1      
  59   1              #if (CY_PSOC3 || CY_PSOC5LP)
  60   1                  CW_Hold_Timer_CONTROL3 &= ((uint8)(~CW_Hold_Timer_CTRL_MODE_MASK));
  61   1              #endif /* CONTROL3 register exists only in PSoC3 OR PSoC5LP */
  62   1      
  63   1              /* Check if One Shot mode is enabled i.e. RunMode !=0*/
  64   1              #if (CW_Hold_Timer_RunModeUsed != 0x0u)
  65   1                  /* Set 3rd bit of Control register to enable one shot mode */
  66   1                  CW_Hold_Timer_CONTROL |= 0x04u;
  67   1              #endif /* One Shot enabled only when RunModeUsed is not Continuous*/
  68   1      
  69   1              #if (CW_Hold_Timer_RunModeUsed == 2)
                          #if (CY_PSOC5A)
                              /* Set last 2 bits of control2 register if one shot(halt on
                              interrupt) is enabled*/
                              CW_Hold_Timer_CONTROL2 |= 0x03u;
                          #endif /* Set One-Shot Halt on Interrupt bit in CONTROL2 for PSoC5A */
              
                          #if (CY_PSOC3 || CY_PSOC5LP)
                              /* Set last 2 bits of control3 register if one shot(halt on
                              interrupt) is enabled*/
                              CW_Hold_Timer_CONTROL3 |= 0x03u;
                          #endif /* Set One-Shot Halt on Interrupt bit in CONTROL3 for PSoC3 or PSoC5LP */
              
                      #endif /* Remove section if One Shot Halt on Interrupt is not enabled */
  83   1      
  84   1              #if (CW_Hold_Timer_UsingHWEnable != 0)
                          #if (CY_PSOC5A)
                              /* Set the default Run Mode of the Timer to Continuous */
                              CW_Hold_Timer_CONTROL2 |= CW_Hold_Timer_CTRL_MODE_PULSEWIDTH;
                          #endif /* Set Continuous Run Mode in CONTROL2 for PSoC5A */
              
                          #if (CY_PSOC3 || CY_PSOC5LP)
                              /* Clear and Set ROD and COD bits of CFG2 register */
                              CW_Hold_Timer_CONTROL3 &= ((uint8)(~CW_Hold_Timer_CTRL_RCOD_MASK));
                              CW_Hold_Timer_CONTROL3 |= CW_Hold_Timer_CTRL_RCOD;
              
                              /* Clear and Enable the HW enable bit in CFG2 register */
                              CW_Hold_Timer_CONTROL3 &= ((uint8)(~CW_Hold_Timer_CTRL_ENBL_MASK));
                              CW_Hold_Timer_CONTROL3 |= CW_Hold_Timer_CTRL_ENBL;
              
                              /* Set the default Run Mode of the Timer to Continuous */
                              CW_Hold_Timer_CONTROL3 |= CW_Hold_Timer_CTRL_MODE_CONTINUOUS;
                          #endif /* Set Continuous Run Mode in CONTROL3 for PSoC3ES3 or PSoC5A */
              
                      #endif /* Configure Run Mode with hardware enable */
 104   1      
 105   1              /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 106   1              CW_Hold_Timer_RT1 &= ((uint8)(~CW_Hold_Timer_RT1_MASK));
 107   1              CW_Hold_Timer_RT1 |= CW_Hold_Timer_SYNC;
 108   1      
 109   1              /*Enable DSI Sync all all inputs of the Timer*/
 110   1              CW_Hold_Timer_RT1 &= ((uint8)(~CW_Hold_Timer_SYNCDSI_MASK));
 111   1              CW_Hold_Timer_RT1 |= CW_Hold_Timer_SYNCDSI_EN;
 112   1      
 113   1              /* Set the IRQ to use the status register interrupts */
 114   1              CW_Hold_Timer_CONTROL2 |= CW_Hold_Timer_CTRL2_IRQ_SEL;
C51 COMPILER V9.51   CW_HOLD_TIMER                                                         10/22/2015 22:07:44 PAGE 3   

 115   1          #endif /* Configuring registers of fixed function implementation */
 116   1      
 117   1          /* Set Initial values from Configuration */
 118   1          CW_Hold_Timer_WritePeriod(CW_Hold_Timer_INIT_PERIOD);
 119   1          CW_Hold_Timer_WriteCounter(CW_Hold_Timer_INIT_PERIOD);
 120   1      
 121   1          #if (CW_Hold_Timer_UsingHWCaptureCounter)/* Capture counter is enabled */
                      CW_Hold_Timer_CAPTURE_COUNT_CTRL |= CW_Hold_Timer_CNTR_ENABLE;
                      CW_Hold_Timer_SetCaptureCount(CW_Hold_Timer_INIT_CAPTURE_COUNT);
                  #endif /* Configure capture counter value */
 125   1      
 126   1          #if (!CW_Hold_Timer_UsingFixedFunction)
                      #if (CW_Hold_Timer_SoftwareCaptureMode)
                          CW_Hold_Timer_SetCaptureMode(CW_Hold_Timer_INIT_CAPTURE_MODE);
                      #endif /* Set Capture Mode for UDB implementation if capture mode is software controlled */
              
                      #if (CW_Hold_Timer_SoftwareTriggerMode)
                          #if (!CW_Hold_Timer_UDB_CONTROL_REG_REMOVED)
                              if (0u == (CW_Hold_Timer_CONTROL & CW_Hold_Timer__B_TIMER__TM_SOFTWARE))
                              {
                                  CW_Hold_Timer_SetTriggerMode(CW_Hold_Timer_INIT_TRIGGER_MODE);
                              }
                          #endif /* (!CW_Hold_Timer_UDB_CONTROL_REG_REMOVED) */
                      #endif /* Set trigger mode for UDB Implementation if trigger mode is software controlled */
              
                      /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region critical*/
                      /* Enter Critical Region*/
                      CW_Hold_Timer_interruptState = CyEnterCriticalSection();
              
                      /* Use the interrupt output of the status register for IRQ output */
                      CW_Hold_Timer_STATUS_AUX_CTRL |= CW_Hold_Timer_STATUS_ACTL_INT_EN_MASK;
              
                      /* Exit Critical Region*/
                      CyExitCriticalSection(CW_Hold_Timer_interruptState);
              
                      #if (CW_Hold_Timer_EnableTriggerMode)
                          CW_Hold_Timer_EnableTrigger();
                      #endif /* Set Trigger enable bit for UDB implementation in the control register*/
                              
                              
                      #if (CW_Hold_Timer_InterruptOnCaptureCount && !CW_Hold_Timer_UDB_CONTROL_REG_REMOVED)
                          CW_Hold_Timer_SetInterruptCount(CW_Hold_Timer_INIT_INT_CAPTURE_COUNT);
                      #endif /* Set interrupt count in UDB implementation if interrupt count feature is checked.*/
              
                      CW_Hold_Timer_ClearFIFO();
                  #endif /* Configure additional features of UDB implementation */
 161   1      
 162   1          CW_Hold_Timer_SetInterruptMode(CW_Hold_Timer_INIT_INTERRUPT_MODE);
 163   1      }
 164          
 165          
 166          /*******************************************************************************
 167          * Function Name: CW_Hold_Timer_Enable
 168          ********************************************************************************
 169          *
 170          * Summary:
 171          *  Enable the Timer
 172          *
 173          * Parameters:
 174          *  void
 175          *
 176          * Return:
C51 COMPILER V9.51   CW_HOLD_TIMER                                                         10/22/2015 22:07:44 PAGE 4   

 177          *  void
 178          *
 179          *******************************************************************************/
 180          void CW_Hold_Timer_Enable(void) 
 181          {
 182   1          /* Globally Enable the Fixed Function Block chosen */
 183   1          #if (CW_Hold_Timer_UsingFixedFunction)
 184   1              CW_Hold_Timer_GLOBAL_ENABLE |= CW_Hold_Timer_BLOCK_EN_MASK;
 185   1              CW_Hold_Timer_GLOBAL_STBY_ENABLE |= CW_Hold_Timer_BLOCK_STBY_EN_MASK;
 186   1          #endif /* Set Enable bit for enabling Fixed function timer*/
 187   1      
 188   1          /* Remove assignment if control register is removed */
 189   1          #if (!CW_Hold_Timer_UDB_CONTROL_REG_REMOVED || CW_Hold_Timer_UsingFixedFunction)
 190   1              CW_Hold_Timer_CONTROL |= CW_Hold_Timer_CTRL_ENABLE;
 191   1          #endif /* Remove assignment if control register is removed */
 192   1      }
 193          
 194          
 195          /*******************************************************************************
 196          * Function Name: CW_Hold_Timer_Start
 197          ********************************************************************************
 198          *
 199          * Summary:
 200          *  The start function initializes the timer with the default values, the
 201          *  enables the timerto begin counting.  It does not enable interrupts,
 202          *  the EnableInt command should be called if interrupt generation is required.
 203          *
 204          * Parameters:
 205          *  void
 206          *
 207          * Return:
 208          *  void
 209          *
 210          * Global variables:
 211          *  CW_Hold_Timer_initVar: Is modified when this function is called for the
 212          *   first time. Is used to ensure that initialization happens only once.
 213          *
 214          *******************************************************************************/
 215          void CW_Hold_Timer_Start(void) 
 216          {
 217   1          if(CW_Hold_Timer_initVar == 0u)
 218   1          {
 219   2              CW_Hold_Timer_Init();
 220   2      
 221   2              CW_Hold_Timer_initVar = 1u;   /* Clear this bit for Initialization */
 222   2          }
 223   1      
 224   1          /* Enable the Timer */
 225   1          CW_Hold_Timer_Enable();
 226   1      }
 227          
 228          
 229          /*******************************************************************************
 230          * Function Name: CW_Hold_Timer_Stop
 231          ********************************************************************************
 232          *
 233          * Summary:
 234          *  The stop function halts the timer, but does not change any modes or disable
 235          *  interrupts.
 236          *
 237          * Parameters:
 238          *  void
C51 COMPILER V9.51   CW_HOLD_TIMER                                                         10/22/2015 22:07:44 PAGE 5   

 239          *
 240          * Return:
 241          *  void
 242          *
 243          * Side Effects: If the Enable mode is set to Hardware only then this function
 244          *               has no effect on the operation of the timer.
 245          *
 246          *******************************************************************************/
 247          void CW_Hold_Timer_Stop(void) 
 248          {
 249   1          /* Disable Timer */
 250   1          #if(!CW_Hold_Timer_UDB_CONTROL_REG_REMOVED || CW_Hold_Timer_UsingFixedFunction)
 251   1              CW_Hold_Timer_CONTROL &= ((uint8)(~CW_Hold_Timer_CTRL_ENABLE));
 252   1          #endif /* Remove assignment if control register is removed */
 253   1      
 254   1          /* Globally disable the Fixed Function Block chosen */
 255   1          #if (CW_Hold_Timer_UsingFixedFunction)
 256   1              CW_Hold_Timer_GLOBAL_ENABLE &= ((uint8)(~CW_Hold_Timer_BLOCK_EN_MASK));
 257   1              CW_Hold_Timer_GLOBAL_STBY_ENABLE &= ((uint8)(~CW_Hold_Timer_BLOCK_STBY_EN_MASK));
 258   1          #endif /* Disable global enable for the Timer Fixed function block to stop the Timer*/
 259   1      }
 260          
 261          
 262          /*******************************************************************************
 263          * Function Name: CW_Hold_Timer_SetInterruptMode
 264          ********************************************************************************
 265          *
 266          * Summary:
 267          *  This function selects which of the interrupt inputs may cause an interrupt.
 268          *  The twosources are caputure and terminal.  One, both or neither may
 269          *  be selected.
 270          *
 271          * Parameters:
 272          *  interruptMode:   This parameter is used to enable interrups on either/or
 273          *                   terminal count or capture.
 274          *
 275          * Return:
 276          *  void
 277          *
 278          *******************************************************************************/
 279          void CW_Hold_Timer_SetInterruptMode(uint8 interruptMode) 
 280          {
 281   1          CW_Hold_Timer_STATUS_MASK = interruptMode;
 282   1      }
 283          
 284          
 285          /*******************************************************************************
 286          * Function Name: CW_Hold_Timer_SoftwareCapture
 287          ********************************************************************************
 288          *
 289          * Summary:
 290          *  This function forces a capture independent of the capture signal.
 291          *
 292          * Parameters:
 293          *  void
 294          *
 295          * Return:
 296          *  void
 297          *
 298          * Side Effects:
 299          *  An existing hardware capture could be overwritten.
 300          *
C51 COMPILER V9.51   CW_HOLD_TIMER                                                         10/22/2015 22:07:44 PAGE 6   

 301          *******************************************************************************/
 302          void CW_Hold_Timer_SoftwareCapture(void) 
 303          {
 304   1          /* Generate a software capture by reading the counter register */
 305   1          #if(CW_Hold_Timer_UsingFixedFunction)
 306   1              (void)CY_GET_REG16(CW_Hold_Timer_COUNTER_LSB_PTR);
 307   1          #else
                      (void)CY_GET_REG8(CW_Hold_Timer_COUNTER_LSB_PTR_8BIT);
                  #endif/* (CW_Hold_Timer_UsingFixedFunction) */
 310   1          /* Capture Data is now in the FIFO */
 311   1      }
 312          
 313          
 314          /*******************************************************************************
 315          * Function Name: CW_Hold_Timer_ReadStatusRegister
 316          ********************************************************************************
 317          *
 318          * Summary:
 319          *  Reads the status register and returns it's state. This function should use
 320          *  defined types for the bit-field information as the bits in this register may
 321          *  be permuteable.
 322          *
 323          * Parameters:
 324          *  void
 325          *
 326          * Return:
 327          *  The contents of the status register
 328          *
 329          * Side Effects:
 330          *  Status register bits may be clear on read.
 331          *
 332          *******************************************************************************/
 333          uint8   CW_Hold_Timer_ReadStatusRegister(void) 
 334          {
 335   1          return (CW_Hold_Timer_STATUS);
 336   1      }
 337          
 338          
 339          #if (!CW_Hold_Timer_UDB_CONTROL_REG_REMOVED) /* Remove API if control register is unused */
 340          
 341          
 342          /*******************************************************************************
 343          * Function Name: CW_Hold_Timer_ReadControlRegister
 344          ********************************************************************************
 345          *
 346          * Summary:
 347          *  Reads the control register and returns it's value.
 348          *
 349          * Parameters:
 350          *  void
 351          *
 352          * Return:
 353          *  The contents of the control register
 354          *
 355          *******************************************************************************/
 356          uint8 CW_Hold_Timer_ReadControlRegister(void) 
 357          {
 358   1          #if (!CW_Hold_Timer_UDB_CONTROL_REG_REMOVED) 
 359   1              return ((uint8)CW_Hold_Timer_CONTROL);
 360   1          #else
                      return (0);
                  #endif /* (!CW_Hold_Timer_UDB_CONTROL_REG_REMOVED) */
C51 COMPILER V9.51   CW_HOLD_TIMER                                                         10/22/2015 22:07:44 PAGE 7   

 363   1      }
 364          
 365          
 366          /*******************************************************************************
 367          * Function Name: CW_Hold_Timer_WriteControlRegister
 368          ********************************************************************************
 369          *
 370          * Summary:
 371          *  Sets the bit-field of the control register.
 372          *
 373          * Parameters:
 374          *  control: The contents of the control register
 375          *
 376          * Return:
 377          *
 378          *******************************************************************************/
 379          void CW_Hold_Timer_WriteControlRegister(uint8 control) 
 380          {
 381   1          #if (!CW_Hold_Timer_UDB_CONTROL_REG_REMOVED) 
 382   1              CW_Hold_Timer_CONTROL = control;
 383   1          #else
                      control = 0u;
                  #endif /* (!CW_Hold_Timer_UDB_CONTROL_REG_REMOVED) */
 386   1      }
 387          
 388          #endif /* Remove API if control register is unused */
 389          
 390          
 391          /*******************************************************************************
 392          * Function Name: CW_Hold_Timer_ReadPeriod
 393          ********************************************************************************
 394          *
 395          * Summary:
 396          *  This function returns the current value of the Period.
 397          *
 398          * Parameters:
 399          *  void
 400          *
 401          * Return:
 402          *  The present value of the counter.
 403          *
 404          *******************************************************************************/
 405          uint16 CW_Hold_Timer_ReadPeriod(void) 
 406          {
 407   1         #if(CW_Hold_Timer_UsingFixedFunction)
 408   1             return ((uint16)CY_GET_REG16(CW_Hold_Timer_PERIOD_LSB_PTR));
 409   1         #else
                     return (CY_GET_REG16(CW_Hold_Timer_PERIOD_LSB_PTR));
                 #endif /* (CW_Hold_Timer_UsingFixedFunction) */
 412   1      }
 413          
 414          
 415          /*******************************************************************************
 416          * Function Name: CW_Hold_Timer_WritePeriod
 417          ********************************************************************************
 418          *
 419          * Summary:
 420          *  This function is used to change the period of the counter.  The new period
 421          *  will be loaded the next time terminal count is detected.
 422          *
 423          * Parameters:
 424          *  period: This value may be between 1 and (2^Resolution)-1.  A value of 0 will
C51 COMPILER V9.51   CW_HOLD_TIMER                                                         10/22/2015 22:07:44 PAGE 8   

 425          *          result in the counter remaining at zero.
 426          *
 427          * Return:
 428          *  void
 429          *
 430          *******************************************************************************/
 431          void CW_Hold_Timer_WritePeriod(uint16 period) 
 432          {
 433   1          #if(CW_Hold_Timer_UsingFixedFunction)
 434   1              uint16 period_temp = (uint16)period;
 435   1              CY_SET_REG16(CW_Hold_Timer_PERIOD_LSB_PTR, period_temp);
 436   1          #else
                      CY_SET_REG16(CW_Hold_Timer_PERIOD_LSB_PTR, period);
                  #endif /*Write Period value with appropriate resolution suffix depending on UDB or fixed function impl
             -ementation */
 439   1      }
 440          
 441          
 442          /*******************************************************************************
 443          * Function Name: CW_Hold_Timer_ReadCapture
 444          ********************************************************************************
 445          *
 446          * Summary:
 447          *  This function returns the last value captured.
 448          *
 449          * Parameters:
 450          *  void
 451          *
 452          * Return:
 453          *  Present Capture value.
 454          *
 455          *******************************************************************************/
 456          uint16 CW_Hold_Timer_ReadCapture(void) 
 457          {
 458   1         #if(CW_Hold_Timer_UsingFixedFunction)
 459   1             return ((uint16)CY_GET_REG16(CW_Hold_Timer_CAPTURE_LSB_PTR));
 460   1         #else
                     return (CY_GET_REG16(CW_Hold_Timer_CAPTURE_LSB_PTR));
                 #endif /* (CW_Hold_Timer_UsingFixedFunction) */
 463   1      }
 464          
 465          
 466          /*******************************************************************************
 467          * Function Name: CW_Hold_Timer_WriteCounter
 468          ********************************************************************************
 469          *
 470          * Summary:
 471          *  This funtion is used to set the counter to a specific value
 472          *
 473          * Parameters:
 474          *  counter:  New counter value.
 475          *
 476          * Return:
 477          *  void
 478          *
 479          *******************************************************************************/
 480          void CW_Hold_Timer_WriteCounter(uint16 counter) 
 481          {
 482   1         #if(CW_Hold_Timer_UsingFixedFunction)
 483   1              /* This functionality is removed until a FixedFunction HW update to
 484   1               * allow this register to be written
 485   1               */
C51 COMPILER V9.51   CW_HOLD_TIMER                                                         10/22/2015 22:07:44 PAGE 9   

 486   1              CY_SET_REG16(CW_Hold_Timer_COUNTER_LSB_PTR, (uint16)counter);
 487   1              
 488   1          #else
                      CY_SET_REG16(CW_Hold_Timer_COUNTER_LSB_PTR, counter);
                  #endif /* Set Write Counter only for the UDB implementation (Write Counter not available in fixed func
             -tion Timer */
 491   1      }
 492          
 493          
 494          /*******************************************************************************
 495          * Function Name: CW_Hold_Timer_ReadCounter
 496          ********************************************************************************
 497          *
 498          * Summary:
 499          *  This function returns the current counter value.
 500          *
 501          * Parameters:
 502          *  void
 503          *
 504          * Return:
 505          *  Present compare value.
 506          *
 507          *******************************************************************************/
 508          uint16 CW_Hold_Timer_ReadCounter(void) 
 509          {
 510   1          /* Force capture by reading Accumulator */
 511   1          /* Must first do a software capture to be able to read the counter */
 512   1          /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 513   1          #if(CW_Hold_Timer_UsingFixedFunction)
 514   1              (void)CY_GET_REG16(CW_Hold_Timer_COUNTER_LSB_PTR);
 515   1          #else
                      (void)CY_GET_REG8(CW_Hold_Timer_COUNTER_LSB_PTR_8BIT);
                  #endif/* (CW_Hold_Timer_UsingFixedFunction) */
 518   1      
 519   1          /* Read the data from the FIFO (or capture register for Fixed Function)*/
 520   1          #if(CW_Hold_Timer_UsingFixedFunction)
 521   1              return ((uint16)CY_GET_REG16(CW_Hold_Timer_CAPTURE_LSB_PTR));
 522   1          #else
                      return (CY_GET_REG16(CW_Hold_Timer_CAPTURE_LSB_PTR));
                  #endif /* (CW_Hold_Timer_UsingFixedFunction) */
 525   1      }
 526          
 527          
 528          #if(!CW_Hold_Timer_UsingFixedFunction) /* UDB Specific Functions */
              
                  
              /*******************************************************************************
               * The functions below this point are only available using the UDB
               * implementation.  If a feature is selected, then the API is enabled.
               ******************************************************************************/
              
              
              #if (CW_Hold_Timer_SoftwareCaptureMode)
              
              
              /*******************************************************************************
              * Function Name: CW_Hold_Timer_SetCaptureMode
              ********************************************************************************
              *
              * Summary:
              *  This function sets the capture mode to either rising or falling edge.
              *
C51 COMPILER V9.51   CW_HOLD_TIMER                                                         10/22/2015 22:07:44 PAGE 10  

              * Parameters:
              *  captureMode: This parameter sets the capture mode of the UDB capture feature
              *  The parameter values are defined using the
              *  #define CW_Hold_Timer__B_TIMER__CM_NONE 0
              #define CW_Hold_Timer__B_TIMER__CM_RISINGEDGE 1
              #define CW_Hold_Timer__B_TIMER__CM_FALLINGEDGE 2
              #define CW_Hold_Timer__B_TIMER__CM_EITHEREDGE 3
              #define CW_Hold_Timer__B_TIMER__CM_SOFTWARE 4
               identifiers
              *  The following are the possible values of the parameter
              *  CW_Hold_Timer__B_TIMER__CM_NONE        - Set Capture mode to None
              *  CW_Hold_Timer__B_TIMER__CM_RISINGEDGE  - Rising edge of Capture input
              *  CW_Hold_Timer__B_TIMER__CM_FALLINGEDGE - Falling edge of Capture input
              *  CW_Hold_Timer__B_TIMER__CM_EITHEREDGE  - Either edge of Capture input
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void CW_Hold_Timer_SetCaptureMode(uint8 captureMode) 
              {
                  /* This must only set to two bits of the control register associated */
                  captureMode = ((uint8)((uint8)captureMode << CW_Hold_Timer_CTRL_CAP_MODE_SHIFT));
                  captureMode &= (CW_Hold_Timer_CTRL_CAP_MODE_MASK);
              
                  #if (!CW_Hold_Timer_UDB_CONTROL_REG_REMOVED)
                      /* Clear the Current Setting */
                      CW_Hold_Timer_CONTROL &= ((uint8)(~CW_Hold_Timer_CTRL_CAP_MODE_MASK));
              
                      /* Write The New Setting */
                      CW_Hold_Timer_CONTROL |= captureMode;
                  #endif /* (!CW_Hold_Timer_UDB_CONTROL_REG_REMOVED) */
              }
              #endif /* Remove API if Capture Mode is not Software Controlled */
              
              
              #if (CW_Hold_Timer_SoftwareTriggerMode)
              
              
              /*******************************************************************************
              * Function Name: CW_Hold_Timer_SetTriggerMode
              ********************************************************************************
              *
              * Summary:
              *  This function sets the trigger input mode
              *
              * Parameters:
              *  triggerMode: Pass one of the pre-defined Trigger Modes (except Software)
                  #define CW_Hold_Timer__B_TIMER__TM_NONE 0x00u
                  #define CW_Hold_Timer__B_TIMER__TM_RISINGEDGE 0x04u
                  #define CW_Hold_Timer__B_TIMER__TM_FALLINGEDGE 0x08u
                  #define CW_Hold_Timer__B_TIMER__TM_EITHEREDGE 0x0Cu
                  #define CW_Hold_Timer__B_TIMER__TM_SOFTWARE 0x10u
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void CW_Hold_Timer_SetTriggerMode(uint8 triggerMode) 
              {
                  /* This must only set to two bits of the control register associated */
                  triggerMode &= CW_Hold_Timer_CTRL_TRIG_MODE_MASK;
C51 COMPILER V9.51   CW_HOLD_TIMER                                                         10/22/2015 22:07:44 PAGE 11  

              
                  #if (!CW_Hold_Timer_UDB_CONTROL_REG_REMOVED)   /* Remove assignment if control register is removed */
                  
                      /* Clear the Current Setting */
                      CW_Hold_Timer_CONTROL &= ((uint8)(~CW_Hold_Timer_CTRL_TRIG_MODE_MASK));
              
                      /* Write The New Setting */
                      CW_Hold_Timer_CONTROL |= (triggerMode | CW_Hold_Timer__B_TIMER__TM_SOFTWARE);
                  #endif /* Remove code section if control register is not used */
              }
              #endif /* Remove API if Trigger Mode is not Software Controlled */
              
              #if (CW_Hold_Timer_EnableTriggerMode)
              
              
              /*******************************************************************************
              * Function Name: CW_Hold_Timer_EnableTrigger
              ********************************************************************************
              *
              * Summary:
              *  Sets the control bit enabling Hardware Trigger mode
              *
              * Parameters:
              *  void
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void CW_Hold_Timer_EnableTrigger(void) 
              {
                  #if (!CW_Hold_Timer_UDB_CONTROL_REG_REMOVED)   /* Remove assignment if control register is removed */
                      CW_Hold_Timer_CONTROL |= CW_Hold_Timer_CTRL_TRIG_EN;
                  #endif /* Remove code section if control register is not used */
              }
              
              
              /*******************************************************************************
              * Function Name: CW_Hold_Timer_DisableTrigger
              ********************************************************************************
              *
              * Summary:
              *  Clears the control bit enabling Hardware Trigger mode
              *
              * Parameters:
              *  void
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void CW_Hold_Timer_DisableTrigger(void) 
              {
                  #if (!CW_Hold_Timer_UDB_CONTROL_REG_REMOVED )   /* Remove assignment if control register is removed */
                      CW_Hold_Timer_CONTROL &= ((uint8)(~CW_Hold_Timer_CTRL_TRIG_EN));
                  #endif /* Remove code section if control register is not used */
              }
              #endif /* Remove API is Trigger Mode is set to None */
              
              #if(CW_Hold_Timer_InterruptOnCaptureCount)
              
              
C51 COMPILER V9.51   CW_HOLD_TIMER                                                         10/22/2015 22:07:44 PAGE 12  

              /*******************************************************************************
              * Function Name: CW_Hold_Timer_SetInterruptCount
              ********************************************************************************
              *
              * Summary:
              *  This function sets the capture count before an interrupt is triggered.
              *
              * Parameters:
              *  interruptCount:  A value between 0 and 3 is valid.  If the value is 0, then
              *                   an interrupt will occur each time a capture occurs.
              *                   A value of 1 to 3 will cause the interrupt
              *                   to delay by the same number of captures.
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void CW_Hold_Timer_SetInterruptCount(uint8 interruptCount) 
              {
                  /* This must only set to two bits of the control register associated */
                  interruptCount &= CW_Hold_Timer_CTRL_INTCNT_MASK;
              
                  #if (!CW_Hold_Timer_UDB_CONTROL_REG_REMOVED)
                      /* Clear the Current Setting */
                      CW_Hold_Timer_CONTROL &= ((uint8)(~CW_Hold_Timer_CTRL_INTCNT_MASK));
                      /* Write The New Setting */
                      CW_Hold_Timer_CONTROL |= interruptCount;
                  #endif /* (!CW_Hold_Timer_UDB_CONTROL_REG_REMOVED) */
              }
              #endif /* CW_Hold_Timer_InterruptOnCaptureCount */
              
              
              #if (CW_Hold_Timer_UsingHWCaptureCounter)
              
              
              /*******************************************************************************
              * Function Name: CW_Hold_Timer_SetCaptureCount
              ********************************************************************************
              *
              * Summary:
              *  This function sets the capture count
              *
              * Parameters:
              *  captureCount: A value between 2 and 127 inclusive is valid.  A value of 1
              *                to 127 will cause the interrupt to delay by the same number of
              *                captures.
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void CW_Hold_Timer_SetCaptureCount(uint8 captureCount) 
              {
                  CW_Hold_Timer_CAP_COUNT = captureCount;
              }
              
              
              /*******************************************************************************
              * Function Name: CW_Hold_Timer_ReadCaptureCount
              ********************************************************************************
              *
              * Summary:
C51 COMPILER V9.51   CW_HOLD_TIMER                                                         10/22/2015 22:07:44 PAGE 13  

              *  This function reads the capture count setting
              *
              * Parameters:
              *  void
              *
              * Return:
              *  Returns the Capture Count Setting
              *
              *******************************************************************************/
              uint8 CW_Hold_Timer_ReadCaptureCount(void) 
              {
                  return ((uint8)CW_Hold_Timer_CAP_COUNT);
              }
              #endif /* CW_Hold_Timer_UsingHWCaptureCounter */
              
              
              /*******************************************************************************
              * Function Name: CW_Hold_Timer_ClearFIFO
              ********************************************************************************
              *
              * Summary:
              *  This function clears all capture data from the capture FIFO
              *
              * Parameters:
              *  void
              *
              * Return:
              *  void
              *
              *******************************************************************************/
              void CW_Hold_Timer_ClearFIFO(void) 
              {
                  while(0u != (CW_Hold_Timer_ReadStatusRegister() & CW_Hold_Timer_STATUS_FIFONEMP))
                  {
                      (void)CW_Hold_Timer_ReadCapture();
                  }
              }
              
              #endif /* UDB Specific Functions */
 772          
 773          
 774          /* [] END OF FILE */
C51 COMPILER V9.51   CW_HOLD_TIMER                                                         10/22/2015 22:07:44 PAGE 14  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION CW_Hold_Timer_Init (BEGIN)
                                           ; SOURCE LINE # 43
                                           ; SOURCE LINE # 44
                                           ; SOURCE LINE # 52
0000 904F00            MOV     DPTR,#04F00H
0003 E0                MOVX    A,@DPTR
0004 5401              ANL     A,#01H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 60
0007 904F02            MOV     DPTR,#04F02H
000A E0                MOVX    A,@DPTR
000B 54FC              ANL     A,#0FCH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 66
000E 904F00            MOV     DPTR,#04F00H
0011 E0                MOVX    A,@DPTR
0012 4404              ORL     A,#04H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
0015 904F0B            MOV     DPTR,#04F0BH
0018 E0                MOVX    A,@DPTR
0019 54CF              ANL     A,#0CFH
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
001C E0                MOVX    A,@DPTR
001D 4430              ORL     A,#030H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 110
0020 E0                MOVX    A,@DPTR
0021 54F0              ANL     A,#0F0H
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 111
0024 E0                MOVX    A,@DPTR
0025 440F              ORL     A,#0FH
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 114
0028 904F01            MOV     DPTR,#04F01H
002B E0                MOVX    A,@DPTR
002C 4401              ORL     A,#01H
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 118
002F 7F50              MOV     R7,#050H
0031 7EC3              MOV     R6,#0C3H
0033 120000      R     LCALL   _CW_Hold_Timer_WritePeriod
                                           ; SOURCE LINE # 119
0036 7F50              MOV     R7,#050H
0038 7EC3              MOV     R6,#0C3H
003A 120000      R     LCALL   _CW_Hold_Timer_WriteCounter
                                           ; SOURCE LINE # 162
003D 7F08              MOV     R7,#08H
003F 120000      R     LCALL   _CW_Hold_Timer_SetInterruptMode
                                           ; SOURCE LINE # 163
0042 22                RET     
             ; FUNCTION CW_Hold_Timer_Init (END)

             ; FUNCTION CW_Hold_Timer_Enable (BEGIN)
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 181
                                           ; SOURCE LINE # 184
C51 COMPILER V9.51   CW_HOLD_TIMER                                                         10/22/2015 22:07:44 PAGE 15  

0000 9043A3            MOV     DPTR,#043A3H
0003 E0                MOVX    A,@DPTR
0004 4401              ORL     A,#01H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 185
0007 9043B3            MOV     DPTR,#043B3H
000A E0                MOVX    A,@DPTR
000B 4401              ORL     A,#01H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 190
000E 904F00            MOV     DPTR,#04F00H
0011 E0                MOVX    A,@DPTR
0012 4401              ORL     A,#01H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 192
0015 22                RET     
             ; FUNCTION CW_Hold_Timer_Enable (END)

             ; FUNCTION CW_Hold_Timer_Start (BEGIN)
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
                                           ; SOURCE LINE # 217
0000 900000      R     MOV     DPTR,#CW_Hold_Timer_initVar
0003 E0                MOVX    A,@DPTR
0004 7009              JNZ     ?C0003
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
0006 120000      R     LCALL   CW_Hold_Timer_Init
                                           ; SOURCE LINE # 221
0009 900000      R     MOV     DPTR,#CW_Hold_Timer_initVar
000C 7401              MOV     A,#01H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 222
000F         ?C0003:
                                           ; SOURCE LINE # 225
000F 120000      R     LCALL   CW_Hold_Timer_Enable
                                           ; SOURCE LINE # 226
0012 22                RET     
             ; FUNCTION CW_Hold_Timer_Start (END)

             ; FUNCTION CW_Hold_Timer_Stop (BEGIN)
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 248
                                           ; SOURCE LINE # 251
0000 904F00            MOV     DPTR,#04F00H
0003 E0                MOVX    A,@DPTR
0004 54FE              ANL     A,#0FEH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 256
0007 9043A3            MOV     DPTR,#043A3H
000A E0                MOVX    A,@DPTR
000B 54FE              ANL     A,#0FEH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 257
000E 9043B3            MOV     DPTR,#043B3H
0011 E0                MOVX    A,@DPTR
0012 54FE              ANL     A,#0FEH
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 259
0015 22                RET     
             ; FUNCTION CW_Hold_Timer_Stop (END)

C51 COMPILER V9.51   CW_HOLD_TIMER                                                         10/22/2015 22:07:44 PAGE 16  

             ; FUNCTION _CW_Hold_Timer_SetInterruptMode (BEGIN)
                                           ; SOURCE LINE # 279
;---- Variable 'interruptMode' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 281
0000 904F03            MOV     DPTR,#04F03H
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 282
0005 22                RET     
             ; FUNCTION _CW_Hold_Timer_SetInterruptMode (END)

             ; FUNCTION CW_Hold_Timer_SoftwareCapture (BEGIN)
                                           ; SOURCE LINE # 302
                                           ; SOURCE LINE # 303
                                           ; SOURCE LINE # 306
0000 7B02              MOV     R3,#02H
0002 7A4F              MOV     R2,#04FH
0004 7906              MOV     R1,#06H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 311
0009 22                RET     
             ; FUNCTION CW_Hold_Timer_SoftwareCapture (END)

             ; FUNCTION CW_Hold_Timer_ReadStatusRegister (BEGIN)
                                           ; SOURCE LINE # 333
                                           ; SOURCE LINE # 334
                                           ; SOURCE LINE # 335
0000 904F03            MOV     DPTR,#04F03H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 336
0005         ?C0008:
0005 22                RET     
             ; FUNCTION CW_Hold_Timer_ReadStatusRegister (END)

             ; FUNCTION CW_Hold_Timer_ReadControlRegister (BEGIN)
                                           ; SOURCE LINE # 356
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 359
0000 904F00            MOV     DPTR,#04F00H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 363
0005         ?C0009:
0005 22                RET     
             ; FUNCTION CW_Hold_Timer_ReadControlRegister (END)

             ; FUNCTION _CW_Hold_Timer_WriteControlRegister (BEGIN)
                                           ; SOURCE LINE # 379
;---- Variable 'control' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 382
0000 904F00            MOV     DPTR,#04F00H
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 386
0005 22                RET     
             ; FUNCTION _CW_Hold_Timer_WriteControlRegister (END)

             ; FUNCTION CW_Hold_Timer_ReadPeriod (BEGIN)
                                           ; SOURCE LINE # 405
C51 COMPILER V9.51   CW_HOLD_TIMER                                                         10/22/2015 22:07:44 PAGE 17  

                                           ; SOURCE LINE # 406
                                           ; SOURCE LINE # 408
0000 7B02              MOV     R3,#02H
0002 7A4F              MOV     R2,#04FH
0004 7904              MOV     R1,#04H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 412
0009         ?C0011:
0009 22                RET     
             ; FUNCTION CW_Hold_Timer_ReadPeriod (END)

             ; FUNCTION _CW_Hold_Timer_WritePeriod (BEGIN)
                                           ; SOURCE LINE # 431
;---- Variable 'period' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 432
                                           ; SOURCE LINE # 434
;---- Variable 'period_temp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 435
0000 7B02              MOV     R3,#02H
0002 7A4F              MOV     R2,#04FH
0004 7904              MOV     R1,#04H
0006 AD07              MOV     R5,AR7
0008 AC06              MOV     R4,AR6
000A 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 439
000D 22                RET     
             ; FUNCTION _CW_Hold_Timer_WritePeriod (END)

             ; FUNCTION CW_Hold_Timer_ReadCapture (BEGIN)
                                           ; SOURCE LINE # 456
                                           ; SOURCE LINE # 457
                                           ; SOURCE LINE # 459
0000 7B02              MOV     R3,#02H
0002 7A4F              MOV     R2,#04FH
0004 7908              MOV     R1,#08H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 463
0009         ?C0013:
0009 22                RET     
             ; FUNCTION CW_Hold_Timer_ReadCapture (END)

             ; FUNCTION _CW_Hold_Timer_WriteCounter (BEGIN)
                                           ; SOURCE LINE # 480
;---- Variable 'counter' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 481
                                           ; SOURCE LINE # 486
0000 7B02              MOV     R3,#02H
0002 7A4F              MOV     R2,#04FH
0004 7906              MOV     R1,#06H
0006 AD07              MOV     R5,AR7
0008 AC06              MOV     R4,AR6
000A 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 491
000D 22                RET     
             ; FUNCTION _CW_Hold_Timer_WriteCounter (END)

             ; FUNCTION CW_Hold_Timer_ReadCounter (BEGIN)
                                           ; SOURCE LINE # 508
                                           ; SOURCE LINE # 509
                                           ; SOURCE LINE # 514
0000 7B02              MOV     R3,#02H
0002 7A4F              MOV     R2,#04FH
C51 COMPILER V9.51   CW_HOLD_TIMER                                                         10/22/2015 22:07:44 PAGE 18  

0004 7906              MOV     R1,#06H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 521
0009 7B02              MOV     R3,#02H
000B 7A4F              MOV     R2,#04FH
000D 7908              MOV     R1,#08H
000F 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 525
0012         ?C0015:
0012 22                RET     
             ; FUNCTION CW_Hold_Timer_ReadCounter (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    231    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
