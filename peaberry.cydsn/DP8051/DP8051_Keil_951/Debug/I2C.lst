C51 COMPILER V9.51   I2C                                                                   10/22/2015 22:07:39 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE I2C
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\I2C.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\I2C.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.\DP
                    -8051\DP8051_Keil_951\Debug/I2C.lst) CD OT(5,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\I2C.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: I2C.c
   3          * Version 3.50
   4          *
   5          * Description:
   6          *  This file provides the source code of APIs for the I2C component.
   7          *  The actual protocol and operation code resides in the interrupt service
   8          *  routine file.
   9          *
  10          *******************************************************************************
  11          * Copyright 2008-2015, Cypress Semiconductor Corporation. All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "I2C_PVT.h"
  18          
  19          
  20          /**********************************
  21          *      System variables
  22          **********************************/
  23          
  24          uint8 I2C_initVar = 0u; /* Defines if component was initialized */
  25          
  26          volatile uint8 I2C_state;  /* Current state of I2C FSM */
  27          
  28          
  29          /*******************************************************************************
  30          * Function Name: I2C_Init
  31          ********************************************************************************
  32          *
  33          * Summary:
  34          *  Initializes I2C registers with initial values provided from customizer.
  35          *
  36          * Parameters:
  37          *  None.
  38          *
  39          * Return:
  40          *  None.
  41          *
  42          * Global variables:
  43          *  None.
  44          *
  45          * Reentrant:
  46          *  No.
  47          *
  48          *******************************************************************************/
  49          void I2C_Init(void) 
  50          {
  51   1      #if (I2C_FF_IMPLEMENTED)
  52   1          /* Configure fixed function block */
  53   1          I2C_CFG_REG  = I2C_DEFAULT_CFG;
C51 COMPILER V9.51   I2C                                                                   10/22/2015 22:07:39 PAGE 2   

  54   1          I2C_XCFG_REG = I2C_DEFAULT_XCFG;
  55   1          I2C_ADDR_REG = I2C_DEFAULT_ADDR;
  56   1          I2C_CLKDIV1_REG = LO8(I2C_DEFAULT_DIVIDE_FACTOR);
  57   1          I2C_CLKDIV2_REG = HI8(I2C_DEFAULT_DIVIDE_FACTOR);
  58   1      
  59   1      #else
                  uint8 intState;
              
                  /* Configure control and interrupt sources */
                  I2C_CFG_REG      = I2C_DEFAULT_CFG;
                  I2C_INT_MASK_REG = I2C_DEFAULT_INT_MASK;
              
                  /* Enable interrupt generation in status */
                  intState = CyEnterCriticalSection();
                  I2C_INT_ENABLE_REG |= I2C_INTR_ENABLE;
                  CyExitCriticalSection(intState);
              
                  /* Configure bit counter */
                  #if (I2C_MODE_SLAVE_ENABLED)
                      I2C_PERIOD_REG = I2C_DEFAULT_PERIOD;
                  #endif  /* (I2C_MODE_SLAVE_ENABLED) */
              
                  /* Configure clock generator */
                  #if (I2C_MODE_MASTER_ENABLED)
                      I2C_MCLK_PRD_REG = I2C_DEFAULT_MCLK_PRD;
                      I2C_MCLK_CMP_REG = I2C_DEFAULT_MCLK_CMP;
                  #endif /* (I2C_MODE_MASTER_ENABLED) */
              #endif /* (I2C_FF_IMPLEMENTED) */
  82   1      
  83   1      #if (I2C_TIMEOUT_ENABLED)
                  I2C_TimeoutInit();
              #endif /* (I2C_TIMEOUT_ENABLED) */
  86   1      
  87   1          /* Configure internal interrupt */
  88   1          CyIntDisable    (I2C_ISR_NUMBER);
  89   1          CyIntSetPriority(I2C_ISR_NUMBER, I2C_ISR_PRIORITY);
  90   1          #if (I2C_INTERN_I2C_INTR_HANDLER)
  91   1              (void) CyIntSetVector(I2C_ISR_NUMBER, &I2C_ISR);
  92   1          #endif /* (I2C_INTERN_I2C_INTR_HANDLER) */
  93   1      
  94   1          /* Set FSM to default state */
  95   1          I2C_state = I2C_SM_IDLE;
  96   1      
  97   1      #if (I2C_MODE_SLAVE_ENABLED)
                  /* Clear status and buffers index */
                  I2C_slStatus = 0u;
                  I2C_slRdBufIndex = 0u;
                  I2C_slWrBufIndex = 0u;
              
                  /* Configure matched address */
                  I2C_SlaveSetAddress(I2C_DEFAULT_ADDR);
              #endif /* (I2C_MODE_SLAVE_ENABLED) */
 106   1      
 107   1      #if (I2C_MODE_MASTER_ENABLED)
 108   1          /* Clear status and buffers index */
 109   1          I2C_mstrStatus = 0u;
 110   1          I2C_mstrRdBufIndex = 0u;
 111   1          I2C_mstrWrBufIndex = 0u;
 112   1      #endif /* (I2C_MODE_MASTER_ENABLED) */
 113   1      }
 114          
 115          
C51 COMPILER V9.51   I2C                                                                   10/22/2015 22:07:39 PAGE 3   

 116          /*******************************************************************************
 117          * Function Name: I2C_Enable
 118          ********************************************************************************
 119          *
 120          * Summary:
 121          *  Enables I2C operations.
 122          *
 123          * Parameters:
 124          *  None.
 125          *
 126          * Return:
 127          *  None.
 128          *
 129          * Global variables:
 130          *  None.
 131          *
 132          *******************************************************************************/
 133          void I2C_Enable(void) 
 134          {
 135   1      #if (I2C_FF_IMPLEMENTED)
 136   1          uint8 intState;
 137   1      
 138   1          /* Enable power to block */
 139   1          intState = CyEnterCriticalSection();
 140   1          I2C_ACT_PWRMGR_REG  |= I2C_ACT_PWR_EN;
 141   1          I2C_STBY_PWRMGR_REG |= I2C_STBY_PWR_EN;
 142   1          CyExitCriticalSection(intState);
 143   1      #else
                  #if (I2C_MODE_SLAVE_ENABLED)
                      /* Enable bit counter */
                      uint8 intState = CyEnterCriticalSection();
                      I2C_COUNTER_AUX_CTL_REG |= I2C_CNT7_ENABLE;
                      CyExitCriticalSection(intState);
                  #endif /* (I2C_MODE_SLAVE_ENABLED) */
              
                  /* Enable slave or master bits */
                  I2C_CFG_REG |= I2C_ENABLE_MS;
              #endif /* (I2C_FF_IMPLEMENTED) */
 154   1      
 155   1      #if (I2C_TIMEOUT_ENABLED)
                  I2C_TimeoutEnable();
              #endif /* (I2C_TIMEOUT_ENABLED) */
 158   1      }
 159          
 160          
 161          /*******************************************************************************
 162          * Function Name: I2C_Start
 163          ********************************************************************************
 164          *
 165          * Summary:
 166          *  Starts the I2C hardware. Enables Active mode power template bits or clock
 167          *  gating as appropriate. It is required to be executed before I2C bus
 168          *  operation.
 169          *
 170          * Parameters:
 171          *  None.
 172          *
 173          * Return:
 174          *  None.
 175          *
 176          * Side Effects:
 177          *  This component automatically enables its interrupt.  If I2C is enabled !
C51 COMPILER V9.51   I2C                                                                   10/22/2015 22:07:39 PAGE 4   

 178          *  without the interrupt enabled, it can lock up the I2C bus.
 179          *
 180          * Global variables:
 181          *  I2C_initVar - This variable is used to check the initial
 182          *                             configuration, modified on the first
 183          *                             function call.
 184          *
 185          * Reentrant:
 186          *  No.
 187          *
 188          *******************************************************************************/
 189          void I2C_Start(void) 
 190          {
 191   1          if (0u == I2C_initVar)
 192   1          {
 193   2              I2C_Init();
 194   2              I2C_initVar = 1u; /* Component initialized */
 195   2          }
 196   1      
 197   1          I2C_Enable();
 198   1          I2C_EnableInt();
 199   1      }
 200          
 201          
 202          /*******************************************************************************
 203          * Function Name: I2C_Stop
 204          ********************************************************************************
 205          *
 206          * Summary:
 207          *  Disables I2C hardware and disables I2C interrupt. Disables Active mode power
 208          *  template bits or clock gating as appropriate.
 209          *
 210          * Parameters:
 211          *  None.
 212          *
 213          * Return:
 214          *  None.
 215          *
 216          *******************************************************************************/
 217          void I2C_Stop(void) 
 218          {
 219   1          I2C_DisableInt();
 220   1      
 221   1      #if (I2C_TIMEOUT_ENABLED)
                  I2C_TimeoutStop();
              #endif  /* End (I2C_TIMEOUT_ENABLED) */
 224   1      
 225   1      #if (I2C_FF_IMPLEMENTED)
 226   1          {
 227   2              uint8 intState;
 228   2              uint16 blockResetCycles;
 229   2      
 230   2              /* Store registers effected by block disable */
 231   2              I2C_backup.addr    = I2C_ADDR_REG;
 232   2              I2C_backup.clkDiv1 = I2C_CLKDIV1_REG;
 233   2              I2C_backup.clkDiv2 = I2C_CLKDIV2_REG;
 234   2      
 235   2              /* Calculate number of cycles to reset block */
 236   2              blockResetCycles = ((uint16) ((uint16) I2C_CLKDIV2_REG << 8u) | I2C_CLKDIV1_REG) + 1u;
 237   2      
 238   2              /* Disable block */
 239   2              I2C_CFG_REG &= (uint8) ~I2C_CFG_EN_SLAVE;
C51 COMPILER V9.51   I2C                                                                   10/22/2015 22:07:39 PAGE 5   

 240   2              /* Wait for block reset before disable power */
 241   2              CyDelayCycles((uint32) blockResetCycles);
 242   2      
 243   2              /* Disable power to block */
 244   2              intState = CyEnterCriticalSection();
 245   2              I2C_ACT_PWRMGR_REG  &= (uint8) ~I2C_ACT_PWR_EN;
 246   2              I2C_STBY_PWRMGR_REG &= (uint8) ~I2C_STBY_PWR_EN;
 247   2              CyExitCriticalSection(intState);
 248   2      
 249   2              /* Enable block */
 250   2              I2C_CFG_REG |= (uint8) I2C_ENABLE_MS;
 251   2      
 252   2              /* Restore registers effected by block disable. Ticket ID#198004 */
 253   2              I2C_ADDR_REG    = I2C_backup.addr;
 254   2              I2C_ADDR_REG    = I2C_backup.addr;
 255   2              I2C_CLKDIV1_REG = I2C_backup.clkDiv1;
 256   2              I2C_CLKDIV2_REG = I2C_backup.clkDiv2;
 257   2          }
 258   1      #else
              
                  /* Disable slave or master bits */
                  I2C_CFG_REG &= (uint8) ~I2C_ENABLE_MS;
              
              #if (I2C_MODE_SLAVE_ENABLED)
                  {
                      /* Disable bit counter */
                      uint8 intState = CyEnterCriticalSection();
                      I2C_COUNTER_AUX_CTL_REG &= (uint8) ~I2C_CNT7_ENABLE;
                      CyExitCriticalSection(intState);
                  }
              #endif /* (I2C_MODE_SLAVE_ENABLED) */
              
                  /* Clear interrupt source register */
                  (void) I2C_CSR_REG;
              #endif /* (I2C_FF_IMPLEMENTED) */
 275   1      
 276   1          /* Disable interrupt on stop (enabled by write transaction) */
 277   1          I2C_DISABLE_INT_ON_STOP;
 278   1          I2C_ClearPendingInt();
 279   1      
 280   1          /* Reset FSM to default state */
 281   1          I2C_state = I2C_SM_IDLE;
 282   1      
 283   1          /* Clear busy statuses */
 284   1      #if (I2C_MODE_SLAVE_ENABLED)
                  I2C_slStatus &= (uint8) ~(I2C_SSTAT_RD_BUSY | I2C_SSTAT_WR_BUSY);
              #endif /* (I2C_MODE_SLAVE_ENABLED) */
 287   1      }
 288          
 289          
 290          /* [] END OF FILE */
C51 COMPILER V9.51   I2C                                                                   10/22/2015 22:07:39 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION I2C_Init (BEGIN)
                                           ; SOURCE LINE # 49
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 53
0000 9049D6            MOV     DPTR,#049D6H
0003 7402              MOV     A,#02H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 54
0006 9049C8            MOV     DPTR,#049C8H
0009 7481              MOV     A,#081H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 55
000C 9049CA            MOV     DPTR,#049CAH
000F 7408              MOV     A,#08H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 56
0012 9049DB            MOV     DPTR,#049DBH
0015 7406              MOV     A,#06H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 57
0018 A3                INC     DPTR
0019 E4                CLR     A
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 88
001B 9044C9            MOV     DPTR,#044C9H
001E 7480              MOV     A,#080H
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 89
0021 7D07              MOV     R5,#07H
0023 7F0F              MOV     R7,#0FH
0025 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 91
0028 7C00        E     MOV     R4,#HIGH I2C_ISR
002A 7D00        E     MOV     R5,#LOW I2C_ISR
002C 7F0F              MOV     R7,#0FH
002E 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 95
0031 900000      R     MOV     DPTR,#I2C_state
0034 7410              MOV     A,#010H
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 109
0037 E4                CLR     A
0038 900000      E     MOV     DPTR,#I2C_mstrStatus
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 110
003C 900000      E     MOV     DPTR,#I2C_mstrRdBufIndex
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 111
0040 900000      E     MOV     DPTR,#I2C_mstrWrBufIndex
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 113
0044 22                RET     
             ; FUNCTION I2C_Init (END)

             ; FUNCTION I2C_Enable (BEGIN)
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
                                           ; SOURCE LINE # 139
0000 120000      E     LCALL   CyEnterCriticalSection
C51 COMPILER V9.51   I2C                                                                   10/22/2015 22:07:39 PAGE 7   

;---- Variable 'intState' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 140
0003 9043A5            MOV     DPTR,#043A5H
0006 E0                MOVX    A,@DPTR
0007 4404              ORL     A,#04H
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 141
000A 9043B5            MOV     DPTR,#043B5H
000D E0                MOVX    A,@DPTR
000E 4404              ORL     A,#04H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 142
0011 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 158
0014 22                RET     
             ; FUNCTION I2C_Enable (END)

             ; FUNCTION I2C_Start (BEGIN)
                                           ; SOURCE LINE # 189
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
0000 900000      R     MOV     DPTR,#I2C_initVar
0003 E0                MOVX    A,@DPTR
0004 7009              JNZ     ?C0003
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
0006 120000      R     LCALL   I2C_Init
                                           ; SOURCE LINE # 194
0009 900000      R     MOV     DPTR,#I2C_initVar
000C 7401              MOV     A,#01H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 195
000F         ?C0003:
                                           ; SOURCE LINE # 197
000F 120000      R     LCALL   I2C_Enable
                                           ; SOURCE LINE # 198
0012 9044C1            MOV     DPTR,#044C1H
0015 7480              MOV     A,#080H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 199
0018 22                RET     
             ; FUNCTION I2C_Start (END)

             ; FUNCTION I2C_Stop (BEGIN)
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
0000 9044C9            MOV     DPTR,#044C9H
0003 7480              MOV     A,#080H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 226
                                           ; SOURCE LINE # 231
0006 9049CA            MOV     DPTR,#049CAH
0009 E0                MOVX    A,@DPTR
000A 900000      E     MOV     DPTR,#I2C_backup+03H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 232
000E 9049DB            MOV     DPTR,#049DBH
0011 E0                MOVX    A,@DPTR
0012 900000      E     MOV     DPTR,#I2C_backup+04H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 233
C51 COMPILER V9.51   I2C                                                                   10/22/2015 22:07:39 PAGE 8   

0016 9049DC            MOV     DPTR,#049DCH
0019 E0                MOVX    A,@DPTR
001A 900000      E     MOV     DPTR,#I2C_backup+05H
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 236
001E 9049DC            MOV     DPTR,#049DCH
0021 E0                MOVX    A,@DPTR
0022 FE                MOV     R6,A
0023 9049DB            MOV     DPTR,#049DBH
0026 E0                MOVX    A,@DPTR
0027 FD                MOV     R5,A
0028 EE                MOV     A,R6
0029 ED                MOV     A,R5
002A 2401              ADD     A,#01H
002C FF                MOV     R7,A
002D E4                CLR     A
002E 3E                ADDC    A,R6
002F 900000      R     MOV     DPTR,#blockResetCycles
0032 F0                MOVX    @DPTR,A
0033 A3                INC     DPTR
0034 EF                MOV     A,R7
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 239
0036 9049D6            MOV     DPTR,#049D6H
0039 E0                MOVX    A,@DPTR
003A 54FE              ANL     A,#0FEH
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 241
003D 900000      R     MOV     DPTR,#blockResetCycles
0040 E0                MOVX    A,@DPTR
0041 FE                MOV     R6,A
0042 A3                INC     DPTR
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 E4                CLR     A
0046 FC                MOV     R4,A
0047 FD                MOV     R5,A
0048 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 244
004B 120000      E     LCALL   CyEnterCriticalSection
004E 900000      R     MOV     DPTR,#intState
0051 EF                MOV     A,R7
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 245
0053 9043A5            MOV     DPTR,#043A5H
0056 E0                MOVX    A,@DPTR
0057 54FB              ANL     A,#0FBH
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 246
005A 9043B5            MOV     DPTR,#043B5H
005D E0                MOVX    A,@DPTR
005E 54FB              ANL     A,#0FBH
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
0061 900000      R     MOV     DPTR,#intState
0064 E0                MOVX    A,@DPTR
0065 FF                MOV     R7,A
0066 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 250
0069 9049D6            MOV     DPTR,#049D6H
006C E0                MOVX    A,@DPTR
006D 4402              ORL     A,#02H
C51 COMPILER V9.51   I2C                                                                   10/22/2015 22:07:39 PAGE 9   

006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 253
0070 900000      E     MOV     DPTR,#I2C_backup+03H
0073 E0                MOVX    A,@DPTR
0074 FF                MOV     R7,A
0075 9049CA            MOV     DPTR,#049CAH
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 254
0079 EF                MOV     A,R7
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 255
007B 900000      E     MOV     DPTR,#I2C_backup+04H
007E E0                MOVX    A,@DPTR
007F 9049DB            MOV     DPTR,#049DBH
0082 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 256
0083 900000      E     MOV     DPTR,#I2C_backup+05H
0086 E0                MOVX    A,@DPTR
0087 9049DC            MOV     DPTR,#049DCH
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 277
008B 9049D6            MOV     DPTR,#049D6H
008E E0                MOVX    A,@DPTR
008F 54EF              ANL     A,#0EFH
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 278
0092 9044D9            MOV     DPTR,#044D9H
0095 7480              MOV     A,#080H
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 281
0098 900000      R     MOV     DPTR,#I2C_state
009B 7410              MOV     A,#010H
009D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 287
009E 22                RET     
             ; FUNCTION I2C_Stop (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    274    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
