C51 COMPILER V9.51   I2S                                                                   10/22/2015 22:07:40 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE I2S
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\I2S.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\I2S.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.\DP
                    -8051\DP8051_Keil_951\Debug/I2S.lst) CD OT(5,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\I2S.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: I2S.c
   3          * Version 2.60
   4          *
   5          * Description:
   6          *  This file contains the setup, control and status commands for the I2S
   7          *  component.
   8          *
   9          * Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions,
  14          * disclaimers, and limitations in the end user license agreement accompanying
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include "CyLib.h"
  19          #include "I2S.h"
  20          
  21          uint8 I2S_initVar = 0u;
  22          
  23          
  24          /*******************************************************************************
  25          * Function Name: I2S_Enable
  26          ********************************************************************************
  27          *
  28          * Summary:
  29          *  Enables I2S interface. Starts the generation of the sck and ws outputs.
  30          *  The Tx and Rx directions remain disabled. It is not necessary to call
  31          *  I2S_Enable() because the I2S_Start() routine calls this function, which is
  32          *  the preferred method to begin component operation.
  33          *
  34          * Parameters:
  35          *  None.
  36          *
  37          * Return:
  38          *  None.
  39          *
  40          *******************************************************************************/
  41          void I2S_Enable(void) 
  42          {
  43   1          uint8 enableInterrupts;
  44   1      
  45   1          enableInterrupts = CyEnterCriticalSection();
  46   1          I2S_AUX_CONTROL_REG |= I2S_CNT_START;
  47   1          CyExitCriticalSection(enableInterrupts);
  48   1      
  49   1          I2S_CONTROL_REG |= I2S_EN;
  50   1      }
  51          
  52          
  53          /*******************************************************************************
C51 COMPILER V9.51   I2S                                                                   10/22/2015 22:07:40 PAGE 2   

  54          * Function Name: I2S_Init
  55          ********************************************************************************
  56          *
  57          * Summary:
  58          *  Initializes or restores default I2S configuration provided with customizer.
  59          *  It is not necessary to call I2S_Init() because the I2S_Start() routine calls
  60          *  this function, which is the preferred method to begin component operation.
  61          *
  62          * Parameters:
  63          *  None.
  64          *
  65          * Return:
  66          *  None.
  67          *
  68          *******************************************************************************/
  69          void I2S_Init(void) 
  70          {
  71   1          #if (I2S_CLIP_DETECT_ENABLE)
                      static const uint8 CYCODE I2S_posThresholds[] = {64u, 64u, 64u, 64u, 64u};
                      static const int8  CYCODE I2S_negThresholds[] = {-64, -64, -64, -64, -64};
                  #endif /* I2S_CLIP_DETECT_ENABLE */
  75   1      
  76   1          #if (I2S_DYNAMIC_BIT_RESOLUTION)
                      (void)I2S_SetDataBits(I2S_DATA_BITS);
                  #endif /* I2S_DYNAMIC_BIT_RESOLUTION */
  79   1      
  80   1          /* Initialize Tx interrupt source selected in customizer */
  81   1          #if (I2S_TX_DIRECTION_ENABLE)
  82   1              I2S_SET_TX_INT_MASK(CH0, I2S_TX_INT_SOURCE);
  83   1              #if (I2S_TX_STEREO_1_PRESENT)
                          I2S_SET_TX_INT_MASK(CH1, I2S_TX_INT_SOURCE);
                      #endif /* I2S_TX_STEREO_1_PRESENT */
  86   1              #if (I2S_TX_STEREO_2_PRESENT)
                          I2S_SET_TX_INT_MASK(CH2, I2S_TX_INT_SOURCE);
                      #endif /* I2S_TX_STEREO_2_PRESENT */
  89   1              #if (I2S_TX_STEREO_3_PRESENT)
                          I2S_SET_TX_INT_MASK(CH3, I2S_TX_INT_SOURCE);
                      #endif /* I2S_TX_STEREO_3_PRESENT */
  92   1              #if (I2S_TX_STEREO_4_PRESENT)
                          I2S_SET_TX_INT_MASK(CH4, I2S_TX_INT_SOURCE);
                      #endif /* I2S_TX_STEREO_4_PRESENT */
  95   1          #endif /* (I2S_TX_DIRECTION_ENABLE) */
  96   1          
  97   1          /* Initialize Rx interrupt source and clipping thresholds selected in customizer */
  98   1          #if (I2S_RX_DIRECTION_ENABLE)
  99   1              I2S_SET_RX_INT_MASK(CH0, I2S_RX_INT_SOURCE);
 100   1              #if (I2S_CLIP_DETECT_ENABLE)
                          I2S_SET_POS_THRESHOLD(CH0, I2S_posThresholds[I2S_STEREO_0]);
                          I2S_SET_NEG_THRESHOLD(CH0, I2S_negThresholds[I2S_STEREO_0]);
                      #endif /* I2S_CLIP_DETECT_ENABLE */
 104   1              #if (I2S_RX_STEREO_1_PRESENT)
                          I2S_SET_RX_INT_MASK(CH1, I2S_RX_INT_SOURCE);
                          #if (I2S_CLIP_DETECT_ENABLE)
                              I2S_SET_POS_THRESHOLD(CH1, I2S_posThresholds[I2S_STEREO_1]);
                              I2S_SET_NEG_THRESHOLD(CH1, I2S_negThresholds[I2S_STEREO_1]);
                          #endif /* I2S_CLIP_DETECT_ENABLE */
                      #endif /* I2S_RX_STEREO_1_PRESENT */
 111   1              #if (I2S_RX_STEREO_2_PRESENT)
                          I2S_SET_RX_INT_MASK(CH2, I2S_RX_INT_SOURCE);
                          #if (I2S_CLIP_DETECT_ENABLE)
                              I2S_SET_POS_THRESHOLD(CH2, I2S_posThresholds[I2S_STEREO_2]);
                              I2S_SET_NEG_THRESHOLD(CH2, I2S_negThresholds[I2S_STEREO_2]);
C51 COMPILER V9.51   I2S                                                                   10/22/2015 22:07:40 PAGE 3   

                          #endif /* I2S_CLIP_DETECT_ENABLE */
                      #endif /* I2S_RX_STEREO_2_PRESENT */
 118   1              #if (I2S_RX_STEREO_3_PRESENT)
                          I2S_SET_RX_INT_MASK(CH3, I2S_RX_INT_SOURCE);
                          #if (I2S_CLIP_DETECT_ENABLE)
                              I2S_SET_POS_THRESHOLD(CH3, I2S_posThresholds[I2S_STEREO_3]);
                              I2S_SET_NEG_THRESHOLD(CH3, I2S_negThresholds[I2S_STEREO_3]);
                          #endif /* I2S_CLIP_DETECT_ENABLE */
                      #endif /* I2S_RX_STEREO_3_PRESENT */
 125   1              #if (I2S_RX_STEREO_4_PRESENT)
                          I2S_SET_RX_INT_MASK(CH4, I2S_RX_INT_SOURCE);
                          #if (I2S_CLIP_DETECT_ENABLE)
                              I2S_SET_POS_THRESHOLD(CH4, I2S_posThresholds[I2S_STEREO_4]);
                              I2S_SET_NEG_THRESHOLD(CH4, I2S_negThresholds[I2S_STEREO_4]);
                          #endif /* I2S_CLIP_DETECT_ENABLE */
                      #endif /* I2S_RX_STEREO_4_PRESENT */
 132   1          #endif /* (I2S_RX_DIRECTION_ENABLE) */
 133   1      }
 134          
 135          
 136          /*******************************************************************************
 137          * Function Name: I2S_Start
 138          ********************************************************************************
 139          *
 140          * Summary:
 141          *  Starts the I2S interface. Starts the generation of the sck and ws outputs.
 142          *  The Tx and Rx directions remain disabled.
 143          *
 144          * Parameters:
 145          *  None.
 146          *
 147          * Return:
 148          *  None.
 149          *
 150          * Global Variables:
 151          *  I2S_initVar - used to check initial configuration, modified on
 152          *  first function call.
 153          *
 154          * Reentrant:
 155          *  No.
 156          *
 157          *******************************************************************************/
 158          void I2S_Start(void) 
 159          {
 160   1          if(0u == I2S_initVar)
 161   1          {
 162   2              I2S_Init();
 163   2              I2S_initVar = 1u;
 164   2          }
 165   1      
 166   1          I2S_Enable();
 167   1      }
 168          
 169          
 170          /*******************************************************************************
 171          * Function Name: I2S_Stop
 172          ********************************************************************************
 173          *
 174          * Summary:
 175          *  Disables the I2S interface. The sck and ws outputs are set to 0. The Tx and
 176          *  Rx directions are disabled and their FIFOs are cleared.
 177          *
C51 COMPILER V9.51   I2S                                                                   10/22/2015 22:07:40 PAGE 4   

 178          * Parameters:
 179          *  None.
 180          *
 181          * Return:
 182          *  None.
 183          *
 184          *******************************************************************************/
 185          void I2S_Stop(void) 
 186          {
 187   1          uint8 enableInterrupts;
 188   1      
 189   1          I2S_CONTROL_REG &= (uint8)~I2S_EN;
 190   1      
 191   1          enableInterrupts = CyEnterCriticalSection();
 192   1          I2S_AUX_CONTROL_REG &= (uint8)~I2S_CNT_START;
 193   1          CyExitCriticalSection(enableInterrupts);
 194   1      
 195   1          /* Clear counter value to force reload when component is enabled */
 196   1          I2S_CNT_COUNT_REG = 0u;
 197   1      
 198   1          #if (I2S_TX_DIRECTION_ENABLE)
 199   1              I2S_DisableTx();
 200   1              I2S_ClearTxFIFO();
 201   1          #endif /* (I2S_TX_DIRECTION_ENABLE) */
 202   1          
 203   1          #if (I2S_RX_DIRECTION_ENABLE)
 204   1              I2S_DisableRx();
 205   1              I2S_ClearRxFIFO();
 206   1          #endif /* (I2S_RX_DIRECTION_ENABLE) */
 207   1      }
 208          
 209          #if (I2S_DYNAMIC_BIT_RESOLUTION)
                  /*******************************************************************************
                  * Function Name: I2S_SetDataBits
                  ********************************************************************************
                  *
                  * Summary:
                  *  Sets the number of data bits for each sample. The component must be stopped
                  *  before calling this API.
                  *
                  * Parameters:
                  *  dataBits: the number of data bits for each sample. Valid values - 8/16/24/32.
                  *  If Tx or Rx byte swapping is enabled, valid values are 16 and 24.
                  *
                  * Return:
                  *  CYRET_SUCCESS  : Operation is successful
                  *  CYRET_BAD_PARAM: Invalid parameter value
                  *
                  * Side effects:
                  *  Calling this API while the component is operating may cause unexpected
                  *  behavior.
                  *
                  *******************************************************************************/
                  cystatus I2S_SetDataBits(uint8 dataBits)   
                  {
                      cystatus status;
              
                      CYASSERT((dataBits >= I2S_MIN_DATA_BITS) && (dataBits <= I2S_MAX_DATA_BITS));
              
                      status = CYRET_SUCCESS;
                      /* The component must be stopped prior calling this API. Therefore
                      * all the control bits except the bits modified are zeros.
C51 COMPILER V9.51   I2S                                                                   10/22/2015 22:07:40 PAGE 5   

                      */
                      switch(dataBits)
                      {
                      case I2S_8BIT_DATA:
                          I2S_CONTROL_REG = I2S_8BIT_MODE;
                          break;
                      case I2S_16BIT_DATA:
                          I2S_CONTROL_REG = I2S_16BIT_MODE;
                          break;
                      case I2S_24BIT_DATA:
                          I2S_CONTROL_REG = I2S_24BIT_MODE;
                          break;
                      case I2S_32BIT_DATA:
                          I2S_CONTROL_REG = I2S_32BIT_MODE;
                          break;
                      default: status = CYRET_BAD_PARAM;
                          break;
                      }
              
                      return (status);
                  }
              
              #endif /* I2S_DYNAMIC_BIT_RESOLUTION */
 263          
 264          #if(I2S_TX_DIRECTION_ENABLE)
 265              /*******************************************************************************
 266              * Function Name: I2S_EnableTx
 267              ********************************************************************************
 268              *
 269              * Summary:
 270              *  Enables the Tx direction of the I2S interface.  At the next word
 271              *  select falling edge transmission will begin.
 272              *
 273              * Parameters:
 274              *  None.
 275              *
 276              * Return:
 277              *  None.
 278              *
 279              *******************************************************************************/
 280              void I2S_EnableTx(void) 
 281              {
 282   1              uint8 enableInterrupts;
 283   1      
 284   1              enableInterrupts = CyEnterCriticalSection();
 285   1              I2S_TX_STS0_1_ACTL_REG |= I2S_INT_EN;
 286   1              #ifdef I2S_TX_STS2_3_ACTL_REG
                          I2S_TX_STS2_3_ACTL_REG |= I2S_INT_EN;
                      #endif /* I2S_TX_STS2_3_ACTL_REG */
 289   1              #ifdef I2S_TX_STS4_ACTL_REG
                          I2S_TX_STS4_ACTL_REG |= I2S_INT_EN;
                      #endif /* I2S_TX_STS4_ACTL_REG */
 292   1              CyExitCriticalSection(enableInterrupts);
 293   1              
 294   1              I2S_CONTROL_REG |= I2S_TX_EN;
 295   1          }
 296          
 297          
 298              /*******************************************************************************
 299              * Function Name: I2S_DisableTx
 300              ********************************************************************************
 301              *
C51 COMPILER V9.51   I2S                                                                   10/22/2015 22:07:40 PAGE 6   

 302              * Summary:
 303              *  Disables the Tx direction of the I2S interface.  At the next word
 304              *  select falling edge transmission of data will stop and a constant 0 value
 305              *  will be transmitted.
 306              *
 307              * Parameters:
 308              *  None.
 309              *
 310              * Return:
 311              *  None.
 312              *
 313              *******************************************************************************/
 314              void I2S_DisableTx(void) 
 315              {
 316   1              uint8 enableInterrupts;
 317   1      
 318   1              I2S_CONTROL_REG &= (uint8)~I2S_TX_EN;
 319   1      
 320   1              enableInterrupts = CyEnterCriticalSection();
 321   1              I2S_TX_STS0_1_ACTL_REG &= (uint8)~I2S_INT_EN;
 322   1              #ifdef I2S_TX_STS2_3_ACTL_REG
                          I2S_TX_STS2_3_ACTL_REG &= (uint8)~I2S_INT_EN;
                      #endif /* I2S_TX_STS2_3_ACTL_REG */
 325   1              #ifdef I2S_TX_STS4_ACTL_REG
                          I2S_TX_STS4_ACTL_REG &= (uint8)~I2S_INT_EN;
                      #endif /* I2S_TX_STS4_ACTL_REG */
 328   1              CyExitCriticalSection(enableInterrupts);
 329   1          }
 330          
 331          
 332              /*******************************************************************************
 333              * Function Name: I2S_ClearTxFIFO
 334              ********************************************************************************
 335              *
 336              * Summary:
 337              *  Clears out the FIFOs for all Tx channels. Any data present in the FIFO will
 338              *  not be sent. This call should be made only when the Tx direction is disabled.
 339              *
 340              * Parameters:
 341              *  None.
 342              *
 343              * Return:
 344              *  None.
 345              *
 346              *******************************************************************************/
 347              void I2S_ClearTxFIFO(void) 
 348              {
 349   1              uint8 enableInterrupts;
 350   1      
 351   1              enableInterrupts = CyEnterCriticalSection();
 352   1              I2S_CLEAR_TX_FIFO(CH0);
 353   1              #if (I2S_TX_STEREO_1_PRESENT)
                          I2S_CLEAR_TX_FIFO(CH1);
                      #endif /* I2S_TX_STEREO_1_PRESENT */
 356   1              #if (I2S_TX_STEREO_2_PRESENT)
                          I2S_CLEAR_TX_FIFO(CH2);
                      #endif /* I2S_TX_STEREO_2_PRESENT */
 359   1              #if (I2S_TX_STEREO_3_PRESENT)
                          I2S_CLEAR_TX_FIFO(CH3);
                      #endif /* I2S_TX_STEREO_3_PRESENT */
 362   1              #if (I2S_TX_STEREO_4_PRESENT)
                          I2S_CLEAR_TX_FIFO(CH4);
C51 COMPILER V9.51   I2S                                                                   10/22/2015 22:07:40 PAGE 7   

                      #endif /* I2S_TX_STEREO_4_PRESENT */
 365   1              CyExitCriticalSection(enableInterrupts);
 366   1          }
 367          
 368          #endif /* (I2S_TX_DIRECTION_ENABLE) */
 369          
 370          
 371          #if(I2S_RX_DIRECTION_ENABLE)
 372              /*******************************************************************************
 373              * Function Name: I2S_EnableRx
 374              ********************************************************************************
 375              *
 376              * Summary:
 377              *  Enables the Rx direction of the I2S interface.  At the next word
 378              *  select falling edge reception of data will begin.
 379              *
 380              * Parameters:
 381              *  None.
 382              *
 383              * Return:
 384              *  None.
 385              *
 386              *******************************************************************************/
 387              void I2S_EnableRx(void) 
 388              {
 389   1              uint8 enableInterrupts;
 390   1      
 391   1              enableInterrupts = CyEnterCriticalSection();
 392   1              I2S_RX_STS0_1_ACTL_REG |= I2S_INT_EN;
 393   1              #ifdef I2S_RX_STS2_3_ACTL_REG
                          I2S_RX_STS2_3_ACTL_REG |= I2S_INT_EN;
                      #endif /* I2S_RX_STS2_3_ACTL_REG */
 396   1              #ifdef I2S_RX_STS4_ACTL_REG
                          I2S_RX_STS4_ACTL_REG |= I2S_INT_EN;
                      #endif /* I2S_RX_STS4_ACTL_REG */
 399   1              CyExitCriticalSection(enableInterrupts);
 400   1              
 401   1              I2S_CONTROL_REG |= I2S_RX_EN;
 402   1          }
 403          
 404          
 405              /*******************************************************************************
 406              * Function Name: I2S_DisableRx
 407              ********************************************************************************
 408              *
 409              * Summary:
 410              *  Disables the Rx direction of the I2S interface.
 411              *
 412              * Parameters:
 413              *  None.
 414              *
 415              * Return:
 416              *  None.
 417              *
 418              *******************************************************************************/
 419              void I2S_DisableRx(void) 
 420              {
 421   1              uint8 enableInterrupts;
 422   1      
 423   1              I2S_CONTROL_REG &= (uint8)~I2S_RX_EN;
 424   1      
 425   1              enableInterrupts = CyEnterCriticalSection();
C51 COMPILER V9.51   I2S                                                                   10/22/2015 22:07:40 PAGE 8   

 426   1              I2S_RX_STS0_1_ACTL_REG &= (uint8)~I2S_INT_EN;
 427   1              #ifdef I2S_RX_STS2_3_ACTL_REG
                          I2S_RX_STS2_3_ACTL_REG &= (uint8)~I2S_INT_EN;
                      #endif /* I2S_RX_STS2_3_ACTL_REG */
 430   1              #ifdef I2S_RX_STS4_ACTL_REG
                          I2S_RX_STS4_ACTL_REG &= (uint8)~I2S_INT_EN;
                      #endif /* I2S_RX_STS4_ACTL_REG */
 433   1              CyExitCriticalSection(enableInterrupts);
 434   1          }
 435          
 436          
 437              /*******************************************************************************
 438              * Function Name: I2S_ClearRxFIFO
 439              ********************************************************************************
 440              *
 441              * Summary:
 442              *  Clears out the Rx FIFO.  Any data present in the FIFO will be lost.
 443              *  This call should be made only when the Rx direction is disabled.
 444              *
 445              * Parameters:
 446              *  None.
 447              *
 448              * Return:
 449              *  None.
 450              *
 451              *******************************************************************************/
 452              void I2S_ClearRxFIFO(void) 
 453              {
 454   1              uint8 enableInterrupts;
 455   1      
 456   1              enableInterrupts = CyEnterCriticalSection();
 457   1              I2S_CLEAR_RX_FIFO(CH0);
 458   1              #if (I2S_RX_STEREO_1_PRESENT)
                          I2S_CLEAR_RX_FIFO(CH1);
                      #endif /* I2S_RX_STEREO_1_PRESENT */
 461   1              #if (I2S_RX_STEREO_2_PRESENT)
                          I2S_CLEAR_RX_FIFO(CH2);
                      #endif /* I2S_RX_STEREO_2_PRESENT */
 464   1              #if (I2S_RX_STEREO_3_PRESENT)
                          I2S_CLEAR_RX_FIFO(CH3);
                      #endif /* I2S_RX_STEREO_3_PRESENT */
 467   1              #if (I2S_RX_STEREO_4_PRESENT)
                          I2S_CLEAR_RX_FIFO(CH4);
                      #endif /* I2S_RX_STEREO_4_PRESENT */
 470   1              CyExitCriticalSection(enableInterrupts);
 471   1          }
 472          #endif /* (I2S_RX_DIRECTION_ENABLE) */
 473          
 474          
 475          /* [] END OF FILE */
C51 COMPILER V9.51   I2S                                                                   10/22/2015 22:07:40 PAGE 9   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION I2S_Enable (BEGIN)
                                           ; SOURCE LINE # 41
                                           ; SOURCE LINE # 42
                                           ; SOURCE LINE # 45
0000 120000      E     LCALL   CyEnterCriticalSection
;---- Variable 'enableInterrupts' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 46
0003 906490            MOV     DPTR,#06490H
0006 E0                MOVX    A,@DPTR
0007 4420              ORL     A,#020H
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 47
000A 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 49
000D 906471            MOV     DPTR,#06471H
0010 E0                MOVX    A,@DPTR
0011 4404              ORL     A,#04H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 50
0014 22                RET     
             ; FUNCTION I2S_Enable (END)

             ; FUNCTION I2S_Init (BEGIN)
                                           ; SOURCE LINE # 69
                                           ; SOURCE LINE # 70
                                           ; SOURCE LINE # 82
0000 906487            MOV     DPTR,#06487H
0003 E0                MOVX    A,@DPTR
0004 54F8              ANL     A,#0F8H
0006 F0                MOVX    @DPTR,A
0007 E0                MOVX    A,@DPTR
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 99
0009 906481            MOV     DPTR,#06481H
000C E0                MOVX    A,@DPTR
000D 54F8              ANL     A,#0F8H
000F F0                MOVX    @DPTR,A
0010 E0                MOVX    A,@DPTR
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 133
0012 22                RET     
             ; FUNCTION I2S_Init (END)

             ; FUNCTION I2S_Start (BEGIN)
                                           ; SOURCE LINE # 158
                                           ; SOURCE LINE # 159
                                           ; SOURCE LINE # 160
0000 900000      R     MOV     DPTR,#I2S_initVar
0003 E0                MOVX    A,@DPTR
0004 7009              JNZ     ?C0009
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 162
0006 120000      R     LCALL   I2S_Init
                                           ; SOURCE LINE # 163
0009 900000      R     MOV     DPTR,#I2S_initVar
000C 7401              MOV     A,#01H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 164
000F         ?C0009:
C51 COMPILER V9.51   I2S                                                                   10/22/2015 22:07:40 PAGE 10  

                                           ; SOURCE LINE # 166
000F 120000      R     LCALL   I2S_Enable
                                           ; SOURCE LINE # 167
0012 22                RET     
             ; FUNCTION I2S_Start (END)

             ; FUNCTION I2S_Stop (BEGIN)
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 189
0000 906471            MOV     DPTR,#06471H
0003 E0                MOVX    A,@DPTR
0004 54FB              ANL     A,#0FBH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 191
0007 120000      E     LCALL   CyEnterCriticalSection
;---- Variable 'enableInterrupts' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 192
000A 906490            MOV     DPTR,#06490H
000D E0                MOVX    A,@DPTR
000E 54DF              ANL     A,#0DFH
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 193
0011 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 196
0014 906470            MOV     DPTR,#06470H
0017 E4                CLR     A
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 199
0019 120000      R     LCALL   I2S_DisableTx
                                           ; SOURCE LINE # 200
001C 120000      R     LCALL   I2S_ClearTxFIFO
                                           ; SOURCE LINE # 204
001F 120000      R     LCALL   I2S_DisableRx
                                           ; SOURCE LINE # 205
0022 120000      R     LCALL   I2S_ClearRxFIFO
                                           ; SOURCE LINE # 207
0025 22                RET     
             ; FUNCTION I2S_Stop (END)

             ; FUNCTION I2S_EnableTx (BEGIN)
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 281
                                           ; SOURCE LINE # 284
0000 120000      E     LCALL   CyEnterCriticalSection
;---- Variable 'enableInterrupts' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 285
0003 906497            MOV     DPTR,#06497H
0006 E0                MOVX    A,@DPTR
0007 4410              ORL     A,#010H
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 292
000A 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 294
000D 906471            MOV     DPTR,#06471H
0010 E0                MOVX    A,@DPTR
0011 4401              ORL     A,#01H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 295
0014 22                RET     
             ; FUNCTION I2S_EnableTx (END)

C51 COMPILER V9.51   I2S                                                                   10/22/2015 22:07:40 PAGE 11  

             ; FUNCTION I2S_DisableTx (BEGIN)
                                           ; SOURCE LINE # 314
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 318
0000 906471            MOV     DPTR,#06471H
0003 E0                MOVX    A,@DPTR
0004 54FE              ANL     A,#0FEH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 320
0007 120000      E     LCALL   CyEnterCriticalSection
;---- Variable 'enableInterrupts' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 321
000A 906497            MOV     DPTR,#06497H
000D E0                MOVX    A,@DPTR
000E 54EF              ANL     A,#0EFH
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 328
0011 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 329
0014 22                RET     
             ; FUNCTION I2S_DisableTx (END)

             ; FUNCTION I2S_ClearTxFIFO (BEGIN)
                                           ; SOURCE LINE # 347
                                           ; SOURCE LINE # 348
                                           ; SOURCE LINE # 351
0000 120000      E     LCALL   CyEnterCriticalSection
;---- Variable 'enableInterrupts' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 352
0003 906497            MOV     DPTR,#06497H
0006 E0                MOVX    A,@DPTR
0007 4403              ORL     A,#03H
0009 F0                MOVX    @DPTR,A
000A E0                MOVX    A,@DPTR
000B 54FC              ANL     A,#0FCH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 365
000E 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 366
0011 22                RET     
             ; FUNCTION I2S_ClearTxFIFO (END)

             ; FUNCTION I2S_EnableRx (BEGIN)
                                           ; SOURCE LINE # 387
                                           ; SOURCE LINE # 388
                                           ; SOURCE LINE # 391
0000 120000      E     LCALL   CyEnterCriticalSection
;---- Variable 'enableInterrupts' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 392
0003 906491            MOV     DPTR,#06491H
0006 E0                MOVX    A,@DPTR
0007 4410              ORL     A,#010H
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 399
000A 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 401
000D 906471            MOV     DPTR,#06471H
0010 E0                MOVX    A,@DPTR
0011 4402              ORL     A,#02H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 402
0014 22                RET     
C51 COMPILER V9.51   I2S                                                                   10/22/2015 22:07:40 PAGE 12  

             ; FUNCTION I2S_EnableRx (END)

             ; FUNCTION I2S_DisableRx (BEGIN)
                                           ; SOURCE LINE # 419
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 423
0000 906471            MOV     DPTR,#06471H
0003 E0                MOVX    A,@DPTR
0004 54FD              ANL     A,#0FDH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 425
0007 120000      E     LCALL   CyEnterCriticalSection
;---- Variable 'enableInterrupts' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 426
000A 906491            MOV     DPTR,#06491H
000D E0                MOVX    A,@DPTR
000E 54EF              ANL     A,#0EFH
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 433
0011 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 434
0014 22                RET     
             ; FUNCTION I2S_DisableRx (END)

             ; FUNCTION I2S_ClearRxFIFO (BEGIN)
                                           ; SOURCE LINE # 452
                                           ; SOURCE LINE # 453
                                           ; SOURCE LINE # 456
0000 120000      E     LCALL   CyEnterCriticalSection
;---- Variable 'enableInterrupts' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 457
0003 906493            MOV     DPTR,#06493H
0006 E0                MOVX    A,@DPTR
0007 4403              ORL     A,#03H
0009 F0                MOVX    @DPTR,A
000A E0                MOVX    A,@DPTR
000B 54FC              ANL     A,#0FCH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 470
000E 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 471
0011 22                RET     
             ; FUNCTION I2S_ClearRxFIFO (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    217    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
