C51 COMPILER V9.51   USBFS_PM                                                              10/22/2015 22:07:38 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USBFS_PM
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\USBFS_pm.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\USBFS_pm.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR
                    -(.\DP8051\DP8051_Keil_951\Debug/USBFS_pm.lst) CD OT(5,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\USBFS_pm.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: USBFS_pm.c
   3          * Version 2.80
   4          *
   5          * Description:
   6          *  This file provides Suspend/Resume APIs functionality.
   7          *
   8          * Note:
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "project.h"
  18          #include "USBFS.h"
  19          #include "USBFS_pvt.h"
  20          
  21          
  22          
  23          /***************************************
  24          * Custom Declarations
  25          ***************************************/
  26          /* `#START PM_CUSTOM_DECLARATIONS` Place your declaration here */
  27          
  28          /* `#END` */
  29          
  30          
  31          /***************************************
  32          * Local data allocation
  33          ***************************************/
  34          
  35          static USBFS_BACKUP_STRUCT  USBFS_backup;
  36          
  37          
  38          #if(USBFS_DP_ISR_REMOVE == 0u)
  39          
  40              /*******************************************************************************
  41              * Function Name: USBFS_DP_Interrupt
  42              ********************************************************************************
  43              *
  44              * Summary:
  45              *  This Interrupt Service Routine handles DP pin changes for wake-up from
  46              *  the sleep mode.
  47              *
  48              * Parameters:
  49              *  None.
  50              *
  51              * Return:
  52              *  None.
  53              *
C51 COMPILER V9.51   USBFS_PM                                                              10/22/2015 22:07:38 PAGE 2   

  54              *******************************************************************************/
  55              CY_ISR(USBFS_DP_ISR)
  56              {
  57   1              #ifdef USBFS_DP_ISR_ENTRY_CALLBACK
                          USBFS_DP_ISR_EntryCallback();
                      #endif /* USBFS_DP_ISR_ENTRY_CALLBACK */
  60   1      
  61   1              /* `#START DP_USER_CODE` Place your code here */
  62   1      
  63   1              /* `#END` */
  64   1      
  65   1              /* Clears active interrupt */
  66   1              CY_GET_REG8(USBFS_DP_INTSTAT_PTR);
  67   1      
  68   1              #ifdef USBFS_DP_ISR_EXIT_CALLBACK
                          USBFS_DP_ISR_ExitCallback();
                      #endif /* USBFS_DP_ISR_EXIT_CALLBACK */
  71   1          }
  72          
  73          #endif /* (USBFS_DP_ISR_REMOVE == 0u) */
  74          
  75          
  76          /*******************************************************************************
  77          * Function Name: USBFS_SaveConfig
  78          ********************************************************************************
  79          *
  80          * Summary:
  81          *  Saves the current user configuration.
  82          *
  83          * Parameters:
  84          *  None.
  85          *
  86          * Return:
  87          *  None.
  88          *
  89          * Reentrant:
  90          *  No.
  91          *
  92          *******************************************************************************/
  93          void USBFS_SaveConfig(void) 
  94          {
  95   1      
  96   1      }
  97          
  98          
  99          /*******************************************************************************
 100          * Function Name: USBFS_RestoreConfig
 101          ********************************************************************************
 102          *
 103          * Summary:
 104          *  Restores the current user configuration.
 105          *
 106          * Parameters:
 107          *  None.
 108          *
 109          * Return:
 110          *  None.
 111          *
 112          * Reentrant:
 113          *  No.
 114          *
 115          *******************************************************************************/
C51 COMPILER V9.51   USBFS_PM                                                              10/22/2015 22:07:38 PAGE 3   

 116          void USBFS_RestoreConfig(void) 
 117          {
 118   1          if(USBFS_configuration != 0u)
 119   1          {
 120   2              USBFS_ConfigReg();
 121   2          }
 122   1      }
 123          
 124          
 125          /*******************************************************************************
 126          * Function Name: USBFS_Suspend
 127          ********************************************************************************
 128          *
 129          * Summary:
 130          *  This function disables the USBFS block and prepares for power down mode.
 131          *
 132          * Parameters:
 133          *  None.
 134          *
 135          * Return:
 136          *   None.
 137          *
 138          * Global variables:
 139          *  USBFS_backup.enable:  modified.
 140          *
 141          * Reentrant:
 142          *  No.
 143          *
 144          *******************************************************************************/
 145          void USBFS_Suspend(void) 
 146          {
 147   1          uint8 enableInterrupts;
 148   1          enableInterrupts = CyEnterCriticalSection();
 149   1      
 150   1          if((CY_GET_REG8(USBFS_CR0_PTR) & USBFS_CR0_ENABLE) != 0u)
 151   1          {   /* USB block is enabled */
 152   2              USBFS_backup.enableState = 1u;
 153   2      
 154   2              #if(USBFS_EP_MM != USBFS__EP_MANUAL)
 155   2                  USBFS_Stop_DMA(USBFS_MAX_EP);     /* Stop all DMAs */
 156   2              #endif   /*  USBFS_EP_MM != USBFS__EP_MANUAL */
 157   2      
 158   2              /* Ensure USB transmit enable is low (USB_USBIO_CR0.ten). - Manual Transmission - Disabled */
 159   2              USBFS_USBIO_CR0_REG &= (uint8)~USBFS_USBIO_CR0_TEN;
 160   2              CyDelayUs(0u);  /*~50ns delay */
 161   2      
 162   2              /* Disable the USBIO by asserting PM.USB_CR0.fsusbio_pd_n(Inverted) and pd_pullup_hv(Inverted) hig
             -h. */
 163   2              USBFS_PM_USB_CR0_REG &=
 164   2                                      (uint8)~(USBFS_PM_USB_CR0_PD_N | USBFS_PM_USB_CR0_PD_PULLUP_N);
 165   2      
 166   2              /* Disable the SIE */
 167   2              USBFS_CR0_REG &= (uint8)~USBFS_CR0_ENABLE;
 168   2      
 169   2              CyDelayUs(0u);  /* ~50ns delay */
 170   2              /* Store mode and Disable VRegulator*/
 171   2              USBFS_backup.mode = USBFS_CR1_REG & USBFS_CR1_REG_ENABLE;
 172   2              USBFS_CR1_REG &= (uint8)~USBFS_CR1_REG_ENABLE;
 173   2      
 174   2              CyDelayUs(1u);  /* 0.5 us min delay */
 175   2              /* Disable the USBIO reference by setting PM.USB_CR0.fsusbio_ref_en.*/
 176   2              USBFS_PM_USB_CR0_REG &= (uint8)~USBFS_PM_USB_CR0_REF_EN;
C51 COMPILER V9.51   USBFS_PM                                                              10/22/2015 22:07:38 PAGE 4   

 177   2      
 178   2              /* Switch DP and DM terminals to GPIO mode and disconnect 1.5k pullup*/
 179   2              USBFS_USBIO_CR1_REG |= USBFS_USBIO_CR1_IOMODE;
 180   2      
 181   2              /* Disable USB in ACT PM */
 182   2              USBFS_PM_ACT_CFG_REG &= (uint8)~USBFS_PM_ACT_EN_FSUSB;
 183   2              /* Disable USB block for Standby Power Mode */
 184   2              USBFS_PM_STBY_CFG_REG &= (uint8)~USBFS_PM_STBY_EN_FSUSB;
 185   2              CyDelayUs(1u); /* min  0.5us delay required */
 186   2      
 187   2          }
 188   1          else
 189   1          {
 190   2              USBFS_backup.enableState = 0u;
 191   2          }
 192   1      
 193   1          CyExitCriticalSection(enableInterrupts);
 194   1      
 195   1          /* Set the DP Interrupt for wake-up from sleep mode. */
 196   1          #if(USBFS_DP_ISR_REMOVE == 0u)
 197   1              (void) CyIntSetVector(USBFS_DP_INTC_VECT_NUM, &USBFS_DP_ISR);
 198   1              CyIntSetPriority(USBFS_DP_INTC_VECT_NUM, USBFS_DP_INTC_PRIOR);
 199   1              CyIntClearPending(USBFS_DP_INTC_VECT_NUM);
 200   1              CyIntEnable(USBFS_DP_INTC_VECT_NUM);
 201   1          #endif /* (USBFS_DP_ISR_REMOVE == 0u) */
 202   1      }
 203          
 204          
 205          /*******************************************************************************
 206          * Function Name: USBFS_Resume
 207          ********************************************************************************
 208          *
 209          * Summary:
 210          *  This function enables the USBFS block after power down mode.
 211          *
 212          * Parameters:
 213          *  None.
 214          *
 215          * Return:
 216          *  None.
 217          *
 218          * Global variables:
 219          *  USBFS_backup - checked.
 220          *
 221          * Reentrant:
 222          *  No.
 223          *
 224          *******************************************************************************/
 225          void USBFS_Resume(void) 
 226          {
 227   1          uint8 enableInterrupts;
 228   1          enableInterrupts = CyEnterCriticalSection();
 229   1      
 230   1          if(USBFS_backup.enableState != 0u)
 231   1          {
 232   2              #if(USBFS_DP_ISR_REMOVE == 0u)
 233   2                  CyIntDisable(USBFS_DP_INTC_VECT_NUM);
 234   2              #endif /*  USBFS_DP_ISR_REMOVE */
 235   2      
 236   2              /* Enable USB block */
 237   2              USBFS_PM_ACT_CFG_REG |= USBFS_PM_ACT_EN_FSUSB;
 238   2              /* Enable USB block for Standby Power Mode */
C51 COMPILER V9.51   USBFS_PM                                                              10/22/2015 22:07:38 PAGE 5   

 239   2              USBFS_PM_STBY_CFG_REG |= USBFS_PM_STBY_EN_FSUSB;
 240   2              /* Enable core clock */
 241   2              USBFS_USB_CLK_EN_REG |= USBFS_USB_CLK_ENABLE;
 242   2      
 243   2              /* Enable the USBIO reference by setting PM.USB_CR0.fsusbio_ref_en.*/
 244   2              USBFS_PM_USB_CR0_REG |= USBFS_PM_USB_CR0_REF_EN;
 245   2              /* The reference will be available ~40us after power restored */
 246   2              CyDelayUs(40u);
 247   2              /* Return VRegulator*/
 248   2              USBFS_CR1_REG |= USBFS_backup.mode;
 249   2              CyDelayUs(0u);  /*~50ns delay */
 250   2              /* Enable USBIO */
 251   2              USBFS_PM_USB_CR0_REG |= USBFS_PM_USB_CR0_PD_N;
 252   2              CyDelayUs(2u);
 253   2              /* Set the USBIO pull-up enable */
 254   2              USBFS_PM_USB_CR0_REG |= USBFS_PM_USB_CR0_PD_PULLUP_N;
 255   2      
 256   2              /* Re-init Arbiter configuration for DMA transfers */
 257   2              #if(USBFS_EP_MM != USBFS__EP_MANUAL)
 258   2                  /* Usb arb interrupt enable */
 259   2                  USBFS_ARB_INT_EN_REG = USBFS_ARB_INT_MASK;
 260   2                  #if(USBFS_EP_MM == USBFS__EP_DMAMANUAL)
                              USBFS_ARB_CFG_REG = USBFS_ARB_CFG_MANUAL_DMA;
                          #endif   /*  USBFS_EP_MM == USBFS__EP_DMAMANUAL */
 263   2                  #if(USBFS_EP_MM == USBFS__EP_DMAAUTO)
 264   2                      /*Set cfg cmplt this rises DMA request when the full configuration is done */
 265   2                      USBFS_ARB_CFG_REG = USBFS_ARB_CFG_AUTO_DMA | USBFS_ARB_CFG_AUTO_MEM;
 266   2                  #endif   /*  USBFS_EP_MM == USBFS__EP_DMAAUTO */
 267   2              #endif   /*  USBFS_EP_MM != USBFS__EP_MANUAL */
 268   2      
 269   2              /* STALL_IN_OUT */
 270   2              CY_SET_REG8(USBFS_EP0_CR_PTR, USBFS_MODE_STALL_IN_OUT);
 271   2              /* Enable the SIE with a last address */
 272   2              USBFS_CR0_REG |= USBFS_CR0_ENABLE;
 273   2              CyDelayCycles(1u);
 274   2              /* Finally, Enable d+ pullup and select iomode to USB mode*/
 275   2              CY_SET_REG8(USBFS_USBIO_CR1_PTR, USBFS_USBIO_CR1_USBPUEN);
 276   2      
 277   2              /* Restore USB register settings */
 278   2              USBFS_RestoreConfig();
 279   2          }
 280   1      
 281   1          CyExitCriticalSection(enableInterrupts);
 282   1      }
 283          
 284          
 285          /* [] END OF FILE */
C51 COMPILER V9.51   USBFS_PM                                                              10/22/2015 22:07:38 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION USBFS_DP_ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
0006 C085              PUSH    DPH1
0008 C084              PUSH    DPL1
000A C086              PUSH    DPS
000C 758600            MOV     DPS,#00H
000F C000        E     PUSH    ?C?XPAGE1SFR
0011 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0014 C0D0              PUSH    PSW
0016 75D000            MOV     PSW,#00H
0019 C007              PUSH    AR7
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 66
001B 90458F            MOV     DPTR,#0458FH
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
                                           ; SOURCE LINE # 71
0020 D007              POP     AR7
0022 D0D0              POP     PSW
0024 D000        E     POP     ?C?XPAGE1SFR
0026 D086              POP     DPS
0028 D084              POP     DPL1
002A D085              POP     DPH1
002C D082              POP     DPL
002E D083              POP     DPH
0030 D0E0              POP     ACC
0032 32                RETI    
             ; FUNCTION USBFS_DP_ISR (END)

             ; FUNCTION USBFS_SaveConfig (BEGIN)
                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 96
0000 22                RET     
             ; FUNCTION USBFS_SaveConfig (END)

             ; FUNCTION USBFS_RestoreConfig (BEGIN)
                                           ; SOURCE LINE # 116
                                           ; SOURCE LINE # 117
                                           ; SOURCE LINE # 118
0000 900000      E     MOV     DPTR,#USBFS_configuration
0003 E0                MOVX    A,@DPTR
0004 6003              JZ      ?C0004
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 120
0006 120000      E     LCALL   USBFS_ConfigReg
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 122
0009         ?C0004:
0009 22                RET     
             ; FUNCTION USBFS_RestoreConfig (END)

             ; FUNCTION USBFS_Suspend (BEGIN)
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 148
0000 120000      E     LCALL   CyEnterCriticalSection
C51 COMPILER V9.51   USBFS_PM                                                              10/22/2015 22:07:38 PAGE 7   

0003 900000      R     MOV     DPTR,#enableInterrupts
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 150
0008 906008            MOV     DPTR,#06008H
000B E0                MOVX    A,@DPTR
000C 5480              ANL     A,#080H
000E 6069              JZ      ?C0005
                                           ; SOURCE LINE # 151
                                           ; SOURCE LINE # 152
0010 900000      R     MOV     DPTR,#USBFS_backup
0013 7401              MOV     A,#01H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 155
0016 7F09              MOV     R7,#09H
0018 120000      E     LCALL   _USBFS_Stop_DMA
                                           ; SOURCE LINE # 159
001B 906010            MOV     DPTR,#06010H
001E E0                MOVX    A,@DPTR
001F 547F              ANL     A,#07FH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 160
0022 E4                CLR     A
0023 FF                MOV     R7,A
0024 FE                MOV     R6,A
0025 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 164
0028 904394            MOV     DPTR,#04394H
002B E0                MOVX    A,@DPTR
002C 54F9              ANL     A,#0F9H
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 167
002F 906008            MOV     DPTR,#06008H
0032 E0                MOVX    A,@DPTR
0033 547F              ANL     A,#07FH
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 169
0036 E4                CLR     A
0037 FF                MOV     R7,A
0038 FE                MOV     R6,A
0039 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 171
003C 906009            MOV     DPTR,#06009H
003F E0                MOVX    A,@DPTR
0040 5401              ANL     A,#01H
0042 900000      R     MOV     DPTR,#USBFS_backup+01H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
0046 906009            MOV     DPTR,#06009H
0049 E0                MOVX    A,@DPTR
004A 54FE              ANL     A,#0FEH
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 174
004D 7F01              MOV     R7,#01H
004F 7E00              MOV     R6,#00H
0051 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 176
0054 904394            MOV     DPTR,#04394H
0057 E0                MOVX    A,@DPTR
0058 54FE              ANL     A,#0FEH
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 179
C51 COMPILER V9.51   USBFS_PM                                                              10/22/2015 22:07:38 PAGE 8   

005B 906012            MOV     DPTR,#06012H
005E E0                MOVX    A,@DPTR
005F 4420              ORL     A,#020H
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 182
0062 9043A5            MOV     DPTR,#043A5H
0065 E0                MOVX    A,@DPTR
0066 54FE              ANL     A,#0FEH
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 184
0069 9043B5            MOV     DPTR,#043B5H
006C E0                MOVX    A,@DPTR
006D 54FE              ANL     A,#0FEH
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 185
0070 7F01              MOV     R7,#01H
0072 7E00              MOV     R6,#00H
0074 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 187
0077 8005              SJMP    ?C0006
0079         ?C0005:
                                           ; SOURCE LINE # 189
                                           ; SOURCE LINE # 190
0079 E4                CLR     A
007A 900000      R     MOV     DPTR,#USBFS_backup
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 191
007E         ?C0006:
                                           ; SOURCE LINE # 193
007E 900000      R     MOV     DPTR,#enableInterrupts
0081 E0                MOVX    A,@DPTR
0082 FF                MOV     R7,A
0083 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 197
0086 7C00        R     MOV     R4,#HIGH USBFS_DP_ISR
0088 7D00        R     MOV     R5,#LOW USBFS_DP_ISR
008A 7F0C              MOV     R7,#0CH
008C 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 198
008F 7D07              MOV     R5,#07H
0091 7F0C              MOV     R7,#0CH
0093 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 199
0096 9044D9            MOV     DPTR,#044D9H
0099 7410              MOV     A,#010H
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 200
009C 9044C1            MOV     DPTR,#044C1H
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
00A0 22                RET     
             ; FUNCTION USBFS_Suspend (END)

             ; FUNCTION USBFS_Resume (BEGIN)
                                           ; SOURCE LINE # 225
                                           ; SOURCE LINE # 226
                                           ; SOURCE LINE # 228
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#enableInterrupts
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 230
C51 COMPILER V9.51   USBFS_PM                                                              10/22/2015 22:07:38 PAGE 9   

0008 900000      R     MOV     DPTR,#USBFS_backup
000B E0                MOVX    A,@DPTR
000C 7003              JNZ     $ + 5H
000E 020000      R     LJMP    ?C0008
                                           ; SOURCE LINE # 231
                                           ; SOURCE LINE # 233
0011 9044C9            MOV     DPTR,#044C9H
0014 7410              MOV     A,#010H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 237
0017 9043A5            MOV     DPTR,#043A5H
001A E0                MOVX    A,@DPTR
001B 4401              ORL     A,#01H
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 239
001E 9043B5            MOV     DPTR,#043B5H
0021 E0                MOVX    A,@DPTR
0022 4401              ORL     A,#01H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 241
0025 90609D            MOV     DPTR,#0609DH
0028 E0                MOVX    A,@DPTR
0029 4401              ORL     A,#01H
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 244
002C 904394            MOV     DPTR,#04394H
002F E0                MOVX    A,@DPTR
0030 4401              ORL     A,#01H
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 246
0033 7F28              MOV     R7,#028H
0035 7E00              MOV     R6,#00H
0037 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 248
003A 906009            MOV     DPTR,#06009H
003D C083              PUSH    DPH
003F C082              PUSH    DPL
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 900000      R     MOV     DPTR,#USBFS_backup+01H
0046 E0                MOVX    A,@DPTR
0047 FE                MOV     R6,A
0048 EF                MOV     A,R7
0049 4E                ORL     A,R6
004A D082              POP     DPL
004C D083              POP     DPH
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 249
004F E4                CLR     A
0050 FF                MOV     R7,A
0051 FE                MOV     R6,A
0052 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 251
0055 904394            MOV     DPTR,#04394H
0058 E0                MOVX    A,@DPTR
0059 4402              ORL     A,#02H
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 252
005C 7F02              MOV     R7,#02H
005E 7E00              MOV     R6,#00H
0060 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 254
C51 COMPILER V9.51   USBFS_PM                                                              10/22/2015 22:07:38 PAGE 10  

0063 904394            MOV     DPTR,#04394H
0066 E0                MOVX    A,@DPTR
0067 4404              ORL     A,#04H
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 259
006A 90609E            MOV     DPTR,#0609EH
006D 7406              MOV     A,#06H
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 265
0070 90609C            MOV     DPTR,#0609CH
0073 7450              MOV     A,#050H
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 270
0076 906028            MOV     DPTR,#06028H
0079 7403              MOV     A,#03H
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 272
007C 906008            MOV     DPTR,#06008H
007F E0                MOVX    A,@DPTR
0080 4480              ORL     A,#080H
0082 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 273
0083 E4                CLR     A
0084 7F01              MOV     R7,#01H
0086 FE                MOV     R6,A
0087 FD                MOV     R5,A
0088 FC                MOV     R4,A
0089 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 275
008C 906012            MOV     DPTR,#06012H
008F 7404              MOV     A,#04H
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 278
0092 120000      R     LCALL   USBFS_RestoreConfig
                                           ; SOURCE LINE # 279
0095         ?C0008:
                                           ; SOURCE LINE # 281
0095 900000      R     MOV     DPTR,#enableInterrupts
0098 E0                MOVX    A,@DPTR
0099 FF                MOV     R7,A
009A 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 282
009D 22                RET     
             ; FUNCTION USBFS_Resume (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    381    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
