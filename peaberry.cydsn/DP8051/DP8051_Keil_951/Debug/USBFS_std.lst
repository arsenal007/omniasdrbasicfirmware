C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USBFS_STD
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\USBFS_std.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\USBFS_std.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) P
                    -R(.\DP8051\DP8051_Keil_951\Debug/USBFS_std.lst) CD OT(5,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\USBFS_std.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: USBFS_std.c
   3          * Version 2.80
   4          *
   5          * Description:
   6          *  USB Standard request handler.
   7          *
   8          * Note:
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "USBFS.h"
  18          #include "USBFS_cdc.h"
  19          #include "USBFS_pvt.h"
  20          #if defined(USBFS_ENABLE_MIDI_STREAMING)
                  #include "USBFS_midi.h"
              #endif /*  USBFS_ENABLE_MIDI_STREAMING*/
  23          
  24          
  25          /***************************************
  26          *   Static data allocation
  27          ***************************************/
  28          
  29          #if defined(USBFS_ENABLE_FWSN_STRING)
                  static volatile uint8 *USBFS_fwSerialNumberStringDescriptor;
                  static volatile uint8 USBFS_snStringConfirm = USBFS_FALSE;
              #endif  /* USBFS_ENABLE_FWSN_STRING */
  33          
  34          #if defined(USBFS_ENABLE_FWSN_STRING)
              
                  /*******************************************************************************
                  * Function Name: USBFS_SerialNumString
                  ********************************************************************************
                  *
                  * Summary:
                  *  Application firmware may supply the source of the USB device descriptors
                  *  serial number string during runtime.
                  *
                  * Parameters:
                  *  snString:  pointer to string.
                  *
                  * Return:
                  *  None.
                  *
                  * Reentrant:
                  *  No.
                  *
                  *******************************************************************************/
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 2   

                  void  USBFS_SerialNumString(uint8 snString[]) 
                  {
                      USBFS_snStringConfirm = USBFS_FALSE;
                      if(snString != NULL)
                      {
                          /* Check descriptor validation */
                          if( (snString[0u] > 1u ) && (snString[1u] == USBFS_DESCR_STRING) )
                          {
                              USBFS_fwSerialNumberStringDescriptor = snString;
                              USBFS_snStringConfirm = USBFS_TRUE;
                          }
                      }
                  }
              
              #endif  /* USBFS_ENABLE_FWSN_STRING */
  69          
  70          
  71          /*******************************************************************************
  72          * Function Name: USBFS_HandleStandardRqst
  73          ********************************************************************************
  74          *
  75          * Summary:
  76          *  This Routine dispatches standard requests
  77          *
  78          * Parameters:
  79          *  None.
  80          *
  81          * Return:
  82          *  TRUE if request handled.
  83          *
  84          * Reentrant:
  85          *  No.
  86          *
  87          *******************************************************************************/
  88          uint8 USBFS_HandleStandardRqst(void) 
  89          {
  90   1          uint8 requestHandled = USBFS_FALSE;
  91   1          uint8 interfaceNumber;
  92   1          uint8 configurationN;
  93   1          #if defined(USBFS_ENABLE_STRINGS)
  94   1              volatile uint8 *pStr = 0u;
  95   1              #if defined(USBFS_ENABLE_DESCRIPTOR_STRINGS)
  96   1                  uint8 nStr;
  97   1                  uint8 descrLength;
  98   1              #endif /* USBFS_ENABLE_DESCRIPTOR_STRINGS */
  99   1          #endif /* USBFS_ENABLE_STRINGS */
 100   1          static volatile uint8 USBFS_tBuffer[USBFS_STATUS_LENGTH_MAX];
 101   1          const T_USBFS_LUT CYCODE *pTmp;
 102   1          USBFS_currentTD.count = 0u;
 103   1      
 104   1          if ((CY_GET_REG8(USBFS_bmRequestType) & USBFS_RQST_DIR_MASK) == USBFS_RQST_DIR_D2H)
 105   1          {
 106   2              /* Control Read */
 107   2              switch (CY_GET_REG8(USBFS_bRequest))
 108   2              {
 109   3                  case USBFS_GET_DESCRIPTOR:
 110   3                      if (CY_GET_REG8(USBFS_wValueHi) == USBFS_DESCR_DEVICE)
 111   3                      {
 112   4                          pTmp = USBFS_GetDeviceTablePtr();
 113   4                          USBFS_currentTD.pData = (volatile uint8 *)pTmp->p_list;
 114   4                          USBFS_currentTD.count = USBFS_DEVICE_DESCR_LENGTH;
 115   4                          requestHandled  = USBFS_InitControlRead();
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 3   

 116   4                      }
 117   3                      else if (CY_GET_REG8(USBFS_wValueHi) == USBFS_DESCR_CONFIG)
 118   3                      {
 119   4                          pTmp = USBFS_GetConfigTablePtr(CY_GET_REG8(USBFS_wValueLo));
 120   4                          if( pTmp != NULL )  /* Verify that requested descriptor exists */
 121   4                          {
 122   5                              USBFS_currentTD.pData = (volatile uint8 *)pTmp->p_list;
 123   5                              USBFS_currentTD.count = ((uint16)(USBFS_currentTD.pData)[ \
 124   5                                                USBFS_CONFIG_DESCR_TOTAL_LENGTH_HI] << 8u) | \
 125   5                                               (USBFS_currentTD.pData)[USBFS_CONFIG_DESCR_TOTAL_LENGTH_LOW];
 126   5                              requestHandled  = USBFS_InitControlRead();
 127   5                          }
 128   4                      }
 129   3                      #if defined(USBFS_ENABLE_STRINGS)
 130   3                      else if (CY_GET_REG8(USBFS_wValueHi) == USBFS_DESCR_STRING)
 131   3                      {
 132   4                          /* Descriptor Strings*/
 133   4                          #if defined(USBFS_ENABLE_DESCRIPTOR_STRINGS)
 134   4                              nStr = 0u;
 135   4                              pStr = (volatile uint8 *)&USBFS_STRING_DESCRIPTORS[0u];
 136   4                              while ( (CY_GET_REG8(USBFS_wValueLo) > nStr) && (*pStr != 0u) )
 137   4                              {
 138   5                                  /* Read descriptor length from 1st byte */
 139   5                                  descrLength = *pStr;
 140   5                                  /* Move to next string descriptor */
 141   5                                  pStr = &pStr[descrLength];
 142   5                                  nStr++;
 143   5                              }
 144   4                          #endif /*  USBFS_ENABLE_DESCRIPTOR_STRINGS */
 145   4                          /* Microsoft OS String*/
 146   4                          #if defined(USBFS_ENABLE_MSOS_STRING)
                                      if( CY_GET_REG8(USBFS_wValueLo) == USBFS_STRING_MSOS )
                                      {
                                          pStr = (volatile uint8 *)&USBFS_MSOS_DESCRIPTOR[0u];
                                      }
                                  #endif /*  USBFS_ENABLE_MSOS_STRING*/
 152   4                          /* SN string */
 153   4                          #if defined(USBFS_ENABLE_SN_STRING)
 154   4                              if( (CY_GET_REG8(USBFS_wValueLo) != 0u) &&
 155   4                                  (CY_GET_REG8(USBFS_wValueLo) ==
 156   4                                  USBFS_DEVICE0_DESCR[USBFS_DEVICE_DESCR_SN_SHIFT]) )
 157   4                              {
 158   5      
 159   5                                  #if defined(USBFS_ENABLE_IDSN_STRING)
 160   5                                      /* Read DIE ID and generate string descriptor in RAM */
 161   5                                      USBFS_ReadDieID(USBFS_idSerialNumberStringDescriptor);
 162   5                                      pStr = USBFS_idSerialNumberStringDescriptor;
 163   5                                  #elif defined(USBFS_ENABLE_FWSN_STRING)
                                              if(USBFS_snStringConfirm != USBFS_FALSE)
                                              {
                                                  pStr = USBFS_fwSerialNumberStringDescriptor;
                                              }
                                              else
                                              {
                                                  pStr = (volatile uint8 *)&USBFS_SN_STRING_DESCRIPTOR[0u];
                                              }
                                          #else
                                              pStr = (volatile uint8 *)&USBFS_SN_STRING_DESCRIPTOR[0u];
                                          #endif  /* defined(USBFS_ENABLE_IDSN_STRING) */
 175   5                              }
 176   4                          #endif    /*  USBFS_ENABLE_SN_STRING */
 177   4                          if (*pStr != 0u)
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 4   

 178   4                          {
 179   5                              USBFS_currentTD.count = *pStr;
 180   5                              USBFS_currentTD.pData = pStr;
 181   5                              requestHandled  = USBFS_InitControlRead();
 182   5                          }
 183   4                      }
 184   3                      #endif /*  USBFS_ENABLE_STRINGS */
 185   3                      else
 186   3                      {
 187   4                          requestHandled = USBFS_DispatchClassRqst();
 188   4                      }
 189   3                      break;
 190   3                  case USBFS_GET_STATUS:
 191   3                      switch ((CY_GET_REG8(USBFS_bmRequestType) & USBFS_RQST_RCPT_MASK))
 192   3                      {
 193   4                          case USBFS_RQST_RCPT_EP:
 194   4                              USBFS_currentTD.count = USBFS_EP_STATUS_LENGTH;
 195   4                              USBFS_tBuffer[0u] = USBFS_EP[ \
 196   4                                              CY_GET_REG8(USBFS_wIndexLo) & USBFS_DIR_UNUSED].hwEpState;
 197   4                              USBFS_tBuffer[1u] = 0u;
 198   4                              USBFS_currentTD.pData = &USBFS_tBuffer[0u];
 199   4                              requestHandled  = USBFS_InitControlRead();
 200   4                              break;
 201   4                          case USBFS_RQST_RCPT_DEV:
 202   4                              USBFS_currentTD.count = USBFS_DEVICE_STATUS_LENGTH;
 203   4                              USBFS_tBuffer[0u] = USBFS_deviceStatus;
 204   4                              USBFS_tBuffer[1u] = 0u;
 205   4                              USBFS_currentTD.pData = &USBFS_tBuffer[0u];
 206   4                              requestHandled  = USBFS_InitControlRead();
 207   4                              break;
 208   4                          default:    /* requestHandled is initialized as FALSE by default */
 209   4                              break;
 210   4                      }
 211   3                      break;
 212   3                  case USBFS_GET_CONFIGURATION:
 213   3                      USBFS_currentTD.count = 1u;
 214   3                      USBFS_currentTD.pData = (volatile uint8 *)&USBFS_configuration;
 215   3                      requestHandled  = USBFS_InitControlRead();
 216   3                      break;
 217   3                  case USBFS_GET_INTERFACE:
 218   3                      USBFS_currentTD.count = 1u;
 219   3                      USBFS_currentTD.pData = (volatile uint8 *)&USBFS_interfaceSetting[ \
 220   3                                                                                  CY_GET_REG8(USBFS_wIndexLo)];
 221   3                      requestHandled  = USBFS_InitControlRead();
 222   3                      break;
 223   3                  default: /* requestHandled is initialized as FALSE by default */
 224   3                      break;
 225   3              }
 226   2          }
 227   1          else {
 228   2              /* Control Write */
 229   2              switch (CY_GET_REG8(USBFS_bRequest))
 230   2              {
 231   3                  case USBFS_SET_ADDRESS:
 232   3                      USBFS_deviceAddress = CY_GET_REG8(USBFS_wValueLo);
 233   3                      requestHandled = USBFS_InitNoDataControlTransfer();
 234   3                      break;
 235   3                  case USBFS_SET_CONFIGURATION:
 236   3                      configurationN = CY_GET_REG8(USBFS_wValueLo);
 237   3                      if(configurationN > 0u)
 238   3                      {   /* Verify that configuration descriptor exists */
 239   4                          pTmp = USBFS_GetConfigTablePtr(configurationN - 1u);
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 5   

 240   4                      }
 241   3                      /* Responds with a Request Error when configuration number is invalid */
 242   3                      if (((configurationN > 0u) && (pTmp != NULL)) || (configurationN == 0u))
 243   3                      {
 244   4                          /* Set new configuration if it has been changed */
 245   4                          if(configurationN != USBFS_configuration)
 246   4                          {
 247   5                              USBFS_configuration = configurationN;
 248   5                              USBFS_configurationChanged = USBFS_TRUE;
 249   5                              USBFS_Config(USBFS_TRUE);
 250   5                          }
 251   4                          requestHandled = USBFS_InitNoDataControlTransfer();
 252   4                      }
 253   3                      break;
 254   3                  case USBFS_SET_INTERFACE:
 255   3                      if (USBFS_ValidateAlternateSetting() != 0u)
 256   3                      {
 257   4                          interfaceNumber = CY_GET_REG8(USBFS_wIndexLo);
 258   4                          USBFS_interfaceNumber = interfaceNumber;
 259   4                          USBFS_configurationChanged = USBFS_TRUE;
 260   4                          #if ((USBFS_EP_MA == USBFS__MA_DYNAMIC) && \
 261   4                               (USBFS_EP_MM == USBFS__EP_MANUAL) )
                                      USBFS_Config(USBFS_FALSE);
                                  #else
 264   4                              USBFS_ConfigAltChanged();
 265   4                          #endif /*  (USBFS_EP_MA == USBFS__MA_DYNAMIC) */
 266   4                          /* Update handled Alt setting changes status */
 267   4                          USBFS_interfaceSetting_last[interfaceNumber] =
 268   4                               USBFS_interfaceSetting[interfaceNumber];
 269   4                          requestHandled = USBFS_InitNoDataControlTransfer();
 270   4                      }
 271   3                      break;
 272   3                  case USBFS_CLEAR_FEATURE:
 273   3                      switch (CY_GET_REG8(USBFS_bmRequestType) & USBFS_RQST_RCPT_MASK)
 274   3                      {
 275   4                          case USBFS_RQST_RCPT_EP:
 276   4                              if (CY_GET_REG8(USBFS_wValueLo) == USBFS_ENDPOINT_HALT)
 277   4                              {
 278   5                                  requestHandled = USBFS_ClearEndpointHalt();
 279   5                              }
 280   4                              break;
 281   4                          case USBFS_RQST_RCPT_DEV:
 282   4                              /* Clear device REMOTE_WAKEUP */
 283   4                              if (CY_GET_REG8(USBFS_wValueLo) == USBFS_DEVICE_REMOTE_WAKEUP)
 284   4                              {
 285   5                                  USBFS_deviceStatus &= (uint8)~USBFS_DEVICE_STATUS_REMOTE_WAKEUP;
 286   5                                  requestHandled = USBFS_InitNoDataControlTransfer();
 287   5                              }
 288   4                              break;
 289   4                          case USBFS_RQST_RCPT_IFC:
 290   4                              /* Validate interfaceNumber */
 291   4                              if (CY_GET_REG8(USBFS_wIndexLo) < USBFS_MAX_INTERFACES_NUMBER)
 292   4                              {
 293   5                                  USBFS_interfaceStatus[CY_GET_REG8(USBFS_wIndexLo)] &=
 294   5                                                                      (uint8)~(CY_GET_REG8(USBFS_wValueLo));
 295   5                                  requestHandled = USBFS_InitNoDataControlTransfer();
 296   5                              }
 297   4                              break;
 298   4                          default:    /* requestHandled is initialized as FALSE by default */
 299   4                              break;
 300   4                      }
 301   3                      break;
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 6   

 302   3                  case USBFS_SET_FEATURE:
 303   3                      switch (CY_GET_REG8(USBFS_bmRequestType) & USBFS_RQST_RCPT_MASK)
 304   3                      {
 305   4                          case USBFS_RQST_RCPT_EP:
 306   4                              if (CY_GET_REG8(USBFS_wValueLo) == USBFS_ENDPOINT_HALT)
 307   4                              {
 308   5                                  requestHandled = USBFS_SetEndpointHalt();
 309   5                              }
 310   4                              break;
 311   4                          case USBFS_RQST_RCPT_DEV:
 312   4                              /* Set device REMOTE_WAKEUP */
 313   4                              if (CY_GET_REG8(USBFS_wValueLo) == USBFS_DEVICE_REMOTE_WAKEUP)
 314   4                              {
 315   5                                  USBFS_deviceStatus |= USBFS_DEVICE_STATUS_REMOTE_WAKEUP;
 316   5                                  requestHandled = USBFS_InitNoDataControlTransfer();
 317   5                              }
 318   4                              break;
 319   4                          case USBFS_RQST_RCPT_IFC:
 320   4                              /* Validate interfaceNumber */
 321   4                              if (CY_GET_REG8(USBFS_wIndexLo) < USBFS_MAX_INTERFACES_NUMBER)
 322   4                              {
 323   5                                  USBFS_interfaceStatus[CY_GET_REG8(USBFS_wIndexLo)] &=
 324   5                                                                      (uint8)~(CY_GET_REG8(USBFS_wValueLo));
 325   5                                  requestHandled = USBFS_InitNoDataControlTransfer();
 326   5                              }
 327   4                              break;
 328   4                          default:    /* requestHandled is initialized as FALSE by default */
 329   4                              break;
 330   4                      }
 331   3                      break;
 332   3                  default:    /* requestHandled is initialized as FALSE by default */
 333   3                      break;
 334   3              }
 335   2          }
 336   1          return(requestHandled);
 337   1      }
 338          
 339          
 340          #if defined(USBFS_ENABLE_IDSN_STRING)
 341          
 342              /***************************************************************************
 343              * Function Name: USBFS_ReadDieID
 344              ****************************************************************************
 345              *
 346              * Summary:
 347              *  This routine read Die ID and generate Serial Number string descriptor.
 348              *
 349              * Parameters:
 350              *  descr:  pointer on string descriptor.
 351              *
 352              * Return:
 353              *  None.
 354              *
 355              * Reentrant:
 356              *  No.
 357              *
 358              ***************************************************************************/
 359              void USBFS_ReadDieID(uint8 descr[]) 
 360              {
 361   1              uint8 i;
 362   1              uint8 j = 0u;
 363   1              uint8 value;
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 7   

 364   1              const char8 CYCODE hex[16u] = "0123456789ABCDEF";
 365   1      
 366   1              /* Check descriptor validation */
 367   1              if( descr != NULL)
 368   1              {
 369   2                  descr[0u] = USBFS_IDSN_DESCR_LENGTH;
 370   2                  descr[1u] = USBFS_DESCR_STRING;
 371   2      
 372   2                  /* fill descriptor */
 373   2                  for(i = 2u; i < USBFS_IDSN_DESCR_LENGTH; i += 4u)
 374   2                  {
 375   3                      value = CY_GET_XTND_REG8((void CYFAR *)(USBFS_DIE_ID + j));
 376   3                      j++;
 377   3                      descr[i] = (uint8)hex[value >> 4u];
 378   3                      descr[i + 2u] = (uint8)hex[value & 0x0Fu];
 379   3                  }
 380   2              }
 381   1          }
 382          
 383          #endif /*  USBFS_ENABLE_IDSN_STRING */
 384          
 385          
 386          /*******************************************************************************
 387          * Function Name: USBFS_ConfigReg
 388          ********************************************************************************
 389          *
 390          * Summary:
 391          *  This routine configures hardware registers from the variables.
 392          *  It is called from USBFS_Config() function and from RestoreConfig
 393          *  after Wakeup.
 394          *
 395          * Parameters:
 396          *  None.
 397          *
 398          * Return:
 399          *  None.
 400          *
 401          *******************************************************************************/
 402          void USBFS_ConfigReg(void) 
 403          {
 404   1          uint8 ep;
 405   1          uint8 i;
 406   1          #if(USBFS_EP_MM == USBFS__EP_DMAAUTO)
 407   1              uint8 epType = 0u;
 408   1          #endif /*  USBFS_EP_MM == USBFS__EP_DMAAUTO */
 409   1      
 410   1          /* Set the endpoint buffer addresses */
 411   1          ep = USBFS_EP1;
 412   1          for (i = 0u; i < 0x80u; i+= 0x10u)
 413   1          {
 414   2              CY_SET_REG8((reg8 *)(USBFS_ARB_EP1_CFG_IND + i), USBFS_ARB_EPX_CFG_DEFAULT);
 415   2              #if(USBFS_EP_MM != USBFS__EP_MANUAL)
 416   2                  /* Enable all Arbiter EP Interrupts : err, buf under, buf over, dma gnt(mode2 only), in buf fu
             -ll */
 417   2                  CY_SET_REG8((reg8 *)(USBFS_ARB_EP1_INT_EN_IND + i), USBFS_ARB_EPX_INT_MASK);
 418   2              #endif   /*  USBFS_EP_MM != USBFS__EP_MANUAL */
 419   2      
 420   2              if(USBFS_EP[ep].epMode != USBFS_MODE_DISABLE)
 421   2              {
 422   3                  if((USBFS_EP[ep].addr & USBFS_DIR_IN) != 0u )
 423   3                  {
 424   4                      CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + i), USBFS_MODE_NAK_IN);
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 8   

 425   4                  }
 426   3                  else
 427   3                  {
 428   4                      CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + i), USBFS_MODE_NAK_OUT);
 429   4                      /* Prepare EP type mask for automatic memory allocation */
 430   4                      #if(USBFS_EP_MM == USBFS__EP_DMAAUTO)
 431   4                          epType |= (uint8)(0x01u << (ep - USBFS_EP1));
 432   4                      #endif /*  USBFS_EP_MM == USBFS__EP_DMAAUTO */
 433   4                  }
 434   3              }
 435   2              else
 436   2              {
 437   3                  CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + i), USBFS_MODE_STALL_DATA_EP);
 438   3              }
 439   2      
 440   2              #if(USBFS_EP_MM != USBFS__EP_DMAAUTO)
                          CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CNT0_IND + i),   USBFS_EP[ep].bufferSize >> 8u);
                          CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CNT1_IND + i),   USBFS_EP[ep].bufferSize & 0xFFu);
              
                          CY_SET_REG8((reg8 *)(USBFS_ARB_RW1_RA_IND + i),     USBFS_EP[ep].buffOffset & 0xFFu);
                          CY_SET_REG8((reg8 *)(USBFS_ARB_RW1_RA_MSB_IND + i), USBFS_EP[ep].buffOffset >> 8u);
                          CY_SET_REG8((reg8 *)(USBFS_ARB_RW1_WA_IND + i),     USBFS_EP[ep].buffOffset & 0xFFu);
                          CY_SET_REG8((reg8 *)(USBFS_ARB_RW1_WA_MSB_IND + i), USBFS_EP[ep].buffOffset >> 8u);
                      #endif /*  USBFS_EP_MM != USBFS__EP_DMAAUTO */
 449   2      
 450   2              ep++;
 451   2          }
 452   1      
 453   1          #if(USBFS_EP_MM == USBFS__EP_DMAAUTO)
 454   1               /* BUF_SIZE depend on DMA_THRESS value: 55-32 bytes  44-16 bytes 33-8 bytes 22-4 bytes 11-2 bytes
             - */
 455   1              USBFS_BUF_SIZE_REG = USBFS_DMA_BUF_SIZE;
 456   1              USBFS_DMA_THRES_REG = USBFS_DMA_BYTES_PER_BURST;   /* DMA burst threshold */
 457   1              USBFS_DMA_THRES_MSB_REG = 0u;
 458   1              USBFS_EP_ACTIVE_REG = USBFS_ARB_INT_MASK;
 459   1              USBFS_EP_TYPE_REG = epType;
 460   1              /* Cfg_cmp bit set to 1 once configuration is complete. */
 461   1              USBFS_ARB_CFG_REG = USBFS_ARB_CFG_AUTO_DMA | USBFS_ARB_CFG_AUTO_MEM |
 462   1                                             USBFS_ARB_CFG_CFG_CPM;
 463   1              /* Cfg_cmp bit set to 0 during configuration of PFSUSB Registers. */
 464   1              USBFS_ARB_CFG_REG = USBFS_ARB_CFG_AUTO_DMA | USBFS_ARB_CFG_AUTO_MEM;
 465   1          #endif /*  USBFS_EP_MM == USBFS__EP_DMAAUTO */
 466   1      
 467   1          CY_SET_REG8(USBFS_SIE_EP_INT_EN_PTR, 0xFFu);
 468   1      }
 469          
 470          
 471          /*******************************************************************************
 472          * Function Name: USBFS_Config
 473          ********************************************************************************
 474          *
 475          * Summary:
 476          *  This routine configures endpoints for the entire configuration by scanning
 477          *  the configuration descriptor.
 478          *
 479          * Parameters:
 480          *  clearAltSetting: It configures the bAlternateSetting 0 for each interface.
 481          *
 482          * Return:
 483          *  None.
 484          *
 485          * USBFS_interfaceClass - Initialized class array for each interface.
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 9   

 486          *   It is used for handling Class specific requests depend on interface class.
 487          *   Different classes in multiple Alternate settings does not supported.
 488          *
 489          * Reentrant:
 490          *  No.
 491          *
 492          *******************************************************************************/
 493          void USBFS_Config(uint8 clearAltSetting) 
 494          {
 495   1          uint8 ep;
 496   1          uint8 cur_ep;
 497   1          uint8 i;
 498   1          uint8 epType;
 499   1          const uint8 *pDescr;
 500   1          #if(USBFS_EP_MM != USBFS__EP_DMAAUTO)
                      uint16 buffCount = 0u;
                  #endif /*  USBFS_EP_MM != USBFS__EP_DMAAUTO */
 503   1      
 504   1          const T_USBFS_LUT CYCODE *pTmp;
 505   1          const T_USBFS_EP_SETTINGS_BLOCK CYCODE *pEP;
 506   1      
 507   1          /* Clear all of the endpoints */
 508   1          for (ep = 0u; ep < USBFS_MAX_EP; ep++)
 509   1          {
 510   2              USBFS_EP[ep].attrib = 0u;
 511   2              USBFS_EP[ep].hwEpState = 0u;
 512   2              USBFS_EP[ep].apiEpState = USBFS_NO_EVENT_PENDING;
 513   2              USBFS_EP[ep].epToggle = 0u;
 514   2              USBFS_EP[ep].epMode = USBFS_MODE_DISABLE;
 515   2              USBFS_EP[ep].bufferSize = 0u;
 516   2              USBFS_EP[ep].interface = 0u;
 517   2      
 518   2          }
 519   1      
 520   1          /* Clear Alternate settings for all interfaces */
 521   1          if(clearAltSetting != 0u)
 522   1          {
 523   2              for (i = 0u; i < USBFS_MAX_INTERFACES_NUMBER; i++)
 524   2              {
 525   3                  USBFS_interfaceSetting[i] = 0x00u;
 526   3                  USBFS_interfaceSetting_last[i] = 0x00u;
 527   3              }
 528   2          }
 529   1      
 530   1          /* Init Endpoints and Device Status if configured */
 531   1          if(USBFS_configuration > 0u)
 532   1          {
 533   2              pTmp = USBFS_GetConfigTablePtr(USBFS_configuration - 1u);
 534   2              /* Set Power status for current configuration */
 535   2              pDescr = (const uint8 *)pTmp->p_list;
 536   2              if((pDescr[USBFS_CONFIG_DESCR_ATTRIB] & USBFS_CONFIG_DESCR_ATTRIB_SELF_POWERED) != 0u)
 537   2              {
 538   3                  USBFS_deviceStatus |=  USBFS_DEVICE_STATUS_SELF_POWERED;
 539   3              }
 540   2              else
 541   2              {
 542   3                  USBFS_deviceStatus &=  (uint8)~USBFS_DEVICE_STATUS_SELF_POWERED;
 543   3              }
 544   2              /* Move to next element */
 545   2              pTmp = &pTmp[1u];
 546   2              ep = pTmp->c;  /* For this table, c is the number of endpoints configurations  */
 547   2      
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 10  

 548   2              #if ((USBFS_EP_MA == USBFS__MA_DYNAMIC) && \
 549   2                   (USBFS_EP_MM == USBFS__EP_MANUAL) )
                          /* Configure for dynamic EP memory allocation */
                          /* p_list points the endpoint setting table. */
                          pEP = (T_USBFS_EP_SETTINGS_BLOCK *) pTmp->p_list;
                          for (i = 0u; i < ep; i++)
                          {
                              /* Compare current Alternate setting with EP Alt */
                              if(USBFS_interfaceSetting[pEP->interface] == pEP->altSetting)
                              {
                                  cur_ep = pEP->addr & USBFS_DIR_UNUSED;
                                  epType = pEP->attributes & USBFS_EP_TYPE_MASK;
                                  if (pEP->addr & USBFS_DIR_IN)
                                  {
                                      /* IN Endpoint */
                                      USBFS_EP[cur_ep].apiEpState = USBFS_EVENT_PENDING;
                                      USBFS_EP[cur_ep].epMode = (epType == USBFS_EP_TYPE_ISOC) ?
                                                                      USBFS_MODE_ISO_IN : USBFS_MODE_ACK_IN;
                                      #if defined(USBFS_ENABLE_CDC_CLASS)
                                          if(((pEP->bMisc == USBFS_CLASS_CDC_DATA) ||
                                              (pEP->bMisc == USBFS_CLASS_CDC)) &&
                                              (epType != USBFS_EP_TYPE_INT))
                                          {
                                              USBFS_cdc_data_in_ep = cur_ep;
                                          }
                                      #endif  /*  USBFS_ENABLE_CDC_CLASS*/
                                      #if ( defined(USBFS_ENABLE_MIDI_STREAMING) && \
                                                           (USBFS_MIDI_IN_BUFF_SIZE > 0) )
                                          if((pEP->bMisc == USBFS_CLASS_AUDIO) &&
                                             (epType == USBFS_EP_TYPE_BULK))
                                          {
                                              USBFS_midi_in_ep = cur_ep;
                                          }
                                      #endif  /*  USBFS_ENABLE_MIDI_STREAMING*/
                                  }
                                  else
                                  {
                                      /* OUT Endpoint */
                                      USBFS_EP[cur_ep].apiEpState = USBFS_NO_EVENT_PENDING;
                                      USBFS_EP[cur_ep].epMode = (epType == USBFS_EP_TYPE_ISOC) ?
                                                                  USBFS_MODE_ISO_OUT : USBFS_MODE_ACK_OUT;
                                      #if defined(USBFS_ENABLE_CDC_CLASS)
                                          if(((pEP->bMisc == USBFS_CLASS_CDC_DATA) ||
                                              (pEP->bMisc == USBFS_CLASS_CDC)) &&
                                              (epType != USBFS_EP_TYPE_INT))
                                          {
                                              USBFS_cdc_data_out_ep = cur_ep;
                                          }
                                      #endif  /*  USBFS_ENABLE_CDC_CLASS*/
                                      #if ( defined(USBFS_ENABLE_MIDI_STREAMING) && \
                                                   (USBFS_MIDI_OUT_BUFF_SIZE > 0) )
                                          if((pEP->bMisc == USBFS_CLASS_AUDIO) &&
                                             (epType == USBFS_EP_TYPE_BULK))
                                          {
                                              USBFS_midi_out_ep = cur_ep;
                                          }
                                      #endif  /*  USBFS_ENABLE_MIDI_STREAMING*/
                                  }
                                  USBFS_EP[cur_ep].bufferSize = pEP->bufferSize;
                                  USBFS_EP[cur_ep].addr = pEP->addr;
                                  USBFS_EP[cur_ep].attrib = pEP->attributes;
                              }
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 11  

                              pEP = &pEP[1u];
                          }
                      #else /* Configure for static EP memory allocation  */
 613   2                  for (i = USBFS_EP1; i < USBFS_MAX_EP; i++)
 614   2                  {
 615   3                      /* p_list points the endpoint setting table. */
 616   3                      pEP = (const T_USBFS_EP_SETTINGS_BLOCK CYCODE *) pTmp->p_list;
 617   3                      /* Find max length for each EP and select it (length could be different in different Alt s
             -ettings) */
 618   3                      /* but other settings should be correct with regards to Interface alt Setting */
 619   3                      for (cur_ep = 0u; cur_ep < ep; cur_ep++)
 620   3                      {
 621   4                          /* EP count is equal to EP # in table and we found larger EP length than have before*/
 622   4                          if(i == (pEP->addr & USBFS_DIR_UNUSED))
 623   4                          {
 624   5                              if(USBFS_EP[i].bufferSize < pEP->bufferSize)
 625   5                              {
 626   6                                  USBFS_EP[i].bufferSize = pEP->bufferSize;
 627   6                              }
 628   5                              /* Compare current Alternate setting with EP Alt*/
 629   5                              if(USBFS_interfaceSetting[pEP->interface] == pEP->altSetting)
 630   5                              {
 631   6                                  epType = pEP->attributes & USBFS_EP_TYPE_MASK;
 632   6                                  if ((pEP->addr & USBFS_DIR_IN) != 0u)
 633   6                                  {
 634   7                                      /* IN Endpoint */
 635   7                                      USBFS_EP[i].apiEpState = USBFS_EVENT_PENDING;
 636   7                                      USBFS_EP[i].epMode = (epType == USBFS_EP_TYPE_ISOC) ?
 637   7                                                              USBFS_MODE_ISO_IN : USBFS_MODE_ACK_IN;
 638   7                                      /* Find and initialize CDC IN endpoint number */
 639   7                                      #if defined(USBFS_ENABLE_CDC_CLASS)
                                                  if(((pEP->bMisc == USBFS_CLASS_CDC_DATA) ||
                                                      (pEP->bMisc == USBFS_CLASS_CDC)) &&
                                                      (epType != USBFS_EP_TYPE_INT))
                                                  {
                                                      USBFS_cdc_data_in_ep = i;
                                                  }
                                              #endif  /*  USBFS_ENABLE_CDC_CLASS*/
 647   7                                      #if ( defined(USBFS_ENABLE_MIDI_STREAMING) && \
 648   7                                                   (USBFS_MIDI_IN_BUFF_SIZE > 0) )
                                                  if((pEP->bMisc == USBFS_CLASS_AUDIO) &&
                                                     (epType == USBFS_EP_TYPE_BULK))
                                                  {
                                                      USBFS_midi_in_ep = i;
                                                  }
                                              #endif  /*  USBFS_ENABLE_MIDI_STREAMING*/
 655   7                                  }
 656   6                                  else
 657   6                                  {
 658   7                                      /* OUT Endpoint */
 659   7                                      USBFS_EP[i].apiEpState = USBFS_NO_EVENT_PENDING;
 660   7                                      USBFS_EP[i].epMode = (epType == USBFS_EP_TYPE_ISOC) ?
 661   7                                                          USBFS_MODE_ISO_OUT : USBFS_MODE_ACK_OUT;
 662   7                                      /* Find and initialize CDC IN endpoint number */
 663   7                                      #if defined(USBFS_ENABLE_CDC_CLASS)
                                                  if(((pEP->bMisc == USBFS_CLASS_CDC_DATA) ||
                                                      (pEP->bMisc == USBFS_CLASS_CDC)) &&
                                                      (epType != USBFS_EP_TYPE_INT))
                                                  {
                                                      USBFS_cdc_data_out_ep = i;
                                                  }
                                              #endif  /*  USBFS_ENABLE_CDC_CLASS*/
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 12  

 671   7                                      #if ( defined(USBFS_ENABLE_MIDI_STREAMING) && \
 672   7                                                   (USBFS_MIDI_OUT_BUFF_SIZE > 0) )
                                                  if((pEP->bMisc == USBFS_CLASS_AUDIO) &&
                                                     (epType == USBFS_EP_TYPE_BULK))
                                                  {
                                                      USBFS_midi_out_ep = i;
                                                  }
                                              #endif  /*  USBFS_ENABLE_MIDI_STREAMING*/
 679   7                                  }
 680   6                                  USBFS_EP[i].addr = pEP->addr;
 681   6                                  USBFS_EP[i].attrib = pEP->attributes;
 682   6      
 683   6                                  #if(USBFS_EP_MM == USBFS__EP_DMAAUTO)
 684   6                                      break;      /* use first EP setting in Auto memory managment */
 685   6                                  #endif /*  USBFS_EP_MM == USBFS__EP_DMAAUTO */
 686   6                              }
 687   5                          }
 688   4                          pEP = &pEP[1u];
 689   4                      }
 690   3                  }
 691   2              #endif /*  (USBFS_EP_MA == USBFS__MA_DYNAMIC) */
 692   2      
 693   2              /* Init class array for each interface and interface number for each EP.
 694   2              *  It is used for handling Class specific requests directed to either an
 695   2              *  interface or the endpoint.
 696   2              */
 697   2              /* p_list points the endpoint setting table. */
 698   2              pEP = (const T_USBFS_EP_SETTINGS_BLOCK CYCODE *) pTmp->p_list;
 699   2              for (i = 0u; i < ep; i++)
 700   2              {
 701   3                  /* Configure interface number for each EP*/
 702   3                  USBFS_EP[pEP->addr & USBFS_DIR_UNUSED].interface = pEP->interface;
 703   3                  pEP = &pEP[1u];
 704   3              }
 705   2              /* Init pointer on interface class table*/
 706   2              USBFS_interfaceClass = USBFS_GetInterfaceClassTablePtr();
 707   2              /* Set the endpoint buffer addresses */
 708   2      
 709   2              #if(USBFS_EP_MM != USBFS__EP_DMAAUTO)
                          for (ep = USBFS_EP1; ep < USBFS_MAX_EP; ep++)
                          {
                              USBFS_EP[ep].buffOffset = buffCount;
                               buffCount += USBFS_EP[ep].bufferSize;
                          }
                      #endif /*  USBFS_EP_MM != USBFS__EP_DMAAUTO */
 716   2      
 717   2              /* Configure hardware registers */
 718   2              USBFS_ConfigReg();
 719   2          } /* USBFS_configuration > 0 */
 720   1      }
 721          
 722          
 723          /*******************************************************************************
 724          * Function Name: USBFS_ConfigAltChanged
 725          ********************************************************************************
 726          *
 727          * Summary:
 728          *  This routine update configuration for the required endpoints only.
 729          *  It is called after SET_INTERFACE request when Static memory allocation used.
 730          *
 731          * Parameters:
 732          *  None.
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 13  

 733          *
 734          * Return:
 735          *  None.
 736          *
 737          * Reentrant:
 738          *  No.
 739          *
 740          *******************************************************************************/
 741          void USBFS_ConfigAltChanged(void) 
 742          {
 743   1          uint8 ep;
 744   1          uint8 cur_ep;
 745   1          uint8 i;
 746   1          uint8 epType;
 747   1          uint8 ri;
 748   1      
 749   1          const T_USBFS_LUT CYCODE *pTmp;
 750   1          const T_USBFS_EP_SETTINGS_BLOCK CYCODE *pEP;
 751   1      
 752   1      
 753   1          /* Init Endpoints and Device Status if configured */
 754   1          if(USBFS_configuration > 0u)
 755   1          {
 756   2              pTmp = USBFS_GetConfigTablePtr(USBFS_configuration - 1u);
 757   2              pTmp = &pTmp[1u];
 758   2              ep = pTmp->c;  /* For this table, c is the number of endpoints configurations  */
 759   2      
 760   2              /* Do not touch EP which doesn't need reconfiguration */
 761   2              /* When Alt setting changed, the only required endpoints need to be reconfigured */
 762   2              /* p_list points the endpoint setting table. */
 763   2              pEP = (const T_USBFS_EP_SETTINGS_BLOCK CYCODE *) pTmp->p_list;
 764   2              for (i = 0u; i < ep; i++)
 765   2              {
 766   3                  /*If Alt setting changed and new is same with EP Alt */
 767   3                  if((USBFS_interfaceSetting[pEP->interface] !=
 768   3                      USBFS_interfaceSetting_last[pEP->interface] ) &&
 769   3                     (USBFS_interfaceSetting[pEP->interface] == pEP->altSetting) &&
 770   3                     (pEP->interface == CY_GET_REG8(USBFS_wIndexLo)))
 771   3                  {
 772   4                      cur_ep = pEP->addr & USBFS_DIR_UNUSED;
 773   4                      ri = ((cur_ep - USBFS_EP1) << USBFS_EPX_CNTX_ADDR_SHIFT);
 774   4                      epType = pEP->attributes & USBFS_EP_TYPE_MASK;
 775   4                      if ((pEP->addr & USBFS_DIR_IN) != 0u)
 776   4                      {
 777   5                          /* IN Endpoint */
 778   5                          USBFS_EP[cur_ep].apiEpState = USBFS_EVENT_PENDING;
 779   5                          USBFS_EP[cur_ep].epMode = (epType == USBFS_EP_TYPE_ISOC) ?
 780   5                                                      USBFS_MODE_ISO_IN : USBFS_MODE_ACK_IN;
 781   5                      }
 782   4                      else
 783   4                      {
 784   5                          /* OUT Endpoint */
 785   5                          USBFS_EP[cur_ep].apiEpState = USBFS_NO_EVENT_PENDING;
 786   5                          USBFS_EP[cur_ep].epMode = (epType == USBFS_EP_TYPE_ISOC) ?
 787   5                                                      USBFS_MODE_ISO_OUT : USBFS_MODE_ACK_OUT;
 788   5                      }
 789   4                       /* Change the SIE mode for the selected EP to NAK ALL */
 790   4                       CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + ri), USBFS_MODE_NAK_IN_OUT);
 791   4                      USBFS_EP[cur_ep].bufferSize = pEP->bufferSize;
 792   4                      USBFS_EP[cur_ep].addr = pEP->addr;
 793   4                      USBFS_EP[cur_ep].attrib = pEP->attributes;
 794   4      
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 14  

 795   4                      /* Clear the data toggle */
 796   4                      USBFS_EP[cur_ep].epToggle = 0u;
 797   4      
 798   4                      /* Dynamic reconfiguration for mode 3 transfer */
 799   4                  #if(USBFS_EP_MM == USBFS__EP_DMAAUTO)
 800   4                      /* In_data_rdy for selected EP should be set to 0 */
 801   4                      * (reg8 *)(USBFS_ARB_EP1_CFG_IND + ri) &= (uint8)~USBFS_ARB_EPX_CFG_IN_DATA_RDY;
 802   4      
 803   4                      /* write the EP number for which reconfiguration is required */
 804   4                      USBFS_DYN_RECONFIG_REG = (cur_ep - USBFS_EP1) <<
 805   4                                                          USBFS_DYN_RECONFIG_EP_SHIFT;
 806   4                      /* Set the dyn_config_en bit in dynamic reconfiguration register */
 807   4                      USBFS_DYN_RECONFIG_REG |= USBFS_DYN_RECONFIG_ENABLE;
 808   4                      /* wait for the dyn_config_rdy bit to set by the block,
 809   4                      *  this bit will be set to 1 when block is ready for reconfiguration.
 810   4                      */
 811   4                      while((USBFS_DYN_RECONFIG_REG & USBFS_DYN_RECONFIG_RDY_STS) == 0u)
 812   4                      {
 813   5                          ;
 814   5                      }
 815   4                      /* Once dyn_config_rdy bit is set, FW can change the EP configuration. */
 816   4                      /* Change EP Type with new direction */
 817   4                      if((pEP->addr & USBFS_DIR_IN) == 0u)
 818   4                      {
 819   5                          USBFS_EP_TYPE_REG |= (uint8)(0x01u << (cur_ep - USBFS_EP1));
 820   5                      }
 821   4                      else
 822   4                      {
 823   5                          USBFS_EP_TYPE_REG &= (uint8)~(uint8)(0x01u << (cur_ep - USBFS_EP1));
 824   5                      }
 825   4                      /* dynamic reconfiguration enable bit cleared, pointers and control/status
 826   4                      *  signals for the selected EP is cleared/re-initialized on negative edge
 827   4                      *  of dynamic reconfiguration enable bit).
 828   4                      */
 829   4                      USBFS_DYN_RECONFIG_REG &= (uint8)~USBFS_DYN_RECONFIG_ENABLE;
 830   4                      /* The main loop has to re-enable DMA and OUT endpoint*/
 831   4                  #else
                              CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CNT0_IND + ri),
                                                                              USBFS_EP[cur_ep].bufferSize >> 8u);
                              CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CNT1_IND + ri),
                                                                              USBFS_EP[cur_ep].bufferSize & 0xFFu);
                              CY_SET_REG8((reg8 *)(USBFS_ARB_RW1_RA_IND + ri),
                                                                              USBFS_EP[cur_ep].buffOffset & 0xFFu);
                              CY_SET_REG8((reg8 *)(USBFS_ARB_RW1_RA_MSB_IND + ri),
                                                                              USBFS_EP[cur_ep].buffOffset >> 8u);
                              CY_SET_REG8((reg8 *)(USBFS_ARB_RW1_WA_IND + ri),
                                                                              USBFS_EP[cur_ep].buffOffset & 0xFFu);
                              CY_SET_REG8((reg8 *)(USBFS_ARB_RW1_WA_MSB_IND + ri),
                                                                              USBFS_EP[cur_ep].buffOffset >> 8u);
                          #endif /*  USBFS_EP_MM == USBFS__EP_DMAAUTO */
 845   4                  }
 846   3                  /* Get next EP element */
 847   3                  pEP = &pEP[1u];
 848   3              }
 849   2          }   /* USBFS_configuration > 0 */
 850   1      }
 851          
 852          
 853          /*******************************************************************************
 854          * Function Name: USBFS_GetConfigTablePtr
 855          ********************************************************************************
 856          *
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 15  

 857          * Summary:
 858          *  This routine returns a pointer a configuration table entry
 859          *
 860          * Parameters:
 861          *  confIndex:  Configuration Index
 862          *
 863          * Return:
 864          *  Device Descriptor pointer or NULL when descriptor isn't exists.
 865          *
 866          *******************************************************************************/
 867          const T_USBFS_LUT CYCODE *USBFS_GetConfigTablePtr(uint8 confIndex)
 868                                                                  
 869          {
 870   1          /* Device Table */
 871   1          const T_USBFS_LUT CYCODE *pTmp;
 872   1      
 873   1          pTmp = (const T_USBFS_LUT CYCODE *) USBFS_TABLE[USBFS_device].p_list;
 874   1      
 875   1          /* The first entry points to the Device Descriptor,
 876   1          *  the rest configuration entries.
 877   1          *  Set pointer to the first Configuration Descriptor
 878   1          */
 879   1          pTmp = &pTmp[1u];
 880   1          /* For this table, c is the number of configuration descriptors  */
 881   1          if(confIndex >= pTmp->c)   /* Verify that required configuration descriptor exists */
 882   1          {
 883   2              pTmp = (const T_USBFS_LUT CYCODE *) NULL;
 884   2          }
 885   1          else
 886   1          {
 887   2              pTmp = (const T_USBFS_LUT CYCODE *) pTmp[confIndex].p_list;
 888   2          }
 889   1      
 890   1          return( pTmp );
 891   1      }
 892          
 893          
 894          /*******************************************************************************
 895          * Function Name: USBFS_GetDeviceTablePtr
 896          ********************************************************************************
 897          *
 898          * Summary:
 899          *  This routine returns a pointer to the Device table
 900          *
 901          * Parameters:
 902          *  None.
 903          *
 904          * Return:
 905          *  Device Table pointer
 906          *
 907          *******************************************************************************/
 908          const T_USBFS_LUT CYCODE *USBFS_GetDeviceTablePtr(void)
 909                                                                      
 910          {
 911   1          /* Device Table */
 912   1          return( (const T_USBFS_LUT CYCODE *) USBFS_TABLE[USBFS_device].p_list );
 913   1      }
 914          
 915          
 916          /*******************************************************************************
 917          * Function Name: USB_GetInterfaceClassTablePtr
 918          ********************************************************************************
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 16  

 919          *
 920          * Summary:
 921          *  This routine returns Interface Class table pointer, which contains
 922          *  the relation between interface number and interface class.
 923          *
 924          * Parameters:
 925          *  None.
 926          *
 927          * Return:
 928          *  Interface Class table pointer.
 929          *
 930          *******************************************************************************/
 931          const uint8 CYCODE *USBFS_GetInterfaceClassTablePtr(void)
 932                                                                  
 933          {
 934   1          const T_USBFS_LUT CYCODE *pTmp;
 935   1          const uint8 CYCODE *pInterfaceClass;
 936   1          uint8 currentInterfacesNum;
 937   1      
 938   1          pTmp = USBFS_GetConfigTablePtr(USBFS_configuration - 1u);
 939   1          if( pTmp != NULL )
 940   1          {
 941   2              currentInterfacesNum  = ((const uint8 *) pTmp->p_list)[USBFS_CONFIG_DESCR_NUM_INTERFACES];
 942   2              /* Third entry in the LUT starts the Interface Table pointers */
 943   2              /* The INTERFACE_CLASS table is located after all interfaces */
 944   2              pTmp = &pTmp[currentInterfacesNum + 2u];
 945   2              pInterfaceClass = (const uint8 CYCODE *) pTmp->p_list;
 946   2          }
 947   1          else
 948   1          {
 949   2              pInterfaceClass = (const uint8 CYCODE *) NULL;
 950   2          }
 951   1      
 952   1          return( pInterfaceClass );
 953   1      }
 954          
 955          
 956          /*******************************************************************************
 957          * Function Name: USBFS_TerminateEP
 958          ********************************************************************************
 959          *
 960          * Summary:
 961          *  This function terminates the specified USBFS endpoint.
 962          *  This function should be used before endpoint reconfiguration.
 963          *
 964          * Parameters:
 965          *  Endpoint number.
 966          *
 967          * Return:
 968          *  None.
 969          *
 970          * Reentrant:
 971          *  No.
 972          *
 973          *******************************************************************************/
 974          void USBFS_TerminateEP(uint8 ep) 
 975          {
 976   1          uint8 ri;
 977   1      
 978   1          ep &= USBFS_DIR_UNUSED;
 979   1          ri = ((ep - USBFS_EP1) << USBFS_EPX_CNTX_ADDR_SHIFT);
 980   1      
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 17  

 981   1          if ((ep > USBFS_EP0) && (ep < USBFS_MAX_EP))
 982   1          {
 983   2              /* Set the endpoint Halt */
 984   2              USBFS_EP[ep].hwEpState |= (USBFS_ENDPOINT_STATUS_HALT);
 985   2      
 986   2              /* Clear the data toggle */
 987   2              USBFS_EP[ep].epToggle = 0u;
 988   2              USBFS_EP[ep].apiEpState = USBFS_NO_EVENT_ALLOWED;
 989   2      
 990   2              if ((USBFS_EP[ep].addr & USBFS_DIR_IN) != 0u)
 991   2              {
 992   3                  /* IN Endpoint */
 993   3                  CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + ri), USBFS_MODE_NAK_IN);
 994   3              }
 995   2              else
 996   2              {
 997   3                  /* OUT Endpoint */
 998   3                  CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + ri), USBFS_MODE_NAK_OUT);
 999   3              }
1000   2          }
1001   1      }
1002          
1003          
1004          /*******************************************************************************
1005          * Function Name: USBFS_SetEndpointHalt
1006          ********************************************************************************
1007          *
1008          * Summary:
1009          *  This routine handles set endpoint halt.
1010          *
1011          * Parameters:
1012          *  None.
1013          *
1014          * Return:
1015          *  requestHandled.
1016          *
1017          * Reentrant:
1018          *  No.
1019          *
1020          *******************************************************************************/
1021          uint8 USBFS_SetEndpointHalt(void) 
1022          {
1023   1          uint8 ep;
1024   1          uint8 ri;
1025   1          uint8 requestHandled = USBFS_FALSE;
1026   1      
1027   1          /* Set endpoint halt */
1028   1          ep = CY_GET_REG8(USBFS_wIndexLo) & USBFS_DIR_UNUSED;
1029   1          ri = ((ep - USBFS_EP1) << USBFS_EPX_CNTX_ADDR_SHIFT);
1030   1      
1031   1          if ((ep > USBFS_EP0) && (ep < USBFS_MAX_EP))
1032   1          {
1033   2              /* Set the endpoint Halt */
1034   2              USBFS_EP[ep].hwEpState |= (USBFS_ENDPOINT_STATUS_HALT);
1035   2      
1036   2              /* Clear the data toggle */
1037   2              USBFS_EP[ep].epToggle = 0u;
1038   2              USBFS_EP[ep].apiEpState |= USBFS_NO_EVENT_ALLOWED;
1039   2      
1040   2              if ((USBFS_EP[ep].addr & USBFS_DIR_IN) != 0u)
1041   2              {
1042   3                  /* IN Endpoint */
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 18  

1043   3                  CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + ri), USBFS_MODE_STALL_DATA_EP |
1044   3                                                                     USBFS_MODE_ACK_IN);
1045   3              }
1046   2              else
1047   2              {
1048   3                  /* OUT Endpoint */
1049   3                  CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + ri), USBFS_MODE_STALL_DATA_EP |
1050   3                                                                     USBFS_MODE_ACK_OUT);
1051   3              }
1052   2              requestHandled = USBFS_InitNoDataControlTransfer();
1053   2          }
1054   1      
1055   1          return(requestHandled);
1056   1      }
1057          
1058          
1059          /*******************************************************************************
1060          * Function Name: USBFS_ClearEndpointHalt
1061          ********************************************************************************
1062          *
1063          * Summary:
1064          *  This routine handles clear endpoint halt.
1065          *
1066          * Parameters:
1067          *  None.
1068          *
1069          * Return:
1070          *  requestHandled.
1071          *
1072          * Reentrant:
1073          *  No.
1074          *
1075          *******************************************************************************/
1076          uint8 USBFS_ClearEndpointHalt(void) 
1077          {
1078   1          uint8 ep;
1079   1          uint8 ri;
1080   1          uint8 requestHandled = USBFS_FALSE;
1081   1      
1082   1          /* Clear endpoint halt */
1083   1          ep = CY_GET_REG8(USBFS_wIndexLo) & USBFS_DIR_UNUSED;
1084   1          ri = ((ep - USBFS_EP1) << USBFS_EPX_CNTX_ADDR_SHIFT);
1085   1      
1086   1          if ((ep > USBFS_EP0) && (ep < USBFS_MAX_EP))
1087   1          {
1088   2              /* Clear the endpoint Halt */
1089   2              USBFS_EP[ep].hwEpState &= (uint8)~(USBFS_ENDPOINT_STATUS_HALT);
1090   2      
1091   2              /* Clear the data toggle */
1092   2              USBFS_EP[ep].epToggle = 0u;
1093   2              /* Clear toggle bit for already armed packet */
1094   2              CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CNT0_IND + ri), CY_GET_REG8(
1095   2                          (reg8 *)(USBFS_SIE_EP1_CNT0_IND + ri)) & (uint8)~USBFS_EPX_CNT_DATA_TOGGLE);
1096   2              /* Return API State as it was defined before */
1097   2              USBFS_EP[ep].apiEpState &= (uint8)~USBFS_NO_EVENT_ALLOWED;
1098   2      
1099   2              if ((USBFS_EP[ep].addr & USBFS_DIR_IN) != 0u)
1100   2              {
1101   3                  /* IN Endpoint */
1102   3                  if(USBFS_EP[ep].apiEpState == USBFS_IN_BUFFER_EMPTY)
1103   3                  {       /* Wait for next packet from application */
1104   4                      CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + ri), USBFS_MODE_NAK_IN);
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 19  

1105   4                  }
1106   3                  else    /* Continue armed transfer */
1107   3                  {
1108   4                      CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + ri), USBFS_MODE_ACK_IN);
1109   4                  }
1110   3              }
1111   2              else
1112   2              {
1113   3                  /* OUT Endpoint */
1114   3                  if(USBFS_EP[ep].apiEpState == USBFS_OUT_BUFFER_FULL)
1115   3                  {       /* Allow application to read full buffer */
1116   4                      CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + ri), USBFS_MODE_NAK_OUT);
1117   4                  }
1118   3                  else    /* Mark endpoint as empty, so it will be reloaded */
1119   3                  {
1120   4                      CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + ri), USBFS_MODE_ACK_OUT);
1121   4                  }
1122   3              }
1123   2              requestHandled = USBFS_InitNoDataControlTransfer();
1124   2          }
1125   1      
1126   1          return(requestHandled);
1127   1      }
1128          
1129          
1130          /*******************************************************************************
1131          * Function Name: USBFS_ValidateAlternateSetting
1132          ********************************************************************************
1133          *
1134          * Summary:
1135          *  Validates (and records) a SET INTERFACE request.
1136          *
1137          * Parameters:
1138          *  None.
1139          *
1140          * Return:
1141          *  requestHandled.
1142          *
1143          * Reentrant:
1144          *  No.
1145          *
1146          *******************************************************************************/
1147          uint8 USBFS_ValidateAlternateSetting(void) 
1148          {
1149   1          uint8 requestHandled = USBFS_TRUE;
1150   1          uint8 interfaceNum;
1151   1          const T_USBFS_LUT CYCODE *pTmp;
1152   1          uint8 currentInterfacesNum;
1153   1      
1154   1          interfaceNum = CY_GET_REG8(USBFS_wIndexLo);
1155   1          /* Validate interface setting, stall if invalid. */
1156   1          pTmp = USBFS_GetConfigTablePtr(USBFS_configuration - 1u);
1157   1          currentInterfacesNum  = ((const uint8 *) pTmp->p_list)[USBFS_CONFIG_DESCR_NUM_INTERFACES];
1158   1      
1159   1          if((interfaceNum >= currentInterfacesNum) || (interfaceNum >= USBFS_MAX_INTERFACES_NUMBER))
1160   1          {   /* Wrong interface number */
1161   2              requestHandled = USBFS_FALSE;
1162   2          }
1163   1          else
1164   1          {
1165   2              /* Save current Alt setting to find out the difference in Config() function */
1166   2              USBFS_interfaceSetting_last[interfaceNum] = USBFS_interfaceSetting[interfaceNum];
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 20  

1167   2              USBFS_interfaceSetting[interfaceNum] = CY_GET_REG8(USBFS_wValueLo);
1168   2          }
1169   1      
1170   1          return (requestHandled);
1171   1      }
1172          
1173          
1174          /* [] END OF FILE */
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 21  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION USBFS_HandleStandardRqst (BEGIN)
                                           ; SOURCE LINE # 88
                                           ; SOURCE LINE # 89
                                           ; SOURCE LINE # 90
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#requestHandled
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 94
0005 FB                MOV     R3,A
0006 FA                MOV     R2,A
0007 F9                MOV     R1,A
0008 900000      R     MOV     DPTR,#pStr
000B 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 102
000E E4                CLR     A
000F 900000      E     MOV     DPTR,#USBFS_currentTD
0012 F0                MOVX    @DPTR,A
0013 A3                INC     DPTR
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 104
0015 906000            MOV     DPTR,#06000H
0018 E0                MOVX    A,@DPTR
0019 5480              ANL     A,#080H
001B 6480              XRL     A,#080H
001D 6003              JZ      $ + 5H
001F 020000      R     LJMP    ?C0001
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 107
0022 A3                INC     DPTR
0023 E0                MOVX    A,@DPTR
0024 7003              JNZ     $ + 5H
0026 020000      R     LJMP    ?C0015
0029 24F8              ADD     A,#0F8H
002B 7003              JNZ     $ + 5H
002D 020000      R     LJMP    ?C0020
0030 24FE              ADD     A,#0FEH
0032 7003              JNZ     $ + 5H
0034 020000      R     LJMP    ?C0021
0037 2404              ADD     A,#04H
0039 6003              JZ      $ + 5H
003B 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 109
003E         ?C0003:
                                           ; SOURCE LINE # 110
003E 906003            MOV     DPTR,#06003H
0041 E0                MOVX    A,@DPTR
0042 B4012D            CJNE    A,#01H,?C0004
                                           ; SOURCE LINE # 111
                                           ; SOURCE LINE # 112
0045 120000      R     LCALL   USBFS_GetDeviceTablePtr
0048 900000      R     MOV     DPTR,#pTmp
004B EE                MOV     A,R6
004C F0                MOVX    @DPTR,A
004D A3                INC     DPTR
004E EF                MOV     A,R7
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 113
0050 F582              MOV     DPL,A
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 22  

0052 8E83              MOV     DPH,R6
0054 A3                INC     DPTR
0055 120000      E     LCALL   ?C?PLDCODE
0058 900000      E     MOV     DPTR,#USBFS_currentTD+02H
005B 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 114
005E 900000      E     MOV     DPTR,#USBFS_currentTD
0061 E4                CLR     A
0062 F0                MOVX    @DPTR,A
0063 A3                INC     DPTR
0064 7412              MOV     A,#012H
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 115
0067 120000      E     LCALL   USBFS_InitControlRead
006A 900000      R     MOV     DPTR,#requestHandled
006D EF                MOV     A,R7
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 116
006F 020000      R     LJMP    ?C0023
0072         ?C0004:
                                           ; SOURCE LINE # 117
0072 906003            MOV     DPTR,#06003H
0075 E0                MOVX    A,@DPTR
0076 6402              XRL     A,#02H
0078 7064              JNZ     ?C0006
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
007A 906002            MOV     DPTR,#06002H
007D E0                MOVX    A,@DPTR
007E FF                MOV     R7,A
007F 120000      R     LCALL   _USBFS_GetConfigTablePtr
0082 900000      R     MOV     DPTR,#pTmp
0085 EE                MOV     A,R6
0086 F0                MOVX    @DPTR,A
0087 A3                INC     DPTR
0088 EF                MOV     A,R7
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 120
008A 900000      R     MOV     DPTR,#pTmp
008D E0                MOVX    A,@DPTR
008E FE                MOV     R6,A
008F A3                INC     DPTR
0090 E0                MOVX    A,@DPTR
0091 FF                MOV     R7,A
0092 4E                ORL     A,R6
0093 7003              JNZ     $ + 5H
0095 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 122
0098 8F82              MOV     DPL,R7
009A 8E83              MOV     DPH,R6
009C A3                INC     DPTR
009D 120000      E     LCALL   ?C?PLDCODE
00A0 900000      E     MOV     DPTR,#USBFS_currentTD+02H
00A3 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 123
00A6 900000      E     MOV     DPTR,#USBFS_currentTD+02H
00A9 120000      E     LCALL   ?C?PLDXDATA
00AC E9                MOV     A,R1
00AD 2403              ADD     A,#03H
00AF F9                MOV     R1,A
00B0 E4                CLR     A
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 23  

00B1 3A                ADDC    A,R2
00B2 FA                MOV     R2,A
00B3 120000      E     LCALL   ?C?CLDPTR
00B6 FE                MOV     R6,A
00B7 900000      E     MOV     DPTR,#USBFS_currentTD+02H
00BA 120000      E     LCALL   ?C?PLDXDATA
00BD E9                MOV     A,R1
00BE 2402              ADD     A,#02H
00C0 F9                MOV     R1,A
00C1 E4                CLR     A
00C2 3A                ADDC    A,R2
00C3 FA                MOV     R2,A
00C4 120000      E     LCALL   ?C?CLDPTR
00C7 FD                MOV     R5,A
00C8 EE                MOV     A,R6
00C9 ED                MOV     A,R5
00CA FF                MOV     R7,A
00CB 900000      E     MOV     DPTR,#USBFS_currentTD
00CE EE                MOV     A,R6
00CF F0                MOVX    @DPTR,A
00D0 A3                INC     DPTR
00D1 EF                MOV     A,R7
00D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 126
00D3 120000      E     LCALL   USBFS_InitControlRead
00D6 900000      R     MOV     DPTR,#requestHandled
00D9 EF                MOV     A,R7
00DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 128
00DB 020000      R     LJMP    ?C0023
00DE         ?C0006:
                                           ; SOURCE LINE # 130
00DE 906003            MOV     DPTR,#06003H
00E1 E0                MOVX    A,@DPTR
00E2 6403              XRL     A,#03H
00E4 6003              JZ      $ + 5H
00E6 020000      R     LJMP    ?C0009
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 134
;---- Variable 'nStr' assigned to Register 'R7' ----
00E9 FF                MOV     R7,A
                                           ; SOURCE LINE # 135
00EA 7BFF              MOV     R3,#0FFH
00EC 7A00        E     MOV     R2,#HIGH USBFS_STRING_DESCRIPTORS
00EE 7900        E     MOV     R1,#LOW USBFS_STRING_DESCRIPTORS
00F0 900000      R     MOV     DPTR,#pStr
00F3 120000      E     LCALL   ?C?PSTXDATA
00F6         ?C0010:
                                           ; SOURCE LINE # 136
00F6 906002            MOV     DPTR,#06002H
00F9 E0                MOVX    A,@DPTR
00FA D3                SETB    C
00FB 9F                SUBB    A,R7
00FC 401F              JC      ?C0011
00FE 900000      R     MOV     DPTR,#pStr
0101 120000      E     LCALL   ?C?PLDXDATA
0104 120000      E     LCALL   ?C?CLDPTR
0107 6014              JZ      ?C0011
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 139
0109 120000      E     LCALL   ?C?CLDPTR
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 24  

010C FE                MOV     R6,A
;---- Variable 'descrLength' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 141
010D 7C00              MOV     R4,#00H
010F 29                ADD     A,R1
0110 F9                MOV     R1,A
0111 EC                MOV     A,R4
0112 3A                ADDC    A,R2
0113 FA                MOV     R2,A
0114 900000      R     MOV     DPTR,#pStr
0117 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 142
011A 0F                INC     R7
                                           ; SOURCE LINE # 143
011B 80D9              SJMP    ?C0010
011D         ?C0011:
                                           ; SOURCE LINE # 155
011D 906002            MOV     DPTR,#06002H
0120 E0                MOVX    A,@DPTR
0121 6022              JZ      ?C0012
0123 900000      E     MOV     DPTR,#USBFS_DEVICE0_DESCR+010H
0126 E4                CLR     A
0127 93                MOVC    A,@A+DPTR
0128 FF                MOV     R7,A
0129 906002            MOV     DPTR,#06002H
012C E0                MOVX    A,@DPTR
012D B50715            CJNE    A,AR7,?C0012
                                           ; SOURCE LINE # 157
                                           ; SOURCE LINE # 161
0130 7B01              MOV     R3,#01H
0132 7A00        E     MOV     R2,#HIGH USBFS_idSerialNumberStringDescriptor
0134 7900        E     MOV     R1,#LOW USBFS_idSerialNumberStringDescriptor
0136 120000      R     LCALL   _USBFS_ReadDieID
                                           ; SOURCE LINE # 162
0139 7B01              MOV     R3,#01H
013B 7A00        E     MOV     R2,#HIGH USBFS_idSerialNumberStringDescriptor
013D 7900        E     MOV     R1,#LOW USBFS_idSerialNumberStringDescriptor
013F 900000      R     MOV     DPTR,#pStr
0142 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 175
0145         ?C0012:
                                           ; SOURCE LINE # 177
0145 900000      R     MOV     DPTR,#pStr
0148 120000      E     LCALL   ?C?PLDXDATA
014B 120000      E     LCALL   ?C?CLDPTR
014E 7003              JNZ     $ + 5H
0150 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 179
0153 120000      E     LCALL   ?C?CLDPTR
0156 FF                MOV     R7,A
0157 900000      E     MOV     DPTR,#USBFS_currentTD
015A E4                CLR     A
015B F0                MOVX    @DPTR,A
015C A3                INC     DPTR
015D EF                MOV     A,R7
015E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 180
015F 900000      E     MOV     DPTR,#USBFS_currentTD+02H
0162 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 181
0165 120000      E     LCALL   USBFS_InitControlRead
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 25  

0168 900000      R     MOV     DPTR,#requestHandled
016B EF                MOV     A,R7
016C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 183
016D 020000      R     LJMP    ?C0023
0170         ?C0009:
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 187
0170 120000      E     LCALL   USBFS_DispatchClassRqst
0173 900000      R     MOV     DPTR,#requestHandled
0176 EF                MOV     A,R7
0177 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 188
                                           ; SOURCE LINE # 189
0178 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 190
017B         ?C0015:
                                           ; SOURCE LINE # 191
017B 906000            MOV     DPTR,#06000H
017E E0                MOVX    A,@DPTR
017F 5403              ANL     A,#03H
0181 6042              JZ      ?C0018
0183 24FE              ADD     A,#0FEH
0185 6003              JZ      $ + 5H
0187 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
018A         ?C0017:
                                           ; SOURCE LINE # 194
018A 900000      E     MOV     DPTR,#USBFS_currentTD
018D E4                CLR     A
018E F0                MOVX    @DPTR,A
018F A3                INC     DPTR
0190 7402              MOV     A,#02H
0192 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 195
0193 906004            MOV     DPTR,#06004H
0196 E0                MOVX    A,@DPTR
0197 547F              ANL     A,#07FH
0199 75F00B            MOV     B,#0BH
019C A4                MUL     AB
019D 2400        E     ADD     A,#LOW USBFS_EP+02H
019F F582              MOV     DPL,A
01A1 E4                CLR     A
01A2 3400        E     ADDC    A,#HIGH USBFS_EP+02H
01A4 F583              MOV     DPH,A
01A6 E0                MOVX    A,@DPTR
01A7 900000      R     MOV     DPTR,#USBFS_tBuffer
01AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 197
01AB E4                CLR     A
01AC A3                INC     DPTR
01AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 198
01AE 7B01              MOV     R3,#01H
01B0 7A00        R     MOV     R2,#HIGH USBFS_tBuffer
01B2 7900        R     MOV     R1,#LOW USBFS_tBuffer
01B4 900000      E     MOV     DPTR,#USBFS_currentTD+02H
01B7 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 199
01BA 120000      E     LCALL   USBFS_InitControlRead
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 26  

01BD 900000      R     MOV     DPTR,#requestHandled
01C0 EF                MOV     A,R7
01C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 200
01C2 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 201
01C5         ?C0018:
                                           ; SOURCE LINE # 202
01C5 900000      E     MOV     DPTR,#USBFS_currentTD
01C8 E4                CLR     A
01C9 F0                MOVX    @DPTR,A
01CA A3                INC     DPTR
01CB 7402              MOV     A,#02H
01CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 203
01CE 900000      E     MOV     DPTR,#USBFS_deviceStatus
01D1 E0                MOVX    A,@DPTR
01D2 900000      R     MOV     DPTR,#USBFS_tBuffer
01D5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
01D6 E4                CLR     A
01D7 A3                INC     DPTR
01D8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 205
01D9 7B01              MOV     R3,#01H
01DB 7A00        R     MOV     R2,#HIGH USBFS_tBuffer
01DD 7900        R     MOV     R1,#LOW USBFS_tBuffer
01DF 900000      E     MOV     DPTR,#USBFS_currentTD+02H
01E2 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 206
01E5 120000      E     LCALL   USBFS_InitControlRead
01E8 900000      R     MOV     DPTR,#requestHandled
01EB EF                MOV     A,R7
01EC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
01ED 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
01F0 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 212
01F3         ?C0020:
                                           ; SOURCE LINE # 213
01F3 900000      E     MOV     DPTR,#USBFS_currentTD
01F6 E4                CLR     A
01F7 F0                MOVX    @DPTR,A
01F8 A3                INC     DPTR
01F9 04                INC     A
01FA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 214
01FB FB                MOV     R3,A
01FC 7A00        E     MOV     R2,#HIGH USBFS_configuration
01FE 7900        E     MOV     R1,#LOW USBFS_configuration
0200 900000      E     MOV     DPTR,#USBFS_currentTD+02H
0203 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 215
0206 120000      E     LCALL   USBFS_InitControlRead
0209 900000      R     MOV     DPTR,#requestHandled
020C EF                MOV     A,R7
020D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 216
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 27  

020E 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 217
0211         ?C0021:
                                           ; SOURCE LINE # 218
0211 900000      E     MOV     DPTR,#USBFS_currentTD
0214 E4                CLR     A
0215 F0                MOVX    @DPTR,A
0216 A3                INC     DPTR
0217 04                INC     A
0218 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 219
0219 906004            MOV     DPTR,#06004H
021C E0                MOVX    A,@DPTR
021D 2400        E     ADD     A,#LOW USBFS_interfaceSetting
021F F9                MOV     R1,A
0220 E4                CLR     A
0221 3400        E     ADDC    A,#HIGH USBFS_interfaceSetting
0223 FA                MOV     R2,A
0224 7B01              MOV     R3,#01H
0226 900000      E     MOV     DPTR,#USBFS_currentTD+02H
0229 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 221
022C 120000      E     LCALL   USBFS_InitControlRead
022F 900000      R     MOV     DPTR,#requestHandled
0232 EF                MOV     A,R7
0233 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 222
0234 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 224
                                           ; SOURCE LINE # 225
                                           ; SOURCE LINE # 226
0237 020000      R     LJMP    ?C0023
023A         ?C0001:
                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 229
023A 906001            MOV     DPTR,#06001H
023D E0                MOVX    A,@DPTR
023E 14                DEC     A
023F 7003              JNZ     $ + 5H
0241 020000      R     LJMP    ?C0034
0244 24FE              ADD     A,#0FEH
0246 7003              JNZ     $ + 5H
0248 020000      R     LJMP    ?C0043
024B 24FA              ADD     A,#0FAH
024D 601E              JZ      ?C0026
024F 24FE              ADD     A,#0FEH
0251 6078              JZ      ?C0032
0253 2406              ADD     A,#06H
0255 6003              JZ      $ + 5H
0257 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 230
                                           ; SOURCE LINE # 231
025A         ?C0025:
                                           ; SOURCE LINE # 232
025A 906002            MOV     DPTR,#06002H
025D E0                MOVX    A,@DPTR
025E 900000      E     MOV     DPTR,#USBFS_deviceAddress
0261 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 233
0262 120000      E     LCALL   USBFS_InitNoDataControlTransfer
0265 900000      R     MOV     DPTR,#requestHandled
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 28  

0268 EF                MOV     A,R7
0269 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 234
026A 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 235
026D         ?C0026:
                                           ; SOURCE LINE # 236
026D 906002            MOV     DPTR,#06002H
0270 E0                MOVX    A,@DPTR
0271 900000      R     MOV     DPTR,#configurationN
0274 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 237
0275 E0                MOVX    A,@DPTR
0276 FF                MOV     R7,A
0277 D3                SETB    C
0278 9400              SUBB    A,#00H
027A 400E              JC      ?C0027
                                           ; SOURCE LINE # 238
                                           ; SOURCE LINE # 239
027C EF                MOV     A,R7
027D 14                DEC     A
027E FF                MOV     R7,A
027F 120000      R     LCALL   _USBFS_GetConfigTablePtr
0282 900000      R     MOV     DPTR,#pTmp
0285 EE                MOV     A,R6
0286 F0                MOVX    @DPTR,A
0287 A3                INC     DPTR
0288 EF                MOV     A,R7
0289 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 240
028A         ?C0027:
                                           ; SOURCE LINE # 242
028A 900000      R     MOV     DPTR,#configurationN
028D E0                MOVX    A,@DPTR
028E FF                MOV     R7,A
028F D3                SETB    C
0290 9400              SUBB    A,#00H
0292 400A              JC      ?C0030
0294 900000      R     MOV     DPTR,#pTmp
0297 E0                MOVX    A,@DPTR
0298 7002              JNZ     ?C0139
029A A3                INC     DPTR
029B E0                MOVX    A,@DPTR
029C         ?C0139:
029C 7006              JNZ     ?C0029
029E         ?C0030:
029E EF                MOV     A,R7
029F 6003              JZ      $ + 5H
02A1 020000      R     LJMP    ?C0023
02A4         ?C0029:
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 245
02A4 900000      E     MOV     DPTR,#USBFS_configuration
02A7 E0                MOVX    A,@DPTR
02A8 FF                MOV     R7,A
02A9 900000      R     MOV     DPTR,#configurationN
02AC E0                MOVX    A,@DPTR
02AD FE                MOV     R6,A
02AE 6F                XRL     A,R7
02AF 600F              JZ      ?C0031
                                           ; SOURCE LINE # 246
                                           ; SOURCE LINE # 247
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 29  

02B1 900000      E     MOV     DPTR,#USBFS_configuration
02B4 EE                MOV     A,R6
02B5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 248
02B6 900000      E     MOV     DPTR,#USBFS_configurationChanged
02B9 7401              MOV     A,#01H
02BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 249
02BC FF                MOV     R7,A
02BD 120000      R     LCALL   _USBFS_Config
                                           ; SOURCE LINE # 250
02C0         ?C0031:
                                           ; SOURCE LINE # 251
02C0 120000      E     LCALL   USBFS_InitNoDataControlTransfer
02C3 900000      R     MOV     DPTR,#requestHandled
02C6 EF                MOV     A,R7
02C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 253
02C8 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 254
02CB         ?C0032:
                                           ; SOURCE LINE # 255
02CB 120000      R     LCALL   USBFS_ValidateAlternateSetting
02CE EF                MOV     A,R7
02CF 7003              JNZ     $ + 5H
02D1 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
02D4 906004            MOV     DPTR,#06004H
02D7 E0                MOVX    A,@DPTR
02D8 900000      R     MOV     DPTR,#interfaceNumber
02DB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
02DC E0                MOVX    A,@DPTR
02DD 900000      E     MOV     DPTR,#USBFS_interfaceNumber
02E0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 259
02E1 900000      E     MOV     DPTR,#USBFS_configurationChanged
02E4 7401              MOV     A,#01H
02E6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 264
02E7 120000      R     LCALL   USBFS_ConfigAltChanged
                                           ; SOURCE LINE # 267
02EA 900000      R     MOV     DPTR,#interfaceNumber
02ED E0                MOVX    A,@DPTR
02EE FF                MOV     R7,A
02EF 2400        E     ADD     A,#LOW USBFS_interfaceSetting
02F1 F582              MOV     DPL,A
02F3 E4                CLR     A
02F4 3400        E     ADDC    A,#HIGH USBFS_interfaceSetting
02F6 F583              MOV     DPH,A
02F8 E0                MOVX    A,@DPTR
02F9 FE                MOV     R6,A
02FA 7400        E     MOV     A,#LOW USBFS_interfaceSetting_last
02FC 2F                ADD     A,R7
02FD F582              MOV     DPL,A
02FF E4                CLR     A
0300 3400        E     ADDC    A,#HIGH USBFS_interfaceSetting_last
0302 F583              MOV     DPH,A
0304 EE                MOV     A,R6
0305 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 30  

                                           ; SOURCE LINE # 269
0306 120000      E     LCALL   USBFS_InitNoDataControlTransfer
0309 900000      R     MOV     DPTR,#requestHandled
030C EF                MOV     A,R7
030D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 270
                                           ; SOURCE LINE # 271
030E 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 272
0311         ?C0034:
                                           ; SOURCE LINE # 273
0311 906000            MOV     DPTR,#06000H
0314 E0                MOVX    A,@DPTR
0315 5403              ANL     A,#03H
0317 601D              JZ      ?C0038
0319 14                DEC     A
031A 6037              JZ      ?C0040
031C 14                DEC     A
031D 6003              JZ      $ + 5H
031F 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 274
                                           ; SOURCE LINE # 275
0322         ?C0036:
                                           ; SOURCE LINE # 276
0322 906002            MOV     DPTR,#06002H
0325 E0                MOVX    A,@DPTR
0326 6003              JZ      $ + 5H
0328 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 277
                                           ; SOURCE LINE # 278
032B 120000      R     LCALL   USBFS_ClearEndpointHalt
032E 900000      R     MOV     DPTR,#requestHandled
0331 EF                MOV     A,R7
0332 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 279
                                           ; SOURCE LINE # 280
0333 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 281
0336         ?C0038:
                                           ; SOURCE LINE # 283
0336 906002            MOV     DPTR,#06002H
0339 E0                MOVX    A,@DPTR
033A 6401              XRL     A,#01H
033C 6003              JZ      $ + 5H
033E 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 284
                                           ; SOURCE LINE # 285
0341 900000      E     MOV     DPTR,#USBFS_deviceStatus
0344 E0                MOVX    A,@DPTR
0345 54FD              ANL     A,#0FDH
0347 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 286
0348 120000      E     LCALL   USBFS_InitNoDataControlTransfer
034B 900000      R     MOV     DPTR,#requestHandled
034E EF                MOV     A,R7
034F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 287
                                           ; SOURCE LINE # 288
0350 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 289
0353         ?C0040:
                                           ; SOURCE LINE # 291
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 31  

0353 906004            MOV     DPTR,#06004H
0356 E0                MOVX    A,@DPTR
0357 C3                CLR     C
0358 9404              SUBB    A,#04H
035A 4003              JC      $ + 5H
035C 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 292
                                           ; SOURCE LINE # 294
035F E0                MOVX    A,@DPTR
0360 2400        E     ADD     A,#LOW USBFS_interfaceStatus
0362 F582              MOV     DPL,A
0364 E4                CLR     A
0365 3400        E     ADDC    A,#HIGH USBFS_interfaceStatus
0367 F583              MOV     DPH,A
0369 C083              PUSH    DPH
036B C082              PUSH    DPL
036D E0                MOVX    A,@DPTR
036E FF                MOV     R7,A
036F 906002            MOV     DPTR,#06002H
0372 E0                MOVX    A,@DPTR
0373 F4                CPL     A
0374 FE                MOV     R6,A
0375 EF                MOV     A,R7
0376 5E                ANL     A,R6
0377 D082              POP     DPL
0379 D083              POP     DPH
037B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 295
037C 120000      E     LCALL   USBFS_InitNoDataControlTransfer
037F 900000      R     MOV     DPTR,#requestHandled
0382 EF                MOV     A,R7
0383 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 297
0384 8067              SJMP    ?C0023
                                           ; SOURCE LINE # 298
                                           ; SOURCE LINE # 299
                                           ; SOURCE LINE # 300
                                           ; SOURCE LINE # 301
0386 8065              SJMP    ?C0023
                                           ; SOURCE LINE # 302
0388         ?C0043:
                                           ; SOURCE LINE # 303
0388 906000            MOV     DPTR,#06000H
038B E0                MOVX    A,@DPTR
038C 5403              ANL     A,#03H
038E 6016              JZ      ?C0047
0390 14                DEC     A
0391 602C              JZ      ?C0049
0393 14                DEC     A
0394 7057              JNZ     ?C0023
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 305
0396         ?C0045:
                                           ; SOURCE LINE # 306
0396 906002            MOV     DPTR,#06002H
0399 E0                MOVX    A,@DPTR
039A 7051              JNZ     ?C0023
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 308
039C 120000      R     LCALL   USBFS_SetEndpointHalt
039F 900000      R     MOV     DPTR,#requestHandled
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 32  

03A2 EF                MOV     A,R7
03A3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 309
                                           ; SOURCE LINE # 310
03A4 8047              SJMP    ?C0023
                                           ; SOURCE LINE # 311
03A6         ?C0047:
                                           ; SOURCE LINE # 313
03A6 906002            MOV     DPTR,#06002H
03A9 E0                MOVX    A,@DPTR
03AA 6401              XRL     A,#01H
03AC 703F              JNZ     ?C0023
                                           ; SOURCE LINE # 314
                                           ; SOURCE LINE # 315
03AE 900000      E     MOV     DPTR,#USBFS_deviceStatus
03B1 E0                MOVX    A,@DPTR
03B2 4402              ORL     A,#02H
03B4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 316
03B5 120000      E     LCALL   USBFS_InitNoDataControlTransfer
03B8 900000      R     MOV     DPTR,#requestHandled
03BB EF                MOV     A,R7
03BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 317
                                           ; SOURCE LINE # 318
03BD 802E              SJMP    ?C0023
                                           ; SOURCE LINE # 319
03BF         ?C0049:
                                           ; SOURCE LINE # 321
03BF 906004            MOV     DPTR,#06004H
03C2 E0                MOVX    A,@DPTR
03C3 C3                CLR     C
03C4 9404              SUBB    A,#04H
03C6 5025              JNC     ?C0023
                                           ; SOURCE LINE # 322
                                           ; SOURCE LINE # 324
03C8 E0                MOVX    A,@DPTR
03C9 2400        E     ADD     A,#LOW USBFS_interfaceStatus
03CB F582              MOV     DPL,A
03CD E4                CLR     A
03CE 3400        E     ADDC    A,#HIGH USBFS_interfaceStatus
03D0 F583              MOV     DPH,A
03D2 C083              PUSH    DPH
03D4 C082              PUSH    DPL
03D6 E0                MOVX    A,@DPTR
03D7 FF                MOV     R7,A
03D8 906002            MOV     DPTR,#06002H
03DB E0                MOVX    A,@DPTR
03DC F4                CPL     A
03DD FE                MOV     R6,A
03DE EF                MOV     A,R7
03DF 5E                ANL     A,R6
03E0 D082              POP     DPL
03E2 D083              POP     DPH
03E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 325
03E5 120000      E     LCALL   USBFS_InitNoDataControlTransfer
03E8 900000      R     MOV     DPTR,#requestHandled
03EB EF                MOV     A,R7
03EC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 326
                                           ; SOURCE LINE # 327
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 33  

                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 329
                                           ; SOURCE LINE # 330
                                           ; SOURCE LINE # 331
                                           ; SOURCE LINE # 332
                                           ; SOURCE LINE # 333
                                           ; SOURCE LINE # 334
                                           ; SOURCE LINE # 335
03ED         ?C0023:
                                           ; SOURCE LINE # 336
03ED 900000      R     MOV     DPTR,#requestHandled
03F0 E0                MOVX    A,@DPTR
03F1 FF                MOV     R7,A
                                           ; SOURCE LINE # 337
03F2         ?C0053:
03F2 22                RET     
             ; FUNCTION USBFS_HandleStandardRqst (END)

             ; FUNCTION _USBFS_ReadDieID (BEGIN)
                                           ; SOURCE LINE # 359
0000 900000      R     MOV     DPTR,#descr
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 360
                                           ; SOURCE LINE # 362
0006 E4                CLR     A
0007 900000      R     MOV     DPTR,#j
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 367
000B 900000      R     MOV     DPTR,#descr
000E 120000      E     LCALL   ?C?PLDXDATA
0011 E9                MOV     A,R1
0012 4A                ORL     A,R2
0013 4B                ORL     A,R3
0014 7003              JNZ     $ + 5H
0016 020000      R     LJMP    ?C0058
                                           ; SOURCE LINE # 368
                                           ; SOURCE LINE # 369
0019 900000      R     MOV     DPTR,#descr
001C 120000      E     LCALL   ?C?PLDXDATA
001F 7422              MOV     A,#022H
0021 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 370
0024 900000      R     MOV     DPTR,#descr
0027 120000      E     LCALL   ?C?PLDXDATA
002A E9                MOV     A,R1
002B 2401              ADD     A,#01H
002D F9                MOV     R1,A
002E E4                CLR     A
002F 3A                ADDC    A,R2
0030 FA                MOV     R2,A
0031 7403              MOV     A,#03H
0033 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 373
0036 900000      R     MOV     DPTR,#i
0039 14                DEC     A
003A F0                MOVX    @DPTR,A
003B         ?C0055:
003B 900000      R     MOV     DPTR,#i
003E E0                MOVX    A,@DPTR
003F C3                CLR     C
0040 9422              SUBB    A,#022H
0042 506C              JNC     ?C0058
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 34  

                                           ; SOURCE LINE # 374
                                           ; SOURCE LINE # 375
0044 A3                INC     DPTR
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 E4                CLR     A
0048 E4                CLR     A
0049 2F                ADD     A,R7
004A FF                MOV     R7,A
004B E4                CLR     A
004C 3401              ADDC    A,#01H
004E FE                MOV     R6,A
004F E4                CLR     A
0050 340C              ADDC    A,#0CH
0052 FD                MOV     R5,A
0053 E4                CLR     A
0054 33                RLC     A
0055 A907              MOV     R1,AR7
0057 AA06              MOV     R2,AR6
0059 AB05              MOV     R3,AR5
005B 120000      E     LCALL   _cyread8
005E 900000      R     MOV     DPTR,#value
0061 EF                MOV     A,R7
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 376
0063 900000      R     MOV     DPTR,#j
0066 E0                MOVX    A,@DPTR
0067 04                INC     A
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 377
0069 A3                INC     DPTR
006A E0                MOVX    A,@DPTR
006B FF                MOV     R7,A
006C C4                SWAP    A
006D 540F              ANL     A,#0FH
006F 900000      R     MOV     DPTR,#hex
0072 93                MOVC    A,@A+DPTR
0073 FE                MOV     R6,A
0074 900000      R     MOV     DPTR,#descr
0077 120000      E     LCALL   ?C?PLDXDATA
007A 900000      R     MOV     DPTR,#i
007D E0                MOVX    A,@DPTR
007E FD                MOV     R5,A
007F 29                ADD     A,R1
0080 F9                MOV     R1,A
0081 E4                CLR     A
0082 3A                ADDC    A,R2
0083 FA                MOV     R2,A
0084 EE                MOV     A,R6
0085 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 378
0088 EF                MOV     A,R7
0089 540F              ANL     A,#0FH
008B 900000      R     MOV     DPTR,#hex
008E 93                MOVC    A,@A+DPTR
008F FF                MOV     R7,A
0090 ED                MOV     A,R5
0091 2402              ADD     A,#02H
0093 FD                MOV     R5,A
0094 E4                CLR     A
0095 33                RLC     A
0096 FC                MOV     R4,A
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 35  

0097 900000      R     MOV     DPTR,#descr
009A 120000      E     LCALL   ?C?PLDXDATA
009D E9                MOV     A,R1
009E 2D                ADD     A,R5
009F F9                MOV     R1,A
00A0 EA                MOV     A,R2
00A1 3C                ADDC    A,R4
00A2 FA                MOV     R2,A
00A3 EF                MOV     A,R7
00A4 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 379
00A7 900000      R     MOV     DPTR,#i
00AA E0                MOVX    A,@DPTR
00AB 2404              ADD     A,#04H
00AD F0                MOVX    @DPTR,A
00AE 808B              SJMP    ?C0055
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 381
00B0         ?C0058:
00B0 22                RET     
             ; FUNCTION _USBFS_ReadDieID (END)

             ; FUNCTION USBFS_ConfigReg (BEGIN)
                                           ; SOURCE LINE # 402
                                           ; SOURCE LINE # 403
                                           ; SOURCE LINE # 407
;---- Variable 'epType' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
                                           ; SOURCE LINE # 411
;---- Variable 'ep' assigned to Register 'R6' ----
0002 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 412
;---- Variable 'i' assigned to Register 'R5' ----
0004 FD                MOV     R5,A
0005         ?C0059:
0005 ED                MOV     A,R5
0006 C3                CLR     C
0007 9480              SUBB    A,#080H
0009 4003              JC      $ + 5H
000B 020000      R     LJMP    ?C0060
                                           ; SOURCE LINE # 413
                                           ; SOURCE LINE # 414
000E ED                MOV     A,R5
000F 2480              ADD     A,#080H
0011 FB                MOV     R3,A
0012 E4                CLR     A
0013 3460              ADDC    A,#060H
0015 8B82              MOV     DPL,R3
0017 F583              MOV     DPH,A
0019 740C              MOV     A,#0CH
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 417
001C ED                MOV     A,R5
001D 2481              ADD     A,#081H
001F FB                MOV     R3,A
0020 E4                CLR     A
0021 3460              ADDC    A,#060H
0023 8B82              MOV     DPL,R3
0025 F583              MOV     DPH,A
0027 741D              MOV     A,#01DH
0029 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 36  

                                           ; SOURCE LINE # 420
002A EE                MOV     A,R6
002B 75F00B            MOV     B,#0BH
002E A4                MUL     AB
002F 2400        E     ADD     A,#LOW USBFS_EP+05H
0031 F582              MOV     DPL,A
0033 E4                CLR     A
0034 3400        E     ADDC    A,#HIGH USBFS_EP+05H
0036 F583              MOV     DPH,A
0038 E0                MOVX    A,@DPTR
0039 6043              JZ      ?C0062
                                           ; SOURCE LINE # 421
                                           ; SOURCE LINE # 422
003B EE                MOV     A,R6
003C 75F00B            MOV     B,#0BH
003F A4                MUL     AB
0040 2400        E     ADD     A,#LOW USBFS_EP+04H
0042 F582              MOV     DPL,A
0044 E4                CLR     A
0045 3400        E     ADDC    A,#HIGH USBFS_EP+04H
0047 F583              MOV     DPH,A
0049 E0                MOVX    A,@DPTR
004A 5480              ANL     A,#080H
004C 6010              JZ      ?C0063
                                           ; SOURCE LINE # 423
                                           ; SOURCE LINE # 424
004E ED                MOV     A,R5
004F 240E              ADD     A,#0EH
0051 FB                MOV     R3,A
0052 E4                CLR     A
0053 3460              ADDC    A,#060H
0055 8B82              MOV     DPL,R3
0057 F583              MOV     DPH,A
0059 740C              MOV     A,#0CH
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 425
005C 802E              SJMP    ?C0065
005E         ?C0063:
                                           ; SOURCE LINE # 427
                                           ; SOURCE LINE # 428
005E ED                MOV     A,R5
005F 240E              ADD     A,#0EH
0061 FB                MOV     R3,A
0062 E4                CLR     A
0063 3460              ADDC    A,#060H
0065 8B82              MOV     DPL,R3
0067 F583              MOV     DPH,A
0069 7408              MOV     A,#08H
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 431
006C EE                MOV     A,R6
006D 14                DEC     A
006E FC                MOV     R4,A
006F 7401              MOV     A,#01H
0071 A804              MOV     R0,AR4
0073 08                INC     R0
0074 8002              SJMP    ?C0142
0076         ?C0141:
0076 C3                CLR     C
0077 33                RLC     A
0078         ?C0142:
0078 D8FC              DJNZ    R0,?C0141
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 37  

007A 4F                ORL     A,R7
007B FF                MOV     R7,A
                                           ; SOURCE LINE # 433
                                           ; SOURCE LINE # 434
007C 800E              SJMP    ?C0065
007E         ?C0062:
                                           ; SOURCE LINE # 436
                                           ; SOURCE LINE # 437
007E ED                MOV     A,R5
007F 240E              ADD     A,#0EH
0081 FB                MOV     R3,A
0082 E4                CLR     A
0083 3460              ADDC    A,#060H
0085 8B82              MOV     DPL,R3
0087 F583              MOV     DPH,A
0089 7480              MOV     A,#080H
008B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 438
008C         ?C0065:
                                           ; SOURCE LINE # 450
008C 0E                INC     R6
                                           ; SOURCE LINE # 451
008D 7410              MOV     A,#010H
008F 2D                ADD     A,R5
0090 FD                MOV     R5,A
0091 020000      R     LJMP    ?C0059
0094         ?C0060:
                                           ; SOURCE LINE # 455
0094 90608C            MOV     DPTR,#0608CH
0097 7455              MOV     A,#055H
0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 456
009A 9060BC            MOV     DPTR,#060BCH
009D 7420              MOV     A,#020H
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 457
00A0 A3                INC     DPTR
00A1 E4                CLR     A
00A2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 458
00A3 90608E            MOV     DPTR,#0608EH
00A6 7406              MOV     A,#06H
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 459
00A9 A3                INC     DPTR
00AA EF                MOV     A,R7
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 461
00AC 90609C            MOV     DPTR,#0609CH
00AF 74D0              MOV     A,#0D0H
00B1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 464
00B2 7450              MOV     A,#050H
00B4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 467
00B5 90600A            MOV     DPTR,#0600AH
00B8 74FF              MOV     A,#0FFH
00BA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 468
00BB 22                RET     
             ; FUNCTION USBFS_ConfigReg (END)

C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 38  

             ; FUNCTION _USBFS_Config (BEGIN)
                                           ; SOURCE LINE # 493
;---- Variable 'clearAltSetting' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 494
                                           ; SOURCE LINE # 508
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#ep
0004 F0                MOVX    @DPTR,A
0005         ?C0067:
0005 900000      R     MOV     DPTR,#ep
0008 E0                MOVX    A,@DPTR
0009 FE                MOV     R6,A
000A C3                CLR     C
000B 9409              SUBB    A,#09H
000D 507B              JNC     ?C0068
                                           ; SOURCE LINE # 509
                                           ; SOURCE LINE # 510
000F EE                MOV     A,R6
0010 75F00B            MOV     B,#0BH
0013 A4                MUL     AB
0014 2400        E     ADD     A,#LOW USBFS_EP
0016 F582              MOV     DPL,A
0018 E4                CLR     A
0019 3400        E     ADDC    A,#HIGH USBFS_EP
001B F583              MOV     DPH,A
001D E4                CLR     A
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 511
001F EE                MOV     A,R6
0020 75F00B            MOV     B,#0BH
0023 A4                MUL     AB
0024 2400        E     ADD     A,#LOW USBFS_EP+02H
0026 F582              MOV     DPL,A
0028 E4                CLR     A
0029 3400        E     ADDC    A,#HIGH USBFS_EP+02H
002B F583              MOV     DPH,A
002D E4                CLR     A
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 512
002F EE                MOV     A,R6
0030 75F00B            MOV     B,#0BH
0033 A4                MUL     AB
0034 2400        E     ADD     A,#LOW USBFS_EP+01H
0036 F582              MOV     DPL,A
0038 E4                CLR     A
0039 3400        E     ADDC    A,#HIGH USBFS_EP+01H
003B F583              MOV     DPH,A
003D E4                CLR     A
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 513
003F EE                MOV     A,R6
0040 75F00B            MOV     B,#0BH
0043 A4                MUL     AB
0044 2400        E     ADD     A,#LOW USBFS_EP+03H
0046 F582              MOV     DPL,A
0048 E4                CLR     A
0049 3400        E     ADDC    A,#HIGH USBFS_EP+03H
004B F583              MOV     DPH,A
004D E4                CLR     A
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 514
004F EE                MOV     A,R6
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 39  

0050 75F00B            MOV     B,#0BH
0053 A4                MUL     AB
0054 2400        E     ADD     A,#LOW USBFS_EP+05H
0056 F582              MOV     DPL,A
0058 E4                CLR     A
0059 3400        E     ADDC    A,#HIGH USBFS_EP+05H
005B F583              MOV     DPH,A
005D E4                CLR     A
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 515
005F EE                MOV     A,R6
0060 75F00B            MOV     B,#0BH
0063 A4                MUL     AB
0064 2400        E     ADD     A,#LOW USBFS_EP+08H
0066 F582              MOV     DPL,A
0068 E4                CLR     A
0069 3400        E     ADDC    A,#HIGH USBFS_EP+08H
006B F583              MOV     DPH,A
006D E4                CLR     A
006E F0                MOVX    @DPTR,A
006F A3                INC     DPTR
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 516
0071 EE                MOV     A,R6
0072 75F00B            MOV     B,#0BH
0075 A4                MUL     AB
0076 2400        E     ADD     A,#LOW USBFS_EP+0AH
0078 F582              MOV     DPL,A
007A E4                CLR     A
007B 3400        E     ADDC    A,#HIGH USBFS_EP+0AH
007D F583              MOV     DPH,A
007F E4                CLR     A
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 518
0081 900000      R     MOV     DPTR,#ep
0084 E0                MOVX    A,@DPTR
0085 04                INC     A
0086 F0                MOVX    @DPTR,A
0087 020000      R     LJMP    ?C0067
008A         ?C0068:
                                           ; SOURCE LINE # 521
008A EF                MOV     A,R7
008B 602F              JZ      ?C0070
                                           ; SOURCE LINE # 522
                                           ; SOURCE LINE # 523
008D E4                CLR     A
008E 900000      R     MOV     DPTR,#i
0091 F0                MOVX    @DPTR,A
0092         ?C0071:
0092 900000      R     MOV     DPTR,#i
0095 E0                MOVX    A,@DPTR
0096 FF                MOV     R7,A
0097 C3                CLR     C
0098 9404              SUBB    A,#04H
009A 5020              JNC     ?C0070
                                           ; SOURCE LINE # 524
                                           ; SOURCE LINE # 525
009C 7400        E     MOV     A,#LOW USBFS_interfaceSetting
009E 2F                ADD     A,R7
009F F582              MOV     DPL,A
00A1 E4                CLR     A
00A2 3400        E     ADDC    A,#HIGH USBFS_interfaceSetting
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 40  

00A4 F583              MOV     DPH,A
00A6 E4                CLR     A
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 526
00A8 7400        E     MOV     A,#LOW USBFS_interfaceSetting_last
00AA 2F                ADD     A,R7
00AB F582              MOV     DPL,A
00AD E4                CLR     A
00AE 3400        E     ADDC    A,#HIGH USBFS_interfaceSetting_last
00B0 F583              MOV     DPH,A
00B2 E4                CLR     A
00B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 527
00B4 900000      R     MOV     DPTR,#i
00B7 E0                MOVX    A,@DPTR
00B8 04                INC     A
00B9 F0                MOVX    @DPTR,A
00BA 80D6              SJMP    ?C0071
                                           ; SOURCE LINE # 528
00BC         ?C0070:
                                           ; SOURCE LINE # 531
00BC 900000      E     MOV     DPTR,#USBFS_configuration
00BF E0                MOVX    A,@DPTR
00C0 D3                SETB    C
00C1 9400              SUBB    A,#00H
00C3 5003              JNC     $ + 5H
00C5 020000      R     LJMP    ?C0095
                                           ; SOURCE LINE # 532
                                           ; SOURCE LINE # 533
00C8 E0                MOVX    A,@DPTR
00C9 14                DEC     A
00CA FF                MOV     R7,A
00CB 120000      R     LCALL   _USBFS_GetConfigTablePtr
00CE 900000      R     MOV     DPTR,#pTmp
00D1 EE                MOV     A,R6
00D2 F0                MOVX    @DPTR,A
00D3 A3                INC     DPTR
00D4 EF                MOV     A,R7
00D5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 535
00D6 900000      R     MOV     DPTR,#pTmp
00D9 E0                MOVX    A,@DPTR
00DA FC                MOV     R4,A
00DB A3                INC     DPTR
00DC E0                MOVX    A,@DPTR
00DD FD                MOV     R5,A
00DE F582              MOV     DPL,A
00E0 8C83              MOV     DPH,R4
00E2 A3                INC     DPTR
00E3 120000      E     LCALL   ?C?PLDCODE
;---- Variable 'pDescr' assigned to Register 'R1/R2/R3' ----
                                           ; SOURCE LINE # 536
00E6 E9                MOV     A,R1
00E7 2407              ADD     A,#07H
00E9 F9                MOV     R1,A
00EA E4                CLR     A
00EB 3A                ADDC    A,R2
00EC FA                MOV     R2,A
00ED 120000      E     LCALL   ?C?CLDPTR
00F0 5440              ANL     A,#040H
00F2 6009              JZ      ?C0075
                                           ; SOURCE LINE # 537
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 41  

                                           ; SOURCE LINE # 538
00F4 900000      E     MOV     DPTR,#USBFS_deviceStatus
00F7 E0                MOVX    A,@DPTR
00F8 4401              ORL     A,#01H
00FA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 539
00FB 8007              SJMP    ?C0076
00FD         ?C0075:
                                           ; SOURCE LINE # 541
                                           ; SOURCE LINE # 542
00FD 900000      E     MOV     DPTR,#USBFS_deviceStatus
0100 E0                MOVX    A,@DPTR
0101 54FE              ANL     A,#0FEH
0103 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 543
0104         ?C0076:
                                           ; SOURCE LINE # 545
0104 ED                MOV     A,R5
0105 2404              ADD     A,#04H
0107 FF                MOV     R7,A
0108 E4                CLR     A
0109 3C                ADDC    A,R4
010A FE                MOV     R6,A
010B 900000      R     MOV     DPTR,#pTmp
010E F0                MOVX    @DPTR,A
010F A3                INC     DPTR
0110 EF                MOV     A,R7
0111 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 546
0112 F582              MOV     DPL,A
0114 8E83              MOV     DPH,R6
0116 E4                CLR     A
0117 93                MOVC    A,@A+DPTR
0118 900000      R     MOV     DPTR,#ep
011B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 613
011C A3                INC     DPTR
011D 7401              MOV     A,#01H
011F F0                MOVX    @DPTR,A
0120         ?C0077:
0120 900000      R     MOV     DPTR,#i
0123 E0                MOVX    A,@DPTR
0124 C3                CLR     C
0125 9409              SUBB    A,#09H
0127 4003              JC      $ + 5H
0129 020000      R     LJMP    ?C0078
                                           ; SOURCE LINE # 614
                                           ; SOURCE LINE # 616
012C A3                INC     DPTR
012D E0                MOVX    A,@DPTR
012E FE                MOV     R6,A
012F A3                INC     DPTR
0130 E0                MOVX    A,@DPTR
0131 F582              MOV     DPL,A
0133 8E83              MOV     DPH,R6
0135 A3                INC     DPTR
0136 120000      E     LCALL   ?C?PLDCODE
0139 AF01              MOV     R7,AR1
013B 900000      R     MOV     DPTR,#pEP
013E EA                MOV     A,R2
013F F0                MOVX    @DPTR,A
0140 A3                INC     DPTR
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 42  

0141 EF                MOV     A,R7
0142 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 619
;---- Variable 'cur_ep' assigned to Register 'R7' ----
0143 E4                CLR     A
0144 FF                MOV     R7,A
0145         ?C0080:
0145 900000      R     MOV     DPTR,#ep
0148 E0                MOVX    A,@DPTR
0149 FE                MOV     R6,A
014A EF                MOV     A,R7
014B C3                CLR     C
014C 9E                SUBB    A,R6
014D 4003              JC      $ + 5H
014F 020000      R     LJMP    ?C0079
                                           ; SOURCE LINE # 620
                                           ; SOURCE LINE # 622
0152 900000      R     MOV     DPTR,#pEP
0155 E0                MOVX    A,@DPTR
0156 FC                MOV     R4,A
0157 A3                INC     DPTR
0158 E0                MOVX    A,@DPTR
0159 F582              MOV     DPL,A
015B 8C83              MOV     DPH,R4
015D 7402              MOV     A,#02H
015F 93                MOVC    A,@A+DPTR
0160 547F              ANL     A,#07FH
0162 FD                MOV     R5,A
0163 900000      R     MOV     DPTR,#i
0166 E0                MOVX    A,@DPTR
0167 FE                MOV     R6,A
0168 6D                XRL     A,R5
0169 7001              JNZ     ?C0143
016B E4                CLR     A
016C         ?C0143:
016C 6003              JZ      $ + 5H
016E 020000      R     LJMP    ?C0083
                                           ; SOURCE LINE # 623
                                           ; SOURCE LINE # 624
0171 900000      R     MOV     DPTR,#pEP
0174 E0                MOVX    A,@DPTR
0175 A3                INC     DPTR
0176 E0                MOVX    A,@DPTR
0177 F582              MOV     DPL,A
0179 8C83              MOV     DPH,R4
017B 7404              MOV     A,#04H
017D 93                MOVC    A,@A+DPTR
017E FC                MOV     R4,A
017F 7405              MOV     A,#05H
0181 93                MOVC    A,@A+DPTR
0182 FD                MOV     R5,A
0183 EE                MOV     A,R6
0184 75F00B            MOV     B,#0BH
0187 A4                MUL     AB
0188 2400        E     ADD     A,#LOW USBFS_EP+08H
018A F582              MOV     DPL,A
018C E4                CLR     A
018D 3400        E     ADDC    A,#HIGH USBFS_EP+08H
018F F583              MOV     DPH,A
0191 E0                MOVX    A,@DPTR
0192 FA                MOV     R2,A
0193 A3                INC     DPTR
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 43  

0194 E0                MOVX    A,@DPTR
0195 C3                CLR     C
0196 9D                SUBB    A,R5
0197 EA                MOV     A,R2
0198 9C                SUBB    A,R4
0199 5029              JNC     ?C0084
                                           ; SOURCE LINE # 625
                                           ; SOURCE LINE # 626
019B 900000      R     MOV     DPTR,#pEP
019E E0                MOVX    A,@DPTR
019F FC                MOV     R4,A
01A0 A3                INC     DPTR
01A1 E0                MOVX    A,@DPTR
01A2 F582              MOV     DPL,A
01A4 8C83              MOV     DPH,R4
01A6 7404              MOV     A,#04H
01A8 93                MOVC    A,@A+DPTR
01A9 FC                MOV     R4,A
01AA 7405              MOV     A,#05H
01AC 93                MOVC    A,@A+DPTR
01AD FD                MOV     R5,A
01AE 900000      R     MOV     DPTR,#i
01B1 E0                MOVX    A,@DPTR
01B2 75F00B            MOV     B,#0BH
01B5 A4                MUL     AB
01B6 2400        E     ADD     A,#LOW USBFS_EP+08H
01B8 F582              MOV     DPL,A
01BA E4                CLR     A
01BB 3400        E     ADDC    A,#HIGH USBFS_EP+08H
01BD F583              MOV     DPH,A
01BF EC                MOV     A,R4
01C0 F0                MOVX    @DPTR,A
01C1 A3                INC     DPTR
01C2 ED                MOV     A,R5
01C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 627
01C4         ?C0084:
                                           ; SOURCE LINE # 629
01C4 900000      R     MOV     DPTR,#pEP
01C7 E0                MOVX    A,@DPTR
01C8 FC                MOV     R4,A
01C9 A3                INC     DPTR
01CA E0                MOVX    A,@DPTR
01CB FD                MOV     R5,A
01CC F582              MOV     DPL,A
01CE 8C83              MOV     DPH,R4
01D0 E4                CLR     A
01D1 93                MOVC    A,@A+DPTR
01D2 2400        E     ADD     A,#LOW USBFS_interfaceSetting
01D4 F582              MOV     DPL,A
01D6 E4                CLR     A
01D7 3400        E     ADDC    A,#HIGH USBFS_interfaceSetting
01D9 F583              MOV     DPH,A
01DB E0                MOVX    A,@DPTR
01DC FE                MOV     R6,A
01DD 8D82              MOV     DPL,R5
01DF 8C83              MOV     DPH,R4
01E1 7401              MOV     A,#01H
01E3 93                MOVC    A,@A+DPTR
01E4 FD                MOV     R5,A
01E5 EE                MOV     A,R6
01E6 6D                XRL     A,R5
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 44  

01E7 6003              JZ      $ + 5H
01E9 020000      R     LJMP    ?C0083
                                           ; SOURCE LINE # 630
                                           ; SOURCE LINE # 631
01EC 900000      R     MOV     DPTR,#pEP
01EF E0                MOVX    A,@DPTR
01F0 A3                INC     DPTR
01F1 E0                MOVX    A,@DPTR
01F2 F582              MOV     DPL,A
01F4 8C83              MOV     DPH,R4
01F6 7403              MOV     A,#03H
01F8 93                MOVC    A,@A+DPTR
01F9 5403              ANL     A,#03H
01FB FE                MOV     R6,A
;---- Variable 'epType' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 632
01FC 900000      R     MOV     DPTR,#pEP
01FF E0                MOVX    A,@DPTR
0200 A3                INC     DPTR
0201 E0                MOVX    A,@DPTR
0202 F582              MOV     DPL,A
0204 8C83              MOV     DPH,R4
0206 7402              MOV     A,#02H
0208 93                MOVC    A,@A+DPTR
0209 5480              ANL     A,#080H
020B 6030              JZ      ?C0086
                                           ; SOURCE LINE # 633
                                           ; SOURCE LINE # 635
020D 900000      R     MOV     DPTR,#i
0210 E0                MOVX    A,@DPTR
0211 FD                MOV     R5,A
0212 75F00B            MOV     B,#0BH
0215 A4                MUL     AB
0216 2400        E     ADD     A,#LOW USBFS_EP+01H
0218 F582              MOV     DPL,A
021A E4                CLR     A
021B 3400        E     ADDC    A,#HIGH USBFS_EP+01H
021D F583              MOV     DPH,A
021F 7401              MOV     A,#01H
0221 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 636
0222 B50604            CJNE    A,AR6,?C0087
0225 7C07              MOV     R4,#07H
0227 8002              SJMP    ?C0088
0229         ?C0087:
0229 7C0D              MOV     R4,#0DH
022B         ?C0088:
022B ED                MOV     A,R5
022C 75F00B            MOV     B,#0BH
022F A4                MUL     AB
0230 2400        E     ADD     A,#LOW USBFS_EP+05H
0232 F582              MOV     DPL,A
0234 E4                CLR     A
0235 3400        E     ADDC    A,#HIGH USBFS_EP+05H
0237 F583              MOV     DPH,A
0239 EC                MOV     A,R4
023A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 655
023B 802E              SJMP    ?C0089
023D         ?C0086:
                                           ; SOURCE LINE # 657
                                           ; SOURCE LINE # 659
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 45  

023D 900000      R     MOV     DPTR,#i
0240 E0                MOVX    A,@DPTR
0241 FD                MOV     R5,A
0242 75F00B            MOV     B,#0BH
0245 A4                MUL     AB
0246 2400        E     ADD     A,#LOW USBFS_EP+01H
0248 F582              MOV     DPL,A
024A E4                CLR     A
024B 3400        E     ADDC    A,#HIGH USBFS_EP+01H
024D F583              MOV     DPH,A
024F E4                CLR     A
0250 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 660
0251 EE                MOV     A,R6
0252 B40104            CJNE    A,#01H,?C0090
0255 7E05              MOV     R6,#05H
0257 8002              SJMP    ?C0091
0259         ?C0090:
0259 7E09              MOV     R6,#09H
025B         ?C0091:
025B ED                MOV     A,R5
025C 75F00B            MOV     B,#0BH
025F A4                MUL     AB
0260 2400        E     ADD     A,#LOW USBFS_EP+05H
0262 F582              MOV     DPL,A
0264 E4                CLR     A
0265 3400        E     ADDC    A,#HIGH USBFS_EP+05H
0267 F583              MOV     DPH,A
0269 EE                MOV     A,R6
026A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 679
026B         ?C0089:
                                           ; SOURCE LINE # 680
026B 900000      R     MOV     DPTR,#pEP
026E E0                MOVX    A,@DPTR
026F FC                MOV     R4,A
0270 A3                INC     DPTR
0271 E0                MOVX    A,@DPTR
0272 FD                MOV     R5,A
0273 F582              MOV     DPL,A
0275 8C83              MOV     DPH,R4
0277 7402              MOV     A,#02H
0279 93                MOVC    A,@A+DPTR
027A FE                MOV     R6,A
027B 900000      R     MOV     DPTR,#i
027E E0                MOVX    A,@DPTR
027F FB                MOV     R3,A
0280 75F00B            MOV     B,#0BH
0283 A4                MUL     AB
0284 2400        E     ADD     A,#LOW USBFS_EP+04H
0286 F582              MOV     DPL,A
0288 E4                CLR     A
0289 3400        E     ADDC    A,#HIGH USBFS_EP+04H
028B F583              MOV     DPH,A
028D EE                MOV     A,R6
028E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 681
028F 8D82              MOV     DPL,R5
0291 8C83              MOV     DPH,R4
0293 7403              MOV     A,#03H
0295 93                MOVC    A,@A+DPTR
0296 FE                MOV     R6,A
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 46  

0297 EB                MOV     A,R3
0298 75F00B            MOV     B,#0BH
029B A4                MUL     AB
029C 2400        E     ADD     A,#LOW USBFS_EP
029E F582              MOV     DPL,A
02A0 E4                CLR     A
02A1 3400        E     ADDC    A,#HIGH USBFS_EP
02A3 F583              MOV     DPH,A
02A5 EE                MOV     A,R6
02A6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 684
02A7 8012              SJMP    ?C0079
                                           ; SOURCE LINE # 686
                                           ; SOURCE LINE # 687
02A9         ?C0083:
                                           ; SOURCE LINE # 688
02A9 900000      R     MOV     DPTR,#pEP+01H
02AC E0                MOVX    A,@DPTR
02AD 2407              ADD     A,#07H
02AF F0                MOVX    @DPTR,A
02B0 900000      R     MOV     DPTR,#pEP
02B3 E0                MOVX    A,@DPTR
02B4 3400              ADDC    A,#00H
02B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 689
02B7 0F                INC     R7
02B8 020000      R     LJMP    ?C0080
                                           ; SOURCE LINE # 690
02BB         ?C0079:
02BB 900000      R     MOV     DPTR,#i
02BE E0                MOVX    A,@DPTR
02BF 04                INC     A
02C0 F0                MOVX    @DPTR,A
02C1 020000      R     LJMP    ?C0077
02C4         ?C0078:
                                           ; SOURCE LINE # 698
02C4 900000      R     MOV     DPTR,#pTmp
02C7 E0                MOVX    A,@DPTR
02C8 FE                MOV     R6,A
02C9 A3                INC     DPTR
02CA E0                MOVX    A,@DPTR
02CB F582              MOV     DPL,A
02CD 8E83              MOV     DPH,R6
02CF A3                INC     DPTR
02D0 120000      E     LCALL   ?C?PLDCODE
02D3 AF01              MOV     R7,AR1
02D5 900000      R     MOV     DPTR,#pEP
02D8 EA                MOV     A,R2
02D9 F0                MOVX    @DPTR,A
02DA A3                INC     DPTR
02DB EF                MOV     A,R7
02DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 699
02DD E4                CLR     A
02DE 900000      R     MOV     DPTR,#i
02E1 F0                MOVX    @DPTR,A
02E2         ?C0092:
02E2 900000      R     MOV     DPTR,#ep
02E5 E0                MOVX    A,@DPTR
02E6 FF                MOV     R7,A
02E7 A3                INC     DPTR
02E8 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 47  

02E9 C3                CLR     C
02EA 9F                SUBB    A,R7
02EB 5038              JNC     ?C0093
                                           ; SOURCE LINE # 700
                                           ; SOURCE LINE # 702
02ED 900000      R     MOV     DPTR,#pEP
02F0 E0                MOVX    A,@DPTR
02F1 FE                MOV     R6,A
02F2 A3                INC     DPTR
02F3 E0                MOVX    A,@DPTR
02F4 F582              MOV     DPL,A
02F6 8E83              MOV     DPH,R6
02F8 E4                CLR     A
02F9 93                MOVC    A,@A+DPTR
02FA FD                MOV     R5,A
02FB 7402              MOV     A,#02H
02FD 93                MOVC    A,@A+DPTR
02FE 547F              ANL     A,#07FH
0300 75F00B            MOV     B,#0BH
0303 A4                MUL     AB
0304 2400        E     ADD     A,#LOW USBFS_EP+0AH
0306 F582              MOV     DPL,A
0308 E4                CLR     A
0309 3400        E     ADDC    A,#HIGH USBFS_EP+0AH
030B F583              MOV     DPH,A
030D ED                MOV     A,R5
030E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 703
030F 900000      R     MOV     DPTR,#pEP+01H
0312 E0                MOVX    A,@DPTR
0313 2407              ADD     A,#07H
0315 F0                MOVX    @DPTR,A
0316 900000      R     MOV     DPTR,#pEP
0319 E0                MOVX    A,@DPTR
031A 3400              ADDC    A,#00H
031C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 704
031D 900000      R     MOV     DPTR,#i
0320 E0                MOVX    A,@DPTR
0321 04                INC     A
0322 F0                MOVX    @DPTR,A
0323 80BD              SJMP    ?C0092
0325         ?C0093:
                                           ; SOURCE LINE # 706
0325 120000      R     LCALL   USBFS_GetInterfaceClassTablePtr
0328 900000      E     MOV     DPTR,#USBFS_interfaceClass
032B EE                MOV     A,R6
032C F0                MOVX    @DPTR,A
032D A3                INC     DPTR
032E EF                MOV     A,R7
032F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 718
0330 120000      R     LCALL   USBFS_ConfigReg
                                           ; SOURCE LINE # 719
                                           ; SOURCE LINE # 720
0333         ?C0095:
0333 22                RET     
             ; FUNCTION _USBFS_Config (END)

             ; FUNCTION USBFS_ConfigAltChanged (BEGIN)
                                           ; SOURCE LINE # 741
                                           ; SOURCE LINE # 742
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 48  

                                           ; SOURCE LINE # 754
0000 900000      E     MOV     DPTR,#USBFS_configuration
0003 E0                MOVX    A,@DPTR
0004 D3                SETB    C
0005 9400              SUBB    A,#00H
0007 5003              JNC     $ + 5H
0009 020000      R     LJMP    ?C0111
                                           ; SOURCE LINE # 755
                                           ; SOURCE LINE # 756
000C E0                MOVX    A,@DPTR
000D 14                DEC     A
000E FF                MOV     R7,A
000F 120000      R     LCALL   _USBFS_GetConfigTablePtr
;---- Variable 'pTmp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 757
0012 EF                MOV     A,R7
0013 2404              ADD     A,#04H
0015 FF                MOV     R7,A
0016 E4                CLR     A
0017 3E                ADDC    A,R6
0018 FE                MOV     R6,A
                                           ; SOURCE LINE # 758
0019 8F82              MOV     DPL,R7
001B F583              MOV     DPH,A
001D E4                CLR     A
001E 93                MOVC    A,@A+DPTR
001F 900000      R     MOV     DPTR,#ep
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 763
0023 8F82              MOV     DPL,R7
0025 8E83              MOV     DPH,R6
0027 A3                INC     DPTR
0028 120000      E     LCALL   ?C?PLDCODE
;---- Variable 'pEP' assigned to Register 'R2/R3' ----
002B AB01              MOV     R3,AR1
                                           ; SOURCE LINE # 764
;---- Variable 'i' assigned to Register 'R1' ----
002D E4                CLR     A
002E F9                MOV     R1,A
002F         ?C0097:
002F 900000      R     MOV     DPTR,#ep
0032 E0                MOVX    A,@DPTR
0033 FF                MOV     R7,A
0034 E9                MOV     A,R1
0035 C3                CLR     C
0036 9F                SUBB    A,R7
0037 4003              JC      $ + 5H
0039 020000      R     LJMP    ?C0111
                                           ; SOURCE LINE # 765
                                           ; SOURCE LINE # 770
003C 8B82              MOV     DPL,R3
003E 8A83              MOV     DPH,R2
0040 E4                CLR     A
0041 93                MOVC    A,@A+DPTR
0042 FE                MOV     R6,A
0043 2400        E     ADD     A,#LOW USBFS_interfaceSetting_last
0045 F582              MOV     DPL,A
0047 E4                CLR     A
0048 3400        E     ADDC    A,#HIGH USBFS_interfaceSetting_last
004A F583              MOV     DPH,A
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 49  

004E 7400        E     MOV     A,#LOW USBFS_interfaceSetting
0050 2E                ADD     A,R6
0051 F582              MOV     DPL,A
0053 E4                CLR     A
0054 3400        E     ADDC    A,#HIGH USBFS_interfaceSetting
0056 F583              MOV     DPH,A
0058 E0                MOVX    A,@DPTR
0059 6F                XRL     A,R7
005A 7003              JNZ     $ + 5H
005C 020000      R     LJMP    ?C0100
005F 8B82              MOV     DPL,R3
0061 8A83              MOV     DPH,R2
0063 E4                CLR     A
0064 93                MOVC    A,@A+DPTR
0065 2400        E     ADD     A,#LOW USBFS_interfaceSetting
0067 F582              MOV     DPL,A
0069 E4                CLR     A
006A 3400        E     ADDC    A,#HIGH USBFS_interfaceSetting
006C F583              MOV     DPH,A
006E E0                MOVX    A,@DPTR
006F FF                MOV     R7,A
0070 8B82              MOV     DPL,R3
0072 8A83              MOV     DPH,R2
0074 7401              MOV     A,#01H
0076 93                MOVC    A,@A+DPTR
0077 FE                MOV     R6,A
0078 EF                MOV     A,R7
0079 6E                XRL     A,R6
007A 6003              JZ      $ + 5H
007C 020000      R     LJMP    ?C0100
007F 93                MOVC    A,@A+DPTR
0080 FF                MOV     R7,A
0081 906004            MOV     DPTR,#06004H
0084 E0                MOVX    A,@DPTR
0085 FE                MOV     R6,A
0086 EF                MOV     A,R7
0087 6E                XRL     A,R6
0088 6003              JZ      $ + 5H
008A 020000      R     LJMP    ?C0100
                                           ; SOURCE LINE # 771
                                           ; SOURCE LINE # 772
008D 8B82              MOV     DPL,R3
008F 8A83              MOV     DPH,R2
0091 7402              MOV     A,#02H
0093 93                MOVC    A,@A+DPTR
0094 547F              ANL     A,#07FH
;---- Variable 'cur_ep' assigned to Register 'R5' ----
0096 FD                MOV     R5,A
                                           ; SOURCE LINE # 773
0097 24FF              ADD     A,#0FFH
0099 FF                MOV     R7,A
009A E4                CLR     A
009B 34FF              ADDC    A,#0FFH
009D FE                MOV     R6,A
009E EF                MOV     A,R7
009F C4                SWAP    A
00A0 F8                MOV     R0,A
00A1 540F              ANL     A,#0FH
00A3 C8                XCH     A,R0
00A4 68                XRL     A,R0
00A5 FF                MOV     R7,A
00A6 EE                MOV     A,R6
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 50  

00A7 C4                SWAP    A
00A8 54F0              ANL     A,#0F0H
00AA 48                ORL     A,R0
00AB 900000      R     MOV     DPTR,#ri
00AE EF                MOV     A,R7
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 774
00B0 8B82              MOV     DPL,R3
00B2 8A83              MOV     DPH,R2
00B4 7403              MOV     A,#03H
00B6 93                MOVC    A,@A+DPTR
00B7 5403              ANL     A,#03H
;---- Variable 'epType' assigned to Register 'R4' ----
00B9 FC                MOV     R4,A
                                           ; SOURCE LINE # 775
00BA 7402              MOV     A,#02H
00BC 93                MOVC    A,@A+DPTR
00BD 5480              ANL     A,#080H
00BF 602C              JZ      ?C0101
                                           ; SOURCE LINE # 776
                                           ; SOURCE LINE # 778
00C1 ED                MOV     A,R5
00C2 75F00B            MOV     B,#0BH
00C5 A4                MUL     AB
00C6 2400        E     ADD     A,#LOW USBFS_EP+01H
00C8 F582              MOV     DPL,A
00CA E4                CLR     A
00CB 3400        E     ADDC    A,#HIGH USBFS_EP+01H
00CD F583              MOV     DPH,A
00CF 7401              MOV     A,#01H
00D1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 779
00D2 B50404            CJNE    A,AR4,?C0102
00D5 7F07              MOV     R7,#07H
00D7 8002              SJMP    ?C0103
00D9         ?C0102:
00D9 7F0D              MOV     R7,#0DH
00DB         ?C0103:
00DB ED                MOV     A,R5
00DC 75F00B            MOV     B,#0BH
00DF A4                MUL     AB
00E0 2400        E     ADD     A,#LOW USBFS_EP+05H
00E2 F582              MOV     DPL,A
00E4 E4                CLR     A
00E5 3400        E     ADDC    A,#HIGH USBFS_EP+05H
00E7 F583              MOV     DPH,A
00E9 EF                MOV     A,R7
00EA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 781
00EB 802A              SJMP    ?C0104
00ED         ?C0101:
                                           ; SOURCE LINE # 783
                                           ; SOURCE LINE # 785
00ED ED                MOV     A,R5
00EE 75F00B            MOV     B,#0BH
00F1 A4                MUL     AB
00F2 2400        E     ADD     A,#LOW USBFS_EP+01H
00F4 F582              MOV     DPL,A
00F6 E4                CLR     A
00F7 3400        E     ADDC    A,#HIGH USBFS_EP+01H
00F9 F583              MOV     DPH,A
00FB E4                CLR     A
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 51  

00FC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 786
00FD EC                MOV     A,R4
00FE B40104            CJNE    A,#01H,?C0105
0101 7F05              MOV     R7,#05H
0103 8002              SJMP    ?C0106
0105         ?C0105:
0105 7F09              MOV     R7,#09H
0107         ?C0106:
0107 ED                MOV     A,R5
0108 75F00B            MOV     B,#0BH
010B A4                MUL     AB
010C 2400        E     ADD     A,#LOW USBFS_EP+05H
010E F582              MOV     DPL,A
0110 E4                CLR     A
0111 3400        E     ADDC    A,#HIGH USBFS_EP+05H
0113 F583              MOV     DPH,A
0115 EF                MOV     A,R7
0116 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 788
0117         ?C0104:
                                           ; SOURCE LINE # 790
0117 900000      R     MOV     DPTR,#ri
011A E0                MOVX    A,@DPTR
011B FC                MOV     R4,A
011C 240E              ADD     A,#0EH
011E FF                MOV     R7,A
011F E4                CLR     A
0120 3460              ADDC    A,#060H
0122 8F82              MOV     DPL,R7
0124 F583              MOV     DPH,A
0126 7401              MOV     A,#01H
0128 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 791
0129 8B82              MOV     DPL,R3
012B 8A83              MOV     DPH,R2
012D 7404              MOV     A,#04H
012F 93                MOVC    A,@A+DPTR
0130 FE                MOV     R6,A
0131 7405              MOV     A,#05H
0133 93                MOVC    A,@A+DPTR
0134 FF                MOV     R7,A
0135 ED                MOV     A,R5
0136 75F00B            MOV     B,#0BH
0139 A4                MUL     AB
013A 2400        E     ADD     A,#LOW USBFS_EP+08H
013C F582              MOV     DPL,A
013E E4                CLR     A
013F 3400        E     ADDC    A,#HIGH USBFS_EP+08H
0141 F583              MOV     DPH,A
0143 EE                MOV     A,R6
0144 F0                MOVX    @DPTR,A
0145 A3                INC     DPTR
0146 EF                MOV     A,R7
0147 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 792
0148 8B82              MOV     DPL,R3
014A 8A83              MOV     DPH,R2
014C 7402              MOV     A,#02H
014E 93                MOVC    A,@A+DPTR
014F FF                MOV     R7,A
0150 ED                MOV     A,R5
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 52  

0151 75F00B            MOV     B,#0BH
0154 A4                MUL     AB
0155 2400        E     ADD     A,#LOW USBFS_EP+04H
0157 F582              MOV     DPL,A
0159 E4                CLR     A
015A 3400        E     ADDC    A,#HIGH USBFS_EP+04H
015C F583              MOV     DPH,A
015E EF                MOV     A,R7
015F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 793
0160 8B82              MOV     DPL,R3
0162 8A83              MOV     DPH,R2
0164 7403              MOV     A,#03H
0166 93                MOVC    A,@A+DPTR
0167 FF                MOV     R7,A
0168 ED                MOV     A,R5
0169 75F00B            MOV     B,#0BH
016C A4                MUL     AB
016D 2400        E     ADD     A,#LOW USBFS_EP
016F F582              MOV     DPL,A
0171 E4                CLR     A
0172 3400        E     ADDC    A,#HIGH USBFS_EP
0174 F583              MOV     DPH,A
0176 EF                MOV     A,R7
0177 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 796
0178 ED                MOV     A,R5
0179 75F00B            MOV     B,#0BH
017C A4                MUL     AB
017D 2400        E     ADD     A,#LOW USBFS_EP+03H
017F F582              MOV     DPL,A
0181 E4                CLR     A
0182 3400        E     ADDC    A,#HIGH USBFS_EP+03H
0184 F583              MOV     DPH,A
0186 E4                CLR     A
0187 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 801
0188 EC                MOV     A,R4
0189 2480              ADD     A,#080H
018B FF                MOV     R7,A
018C E4                CLR     A
018D 3460              ADDC    A,#060H
018F 8F82              MOV     DPL,R7
0191 F583              MOV     DPH,A
0193 E0                MOVX    A,@DPTR
0194 54FE              ANL     A,#0FEH
0196 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 804
0197 ED                MOV     A,R5
0198 24FF              ADD     A,#0FFH
019A FF                MOV     R7,A
019B E4                CLR     A
019C 34FF              ADDC    A,#0FFH
019E FE                MOV     R6,A
019F EF                MOV     A,R7
01A0 25E0              ADD     A,ACC
01A2 FF                MOV     R7,A
01A3 EE                MOV     A,R6
01A4 33                RLC     A
01A5 906014            MOV     DPTR,#06014H
01A8 EF                MOV     A,R7
01A9 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 53  

                                           ; SOURCE LINE # 807
01AA E0                MOVX    A,@DPTR
01AB 4401              ORL     A,#01H
01AD F0                MOVX    @DPTR,A
01AE         ?C0107:
                                           ; SOURCE LINE # 811
01AE 906014            MOV     DPTR,#06014H
01B1 E0                MOVX    A,@DPTR
01B2 5410              ANL     A,#010H
01B4 60F8              JZ      ?C0107
                                           ; SOURCE LINE # 812
                                           ; SOURCE LINE # 814
01B6         ?C0108:
                                           ; SOURCE LINE # 817
01B6 8B82              MOV     DPL,R3
01B8 8A83              MOV     DPH,R2
01BA 7402              MOV     A,#02H
01BC 93                MOVC    A,@A+DPTR
01BD 5480              ANL     A,#080H
01BF 701F              JNZ     ?C0109
                                           ; SOURCE LINE # 818
                                           ; SOURCE LINE # 819
01C1 90608F            MOV     DPTR,#0608FH
01C4 C083              PUSH    DPH
01C6 C082              PUSH    DPL
01C8 E0                MOVX    A,@DPTR
01C9 FF                MOV     R7,A
01CA ED                MOV     A,R5
01CB 14                DEC     A
01CC FE                MOV     R6,A
01CD 7401              MOV     A,#01H
01CF A806              MOV     R0,AR6
01D1 08                INC     R0
01D2 8002              SJMP    ?C0145
01D4         ?C0144:
01D4 C3                CLR     C
01D5 33                RLC     A
01D6         ?C0145:
01D6 D8FC              DJNZ    R0,?C0144
01D8 4F                ORL     A,R7
01D9 D082              POP     DPL
01DB D083              POP     DPH
01DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 820
01DE 801E              SJMP    ?C0110
01E0         ?C0109:
                                           ; SOURCE LINE # 822
                                           ; SOURCE LINE # 823
01E0 90608F            MOV     DPTR,#0608FH
01E3 C083              PUSH    DPH
01E5 C082              PUSH    DPL
01E7 E0                MOVX    A,@DPTR
01E8 FF                MOV     R7,A
01E9 ED                MOV     A,R5
01EA 14                DEC     A
01EB FE                MOV     R6,A
01EC 7401              MOV     A,#01H
01EE A806              MOV     R0,AR6
01F0 08                INC     R0
01F1 8002              SJMP    ?C0147
01F3         ?C0146:
01F3 C3                CLR     C
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 54  

01F4 33                RLC     A
01F5         ?C0147:
01F5 D8FC              DJNZ    R0,?C0146
01F7 F4                CPL     A
01F8 5F                ANL     A,R7
01F9 D082              POP     DPL
01FB D083              POP     DPH
01FD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 824
01FE         ?C0110:
                                           ; SOURCE LINE # 829
01FE 906014            MOV     DPTR,#06014H
0201 E0                MOVX    A,@DPTR
0202 54FE              ANL     A,#0FEH
0204 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 845
0205         ?C0100:
                                           ; SOURCE LINE # 847
0205 EB                MOV     A,R3
0206 2407              ADD     A,#07H
0208 FB                MOV     R3,A
0209 E4                CLR     A
020A 3A                ADDC    A,R2
020B FA                MOV     R2,A
                                           ; SOURCE LINE # 848
020C 09                INC     R1
020D 020000      R     LJMP    ?C0097
                                           ; SOURCE LINE # 849
                                           ; SOURCE LINE # 850
0210         ?C0111:
0210 22                RET     
             ; FUNCTION USBFS_ConfigAltChanged (END)

             ; FUNCTION _USBFS_GetConfigTablePtr (BEGIN)
                                           ; SOURCE LINE # 867
0000 900000      R     MOV     DPTR,#confIndex
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 869
                                           ; SOURCE LINE # 873
0005 900000      E     MOV     DPTR,#USBFS_device
0008 E0                MOVX    A,@DPTR
0009 25E0              ADD     A,ACC
000B 25E0              ADD     A,ACC
000D 2400        E     ADD     A,#LOW USBFS_TABLE+01H
000F F582              MOV     DPL,A
0011 E4                CLR     A
0012 3400        E     ADDC    A,#HIGH USBFS_TABLE+01H
0014 F583              MOV     DPH,A
0016 120000      E     LCALL   ?C?PLDCODE
0019 AE02              MOV     R6,AR2
001B AF01              MOV     R7,AR1
;---- Variable 'pTmp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 879
001D EF                MOV     A,R7
001E 2404              ADD     A,#04H
0020 FF                MOV     R7,A
0021 E4                CLR     A
0022 3E                ADDC    A,R6
0023 FE                MOV     R6,A
                                           ; SOURCE LINE # 881
0024 8F82              MOV     DPL,R7
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 55  

0026 F583              MOV     DPH,A
0028 E4                CLR     A
0029 93                MOVC    A,@A+DPTR
002A FD                MOV     R5,A
002B 900000      R     MOV     DPTR,#confIndex
002E E0                MOVX    A,@DPTR
002F FC                MOV     R4,A
0030 C3                CLR     C
0031 9D                SUBB    A,R5
0032 4005              JC      ?C0112
                                           ; SOURCE LINE # 882
                                           ; SOURCE LINE # 883
0034 E4                CLR     A
0035 FE                MOV     R6,A
0036 FF                MOV     R7,A
                                           ; SOURCE LINE # 884
0037 8013              SJMP    ?C0113
0039         ?C0112:
                                           ; SOURCE LINE # 886
                                           ; SOURCE LINE # 887
0039 8F82              MOV     DPL,R7
003B 8E83              MOV     DPH,R6
003D 75F004            MOV     B,#04H
0040 EC                MOV     A,R4
0041 120000      E     LCALL   ?C?OFFXADD
0044 A3                INC     DPTR
0045 120000      E     LCALL   ?C?PLDCODE
0048 AE02              MOV     R6,AR2
004A AF01              MOV     R7,AR1
                                           ; SOURCE LINE # 888
004C         ?C0113:
                                           ; SOURCE LINE # 890
                                           ; SOURCE LINE # 891
004C         ?C0114:
004C 22                RET     
             ; FUNCTION _USBFS_GetConfigTablePtr (END)

             ; FUNCTION USBFS_GetDeviceTablePtr (BEGIN)
                                           ; SOURCE LINE # 908
                                           ; SOURCE LINE # 910
                                           ; SOURCE LINE # 912
0000 900000      E     MOV     DPTR,#USBFS_device
0003 E0                MOVX    A,@DPTR
0004 25E0              ADD     A,ACC
0006 25E0              ADD     A,ACC
0008 2400        E     ADD     A,#LOW USBFS_TABLE+01H
000A F582              MOV     DPL,A
000C E4                CLR     A
000D 3400        E     ADDC    A,#HIGH USBFS_TABLE+01H
000F F583              MOV     DPH,A
0011 120000      E     LCALL   ?C?PLDCODE
0014 AE02              MOV     R6,AR2
0016 AF01              MOV     R7,AR1
                                           ; SOURCE LINE # 913
0018         ?C0115:
0018 22                RET     
             ; FUNCTION USBFS_GetDeviceTablePtr (END)

             ; FUNCTION USBFS_GetInterfaceClassTablePtr (BEGIN)
                                           ; SOURCE LINE # 931
                                           ; SOURCE LINE # 933
                                           ; SOURCE LINE # 938
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 56  

0000 900000      E     MOV     DPTR,#USBFS_configuration
0003 E0                MOVX    A,@DPTR
0004 14                DEC     A
0005 FF                MOV     R7,A
0006 120000      R     LCALL   _USBFS_GetConfigTablePtr
;---- Variable 'pTmp' assigned to Register 'R4/R5' ----
0009 AD07              MOV     R5,AR7
000B AC06              MOV     R4,AR6
                                           ; SOURCE LINE # 939
000D ED                MOV     A,R5
000E 4C                ORL     A,R4
000F 603D              JZ      ?C0116
                                           ; SOURCE LINE # 940
                                           ; SOURCE LINE # 941
0011 8D82              MOV     DPL,R5
0013 8C83              MOV     DPH,R4
0015 A3                INC     DPTR
0016 120000      E     LCALL   ?C?PLDCODE
0019 E9                MOV     A,R1
001A 2404              ADD     A,#04H
001C F9                MOV     R1,A
001D E4                CLR     A
001E 3A                ADDC    A,R2
001F FA                MOV     R2,A
0020 120000      E     LCALL   ?C?CLDPTR
;---- Variable 'currentInterfacesNum' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 944
0023 2402              ADD     A,#02H
0025 FF                MOV     R7,A
0026 E4                CLR     A
0027 33                RLC     A
0028 FE                MOV     R6,A
0029 EF                MOV     A,R7
002A 7802              MOV     R0,#02H
002C         ?C0148:
002C C3                CLR     C
002D 33                RLC     A
002E CE                XCH     A,R6
002F 33                RLC     A
0030 CE                XCH     A,R6
0031 D8F9              DJNZ    R0,?C0148
0033 2D                ADD     A,R5
0034 FD                MOV     R5,A
0035 EE                MOV     A,R6
0036 3C                ADDC    A,R4
0037 FC                MOV     R4,A
                                           ; SOURCE LINE # 945
0038 AF05              MOV     R7,AR5
003A 8D82              MOV     DPL,R5
003C F583              MOV     DPH,A
003E A3                INC     DPTR
003F 120000      E     LCALL   ?C?PLDCODE
0042 AF01              MOV     R7,AR1
0044 900000      R     MOV     DPTR,#pInterfaceClass
0047 EA                MOV     A,R2
0048 F0                MOVX    @DPTR,A
0049 A3                INC     DPTR
004A EF                MOV     A,R7
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 946
004C 8007              SJMP    ?C0117
004E         ?C0116:
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 57  

                                           ; SOURCE LINE # 948
                                           ; SOURCE LINE # 949
004E E4                CLR     A
004F 900000      R     MOV     DPTR,#pInterfaceClass
0052 F0                MOVX    @DPTR,A
0053 A3                INC     DPTR
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 950
0055         ?C0117:
                                           ; SOURCE LINE # 952
0055 900000      R     MOV     DPTR,#pInterfaceClass
0058 E0                MOVX    A,@DPTR
0059 FE                MOV     R6,A
005A A3                INC     DPTR
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
                                           ; SOURCE LINE # 953
005D         ?C0118:
005D 22                RET     
             ; FUNCTION USBFS_GetInterfaceClassTablePtr (END)

             ; FUNCTION _USBFS_TerminateEP (BEGIN)
                                           ; SOURCE LINE # 974
;---- Variable 'ep' assigned to Register 'R5' ----
0000 AD07              MOV     R5,AR7
                                           ; SOURCE LINE # 975
                                           ; SOURCE LINE # 978
0002 ED                MOV     A,R5
0003 547F              ANL     A,#07FH
0005 FD                MOV     R5,A
                                           ; SOURCE LINE # 979
0006 24FF              ADD     A,#0FFH
0008 FF                MOV     R7,A
0009 E4                CLR     A
000A 34FF              ADDC    A,#0FFH
000C FE                MOV     R6,A
000D EF                MOV     A,R7
000E C4                SWAP    A
000F F8                MOV     R0,A
0010 540F              ANL     A,#0FH
0012 C8                XCH     A,R0
0013 68                XRL     A,R0
0014 FF                MOV     R7,A
0015 EE                MOV     A,R6
0016 C4                SWAP    A
0017 54F0              ANL     A,#0F0H
0019 48                ORL     A,R0
;---- Variable 'ri' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 981
001A ED                MOV     A,R5
001B D3                SETB    C
001C 9400              SUBB    A,#00H
001E 406A              JC      ?C0122
0020 ED                MOV     A,R5
0021 9409              SUBB    A,#09H
0023 5065              JNC     ?C0122
                                           ; SOURCE LINE # 982
                                           ; SOURCE LINE # 984
0025 ED                MOV     A,R5
0026 75F00B            MOV     B,#0BH
0029 A4                MUL     AB
002A 2400        E     ADD     A,#LOW USBFS_EP+02H
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 58  

002C F582              MOV     DPL,A
002E E4                CLR     A
002F 3400        E     ADDC    A,#HIGH USBFS_EP+02H
0031 F583              MOV     DPH,A
0033 E0                MOVX    A,@DPTR
0034 4401              ORL     A,#01H
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 987
0037 ED                MOV     A,R5
0038 75F00B            MOV     B,#0BH
003B A4                MUL     AB
003C 2400        E     ADD     A,#LOW USBFS_EP+03H
003E F582              MOV     DPL,A
0040 E4                CLR     A
0041 3400        E     ADDC    A,#HIGH USBFS_EP+03H
0043 F583              MOV     DPH,A
0045 E4                CLR     A
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 988
0047 ED                MOV     A,R5
0048 75F00B            MOV     B,#0BH
004B A4                MUL     AB
004C 2400        E     ADD     A,#LOW USBFS_EP+01H
004E F582              MOV     DPL,A
0050 E4                CLR     A
0051 3400        E     ADDC    A,#HIGH USBFS_EP+01H
0053 F583              MOV     DPH,A
0055 7402              MOV     A,#02H
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 990
0058 AE05              MOV     R6,AR5
005A EE                MOV     A,R6
005B 75F00B            MOV     B,#0BH
005E A4                MUL     AB
005F 2400        E     ADD     A,#LOW USBFS_EP+04H
0061 F582              MOV     DPL,A
0063 E4                CLR     A
0064 3400        E     ADDC    A,#HIGH USBFS_EP+04H
0066 F583              MOV     DPH,A
0068 E0                MOVX    A,@DPTR
0069 5480              ANL     A,#080H
006B 600F              JZ      ?C0120
                                           ; SOURCE LINE # 991
                                           ; SOURCE LINE # 993
006D EF                MOV     A,R7
006E 240E              ADD     A,#0EH
0070 FD                MOV     R5,A
0071 E4                CLR     A
0072 3460              ADDC    A,#060H
0074 8D82              MOV     DPL,R5
0076 F583              MOV     DPH,A
0078 740C              MOV     A,#0CH
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 994
007B 22                RET     
007C         ?C0120:
                                           ; SOURCE LINE # 996
                                           ; SOURCE LINE # 998
007C EF                MOV     A,R7
007D 240E              ADD     A,#0EH
007F FF                MOV     R7,A
0080 E4                CLR     A
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 59  

0081 3460              ADDC    A,#060H
0083 8F82              MOV     DPL,R7
0085 F583              MOV     DPH,A
0087 7408              MOV     A,#08H
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 999
                                           ; SOURCE LINE # 1000
                                           ; SOURCE LINE # 1001
008A         ?C0122:
008A 22                RET     
             ; FUNCTION _USBFS_TerminateEP (END)

             ; FUNCTION USBFS_SetEndpointHalt (BEGIN)
                                           ; SOURCE LINE # 1021
                                           ; SOURCE LINE # 1022
                                           ; SOURCE LINE # 1025
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#requestHandled
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1028
0005 906004            MOV     DPTR,#06004H
0008 E0                MOVX    A,@DPTR
0009 547F              ANL     A,#07FH
;---- Variable 'ep' assigned to Register 'R5' ----
000B FD                MOV     R5,A
                                           ; SOURCE LINE # 1029
000C 24FF              ADD     A,#0FFH
000E FF                MOV     R7,A
000F E4                CLR     A
0010 34FF              ADDC    A,#0FFH
0012 FE                MOV     R6,A
0013 EF                MOV     A,R7
0014 C4                SWAP    A
0015 F8                MOV     R0,A
0016 540F              ANL     A,#0FH
0018 C8                XCH     A,R0
0019 68                XRL     A,R0
001A FF                MOV     R7,A
001B EE                MOV     A,R6
001C C4                SWAP    A
001D 54F0              ANL     A,#0F0H
001F 48                ORL     A,R0
;---- Variable 'ri' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1031
0020 ED                MOV     A,R5
0021 D3                SETB    C
0022 9400              SUBB    A,#00H
0024 4074              JC      ?C0123
0026 ED                MOV     A,R5
0027 9409              SUBB    A,#09H
0029 506F              JNC     ?C0123
                                           ; SOURCE LINE # 1032
                                           ; SOURCE LINE # 1034
002B ED                MOV     A,R5
002C 75F00B            MOV     B,#0BH
002F A4                MUL     AB
0030 2400        E     ADD     A,#LOW USBFS_EP+02H
0032 F582              MOV     DPL,A
0034 E4                CLR     A
0035 3400        E     ADDC    A,#HIGH USBFS_EP+02H
0037 F583              MOV     DPH,A
0039 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 60  

003A 4401              ORL     A,#01H
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1037
003D ED                MOV     A,R5
003E 75F00B            MOV     B,#0BH
0041 A4                MUL     AB
0042 2400        E     ADD     A,#LOW USBFS_EP+03H
0044 F582              MOV     DPL,A
0046 E4                CLR     A
0047 3400        E     ADDC    A,#HIGH USBFS_EP+03H
0049 F583              MOV     DPH,A
004B E4                CLR     A
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1038
004D ED                MOV     A,R5
004E 75F00B            MOV     B,#0BH
0051 A4                MUL     AB
0052 2400        E     ADD     A,#LOW USBFS_EP+01H
0054 F582              MOV     DPL,A
0056 E4                CLR     A
0057 3400        E     ADDC    A,#HIGH USBFS_EP+01H
0059 F583              MOV     DPH,A
005B E0                MOVX    A,@DPTR
005C 4402              ORL     A,#02H
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1040
005F AE05              MOV     R6,AR5
0061 EE                MOV     A,R6
0062 75F00B            MOV     B,#0BH
0065 A4                MUL     AB
0066 2400        E     ADD     A,#LOW USBFS_EP+04H
0068 F582              MOV     DPL,A
006A E4                CLR     A
006B 3400        E     ADDC    A,#HIGH USBFS_EP+04H
006D F583              MOV     DPH,A
006F E0                MOVX    A,@DPTR
0070 5480              ANL     A,#080H
0072 6010              JZ      ?C0124
                                           ; SOURCE LINE # 1041
                                           ; SOURCE LINE # 1044
0074 EF                MOV     A,R7
0075 240E              ADD     A,#0EH
0077 FD                MOV     R5,A
0078 E4                CLR     A
0079 3460              ADDC    A,#060H
007B 8D82              MOV     DPL,R5
007D F583              MOV     DPH,A
007F 748D              MOV     A,#08DH
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1045
0082 800E              SJMP    ?C0125
0084         ?C0124:
                                           ; SOURCE LINE # 1047
                                           ; SOURCE LINE # 1050
0084 EF                MOV     A,R7
0085 240E              ADD     A,#0EH
0087 FF                MOV     R7,A
0088 E4                CLR     A
0089 3460              ADDC    A,#060H
008B 8F82              MOV     DPL,R7
008D F583              MOV     DPH,A
008F 7489              MOV     A,#089H
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 61  

0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1051
0092         ?C0125:
                                           ; SOURCE LINE # 1052
0092 120000      E     LCALL   USBFS_InitNoDataControlTransfer
0095 900000      R     MOV     DPTR,#requestHandled
0098 EF                MOV     A,R7
0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1053
009A         ?C0123:
                                           ; SOURCE LINE # 1055
009A 900000      R     MOV     DPTR,#requestHandled
009D E0                MOVX    A,@DPTR
009E FF                MOV     R7,A
                                           ; SOURCE LINE # 1056
009F         ?C0126:
009F 22                RET     
             ; FUNCTION USBFS_SetEndpointHalt (END)

             ; FUNCTION USBFS_ClearEndpointHalt (BEGIN)
                                           ; SOURCE LINE # 1076
                                           ; SOURCE LINE # 1077
                                           ; SOURCE LINE # 1080
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#requestHandled
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1083
0005 906004            MOV     DPTR,#06004H
0008 E0                MOVX    A,@DPTR
0009 547F              ANL     A,#07FH
;---- Variable 'ep' assigned to Register 'R1' ----
000B F9                MOV     R1,A
                                           ; SOURCE LINE # 1084
000C 24FF              ADD     A,#0FFH
000E FF                MOV     R7,A
000F E4                CLR     A
0010 34FF              ADDC    A,#0FFH
0012 FE                MOV     R6,A
0013 EF                MOV     A,R7
0014 C4                SWAP    A
0015 F8                MOV     R0,A
0016 540F              ANL     A,#0FH
0018 C8                XCH     A,R0
0019 68                XRL     A,R0
001A FF                MOV     R7,A
001B EE                MOV     A,R6
001C C4                SWAP    A
001D 54F0              ANL     A,#0F0H
001F 48                ORL     A,R0
;---- Variable 'ri' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1086
0020 AD01              MOV     R5,AR1
0022 E9                MOV     A,R1
0023 D3                SETB    C
0024 9400              SUBB    A,#00H
0026 5003              JNC     $ + 5H
0028 020000      R     LJMP    ?C0127
002B ED                MOV     A,R5
002C 9409              SUBB    A,#09H
002E 4003              JC      $ + 5H
0030 020000      R     LJMP    ?C0127
                                           ; SOURCE LINE # 1087
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 62  

                                           ; SOURCE LINE # 1089
0033 ED                MOV     A,R5
0034 75F00B            MOV     B,#0BH
0037 A4                MUL     AB
0038 2400        E     ADD     A,#LOW USBFS_EP+02H
003A F582              MOV     DPL,A
003C E4                CLR     A
003D 3400        E     ADDC    A,#HIGH USBFS_EP+02H
003F F583              MOV     DPH,A
0041 E0                MOVX    A,@DPTR
0042 54FE              ANL     A,#0FEH
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1092
0045 ED                MOV     A,R5
0046 75F00B            MOV     B,#0BH
0049 A4                MUL     AB
004A 2400        E     ADD     A,#LOW USBFS_EP+03H
004C F582              MOV     DPL,A
004E E4                CLR     A
004F 3400        E     ADDC    A,#HIGH USBFS_EP+03H
0051 F583              MOV     DPH,A
0053 E4                CLR     A
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1095
0055 EF                MOV     A,R7
0056 FB                MOV     R3,A
0057 7A00              MOV     R2,#00H
0059 240C              ADD     A,#0CH
005B FD                MOV     R5,A
005C EA                MOV     A,R2
005D 3460              ADDC    A,#060H
005F 8D82              MOV     DPL,R5
0061 F583              MOV     DPH,A
0063 E0                MOVX    A,@DPTR
0064 547F              ANL     A,#07FH
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1097
0067 E9                MOV     A,R1
0068 75F00B            MOV     B,#0BH
006B A4                MUL     AB
006C 2400        E     ADD     A,#LOW USBFS_EP+01H
006E F582              MOV     DPL,A
0070 E4                CLR     A
0071 3400        E     ADDC    A,#HIGH USBFS_EP+01H
0073 F583              MOV     DPH,A
0075 E0                MOVX    A,@DPTR
0076 54FD              ANL     A,#0FDH
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1099
0079 E9                MOV     A,R1
007A 75F00B            MOV     B,#0BH
007D A4                MUL     AB
007E 2400        E     ADD     A,#LOW USBFS_EP+04H
0080 F582              MOV     DPL,A
0082 E4                CLR     A
0083 3400        E     ADDC    A,#HIGH USBFS_EP+04H
0085 F583              MOV     DPH,A
0087 E0                MOVX    A,@DPTR
0088 5480              ANL     A,#080H
008A 6032              JZ      ?C0128
                                           ; SOURCE LINE # 1100
                                           ; SOURCE LINE # 1102
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 63  

008C E9                MOV     A,R1
008D 75F00B            MOV     B,#0BH
0090 A4                MUL     AB
0091 2400        E     ADD     A,#LOW USBFS_EP+01H
0093 F582              MOV     DPL,A
0095 E4                CLR     A
0096 3400        E     ADDC    A,#HIGH USBFS_EP+01H
0098 F583              MOV     DPH,A
009A E0                MOVX    A,@DPTR
009B B40110            CJNE    A,#01H,?C0129
                                           ; SOURCE LINE # 1103
                                           ; SOURCE LINE # 1104
009E EB                MOV     A,R3
009F 240E              ADD     A,#0EH
00A1 FD                MOV     R5,A
00A2 EA                MOV     A,R2
00A3 3460              ADDC    A,#060H
00A5 8D82              MOV     DPL,R5
00A7 F583              MOV     DPH,A
00A9 740C              MOV     A,#0CH
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1105
00AC 8042              SJMP    ?C0131
00AE         ?C0129:
                                           ; SOURCE LINE # 1107
                                           ; SOURCE LINE # 1108
00AE EF                MOV     A,R7
00AF 240E              ADD     A,#0EH
00B1 FD                MOV     R5,A
00B2 E4                CLR     A
00B3 3460              ADDC    A,#060H
00B5 8D82              MOV     DPL,R5
00B7 F583              MOV     DPH,A
00B9 740D              MOV     A,#0DH
00BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1109
                                           ; SOURCE LINE # 1110
00BC 8032              SJMP    ?C0131
00BE         ?C0128:
                                           ; SOURCE LINE # 1112
                                           ; SOURCE LINE # 1114
00BE AE01              MOV     R6,AR1
00C0 E9                MOV     A,R1
00C1 75F00B            MOV     B,#0BH
00C4 A4                MUL     AB
00C5 2400        E     ADD     A,#LOW USBFS_EP+01H
00C7 F582              MOV     DPL,A
00C9 E4                CLR     A
00CA 3400        E     ADDC    A,#HIGH USBFS_EP+01H
00CC F583              MOV     DPH,A
00CE E0                MOVX    A,@DPTR
00CF B40110            CJNE    A,#01H,?C0132
                                           ; SOURCE LINE # 1115
                                           ; SOURCE LINE # 1116
00D2 EF                MOV     A,R7
00D3 240E              ADD     A,#0EH
00D5 FD                MOV     R5,A
00D6 E4                CLR     A
00D7 3460              ADDC    A,#060H
00D9 8D82              MOV     DPL,R5
00DB F583              MOV     DPH,A
00DD 7408              MOV     A,#08H
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 64  

00DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1117
00E0 800E              SJMP    ?C0131
00E2         ?C0132:
                                           ; SOURCE LINE # 1119
                                           ; SOURCE LINE # 1120
00E2 EF                MOV     A,R7
00E3 240E              ADD     A,#0EH
00E5 FF                MOV     R7,A
00E6 E4                CLR     A
00E7 3460              ADDC    A,#060H
00E9 8F82              MOV     DPL,R7
00EB F583              MOV     DPH,A
00ED 7409              MOV     A,#09H
00EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1121
                                           ; SOURCE LINE # 1122
00F0         ?C0131:
                                           ; SOURCE LINE # 1123
00F0 120000      E     LCALL   USBFS_InitNoDataControlTransfer
00F3 900000      R     MOV     DPTR,#requestHandled
00F6 EF                MOV     A,R7
00F7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1124
00F8         ?C0127:
                                           ; SOURCE LINE # 1126
00F8 900000      R     MOV     DPTR,#requestHandled
00FB E0                MOVX    A,@DPTR
00FC FF                MOV     R7,A
                                           ; SOURCE LINE # 1127
00FD         ?C0134:
00FD 22                RET     
             ; FUNCTION USBFS_ClearEndpointHalt (END)

             ; FUNCTION USBFS_ValidateAlternateSetting (BEGIN)
                                           ; SOURCE LINE # 1147
                                           ; SOURCE LINE # 1148
                                           ; SOURCE LINE # 1149
0000 900000      R     MOV     DPTR,#requestHandled
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1154
0006 906004            MOV     DPTR,#06004H
0009 E0                MOVX    A,@DPTR
000A 900000      R     MOV     DPTR,#interfaceNum
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1156
000E 900000      E     MOV     DPTR,#USBFS_configuration
0011 E0                MOVX    A,@DPTR
0012 14                DEC     A
0013 FF                MOV     R7,A
0014 120000      R     LCALL   _USBFS_GetConfigTablePtr
;---- Variable 'pTmp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1157
0017 8F82              MOV     DPL,R7
0019 8E83              MOV     DPH,R6
001B A3                INC     DPTR
001C 120000      E     LCALL   ?C?PLDCODE
001F E9                MOV     A,R1
0020 2404              ADD     A,#04H
0022 F9                MOV     R1,A
0023 E4                CLR     A
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 65  

0024 3A                ADDC    A,R2
0025 FA                MOV     R2,A
0026 120000      E     LCALL   ?C?CLDPTR
0029 FF                MOV     R7,A
;---- Variable 'currentInterfacesNum' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1159
002A 900000      R     MOV     DPTR,#interfaceNum
002D E0                MOVX    A,@DPTR
002E FE                MOV     R6,A
002F C3                CLR     C
0030 9F                SUBB    A,R7
0031 5006              JNC     ?C0136
0033 EE                MOV     A,R6
0034 C3                CLR     C
0035 9404              SUBB    A,#04H
0037 4007              JC      ?C0135
0039         ?C0136:
                                           ; SOURCE LINE # 1160
                                           ; SOURCE LINE # 1161
0039 E4                CLR     A
003A 900000      R     MOV     DPTR,#requestHandled
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1162
003E 8029              SJMP    ?C0137
0040         ?C0135:
                                           ; SOURCE LINE # 1164
                                           ; SOURCE LINE # 1166
0040 7400        E     MOV     A,#LOW USBFS_interfaceSetting
0042 2E                ADD     A,R6
0043 F582              MOV     DPL,A
0045 E4                CLR     A
0046 3400        E     ADDC    A,#HIGH USBFS_interfaceSetting
0048 F583              MOV     DPH,A
004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
004C 7400        E     MOV     A,#LOW USBFS_interfaceSetting_last
004E 2E                ADD     A,R6
004F F582              MOV     DPL,A
0051 E4                CLR     A
0052 3400        E     ADDC    A,#HIGH USBFS_interfaceSetting_last
0054 F583              MOV     DPH,A
0056 EF                MOV     A,R7
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1167
0058 906002            MOV     DPTR,#06002H
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
005D 7400        E     MOV     A,#LOW USBFS_interfaceSetting
005F 2E                ADD     A,R6
0060 F582              MOV     DPL,A
0062 E4                CLR     A
0063 3400        E     ADDC    A,#HIGH USBFS_interfaceSetting
0065 F583              MOV     DPH,A
0067 EF                MOV     A,R7
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1168
0069         ?C0137:
                                           ; SOURCE LINE # 1170
0069 900000      R     MOV     DPTR,#requestHandled
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
                                           ; SOURCE LINE # 1171
C51 COMPILER V9.51   USBFS_STD                                                             10/22/2015 22:07:39 PAGE 66  

006E         ?C0138:
006E 22                RET     
             ; FUNCTION USBFS_ValidateAlternateSetting (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3585    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =      2      29
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
