C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USBFS
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\USBFS.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\USBFS.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.\
                    -DP8051\DP8051_Keil_951\Debug/USBFS.lst) CD OT(5,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\USBFS.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: USBFS.c
   3          * Version 2.80
   4          *
   5          * Description:
   6          *  API for USBFS Component.
   7          *
   8          * Note:
   9          *  Many of the functions use endpoint number.  RAM arrays are sized with 9
  10          *  elements so they are indexed directly by epNumber.  The SIE and ARB
  11          *  registers are indexed by variations of epNumber - 1.
  12          *
  13          ********************************************************************************
  14          * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  15          * You may use this file only in accordance with the license, terms, conditions,
  16          * disclaimers, and limitations in the end user license agreement accompanying
  17          * the software package with which this file was provided.
  18          *******************************************************************************/
  19          
  20          #include <CyDmac.h>
  21          #include "USBFS.h"
  22          #include "USBFS_pvt.h"
  23          #include "USBFS_hid.h"
  24          #if(USBFS_DMA1_REMOVE == 0u)
                  #include "USBFS_ep1_dma.h"
              #endif   /*  USBFS_DMA1_REMOVE */
  27          #if(USBFS_DMA2_REMOVE == 0u)
  28              #include "USBFS_ep2_dma.h"
  29          #endif   /*  USBFS_DMA2_REMOVE */
  30          #if(USBFS_DMA3_REMOVE == 0u)
  31              #include "USBFS_ep3_dma.h"
  32          #endif   /*  USBFS_DMA3_REMOVE */
  33          #if(USBFS_DMA4_REMOVE == 0u)
                  #include "USBFS_ep4_dma.h"
              #endif   /*  USBFS_DMA4_REMOVE */
  36          #if(USBFS_DMA5_REMOVE == 0u)
                  #include "USBFS_ep5_dma.h"
              #endif   /*  USBFS_DMA5_REMOVE */
  39          #if(USBFS_DMA6_REMOVE == 0u)
                  #include "USBFS_ep6_dma.h"
              #endif   /*  USBFS_DMA6_REMOVE */
  42          #if(USBFS_DMA7_REMOVE == 0u)
                  #include "USBFS_ep7_dma.h"
              #endif   /*  USBFS_DMA7_REMOVE */
  45          #if(USBFS_DMA8_REMOVE == 0u)
                  #include "USBFS_ep8_dma.h"
              #endif   /*  USBFS_DMA8_REMOVE */
  48          #if((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u))
  49              #include "USBFS_EP_DMA_Done_isr.h"
  50              #include "USBFS_EP8_DMA_Done_SR.h"
  51              #include "USBFS_EP17_DMA_Done_SR.h"
  52          #endif /* ((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u)) */
  53          
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 2   

  54          
  55          /***************************************
  56          * Global data allocation
  57          ***************************************/
  58          
  59          uint8 USBFS_initVar = 0u;
  60          #if(USBFS_EP_MM != USBFS__EP_MANUAL)
  61              uint8 USBFS_DmaChan[USBFS_MAX_EP];
  62              uint8 USBFS_DmaTd[USBFS_MAX_EP];
  63          #endif /*  USBFS_EP_MM */
  64          #if((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u))
  65              static uint8 clearInDataRdyStatus = USBFS_ARB_EPX_CFG_DEFAULT;
  66              uint8 USBFS_DmaNextTd[USBFS_MAX_EP];
  67              const uint8 USBFS_epX_TD_TERMOUT_EN[USBFS_MAX_EP] =
  68              {   0u,
  69                  USBFS_ep1_TD_TERMOUT_EN,
  70                  USBFS_ep2_TD_TERMOUT_EN,
  71                  USBFS_ep3_TD_TERMOUT_EN,
  72                  USBFS_ep4_TD_TERMOUT_EN,
  73                  USBFS_ep5_TD_TERMOUT_EN,
  74                  USBFS_ep6_TD_TERMOUT_EN,
  75                  USBFS_ep7_TD_TERMOUT_EN,
  76                  USBFS_ep8_TD_TERMOUT_EN
  77              };
  78              volatile uint16 USBFS_inLength[USBFS_MAX_EP];
  79              const uint8 *USBFS_inDataPointer[USBFS_MAX_EP];
  80              volatile uint8 USBFS_inBufFull[USBFS_MAX_EP];
  81          #endif /* ((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u)) */
  82          
  83          
  84          /*******************************************************************************
  85          * Function Name: USBFS_Start
  86          ********************************************************************************
  87          *
  88          * Summary:
  89          *  This function initialize the USB SIE, arbiter and the
  90          *  endpoint APIs, including setting the D+ Pullup
  91          *
  92          * Parameters:
  93          *  device: Contains the device number of the desired device descriptor.
  94          *          The device number can be found in the Device Descriptor Tab of
  95          *          "Configure" dialog, under the settings of desired Device Descriptor,
  96          *          in the "Device Number" field.
  97          *  mode: The operating voltage. This determines whether the voltage regulator
  98          *        is enabled for 5V operation or if pass through mode is used for 3.3V
  99          *        operation. Symbolic names and their associated values are given in the
 100          *        following table.
 101          *       USBFS_3V_OPERATION - Disable voltage regulator and pass-thru
 102          *                                       Vcc for pull-up
 103          *       USBFS_5V_OPERATION - Enable voltage regulator and use
 104          *                                       regulator for pull-up
 105          *       USBFS_DWR_VDDD_OPERATION - Enable or Disable voltage
 106          *                         regulator depend on Vddd Voltage configuration in DWR.
 107          *
 108          * Return:
 109          *   None.
 110          *
 111          * Global variables:
 112          *  The USBFS_intiVar variable is used to indicate initial
 113          *  configuration of this component. The variable is initialized to zero (0u)
 114          *  and set to one (1u) the first time USBFS_Start() is called.
 115          *  This allows for component Re-Start without unnecessary re-initialization
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 3   

 116          *  in all subsequent calls to the USBFS_Start() routine.
 117          *  If re-initialization of the component is required the variable should be set
 118          *  to zero before call of UART_Start() routine, or the user may call
 119          *  USBFS_Init() and USBFS_InitComponent() as done
 120          *  in the USBFS_Start() routine.
 121          *
 122          * Side Effects:
 123          *   This function will reset all communication states to default.
 124          *
 125          * Reentrant:
 126          *  No.
 127          *
 128          *******************************************************************************/
 129          void USBFS_Start(uint8 device, uint8 mode) 
 130          {
 131   1          /* If not Initialized then initialize all required hardware and software */
 132   1          if(USBFS_initVar == 0u)
 133   1          {
 134   2              USBFS_Init();
 135   2              USBFS_initVar = 1u;
 136   2          }
 137   1          USBFS_InitComponent(device, mode);
 138   1      }
 139          
 140          
 141          /*******************************************************************************
 142          * Function Name: USBFS_Init
 143          ********************************************************************************
 144          *
 145          * Summary:
 146          *  Initialize component's hardware. Usually called in USBFS_Start().
 147          *
 148          * Parameters:
 149          *  None.
 150          *
 151          * Return:
 152          *  None.
 153          *
 154          * Reentrant:
 155          *  No.
 156          *
 157          *******************************************************************************/
 158          void USBFS_Init(void) 
 159          {
 160   1          uint8 enableInterrupts;
 161   1          #if(USBFS_EP_MM != USBFS__EP_MANUAL)
 162   1              uint16 i;
 163   1          #endif   /*  USBFS_EP_MM != USBFS__EP_MANUAL */
 164   1      
 165   1          enableInterrupts = CyEnterCriticalSection();
 166   1      
 167   1          /* Enable USB block  */
 168   1          USBFS_PM_ACT_CFG_REG |= USBFS_PM_ACT_EN_FSUSB;
 169   1          /* Enable USB block for Standby Power Mode */
 170   1          USBFS_PM_STBY_CFG_REG |= USBFS_PM_STBY_EN_FSUSB;
 171   1      
 172   1          /* Enable core clock */
 173   1          USBFS_USB_CLK_EN_REG = USBFS_USB_CLK_ENABLE;
 174   1      
 175   1          USBFS_CR1_REG = USBFS_CR1_ENABLE_LOCK;
 176   1      
 177   1          /* ENABLING USBIO PADS IN USB MODE FROM I/O MODE */
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 4   

 178   1          /* Ensure USB transmit enable is low (USB_USBIO_CR0.ten). - Manual Transmission - Disabled */
 179   1          USBFS_USBIO_CR0_REG &= ((uint8)(~USBFS_USBIO_CR0_TEN));
 180   1          CyDelayUs(0u);  /*~50ns delay */
 181   1          /* Disable the USBIO by asserting PM.USB_CR0.fsusbio_pd_n(Inverted)
 182   1          *  high. This will have been set low by the power manger out of reset.
 183   1          *  Also confirm USBIO pull-up disabled
 184   1          */
 185   1          USBFS_PM_USB_CR0_REG &= ((uint8)(~(USBFS_PM_USB_CR0_PD_N |
 186   1                                                        USBFS_PM_USB_CR0_PD_PULLUP_N)));
 187   1      
 188   1          /* Select iomode to USB mode*/
 189   1          USBFS_USBIO_CR1_REG &= ((uint8)(~USBFS_USBIO_CR1_IOMODE));
 190   1      
 191   1          /* Enable the USBIO reference by setting PM.USB_CR0.fsusbio_ref_en.*/
 192   1          USBFS_PM_USB_CR0_REG |= USBFS_PM_USB_CR0_REF_EN;
 193   1          /* The reference will be available 1 us after the regulator is enabled */
 194   1          CyDelayUs(1u);
 195   1          /* OR 40us after power restored */
 196   1          CyDelayUs(40u);
 197   1          /* Ensure the single ended disable bits are low (PRT15.INP_DIS[7:6])(input receiver enabled). */
 198   1          USBFS_DM_INP_DIS_REG &= ((uint8)(~USBFS_DM_MASK));
 199   1          USBFS_DP_INP_DIS_REG &= ((uint8)(~USBFS_DP_MASK));
 200   1      
 201   1          /* Enable USBIO */
 202   1          USBFS_PM_USB_CR0_REG |= USBFS_PM_USB_CR0_PD_N;
 203   1          CyDelayUs(2u);
 204   1          /* Set the USBIO pull-up enable */
 205   1          USBFS_PM_USB_CR0_REG |= USBFS_PM_USB_CR0_PD_PULLUP_N;
 206   1      
 207   1          /* Write WAx */
 208   1          CY_SET_REG8(USBFS_ARB_RW1_WA_PTR,     0u);
 209   1          CY_SET_REG8(USBFS_ARB_RW1_WA_MSB_PTR, 0u);
 210   1      
 211   1          #if(USBFS_EP_MM != USBFS__EP_MANUAL)
 212   1              /* Init transfer descriptor. This will be used to detect the DMA state - initialized or not. */
 213   1              for (i = 0u; i < USBFS_MAX_EP; i++)
 214   1              {
 215   2                  USBFS_DmaTd[i] = DMA_INVALID_TD;
 216   2                  #if ((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u))
 217   2                      USBFS_DmaNextTd[i] = DMA_INVALID_TD;
 218   2                  #endif /* ((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u)) */
 219   2              }
 220   1          #endif   /*  USBFS_EP_MM != USBFS__EP_MANUAL */
 221   1      
 222   1          CyExitCriticalSection(enableInterrupts);
 223   1      
 224   1      
 225   1          /* Set the bus reset Interrupt. */
 226   1          (void) CyIntSetVector(USBFS_BUS_RESET_VECT_NUM,   &USBFS_BUS_RESET_ISR);
 227   1          CyIntSetPriority(USBFS_BUS_RESET_VECT_NUM, USBFS_BUS_RESET_PRIOR);
 228   1      
 229   1          /* Set the SOF Interrupt. */
 230   1          #if(USBFS_SOF_ISR_REMOVE == 0u)
 231   1              (void) CyIntSetVector(USBFS_SOF_VECT_NUM,   &USBFS_SOF_ISR);
 232   1              CyIntSetPriority(USBFS_SOF_VECT_NUM, USBFS_SOF_PRIOR);
 233   1          #endif   /*  USBFS_SOF_ISR_REMOVE */
 234   1      
 235   1          /* Set the Control Endpoint Interrupt. */
 236   1          (void) CyIntSetVector(USBFS_EP_0_VECT_NUM,   &USBFS_EP_0_ISR);
 237   1          CyIntSetPriority(USBFS_EP_0_VECT_NUM, USBFS_EP_0_PRIOR);
 238   1      
 239   1          /* Set the Data Endpoint 1 Interrupt. */
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 5   

 240   1          #if(USBFS_EP1_ISR_REMOVE == 0u)
                      (void) CyIntSetVector(USBFS_EP_1_VECT_NUM,   &USBFS_EP_1_ISR);
                      CyIntSetPriority(USBFS_EP_1_VECT_NUM, USBFS_EP_1_PRIOR);
                  #endif   /*  USBFS_EP1_ISR_REMOVE */
 244   1      
 245   1          /* Set the Data Endpoint 2 Interrupt. */
 246   1          #if(USBFS_EP2_ISR_REMOVE == 0u)
 247   1              (void) CyIntSetVector(USBFS_EP_2_VECT_NUM,   &USBFS_EP_2_ISR);
 248   1              CyIntSetPriority(USBFS_EP_2_VECT_NUM, USBFS_EP_2_PRIOR);
 249   1          #endif   /*  USBFS_EP2_ISR_REMOVE */
 250   1      
 251   1          /* Set the Data Endpoint 3 Interrupt. */
 252   1          #if(USBFS_EP3_ISR_REMOVE == 0u)
 253   1              (void) CyIntSetVector(USBFS_EP_3_VECT_NUM,   &USBFS_EP_3_ISR);
 254   1              CyIntSetPriority(USBFS_EP_3_VECT_NUM, USBFS_EP_3_PRIOR);
 255   1          #endif   /*  USBFS_EP3_ISR_REMOVE */
 256   1      
 257   1          /* Set the Data Endpoint 4 Interrupt. */
 258   1          #if(USBFS_EP4_ISR_REMOVE == 0u)
                      (void) CyIntSetVector(USBFS_EP_4_VECT_NUM,   &USBFS_EP_4_ISR);
                      CyIntSetPriority(USBFS_EP_4_VECT_NUM, USBFS_EP_4_PRIOR);
                  #endif   /*  USBFS_EP4_ISR_REMOVE */
 262   1      
 263   1          /* Set the Data Endpoint 5 Interrupt. */
 264   1          #if(USBFS_EP5_ISR_REMOVE == 0u)
                      (void) CyIntSetVector(USBFS_EP_5_VECT_NUM,   &USBFS_EP_5_ISR);
                      CyIntSetPriority(USBFS_EP_5_VECT_NUM, USBFS_EP_5_PRIOR);
                  #endif   /*  USBFS_EP5_ISR_REMOVE */
 268   1      
 269   1          /* Set the Data Endpoint 6 Interrupt. */
 270   1          #if(USBFS_EP6_ISR_REMOVE == 0u)
                      (void) CyIntSetVector(USBFS_EP_6_VECT_NUM,   &USBFS_EP_6_ISR);
                      CyIntSetPriority(USBFS_EP_6_VECT_NUM, USBFS_EP_6_PRIOR);
                  #endif   /*  USBFS_EP6_ISR_REMOVE */
 274   1      
 275   1           /* Set the Data Endpoint 7 Interrupt. */
 276   1          #if(USBFS_EP7_ISR_REMOVE == 0u)
                      (void) CyIntSetVector(USBFS_EP_7_VECT_NUM,   &USBFS_EP_7_ISR);
                      CyIntSetPriority(USBFS_EP_7_VECT_NUM, USBFS_EP_7_PRIOR);
                  #endif   /*  USBFS_EP7_ISR_REMOVE */
 280   1      
 281   1          /* Set the Data Endpoint 8 Interrupt. */
 282   1          #if(USBFS_EP8_ISR_REMOVE == 0u)
                      (void) CyIntSetVector(USBFS_EP_8_VECT_NUM,   &USBFS_EP_8_ISR);
                      CyIntSetPriority(USBFS_EP_8_VECT_NUM, USBFS_EP_8_PRIOR);
                  #endif   /*  USBFS_EP8_ISR_REMOVE */
 286   1      
 287   1          #if((USBFS_EP_MM != USBFS__EP_MANUAL) && (USBFS_ARB_ISR_REMOVE == 0u))
 288   1              /* Set the ARB Interrupt. */
 289   1              (void) CyIntSetVector(USBFS_ARB_VECT_NUM,   &USBFS_ARB_ISR);
 290   1              CyIntSetPriority(USBFS_ARB_VECT_NUM, USBFS_ARB_PRIOR);
 291   1          #endif   /*  USBFS_EP_MM != USBFS__EP_MANUAL */
 292   1      
 293   1      }
 294          
 295          
 296          /*******************************************************************************
 297          * Function Name: USBFS_InitComponent
 298          ********************************************************************************
 299          *
 300          * Summary:
 301          *  Initialize the component, except for the HW which is done one time in
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 6   

 302          *  the Start function.  This function pulls up D+.
 303          *
 304          * Parameters:
 305          *  device: Contains the device number of the desired device descriptor.
 306          *          The device number can be found in the Device Descriptor Tab of
 307          *          "Configure" dialog, under the settings of desired Device Descriptor,
 308          *          in the "Device Number" field.
 309          *  mode: The operating voltage. This determines whether the voltage regulator
 310          *        is enabled for 5V operation or if pass through mode is used for 3.3V
 311          *        operation. Symbolic names and their associated values are given in the
 312          *        following table.
 313          *       USBFS_3V_OPERATION - Disable voltage regulator and pass-thru
 314          *                                       Vcc for pull-up
 315          *       USBFS_5V_OPERATION - Enable voltage regulator and use
 316          *                                       regulator for pull-up
 317          *       USBFS_DWR_VDDD_OPERATION - Enable or Disable voltage
 318          *                         regulator depend on Vddd Voltage configuration in DWR.
 319          *
 320          * Return:
 321          *   None.
 322          *
 323          * Global variables:
 324          *   USBFS_device: Contains the device number of the desired device
 325          *       descriptor. The device number can be found in the Device Descriptor Tab
 326          *       of "Configure" dialog, under the settings of desired Device Descriptor,
 327          *       in the "Device Number" field.
 328          *   USBFS_transferState: This variable used by the communication
 329          *       functions to handle current transfer state. Initialized to
 330          *       TRANS_STATE_IDLE in this API.
 331          *   USBFS_configuration: Contains current configuration number
 332          *       which is set by the Host using SET_CONFIGURATION request.
 333          *       Initialized to zero in this API.
 334          *   USBFS_deviceAddress: Contains current device address. This
 335          *       variable is initialized to zero in this API. Host starts to communicate
 336          *      to device with address 0 and then set it to whatever value using
 337          *      SET_ADDRESS request.
 338          *   USBFS_deviceStatus: initialized to 0.
 339          *       This is two bit variable which contain power status in first bit
 340          *       (DEVICE_STATUS_BUS_POWERED or DEVICE_STATUS_SELF_POWERED) and remote
 341          *       wakeup status (DEVICE_STATUS_REMOTE_WAKEUP) in second bit.
 342          *   USBFS_lastPacketSize initialized to 0;
 343          *
 344          * Reentrant:
 345          *  No.
 346          *
 347          *******************************************************************************/
 348          void USBFS_InitComponent(uint8 device, uint8 mode) 
 349          {
 350   1          /* Initialize _hidProtocol variable to comply with
 351   1          *  HID 7.2.6 Set_Protocol Request:
 352   1          *  "When initialized, all devices default to report protocol."
 353   1          */
 354   1          #if defined(USBFS_ENABLE_HID_CLASS)
                      uint8 i;
              
                      for (i = 0u; i < USBFS_MAX_INTERFACES_NUMBER; i++)
                      {
                          USBFS_hidProtocol[i] = USBFS_PROTOCOL_REPORT;
                      }
                  #endif /* USBFS_ENABLE_HID_CLASS */
 362   1      
 363   1          /* Enable Interrupts. */
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 7   

 364   1          CyIntEnable(USBFS_BUS_RESET_VECT_NUM);
 365   1          CyIntEnable(USBFS_EP_0_VECT_NUM);
 366   1          #if(USBFS_EP1_ISR_REMOVE == 0u)
                      CyIntEnable(USBFS_EP_1_VECT_NUM);
                  #endif   /*  USBFS_EP1_ISR_REMOVE */
 369   1          #if(USBFS_EP2_ISR_REMOVE == 0u)
 370   1              CyIntEnable(USBFS_EP_2_VECT_NUM);
 371   1          #endif   /*  USBFS_EP2_ISR_REMOVE */
 372   1          #if(USBFS_EP3_ISR_REMOVE == 0u)
 373   1              CyIntEnable(USBFS_EP_3_VECT_NUM);
 374   1          #endif   /*  USBFS_EP3_ISR_REMOVE */
 375   1          #if(USBFS_EP4_ISR_REMOVE == 0u)
                      CyIntEnable(USBFS_EP_4_VECT_NUM);
                  #endif   /*  USBFS_EP4_ISR_REMOVE */
 378   1          #if(USBFS_EP5_ISR_REMOVE == 0u)
                      CyIntEnable(USBFS_EP_5_VECT_NUM);
                  #endif   /*  USBFS_EP5_ISR_REMOVE */
 381   1          #if(USBFS_EP6_ISR_REMOVE == 0u)
                      CyIntEnable(USBFS_EP_6_VECT_NUM);
                  #endif   /*  USBFS_EP6_ISR_REMOVE */
 384   1          #if(USBFS_EP7_ISR_REMOVE == 0u)
                      CyIntEnable(USBFS_EP_7_VECT_NUM);
                  #endif   /*  USBFS_EP7_ISR_REMOVE */
 387   1          #if(USBFS_EP8_ISR_REMOVE == 0u)
                      CyIntEnable(USBFS_EP_8_VECT_NUM);
                  #endif   /*  USBFS_EP8_ISR_REMOVE */
 390   1          #if((USBFS_EP_MM != USBFS__EP_MANUAL) && (USBFS_ARB_ISR_REMOVE == 0u))
 391   1              /* usb arb interrupt enable */
 392   1              USBFS_ARB_INT_EN_REG = USBFS_ARB_INT_MASK;
 393   1              CyIntEnable(USBFS_ARB_VECT_NUM);
 394   1          #endif   /*  USBFS_EP_MM != USBFS__EP_MANUAL */
 395   1      
 396   1          /* Arbiter configuration for DMA transfers */
 397   1          #if(USBFS_EP_MM != USBFS__EP_MANUAL)
 398   1              #if(USBFS_EP_MM == USBFS__EP_DMAMANUAL)
                          USBFS_ARB_CFG_REG = USBFS_ARB_CFG_MANUAL_DMA;
                      #endif   /*  USBFS_EP_MM == USBFS__EP_DMAMANUAL */
 401   1              #if(USBFS_EP_MM == USBFS__EP_DMAAUTO)
 402   1                  /*Set cfg cmplt this rises DMA request when the full configuration is done */
 403   1                  USBFS_ARB_CFG_REG = USBFS_ARB_CFG_AUTO_DMA | USBFS_ARB_CFG_AUTO_MEM;
 404   1                  #if(USBFS_EP_DMA_AUTO_OPT == 0u)
 405   1                      /* Init interrupt which handles verification of the successful DMA transaction */
 406   1                      USBFS_EP_DMA_Done_isr_StartEx(&USBFS_EP_DMA_DONE_ISR);
 407   1                      USBFS_EP17_DMA_Done_SR_InterruptEnable();
 408   1                      USBFS_EP8_DMA_Done_SR_InterruptEnable();
 409   1                  #endif /* USBFS_EP_DMA_AUTO_OPT == 0u */
 410   1              #endif   /*  USBFS_EP_MM == USBFS__EP_DMAAUTO */
 411   1          #endif   /*  USBFS_EP_MM != USBFS__EP_MANUAL */
 412   1      
 413   1          USBFS_transferState = USBFS_TRANS_STATE_IDLE;
 414   1      
 415   1          /* USB Locking: Enabled, VRegulator: depend on mode or DWR Voltage configuration*/
 416   1          switch(mode)
 417   1          {
 418   2              case USBFS_3V_OPERATION:
 419   2                  USBFS_CR1_REG = USBFS_CR1_ENABLE_LOCK;
 420   2                  break;
 421   2              case USBFS_5V_OPERATION:
 422   2                  USBFS_CR1_REG = USBFS_CR1_ENABLE_LOCK | USBFS_CR1_REG_ENABLE;
 423   2                  break;
 424   2              default:   /*USBFS_DWR_VDDD_OPERATION */
 425   2                  #if(USBFS_VDDD_MV < USBFS_3500MV)
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 8   

                              USBFS_CR1_REG = USBFS_CR1_ENABLE_LOCK;
                          #else
 428   2                      USBFS_CR1_REG = USBFS_CR1_ENABLE_LOCK | USBFS_CR1_REG_ENABLE;
 429   2                  #endif /*  USBFS_VDDD_MV < USBFS_3500MV */
 430   2                  break;
 431   2          }
 432   1      
 433   1          /* Record the descriptor selection */
 434   1          USBFS_device = device;
 435   1      
 436   1          /* Clear all of the component data */
 437   1          USBFS_configuration = 0u;
 438   1          USBFS_interfaceNumber = 0u;
 439   1          USBFS_configurationChanged = 0u;
 440   1          USBFS_deviceAddress  = 0u;
 441   1          USBFS_deviceStatus = 0u;
 442   1      
 443   1          USBFS_lastPacketSize = 0u;
 444   1      
 445   1          /*  ACK Setup, Stall IN/OUT */
 446   1          CY_SET_REG8(USBFS_EP0_CR_PTR, USBFS_MODE_STALL_IN_OUT);
 447   1      
 448   1          /* Enable the SIE with an address 0 */
 449   1          CY_SET_REG8(USBFS_CR0_PTR, USBFS_CR0_ENABLE);
 450   1      
 451   1          /* Workaround for PSOC5LP */
 452   1          CyDelayCycles(1u);
 453   1      
 454   1          /* Finally, Enable d+ pullup and select iomode to USB mode*/
 455   1          CY_SET_REG8(USBFS_USBIO_CR1_PTR, USBFS_USBIO_CR1_USBPUEN);
 456   1      }
 457          
 458          
 459          /*******************************************************************************
 460          * Function Name: USBFS_ReInitComponent
 461          ********************************************************************************
 462          *
 463          * Summary:
 464          *  This function reinitialize the component configuration and is
 465          *  intend to be called from the Reset interrupt.
 466          *
 467          * Parameters:
 468          *  None.
 469          *
 470          * Return:
 471          *   None.
 472          *
 473          * Global variables:
 474          *   USBFS_device: Contains the device number of the desired device
 475          *        descriptor. The device number can be found in the Device Descriptor Tab
 476          *       of "Configure" dialog, under the settings of desired Device Descriptor,
 477          *       in the "Device Number" field.
 478          *   USBFS_transferState: This variable used by the communication
 479          *       functions to handle current transfer state. Initialized to
 480          *       TRANS_STATE_IDLE in this API.
 481          *   USBFS_configuration: Contains current configuration number
 482          *       which is set by the Host using SET_CONFIGURATION request.
 483          *       Initialized to zero in this API.
 484          *   USBFS_deviceAddress: Contains current device address. This
 485          *       variable is initialized to zero in this API. Host starts to communicate
 486          *      to device with address 0 and then set it to whatever value using
 487          *      SET_ADDRESS request.
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 9   

 488          *   USBFS_deviceStatus: initialized to 0.
 489          *       This is two bit variable which contain power status in first bit
 490          *       (DEVICE_STATUS_BUS_POWERED or DEVICE_STATUS_SELF_POWERED) and remote
 491          *       wakeup status (DEVICE_STATUS_REMOTE_WAKEUP) in second bit.
 492          *   USBFS_lastPacketSize initialized to 0;
 493          *
 494          * Reentrant:
 495          *  No.
 496          *
 497          *******************************************************************************/
 498          void USBFS_ReInitComponent(void) 
 499          {
 500   1          /* Initialize _hidProtocol variable to comply with HID 7.2.6 Set_Protocol
 501   1          *  Request: "When initialized, all devices default to report protocol."
 502   1          */
 503   1          #if defined(USBFS_ENABLE_HID_CLASS)
                      uint8 i;
              
                      for (i = 0u; i < USBFS_MAX_INTERFACES_NUMBER; i++)
                      {
                          USBFS_hidProtocol[i] = USBFS_PROTOCOL_REPORT;
                      }
                  #endif /* USBFS_ENABLE_HID_CLASS */
 511   1      
 512   1          USBFS_transferState = USBFS_TRANS_STATE_IDLE;
 513   1      
 514   1          /* Clear all of the component data */
 515   1          USBFS_configuration = 0u;
 516   1          USBFS_interfaceNumber = 0u;
 517   1          USBFS_configurationChanged = 0u;
 518   1          USBFS_deviceAddress  = 0u;
 519   1          USBFS_deviceStatus = 0u;
 520   1      
 521   1          USBFS_lastPacketSize = 0u;
 522   1      
 523   1      
 524   1          /*  ACK Setup, Stall IN/OUT */
 525   1          CY_SET_REG8(USBFS_EP0_CR_PTR, USBFS_MODE_STALL_IN_OUT);
 526   1      
 527   1          /* Enable the SIE with an address 0 */
 528   1          CY_SET_REG8(USBFS_CR0_PTR, USBFS_CR0_ENABLE);
 529   1      
 530   1      }
 531          
 532          
 533          /*******************************************************************************
 534          * Function Name: USBFS_Stop
 535          ********************************************************************************
 536          *
 537          * Summary:
 538          *  This function shuts down the USB function including to release
 539          *  the D+ Pullup and disabling the SIE.
 540          *
 541          * Parameters:
 542          *  None.
 543          *
 544          * Return:
 545          *  None.
 546          *
 547          * Global variables:
 548          *   USBFS_configuration: Contains current configuration number
 549          *       which is set by the Host using SET_CONFIGURATION request.
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 10  

 550          *       Initialized to zero in this API.
 551          *   USBFS_deviceAddress: Contains current device address. This
 552          *       variable is initialized to zero in this API. Host starts to communicate
 553          *      to device with address 0 and then set it to whatever value using
 554          *      SET_ADDRESS request.
 555          *   USBFS_deviceStatus: initialized to 0.
 556          *       This is two bit variable which contain power status in first bit
 557          *       (DEVICE_STATUS_BUS_POWERED or DEVICE_STATUS_SELF_POWERED) and remote
 558          *       wakeup status (DEVICE_STATUS_REMOTE_WAKEUP) in second bit.
 559          *   USBFS_configurationChanged: This variable is set to one after
 560          *       SET_CONFIGURATION request and cleared in this function.
 561          *   USBFS_intiVar variable is set to zero
 562          *
 563          *******************************************************************************/
 564          void USBFS_Stop(void) 
 565          {
 566   1      
 567   1          #if(USBFS_EP_MM != USBFS__EP_MANUAL)
 568   1              USBFS_Stop_DMA(USBFS_MAX_EP);     /* Stop all DMAs */
 569   1          #endif   /*  USBFS_EP_MM != USBFS__EP_MANUAL */
 570   1      
 571   1          /* Disable the SIE */
 572   1          USBFS_CR0_REG &= (uint8)(~USBFS_CR0_ENABLE);
 573   1          /* Disable the d+ pullup */
 574   1          USBFS_USBIO_CR1_REG &= (uint8)(~USBFS_USBIO_CR1_USBPUEN);
 575   1          /* Disable USB in ACT PM */
 576   1          USBFS_PM_ACT_CFG_REG &= (uint8)(~USBFS_PM_ACT_EN_FSUSB);
 577   1          /* Disable USB block for Standby Power Mode */
 578   1          USBFS_PM_STBY_CFG_REG &= (uint8)(~USBFS_PM_STBY_EN_FSUSB);
 579   1      
 580   1          /* Disable the reset and EP interrupts */
 581   1          CyIntDisable(USBFS_BUS_RESET_VECT_NUM);
 582   1          CyIntDisable(USBFS_EP_0_VECT_NUM);
 583   1          #if(USBFS_EP1_ISR_REMOVE == 0u)
                      CyIntDisable(USBFS_EP_1_VECT_NUM);
                  #endif   /*  USBFS_EP1_ISR_REMOVE */
 586   1          #if(USBFS_EP2_ISR_REMOVE == 0u)
 587   1              CyIntDisable(USBFS_EP_2_VECT_NUM);
 588   1          #endif   /*  USBFS_EP2_ISR_REMOVE */
 589   1          #if(USBFS_EP3_ISR_REMOVE == 0u)
 590   1              CyIntDisable(USBFS_EP_3_VECT_NUM);
 591   1          #endif   /*  USBFS_EP3_ISR_REMOVE */
 592   1          #if(USBFS_EP4_ISR_REMOVE == 0u)
                      CyIntDisable(USBFS_EP_4_VECT_NUM);
                  #endif   /*  USBFS_EP4_ISR_REMOVE */
 595   1          #if(USBFS_EP5_ISR_REMOVE == 0u)
                      CyIntDisable(USBFS_EP_5_VECT_NUM);
                  #endif   /*  USBFS_EP5_ISR_REMOVE */
 598   1          #if(USBFS_EP6_ISR_REMOVE == 0u)
                      CyIntDisable(USBFS_EP_6_VECT_NUM);
                  #endif   /*  USBFS_EP6_ISR_REMOVE */
 601   1          #if(USBFS_EP7_ISR_REMOVE == 0u)
                      CyIntDisable(USBFS_EP_7_VECT_NUM);
                  #endif   /*  USBFS_EP7_ISR_REMOVE */
 604   1          #if(USBFS_EP8_ISR_REMOVE == 0u)
                      CyIntDisable(USBFS_EP_8_VECT_NUM);
                  #endif   /*  USBFS_EP8_ISR_REMOVE */
 607   1      
 608   1          /* Clear all of the component data */
 609   1          USBFS_configuration = 0u;
 610   1          USBFS_interfaceNumber = 0u;
 611   1          USBFS_configurationChanged = 0u;
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 11  

 612   1          USBFS_deviceAddress  = 0u;
 613   1          USBFS_deviceStatus = 0u;
 614   1          USBFS_initVar = 0u;
 615   1      
 616   1      }
 617          
 618          
 619          /*******************************************************************************
 620          * Function Name: USBFS_CheckActivity
 621          ********************************************************************************
 622          *
 623          * Summary:
 624          *  Returns the activity status of the bus.  Clears the status hardware to
 625          *  provide fresh activity status on the next call of this routine.
 626          *
 627          * Parameters:
 628          *  None.
 629          *
 630          * Return:
 631          *  1 - If bus activity was detected since the last call to this function
 632          *  0 - If bus activity not was detected since the last call to this function
 633          *
 634          *******************************************************************************/
 635          uint8 USBFS_CheckActivity(void) 
 636          {
 637   1          uint8 r;
 638   1      
 639   1          r = CY_GET_REG8(USBFS_CR1_PTR);
 640   1          CY_SET_REG8(USBFS_CR1_PTR, (r & ((uint8)(~USBFS_CR1_BUS_ACTIVITY))));
 641   1      
 642   1          return((r & USBFS_CR1_BUS_ACTIVITY) >> USBFS_CR1_BUS_ACTIVITY_SHIFT);
 643   1      }
 644          
 645          
 646          /*******************************************************************************
 647          * Function Name: USBFS_GetConfiguration
 648          ********************************************************************************
 649          *
 650          * Summary:
 651          *  Returns the current configuration setting
 652          *
 653          * Parameters:
 654          *  None.
 655          *
 656          * Return:
 657          *  configuration.
 658          *
 659          *******************************************************************************/
 660          uint8 USBFS_GetConfiguration(void) 
 661          {
 662   1          return(USBFS_configuration);
 663   1      }
 664          
 665          
 666          /*******************************************************************************
 667          * Function Name: USBFS_IsConfigurationChanged
 668          ********************************************************************************
 669          *
 670          * Summary:
 671          *  Returns the clear on read configuration state. It is usefull when PC send
 672          *  double SET_CONFIGURATION request with same configuration number.
 673          *
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 12  

 674          * Parameters:
 675          *  None.
 676          *
 677          * Return:
 678          *  Not zero value when new configuration has been changed, otherwise zero is
 679          *  returned.
 680          *
 681          * Global variables:
 682          *   USBFS_configurationChanged: This variable is set to one after
 683          *       SET_CONFIGURATION request and cleared in this function.
 684          *
 685          *******************************************************************************/
 686          uint8 USBFS_IsConfigurationChanged(void) 
 687          {
 688   1          uint8 res = 0u;
 689   1      
 690   1          if(USBFS_configurationChanged != 0u)
 691   1          {
 692   2              res = USBFS_configurationChanged;
 693   2              USBFS_configurationChanged = 0u;
 694   2          }
 695   1      
 696   1          return(res);
 697   1      }
 698          
 699          
 700          /*******************************************************************************
 701          * Function Name: USBFS_GetInterfaceSetting
 702          ********************************************************************************
 703          *
 704          * Summary:
 705          *  Returns the alternate setting from current interface
 706          *
 707          * Parameters:
 708          *  uint8 interfaceNumber, interface number
 709          *
 710          * Return:
 711          *  Alternate setting.
 712          *
 713          *******************************************************************************/
 714          uint8  USBFS_GetInterfaceSetting(uint8 interfaceNumber)
 715                                                              
 716          {
 717   1          return(USBFS_interfaceSetting[interfaceNumber]);
 718   1      }
 719          
 720          
 721          /*******************************************************************************
 722          * Function Name: USBFS_GetEPState
 723          ********************************************************************************
 724          *
 725          * Summary:
 726          *  Returned the state of the requested endpoint.
 727          *
 728          * Parameters:
 729          *  epNumber: Endpoint Number
 730          *
 731          * Return:
 732          *  State of the requested endpoint.
 733          *
 734          *******************************************************************************/
 735          uint8 USBFS_GetEPState(uint8 epNumber) 
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 13  

 736          {
 737   1          return(USBFS_EP[epNumber].apiEpState);
 738   1      }
 739          
 740          
 741          /*******************************************************************************
 742          * Function Name: USBFS_GetEPCount
 743          ********************************************************************************
 744          *
 745          * Summary:
 746          *  This function supports Data Endpoints only(EP1-EP8).
 747          *  Returns the transfer count for the requested endpoint.  The value from
 748          *  the count registers includes 2 counts for the two byte checksum of the
 749          *  packet.  This function subtracts the two counts.
 750          *
 751          * Parameters:
 752          *  epNumber: Data Endpoint Number.
 753          *            Valid values are between 1 and 8.
 754          *
 755          * Return:
 756          *  Returns the current byte count from the specified endpoint or 0 for an
 757          *  invalid endpoint.
 758          *
 759          *******************************************************************************/
 760          uint16 USBFS_GetEPCount(uint8 epNumber) 
 761          {
 762   1          uint8 ri;
 763   1          uint16 result = 0u;
 764   1      
 765   1          if((epNumber > USBFS_EP0) && (epNumber < USBFS_MAX_EP))
 766   1          {
 767   2              ri = ((epNumber - USBFS_EP1) << USBFS_EPX_CNTX_ADDR_SHIFT);
 768   2      
 769   2              result = (uint8)(CY_GET_REG8((reg8 *)(USBFS_SIE_EP1_CNT0_IND + ri)) &
 770   2                                USBFS_EPX_CNT0_MASK);
 771   2              result = (result << 8u) | CY_GET_REG8((reg8 *)(USBFS_SIE_EP1_CNT1_IND + ri));
 772   2              result -= USBFS_EPX_CNTX_CRC_COUNT;
 773   2          }
 774   1          return(result);
 775   1      }
 776          
 777          
 778          #if(USBFS_EP_MM != USBFS__EP_MANUAL)
 779          
 780          
 781              /*******************************************************************************
 782              * Function Name: USBFS_InitEP_DMA
 783              ********************************************************************************
 784              *
 785              * Summary:
 786              *  This function allocates and initializes a DMA channel to be used by the
 787              *  USBFS_LoadInEP() or USBFS_ReadOutEP() APIs for data
 788              *  transfer.
 789              *
 790              * Parameters:
 791              *  epNumber: Contains the data endpoint number.
 792              *            Valid values are between 1 and 8.
 793              *  *pData: Pointer to a data array that is related to the EP transfers.
 794              *
 795              * Return:
 796              *  None.
 797              *
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 14  

 798              * Reentrant:
 799              *  No.
 800              *
 801              *******************************************************************************/
 802              void USBFS_InitEP_DMA(uint8 epNumber, const uint8* pData)
 803                                                                              
 804              {
 805   1              uint16 src;
 806   1              uint16 dst;
 807   1              #if (CY_PSOC3)                  /* PSoC 3 */
 808   1                  src = HI16(CYDEV_SRAM_BASE);
 809   1                  dst = HI16(CYDEV_PERIPH_BASE);
 810   1                  pData = pData;
 811   1              #else                           /* PSoC 5 */
                          if((USBFS_EP[epNumber].addr & USBFS_DIR_IN) != 0u )
                          {   /* for the IN EP source is the SRAM memory buffer */
                              src = HI16(pData);
                              dst = HI16(CYDEV_PERIPH_BASE);
                          }
                          else
                          {   /* for the OUT EP source is the SIE register */
                              src = HI16(CYDEV_PERIPH_BASE);
                              dst = HI16(pData);
                          }
                      #endif  /*  C51 */
 823   1              switch(epNumber)
 824   1              {
 825   2                  case USBFS_EP1:
 826   2                      #if(USBFS_DMA1_REMOVE == 0u)
                                  USBFS_DmaChan[epNumber] = USBFS_ep1_DmaInitialize(
                                      USBFS_DMA_BYTES_PER_BURST, USBFS_DMA_REQUEST_PER_BURST, src, dst);
                              #endif   /*  USBFS_DMA1_REMOVE */
 830   2                      break;
 831   2                  case USBFS_EP2:
 832   2                      #if(USBFS_DMA2_REMOVE == 0u)
 833   2                          USBFS_DmaChan[epNumber] = USBFS_ep2_DmaInitialize(
 834   2                              USBFS_DMA_BYTES_PER_BURST, USBFS_DMA_REQUEST_PER_BURST, src, dst);
 835   2                      #endif   /*  USBFS_DMA2_REMOVE */
 836   2                      break;
 837   2                  case USBFS_EP3:
 838   2                      #if(USBFS_DMA3_REMOVE == 0u)
 839   2                          USBFS_DmaChan[epNumber] = USBFS_ep3_DmaInitialize(
 840   2                              USBFS_DMA_BYTES_PER_BURST, USBFS_DMA_REQUEST_PER_BURST, src, dst);
 841   2                      #endif   /*  USBFS_DMA3_REMOVE */
 842   2                      break;
 843   2                  case USBFS_EP4:
 844   2                      #if(USBFS_DMA4_REMOVE == 0u)
                                  USBFS_DmaChan[epNumber] = USBFS_ep4_DmaInitialize(
                                      USBFS_DMA_BYTES_PER_BURST, USBFS_DMA_REQUEST_PER_BURST, src, dst);
                              #endif   /*  USBFS_DMA4_REMOVE */
 848   2                      break;
 849   2                  case USBFS_EP5:
 850   2                      #if(USBFS_DMA5_REMOVE == 0u)
                                  USBFS_DmaChan[epNumber] = USBFS_ep5_DmaInitialize(
                                      USBFS_DMA_BYTES_PER_BURST, USBFS_DMA_REQUEST_PER_BURST, src, dst);
                              #endif   /*  USBFS_DMA5_REMOVE */
 854   2                      break;
 855   2                  case USBFS_EP6:
 856   2                      #if(USBFS_DMA6_REMOVE == 0u)
                                  USBFS_DmaChan[epNumber] = USBFS_ep6_DmaInitialize(
                                      USBFS_DMA_BYTES_PER_BURST, USBFS_DMA_REQUEST_PER_BURST, src, dst);
                              #endif   /*  USBFS_DMA6_REMOVE */
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 15  

 860   2                      break;
 861   2                  case USBFS_EP7:
 862   2                      #if(USBFS_DMA7_REMOVE == 0u)
                                  USBFS_DmaChan[epNumber] = USBFS_ep7_DmaInitialize(
                                      USBFS_DMA_BYTES_PER_BURST, USBFS_DMA_REQUEST_PER_BURST, src, dst);
                              #endif   /*  USBFS_DMA7_REMOVE */
 866   2                      break;
 867   2                  case USBFS_EP8:
 868   2                      #if(USBFS_DMA8_REMOVE == 0u)
                                  USBFS_DmaChan[epNumber] = USBFS_ep8_DmaInitialize(
                                      USBFS_DMA_BYTES_PER_BURST, USBFS_DMA_REQUEST_PER_BURST, src, dst);
                              #endif   /*  USBFS_DMA8_REMOVE */
 872   2                      break;
 873   2                  default:
 874   2                      /* Do not support EP0 DMA transfers */
 875   2                      break;
 876   2              }
 877   1              if((epNumber > USBFS_EP0) && (epNumber < USBFS_MAX_EP))
 878   1              {
 879   2                  USBFS_DmaTd[epNumber] = CyDmaTdAllocate();
 880   2                  #if ((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u))
 881   2                      USBFS_DmaNextTd[epNumber] = CyDmaTdAllocate();
 882   2                  #endif /*  ((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u)) */
 883   2      
 884   2              }
 885   1          }
 886          
 887          
 888              /*******************************************************************************
 889              * Function Name: USBFS_Stop_DMA
 890              ********************************************************************************
 891              *
 892              * Summary: Stops and free DMA
 893              *
 894              * Parameters:
 895              *  epNumber: Contains the data endpoint number or
 896              *           USBFS_MAX_EP to stop all DMAs
 897              *
 898              * Return:
 899              *  None.
 900              *
 901              * Reentrant:
 902              *  No.
 903              *
 904              *******************************************************************************/
 905              void USBFS_Stop_DMA(uint8 epNumber) 
 906              {
 907   1              uint8 i;
 908   1              i = (epNumber < USBFS_MAX_EP) ? epNumber : USBFS_EP1;
 909   1              do
 910   1              {
 911   2                  if(USBFS_DmaTd[i] != DMA_INVALID_TD)
 912   2                  {
 913   3                      (void) CyDmaChDisable(USBFS_DmaChan[i]);
 914   3                      CyDmaTdFree(USBFS_DmaTd[i]);
 915   3                      USBFS_DmaTd[i] = DMA_INVALID_TD;
 916   3                  }
 917   2                  #if ((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u))
 918   2                      if(USBFS_DmaNextTd[i] != DMA_INVALID_TD)
 919   2                      {
 920   3                          CyDmaTdFree(USBFS_DmaNextTd[i]);
 921   3                          USBFS_DmaNextTd[i] = DMA_INVALID_TD;
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 16  

 922   3                      }
 923   2                  #endif /* ((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u)) */
 924   2                  i++;
 925   2              }while((i < USBFS_MAX_EP) && (epNumber == USBFS_MAX_EP));
 926   1          }
 927          
 928          #endif /*  USBFS_EP_MM != USBFS__EP_MANUAL */
 929          
 930          
 931          #if ((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u))
 932          
 933          
 934              /*******************************************************************************
 935              * Function Name: USBFS_LoadNextInEP
 936              ********************************************************************************
 937              *
 938              * Summary:
 939              *  This internal function is used for IN endpoint DMA reconfiguration in
 940              *  Auto DMA mode.
 941              *
 942              * Parameters:
 943              *  epNumber: Contains the data endpoint number.
 944              *  mode:   0 - Configure DMA to send the the rest of data.
 945              *          1 - Configure DMA to repeat 2 last bytes of the first burst.
 946              *
 947              * Return:
 948              *  None.
 949              *
 950              *******************************************************************************/
 951              void USBFS_LoadNextInEP(uint8 epNumber, uint8 mode) 
 952              {
 953   1              reg16 *convert;
 954   1      
 955   1              if(mode == 0u)
 956   1              {
 957   2                  /* Configure DMA to send the the rest of data */
 958   2                  /* CyDmaTdSetConfiguration API is optimised to change only transfer length and configure TD */
 959   2                  convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[USBFS_DmaTd[epNumber]].TD0[0u];
 960   2                  /* Set transfer length */
 961   2                  CY_SET_REG16(convert, USBFS_inLength[epNumber] - USBFS_DMA_BYTES_PER_BURST);
 962   2                  /* CyDmaTdSetAddress API is optimized to change only source address */
 963   2                  convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[USBFS_DmaTd[epNumber]].TD1[0u];
 964   2                  CY_SET_REG16(convert, LO16((uint32)USBFS_inDataPointer[epNumber] +
 965   2                                                  USBFS_DMA_BYTES_PER_BURST));
 966   2                  USBFS_inBufFull[epNumber] = 1u;
 967   2              }
 968   1              else
 969   1              {
 970   2                  /* Configure DMA to repeat 2 last bytes of the first burst. */
 971   2                  /* CyDmaTdSetConfiguration API is optimised to change only transfer length and configure TD */
 972   2                  convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[USBFS_DmaTd[epNumber]].TD0[0u];
 973   2                  /* Set transfer length */
 974   2                  CY_SET_REG16(convert, USBFS_DMA_BYTES_REPEAT);
 975   2                  /* CyDmaTdSetAddress API is optimized to change only source address */
 976   2                  convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[USBFS_DmaTd[epNumber]].TD1[0u];
 977   2                  CY_SET_REG16(convert,  LO16((uint32)USBFS_inDataPointer[epNumber] +
 978   2                                         USBFS_DMA_BYTES_PER_BURST - USBFS_DMA_BYTES_REPEAT));
 979   2              }
 980   1      
 981   1              /* CyDmaChSetInitialTd API is optimised to init TD */
 982   1              CY_DMA_CH_STRUCT_PTR[USBFS_DmaChan[epNumber]].basic_status[1u] = USBFS_DmaTd[epNumber];
 983   1          }
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 17  

 984          #endif /* ((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u)) */
 985          
 986          
 987          /*******************************************************************************
 988          * Function Name: USBFS_LoadInEP
 989          ********************************************************************************
 990          *
 991          * Summary:
 992          *  Loads and enables the specified USB data endpoint for an IN transfer.
 993          *
 994          * Parameters:
 995          *  epNumber: Contains the data endpoint number.
 996          *            Valid values are between 1 and 8.
 997          *  *pData: A pointer to a data array from which the data for the endpoint space
 998          *          is loaded.
 999          *  length: The number of bytes to transfer from the array and then send as a
1000          *          result of an IN request. Valid values are between 0 and 512.
1001          *
1002          * Return:
1003          *  None.
1004          *
1005          * Reentrant:
1006          *  No.
1007          *
1008          *******************************************************************************/
1009          void USBFS_LoadInEP(uint8 epNumber, const uint8 pData[], uint16 length)
1010                                                                                  
1011          {
1012   1          uint8 ri;
1013   1          reg8 *p;
1014   1          #if(USBFS_EP_MM == USBFS__EP_MANUAL)
                      uint16 i;
                  #endif /*  USBFS_EP_MM == USBFS__EP_MANUAL */
1017   1      
1018   1          if((epNumber > USBFS_EP0) && (epNumber < USBFS_MAX_EP))
1019   1          {
1020   2              ri = ((epNumber - USBFS_EP1) << USBFS_EPX_CNTX_ADDR_SHIFT);
1021   2              p = (reg8 *)(USBFS_ARB_RW1_DR_IND + ri);
1022   2      
1023   2              #if(USBFS_EP_MM != USBFS__EP_DMAAUTO)
                          /* Limits length to available buffer space, auto MM could send packets up to 1024 bytes */
                          if(length > (USBFS_EPX_DATA_BUF_MAX - USBFS_EP[epNumber].buffOffset))
                          {
                              length = USBFS_EPX_DATA_BUF_MAX - USBFS_EP[epNumber].buffOffset;
                          }
                      #endif /*  USBFS_EP_MM != USBFS__EP_DMAAUTO */
1030   2      
1031   2              /* Set the count and data toggle */
1032   2              CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CNT0_IND + ri),
1033   2                                  (length >> 8u) | (USBFS_EP[epNumber].epToggle));
1034   2              CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CNT1_IND + ri),  length & 0xFFu);
1035   2      
1036   2              #if(USBFS_EP_MM == USBFS__EP_MANUAL)
                          if(pData != NULL)
                          {
                              /* Copy the data using the arbiter data register */
                              for (i = 0u; i < length; i++)
                              {
                                  CY_SET_REG8(p, pData[i]);
                              }
                          }
                          USBFS_EP[epNumber].apiEpState = USBFS_NO_EVENT_PENDING;
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 18  

                          /* Write the Mode register */
                          CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + ri), USBFS_EP[epNumber].epMode);
                      #else
1049   2                  /* Init DMA if it was not initialized */
1050   2                  if (USBFS_DmaTd[epNumber] == DMA_INVALID_TD)
1051   2                  {
1052   3                      USBFS_InitEP_DMA(epNumber, pData);
1053   3                  }
1054   2              #endif /*  USBFS_EP_MM == USBFS__EP_MANUAL */
1055   2      
1056   2              #if(USBFS_EP_MM == USBFS__EP_DMAMANUAL)
                          USBFS_EP[epNumber].apiEpState = USBFS_NO_EVENT_PENDING;
                          if ((pData != NULL) && (length > 0u))
                          {
                              /* Enable DMA in mode2 for transferring data */
                              (void) CyDmaChDisable(USBFS_DmaChan[epNumber]);
                              (void) CyDmaTdSetConfiguration(USBFS_DmaTd[epNumber], length, CY_DMA_DISABLE_TD,
                                                                                               TD_TERMIN_EN | TD_INC_SRC
             -_ADR);
                              (void) CyDmaTdSetAddress(USBFS_DmaTd[epNumber],  LO16((uint32)pData), LO16((uint32)p));
                              /* Enable the DMA */
                              (void) CyDmaChSetInitialTd(USBFS_DmaChan[epNumber], USBFS_DmaTd[epNumber]);
                              (void) CyDmaChEnable(USBFS_DmaChan[epNumber], 1u);
                              /* Generate DMA request */
                              * (reg8 *)(USBFS_ARB_EP1_CFG_IND + ri) |= USBFS_ARB_EPX_CFG_DMA_REQ;
                              * (reg8 *)(USBFS_ARB_EP1_CFG_IND + ri) &= ((uint8)(~USBFS_ARB_EPX_CFG_DMA_REQ));
                              /* Mode register will be written in arb ISR after DMA transfer complete */
                          }
                          else
                          {
                              /* When zero-length packet - write the Mode register directly */
                              CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + ri), USBFS_EP[epNumber].epMode);
                          }
                      #endif /*  USBFS_EP_MM == USBFS__EP_DMAMANUAL */
1079   2      
1080   2              #if(USBFS_EP_MM == USBFS__EP_DMAAUTO)
1081   2                  if (pData != NULL)
1082   2                  {
1083   3                      /* Enable DMA in mode3 for transferring data */
1084   3                      (void) CyDmaChDisable(USBFS_DmaChan[epNumber]);
1085   3                  #if (USBFS_EP_DMA_AUTO_OPT == 0u)
1086   3                      USBFS_inLength[epNumber] = length;
1087   3                      USBFS_inDataPointer[epNumber] = pData;
1088   3                      /* Configure DMA to send the data only for the first burst */
1089   3                      (void) CyDmaTdSetConfiguration(USBFS_DmaTd[epNumber],
1090   3                          (length > USBFS_DMA_BYTES_PER_BURST) ? USBFS_DMA_BYTES_PER_BURST : length,
1091   3                          USBFS_DmaNextTd[epNumber], TD_TERMIN_EN | TD_INC_SRC_ADR);
1092   3                      (void) CyDmaTdSetAddress(USBFS_DmaTd[epNumber],  LO16((uint32)pData), LO16((uint32)p));
1093   3                      /* The second TD will be executed only when the first one fails.
1094   3                      *  The intention of this TD is to generate NRQ interrupt
1095   3                      *  and repeat 2 last bytes of the first burst.
1096   3                      */
1097   3                      (void) CyDmaTdSetConfiguration(USBFS_DmaNextTd[epNumber], 1u,
1098   3                                                     USBFS_DmaNextTd[epNumber],
1099   3                                                     USBFS_epX_TD_TERMOUT_EN[epNumber]);
1100   3                      /* Configure DmaNextTd to clear Data ready status */
1101   3                      (void) CyDmaTdSetAddress(USBFS_DmaNextTd[epNumber],  LO16((uint32)&clearInDataRdyStatus),
1102   3                                                                      LO16((uint32)(USBFS_ARB_EP1_CFG_IND + ri))
             -);
1103   3                  #else /* Configure DMA to send all data*/
                              (void) CyDmaTdSetConfiguration(USBFS_DmaTd[epNumber], length,
                                                             USBFS_DmaTd[epNumber], TD_TERMIN_EN | TD_INC_SRC_ADR);
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 19  

                              (void) CyDmaTdSetAddress(USBFS_DmaTd[epNumber],  LO16((uint32)pData), LO16((uint32)p));
                          #endif /* USBFS_EP_DMA_AUTO_OPT == 0u */
1108   3      
1109   3                      /* Clear Any potential pending DMA requests before starting the DMA channel to transfer da
             -ta */
1110   3                      (void) CyDmaClearPendingDrq(USBFS_DmaChan[epNumber]);
1111   3                      /* Enable the DMA */
1112   3                      (void) CyDmaChSetInitialTd(USBFS_DmaChan[epNumber], USBFS_DmaTd[epNumber]);
1113   3                      (void) CyDmaChEnable(USBFS_DmaChan[epNumber], 1u);
1114   3                  }
1115   2                  else
1116   2                  {
1117   3                      USBFS_EP[epNumber].apiEpState = USBFS_NO_EVENT_PENDING;
1118   3                      if(length > 0u)
1119   3                      {
1120   4                      #if (USBFS_EP_DMA_AUTO_OPT == 0u)
1121   4                          USBFS_inLength[epNumber] = length;
1122   4                          USBFS_inBufFull[epNumber] = 0u;
1123   4                          (void) CyDmaChDisable(USBFS_DmaChan[epNumber]);
1124   4                          /* Configure DMA to send the data only for the first burst */
1125   4                          (void) CyDmaTdSetConfiguration(
1126   4                              USBFS_DmaTd[epNumber], (length > USBFS_DMA_BYTES_PER_BURST) ?
1127   4                              USBFS_DMA_BYTES_PER_BURST : length,
1128   4                              USBFS_DmaNextTd[epNumber], TD_TERMIN_EN | TD_INC_SRC_ADR );
1129   4                          (void) CyDmaTdSetAddress(USBFS_DmaTd[epNumber],
1130   4                                                   LO16((uint32)USBFS_inDataPointer[epNumber]), LO16((uint32)p))
             -;
1131   4                          /* Clear Any potential pending DMA requests before starting the DMA channel to transfe
             -r data */
1132   4                          (void) CyDmaClearPendingDrq(USBFS_DmaChan[epNumber]);
1133   4                          /* Enable the DMA */
1134   4                          (void) CyDmaChSetInitialTd(USBFS_DmaChan[epNumber], USBFS_DmaTd[epNumber]);
1135   4                          (void) CyDmaChEnable(USBFS_DmaChan[epNumber], 1u);
1136   4                      #endif /* (USBFS_EP_DMA_AUTO_OPT == 0u) */
1137   4      
1138   4                          /* Set Data ready status, This will generate DMA request */
1139   4                          #ifndef USBFS_MANUAL_IN_EP_ARM
1140   4                              * (reg8 *)(USBFS_ARB_EP1_CFG_IND + ri) |= USBFS_ARB_EPX_CFG_IN_DATA_RDY;
1141   4                          #endif  /* USBFS_MANUAL_IN_EP_ARM */
1142   4                          /* Mode register will be written in arb ISR(In Buffer Full) after first DMA transfer c
             -omplete */
1143   4                      }
1144   3                      else
1145   3                      {
1146   4                          /* When zero-length packet - write the Mode register directly */
1147   4                          CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + ri), USBFS_EP[epNumber].epMode);
1148   4                      }
1149   3                  }
1150   2              #endif /*  USBFS_EP_MM == USBFS__EP_DMAAUTO */
1151   2          }
1152   1      }
1153          
1154          
1155          /*******************************************************************************
1156          * Function Name: USBFS_ReadOutEP
1157          ********************************************************************************
1158          *
1159          * Summary:
1160          *  Read data from an endpoint.  The application must call
1161          *  USBFS_GetEPState to see if an event is pending.
1162          *
1163          * Parameters:
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 20  

1164          *  epNumber: Contains the data endpoint number.
1165          *            Valid values are between 1 and 8.
1166          *  pData: A pointer to a data array from which the data for the endpoint space
1167          *         is loaded.
1168          *  length: The number of bytes to transfer from the USB Out endpoint and loads
1169          *          it into data array. Valid values are between 0 and 1023. The function
1170          *          moves fewer than the requested number of bytes if the host sends
1171          *          fewer bytes than requested.
1172          *
1173          * Returns:
1174          *  Number of bytes received, 0 for an invalid endpoint.
1175          *
1176          * Reentrant:
1177          *  No.
1178          *
1179          *******************************************************************************/
1180          uint16 USBFS_ReadOutEP(uint8 epNumber, uint8 pData[], uint16 length)
1181                                                                                  
1182          {
1183   1          uint8 ri;
1184   1          reg8 *p;
1185   1          #if(USBFS_EP_MM == USBFS__EP_MANUAL)
                      uint16 i;
                  #endif /*  USBFS_EP_MM == USBFS__EP_MANUAL */
1188   1          #if(USBFS_EP_MM != USBFS__EP_DMAAUTO)
                      uint16 xferCount;
                  #endif /*  USBFS_EP_MM != USBFS__EP_DMAAUTO */
1191   1      
1192   1          if((epNumber > USBFS_EP0) && (epNumber < USBFS_MAX_EP) && (pData != NULL))
1193   1          {
1194   2              ri = ((epNumber - USBFS_EP1) << USBFS_EPX_CNTX_ADDR_SHIFT);
1195   2              p = (reg8 *)(USBFS_ARB_RW1_DR_IND + ri);
1196   2      
1197   2              #if(USBFS_EP_MM != USBFS__EP_DMAAUTO)
                          /* Determine which is smaller the requested data or the available data */
                          xferCount = USBFS_GetEPCount(epNumber);
                          if (length > xferCount)
                          {
                              length = xferCount;
                          }
                      #endif /*  USBFS_EP_MM != USBFS__EP_DMAAUTO */
1205   2      
1206   2              #if(USBFS_EP_MM == USBFS__EP_MANUAL)
                          /* Copy the data using the arbiter data register */
                          for (i = 0u; i < length; i++)
                          {
                              pData[i] = CY_GET_REG8(p);
                          }
              
                          /* (re)arming of OUT endpoint */
                          USBFS_EnableOutEP(epNumber);
                      #else
1216   2                  /*Init DMA if it was not initialized */
1217   2                  if(USBFS_DmaTd[epNumber] == DMA_INVALID_TD)
1218   2                  {
1219   3                      USBFS_InitEP_DMA(epNumber, pData);
1220   3                  }
1221   2      
1222   2              #endif /*  USBFS_EP_MM == USBFS__EP_MANUAL */
1223   2      
1224   2              #if(USBFS_EP_MM == USBFS__EP_DMAMANUAL)
                          /* Enable DMA in mode2 for transferring data */
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 21  

                          (void) CyDmaChDisable(USBFS_DmaChan[epNumber]);
                          (void) CyDmaTdSetConfiguration(USBFS_DmaTd[epNumber], length, CY_DMA_DISABLE_TD,
                                                                                              TD_TERMIN_EN | TD_INC_DST_
             -ADR);
                          (void) CyDmaTdSetAddress(USBFS_DmaTd[epNumber],  LO16((uint32)p), LO16((uint32)pData));
                          /* Enable the DMA */
                          (void) CyDmaChSetInitialTd(USBFS_DmaChan[epNumber], USBFS_DmaTd[epNumber]);
                          (void) CyDmaChEnable(USBFS_DmaChan[epNumber], 1u);
              
                          /* Generate DMA request */
                          * (reg8 *)(USBFS_ARB_EP1_CFG_IND + ri) |= USBFS_ARB_EPX_CFG_DMA_REQ;
                          * (reg8 *)(USBFS_ARB_EP1_CFG_IND + ri) &= ((uint8)(~USBFS_ARB_EPX_CFG_DMA_REQ));
                          /* Out EP will be (re)armed in arb ISR after transfer complete */
                      #endif /*  USBFS_EP_MM == USBFS__EP_DMAMANUAL */
1239   2      
1240   2              #if(USBFS_EP_MM == USBFS__EP_DMAAUTO)
1241   2                  /* Enable DMA in mode3 for transferring data */
1242   2                  (void) CyDmaChDisable(USBFS_DmaChan[epNumber]);
1243   2                  (void) CyDmaTdSetConfiguration(USBFS_DmaTd[epNumber], length, USBFS_DmaTd[epNumber],
1244   2                                                                                      TD_TERMIN_EN | TD_INC_DST_
             -ADR);
1245   2                  (void) CyDmaTdSetAddress(USBFS_DmaTd[epNumber],  LO16((uint32)p), LO16((uint32)pData));
1246   2      
1247   2                  /* Clear Any potential pending DMA requests before starting the DMA channel to transfer data *
             -/
1248   2                  (void) CyDmaClearPendingDrq(USBFS_DmaChan[epNumber]);
1249   2                  /* Enable the DMA */
1250   2                  (void) CyDmaChSetInitialTd(USBFS_DmaChan[epNumber], USBFS_DmaTd[epNumber]);
1251   2                  (void) CyDmaChEnable(USBFS_DmaChan[epNumber], 1u);
1252   2                  /* Out EP will be (re)armed in arb ISR after transfer complete */
1253   2              #endif /*  USBFS_EP_MM == USBFS__EP_DMAAUTO */
1254   2      
1255   2          }
1256   1          else
1257   1          {
1258   2              length = 0u;
1259   2          }
1260   1      
1261   1          return(length);
1262   1      }
1263          
1264          
1265          /*******************************************************************************
1266          * Function Name: USBFS_EnableOutEP
1267          ********************************************************************************
1268          *
1269          * Summary:
1270          *  This function enables an OUT endpoint.  It should not be
1271          *  called for an IN endpoint.
1272          *
1273          * Parameters:
1274          *  epNumber: Endpoint Number
1275          *            Valid values are between 1 and 8.
1276          *
1277          * Return:
1278          *   None.
1279          *
1280          * Global variables:
1281          *  USBFS_EP[epNumber].apiEpState - set to NO_EVENT_PENDING
1282          *
1283          * Reentrant:
1284          *  No.
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 22  

1285          *
1286          *******************************************************************************/
1287          void USBFS_EnableOutEP(uint8 epNumber) 
1288          {
1289   1          uint8 ri;
1290   1      
1291   1          if((epNumber > USBFS_EP0) && (epNumber < USBFS_MAX_EP))
1292   1          {
1293   2              ri = ((epNumber - USBFS_EP1) << USBFS_EPX_CNTX_ADDR_SHIFT);
1294   2              USBFS_EP[epNumber].apiEpState = USBFS_NO_EVENT_PENDING;
1295   2              /* Write the Mode register */
1296   2              CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + ri), USBFS_EP[epNumber].epMode);
1297   2          }
1298   1      }
1299          
1300          
1301          /*******************************************************************************
1302          * Function Name: USBFS_DisableOutEP
1303          ********************************************************************************
1304          *
1305          * Summary:
1306          *  This function disables an OUT endpoint.  It should not be
1307          *  called for an IN endpoint.
1308          *
1309          * Parameters:
1310          *  epNumber: Endpoint Number
1311          *            Valid values are between 1 and 8.
1312          *
1313          * Return:
1314          *  None.
1315          *
1316          *******************************************************************************/
1317          void USBFS_DisableOutEP(uint8 epNumber) 
1318          {
1319   1          uint8 ri ;
1320   1      
1321   1          if((epNumber > USBFS_EP0) && (epNumber < USBFS_MAX_EP))
1322   1          {
1323   2              ri = ((epNumber - USBFS_EP1) << USBFS_EPX_CNTX_ADDR_SHIFT);
1324   2              /* Write the Mode register */
1325   2              CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + ri), USBFS_MODE_NAK_OUT);
1326   2          }
1327   1      }
1328          
1329          
1330          /*******************************************************************************
1331          * Function Name: USBFS_Force
1332          ********************************************************************************
1333          *
1334          * Summary:
1335          *  Forces the bus state
1336          *
1337          * Parameters:
1338          *  bState
1339          *    USBFS_FORCE_J
1340          *    USBFS_FORCE_K
1341          *    USBFS_FORCE_SE0
1342          *    USBFS_FORCE_NONE
1343          *
1344          * Return:
1345          *  None.
1346          *
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 23  

1347          *******************************************************************************/
1348          void USBFS_Force(uint8 bState) 
1349          {
1350   1          CY_SET_REG8(USBFS_USBIO_CR0_PTR, bState);
1351   1      }
1352          
1353          
1354          /*******************************************************************************
1355          * Function Name: USBFS_GetEPAckState
1356          ********************************************************************************
1357          *
1358          * Summary:
1359          *  Returns the ACK of the CR0 Register (ACKD)
1360          *
1361          * Parameters:
1362          *  epNumber: Endpoint Number
1363          *            Valid values are between 1 and 8.
1364          *
1365          * Returns
1366          *  0 if nothing has been ACKD, non-=zero something has been ACKD
1367          *
1368          *******************************************************************************/
1369          uint8 USBFS_GetEPAckState(uint8 epNumber) 
1370          {
1371   1          uint8 ri;
1372   1          uint8 cr = 0u;
1373   1      
1374   1          if((epNumber > USBFS_EP0) && (epNumber < USBFS_MAX_EP))
1375   1          {
1376   2              ri = ((epNumber - USBFS_EP1) << USBFS_EPX_CNTX_ADDR_SHIFT);
1377   2              cr = CY_GET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + ri)) & USBFS_MODE_ACKD;
1378   2          }
1379   1      
1380   1          return(cr);
1381   1      }
1382          
1383          
1384          /*******************************************************************************
1385          * Function Name: USBFS_SetPowerStatus
1386          ********************************************************************************
1387          *
1388          * Summary:
1389          *  Sets the device power status for reporting in the Get Device Status
1390          *  request
1391          *
1392          * Parameters:
1393          *  powerStatus: USBFS_DEVICE_STATUS_BUS_POWERED(0) - Bus Powered,
1394          *               USBFS_DEVICE_STATUS_SELF_POWERED(1) - Self Powered
1395          *
1396          * Return:
1397          *   None.
1398          *
1399          * Global variables:
1400          *  USBFS_deviceStatus - set power status
1401          *
1402          * Reentrant:
1403          *  No.
1404          *
1405          *******************************************************************************/
1406          void USBFS_SetPowerStatus(uint8 powerStatus) 
1407          {
1408   1          if (powerStatus != USBFS_DEVICE_STATUS_BUS_POWERED)
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 24  

1409   1          {
1410   2              USBFS_deviceStatus |=  USBFS_DEVICE_STATUS_SELF_POWERED;
1411   2          }
1412   1          else
1413   1          {
1414   2              USBFS_deviceStatus &=  ((uint8)(~USBFS_DEVICE_STATUS_SELF_POWERED));
1415   2          }
1416   1      }
1417          
1418          
1419          #if (USBFS_MON_VBUS == 1u)
1420          
1421              /*******************************************************************************
1422              * Function Name: USBFS_VBusPresent
1423              ********************************************************************************
1424              *
1425              * Summary:
1426              *  Determines VBUS presence for Self Powered Devices.
1427              *
1428              * Parameters:
1429              *  None.
1430              *
1431              * Return:
1432              *  1 if VBUS is present, otherwise 0.
1433              *
1434              *******************************************************************************/
1435              uint8 USBFS_VBusPresent(void) 
1436              {
1437   1              return((0u != (CY_GET_REG8(USBFS_VBUS_PS_PTR) & USBFS_VBUS_MASK)) ? 1u : 0u);
1438   1          }
1439          
1440          #endif /* USBFS_MON_VBUS */
1441          
1442          
1443          /*******************************************************************************
1444          * Function Name: USBFS_RWUEnabled
1445          ********************************************************************************
1446          *
1447          * Summary:
1448          *  Returns TRUE if Remote Wake Up is enabled, otherwise FALSE
1449          *
1450          * Parameters:
1451          *   None.
1452          *
1453          * Return:
1454          *  TRUE -  Remote Wake Up Enabled
1455          *  FALSE - Remote Wake Up Disabled
1456          *
1457          * Global variables:
1458          *  USBFS_deviceStatus - checked to determine remote status
1459          *
1460          *******************************************************************************/
1461          uint8 USBFS_RWUEnabled(void) 
1462          {
1463   1          uint8 result = USBFS_FALSE;
1464   1          if((USBFS_deviceStatus & USBFS_DEVICE_STATUS_REMOTE_WAKEUP) != 0u)
1465   1          {
1466   2              result = USBFS_TRUE;
1467   2          }
1468   1      
1469   1          return(result);
1470   1      }
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 25  

1471          
1472          
1473          /* [] END OF FILE */
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 26  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _USBFS_Start (BEGIN)
                                           ; SOURCE LINE # 129
0000 900000      R     MOV     DPTR,#device
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 132
0008 900000      R     MOV     DPTR,#USBFS_initVar
000B E0                MOVX    A,@DPTR
000C 7009              JNZ     ?C0001
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
000E 120000      R     LCALL   USBFS_Init
                                           ; SOURCE LINE # 135
0011 900000      R     MOV     DPTR,#USBFS_initVar
0014 7401              MOV     A,#01H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
0017         ?C0001:
                                           ; SOURCE LINE # 137
0017 900000      R     MOV     DPTR,#device
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C A3                INC     DPTR
001D E0                MOVX    A,@DPTR
001E FD                MOV     R5,A
001F 120000      R     LCALL   _USBFS_InitComponent
                                           ; SOURCE LINE # 138
0022 22                RET     
             ; FUNCTION _USBFS_Start (END)

             ; FUNCTION USBFS_Init (BEGIN)
                                           ; SOURCE LINE # 158
                                           ; SOURCE LINE # 159
                                           ; SOURCE LINE # 165
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#enableInterrupts
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 168
0008 9043A5            MOV     DPTR,#043A5H
000B E0                MOVX    A,@DPTR
000C 4401              ORL     A,#01H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 170
000F 9043B5            MOV     DPTR,#043B5H
0012 E0                MOVX    A,@DPTR
0013 4401              ORL     A,#01H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 173
0016 90609D            MOV     DPTR,#0609DH
0019 7401              MOV     A,#01H
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 175
001C 906009            MOV     DPTR,#06009H
001F 04                INC     A
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 27  

0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 179
0021 906010            MOV     DPTR,#06010H
0024 E0                MOVX    A,@DPTR
0025 547F              ANL     A,#07FH
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 180
0028 E4                CLR     A
0029 FF                MOV     R7,A
002A FE                MOV     R6,A
002B 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 185
002E 904394            MOV     DPTR,#04394H
0031 E0                MOVX    A,@DPTR
0032 54F9              ANL     A,#0F9H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 189
0035 906012            MOV     DPTR,#06012H
0038 E0                MOVX    A,@DPTR
0039 54DF              ANL     A,#0DFH
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 192
003C 904394            MOV     DPTR,#04394H
003F E0                MOVX    A,@DPTR
0040 4401              ORL     A,#01H
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 194
0043 7F01              MOV     R7,#01H
0045 7E00              MOV     R6,#00H
0047 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 196
004A 7F28              MOV     R7,#028H
004C 7E00              MOV     R6,#00H
004E 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 198
0051 9051F8            MOV     DPTR,#051F8H
0054 E0                MOVX    A,@DPTR
0055 547F              ANL     A,#07FH
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 199
0058 E0                MOVX    A,@DPTR
0059 54BF              ANL     A,#0BFH
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
005C 904394            MOV     DPTR,#04394H
005F E0                MOVX    A,@DPTR
0060 4402              ORL     A,#02H
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 203
0063 7F02              MOV     R7,#02H
0065 7E00              MOV     R6,#00H
0067 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 205
006A 904394            MOV     DPTR,#04394H
006D E0                MOVX    A,@DPTR
006E 4404              ORL     A,#04H
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 208
0071 906084            MOV     DPTR,#06084H
0074 E4                CLR     A
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 209
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 28  

0076 A3                INC     DPTR
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 213
;---- Variable 'i' assigned to Register 'R6/R7' ----
0078 FF                MOV     R7,A
0079 FE                MOV     R6,A
007A         ?C0003:
007A C3                CLR     C
007B EF                MOV     A,R7
007C 9409              SUBB    A,#09H
007E EE                MOV     A,R6
007F 9400              SUBB    A,#00H
0081 5021              JNC     ?C0004
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
0083 7400        R     MOV     A,#LOW USBFS_DmaTd
0085 2F                ADD     A,R7
0086 F582              MOV     DPL,A
0088 7400        R     MOV     A,#HIGH USBFS_DmaTd
008A 3E                ADDC    A,R6
008B F583              MOV     DPH,A
008D 74FF              MOV     A,#0FFH
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
0090 7400        R     MOV     A,#LOW USBFS_DmaNextTd
0092 2F                ADD     A,R7
0093 F582              MOV     DPL,A
0095 7400        R     MOV     A,#HIGH USBFS_DmaNextTd
0097 3E                ADDC    A,R6
0098 F583              MOV     DPH,A
009A 74FF              MOV     A,#0FFH
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 219
009D 0F                INC     R7
009E EF                MOV     A,R7
009F 7001              JNZ     ?C0076
00A1 0E                INC     R6
00A2         ?C0076:
00A2 80D6              SJMP    ?C0003
00A4         ?C0004:
                                           ; SOURCE LINE # 222
00A4 900000      R     MOV     DPTR,#enableInterrupts
00A7 E0                MOVX    A,@DPTR
00A8 FF                MOV     R7,A
00A9 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 226
00AC 7C00        E     MOV     R4,#HIGH USBFS_BUS_RESET_ISR
00AE 7D00        E     MOV     R5,#LOW USBFS_BUS_RESET_ISR
00B0 7F17              MOV     R7,#017H
00B2 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 227
00B5 7D07              MOV     R5,#07H
00B7 7F17              MOV     R7,#017H
00B9 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 231
00BC 7C00        E     MOV     R4,#HIGH USBFS_SOF_ISR
00BE 7D00        E     MOV     R5,#LOW USBFS_SOF_ISR
00C0 7F15              MOV     R7,#015H
00C2 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 232
00C5 7D07              MOV     R5,#07H
00C7 7F15              MOV     R7,#015H
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 29  

00C9 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 236
00CC 7C00        E     MOV     R4,#HIGH USBFS_EP_0_ISR
00CE 7D00        E     MOV     R5,#LOW USBFS_EP_0_ISR
00D0 7F18              MOV     R7,#018H
00D2 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 237
00D5 7D07              MOV     R5,#07H
00D7 7F18              MOV     R7,#018H
00D9 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 247
00DC 7C00        E     MOV     R4,#HIGH USBFS_EP_2_ISR
00DE 7D00        E     MOV     R5,#LOW USBFS_EP_2_ISR
00E0 7F01              MOV     R7,#01H
00E2 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 248
00E5 7D07              MOV     R5,#07H
00E7 7F01              MOV     R7,#01H
00E9 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 253
00EC 7C00        E     MOV     R4,#HIGH USBFS_EP_3_ISR
00EE 7D00        E     MOV     R5,#LOW USBFS_EP_3_ISR
00F0 7F02              MOV     R7,#02H
00F2 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 254
00F5 7D07              MOV     R5,#07H
00F7 7F02              MOV     R7,#02H
00F9 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 289
00FC 7C00        E     MOV     R4,#HIGH USBFS_ARB_ISR
00FE 7D00        E     MOV     R5,#LOW USBFS_ARB_ISR
0100 7F16              MOV     R7,#016H
0102 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 290
0105 E4                CLR     A
0106 FD                MOV     R5,A
0107 7F16              MOV     R7,#016H
0109 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 293
010C 22                RET     
             ; FUNCTION USBFS_Init (END)

             ; FUNCTION _USBFS_InitComponent (BEGIN)
                                           ; SOURCE LINE # 348
0000 900000      R     MOV     DPTR,#device
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 349
                                           ; SOURCE LINE # 364
0008 9044C2            MOV     DPTR,#044C2H
000B 7480              MOV     A,#080H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 365
000E A3                INC     DPTR
000F 7401              MOV     A,#01H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
0012 9044C0            MOV     DPTR,#044C0H
0015 04                INC     A
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 30  

0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 373
0017 7404              MOV     A,#04H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 392
001A 90609E            MOV     DPTR,#0609EH
001D 7406              MOV     A,#06H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 393
0020 9044C2            MOV     DPTR,#044C2H
0023 7440              MOV     A,#040H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 403
0026 90609C            MOV     DPTR,#0609CH
0029 7450              MOV     A,#050H
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 406
002C 7E00        E     MOV     R6,#HIGH USBFS_EP_DMA_DONE_ISR
002E 7F00        E     MOV     R7,#LOW USBFS_EP_DMA_DONE_ISR
0030 120000      E     LCALL   _USBFS_EP_DMA_Done_isr_StartEx
                                           ; SOURCE LINE # 407
0033 120000      E     LCALL   USBFS_EP17_DMA_Done_SR_InterruptEnable
                                           ; SOURCE LINE # 408
0036 120000      E     LCALL   USBFS_EP8_DMA_Done_SR_InterruptEnable
                                           ; SOURCE LINE # 413
0039 E4                CLR     A
003A 900000      E     MOV     DPTR,#USBFS_transferState
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 416
003E 900000      R     MOV     DPTR,#mode
0041 E0                MOVX    A,@DPTR
0042 14                DEC     A
0043 600B              JZ      ?C0009
0045 04                INC     A
0046 7010              JNZ     ?C0010
                                           ; SOURCE LINE # 417
                                           ; SOURCE LINE # 418
0048         ?C0008:
                                           ; SOURCE LINE # 419
0048 906009            MOV     DPTR,#06009H
004B 7402              MOV     A,#02H
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 420
004E 800E              SJMP    ?C0007
                                           ; SOURCE LINE # 421
0050         ?C0009:
                                           ; SOURCE LINE # 422
0050 906009            MOV     DPTR,#06009H
0053 7403              MOV     A,#03H
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 423
0056 8006              SJMP    ?C0007
                                           ; SOURCE LINE # 424
0058         ?C0010:
                                           ; SOURCE LINE # 428
0058 906009            MOV     DPTR,#06009H
005B 7403              MOV     A,#03H
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 430
                                           ; SOURCE LINE # 431
005E         ?C0007:
                                           ; SOURCE LINE # 434
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 31  

005E 900000      R     MOV     DPTR,#device
0061 E0                MOVX    A,@DPTR
0062 900000      E     MOV     DPTR,#USBFS_device
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 437
0066 E4                CLR     A
0067 900000      E     MOV     DPTR,#USBFS_configuration
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 438
006B 900000      E     MOV     DPTR,#USBFS_interfaceNumber
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 439
006F 900000      E     MOV     DPTR,#USBFS_configurationChanged
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 440
0073 900000      E     MOV     DPTR,#USBFS_deviceAddress
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 441
0077 900000      E     MOV     DPTR,#USBFS_deviceStatus
007A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 443
007B 900000      E     MOV     DPTR,#USBFS_lastPacketSize
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 446
007F 906028            MOV     DPTR,#06028H
0082 7403              MOV     A,#03H
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 449
0085 906008            MOV     DPTR,#06008H
0088 7480              MOV     A,#080H
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 452
008B E4                CLR     A
008C 7F01              MOV     R7,#01H
008E FE                MOV     R6,A
008F FD                MOV     R5,A
0090 FC                MOV     R4,A
0091 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 455
0094 906012            MOV     DPTR,#06012H
0097 7404              MOV     A,#04H
0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 456
009A 22                RET     
             ; FUNCTION _USBFS_InitComponent (END)

             ; FUNCTION USBFS_ReInitComponent (BEGIN)
                                           ; SOURCE LINE # 498
                                           ; SOURCE LINE # 499
                                           ; SOURCE LINE # 512
0000 E4                CLR     A
0001 900000      E     MOV     DPTR,#USBFS_transferState
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 515
0005 900000      E     MOV     DPTR,#USBFS_configuration
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 516
0009 900000      E     MOV     DPTR,#USBFS_interfaceNumber
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 517
000D 900000      E     MOV     DPTR,#USBFS_configurationChanged
0010 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 32  

                                           ; SOURCE LINE # 518
0011 900000      E     MOV     DPTR,#USBFS_deviceAddress
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 519
0015 900000      E     MOV     DPTR,#USBFS_deviceStatus
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 521
0019 900000      E     MOV     DPTR,#USBFS_lastPacketSize
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 525
001D 906028            MOV     DPTR,#06028H
0020 7403              MOV     A,#03H
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 528
0023 906008            MOV     DPTR,#06008H
0026 7480              MOV     A,#080H
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 530
0029 22                RET     
             ; FUNCTION USBFS_ReInitComponent (END)

             ; FUNCTION USBFS_Stop (BEGIN)
                                           ; SOURCE LINE # 564
                                           ; SOURCE LINE # 565
                                           ; SOURCE LINE # 568
0000 7F09              MOV     R7,#09H
0002 120000      R     LCALL   _USBFS_Stop_DMA
                                           ; SOURCE LINE # 572
0005 906008            MOV     DPTR,#06008H
0008 E0                MOVX    A,@DPTR
0009 547F              ANL     A,#07FH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 574
000C 906012            MOV     DPTR,#06012H
000F E0                MOVX    A,@DPTR
0010 54FB              ANL     A,#0FBH
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 576
0013 9043A5            MOV     DPTR,#043A5H
0016 E0                MOVX    A,@DPTR
0017 54FE              ANL     A,#0FEH
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 578
001A 9043B5            MOV     DPTR,#043B5H
001D E0                MOVX    A,@DPTR
001E 54FE              ANL     A,#0FEH
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 581
0021 9044CA            MOV     DPTR,#044CAH
0024 7480              MOV     A,#080H
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 582
0027 A3                INC     DPTR
0028 7401              MOV     A,#01H
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 587
002B 9044C8            MOV     DPTR,#044C8H
002E 04                INC     A
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 590
0030 7404              MOV     A,#04H
0032 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 33  

                                           ; SOURCE LINE # 609
0033 E4                CLR     A
0034 900000      E     MOV     DPTR,#USBFS_configuration
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 610
0038 900000      E     MOV     DPTR,#USBFS_interfaceNumber
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 611
003C 900000      E     MOV     DPTR,#USBFS_configurationChanged
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 612
0040 900000      E     MOV     DPTR,#USBFS_deviceAddress
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 613
0044 900000      E     MOV     DPTR,#USBFS_deviceStatus
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 614
0048 900000      R     MOV     DPTR,#USBFS_initVar
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 616
004C 22                RET     
             ; FUNCTION USBFS_Stop (END)

             ; FUNCTION USBFS_CheckActivity (BEGIN)
                                           ; SOURCE LINE # 635
                                           ; SOURCE LINE # 636
                                           ; SOURCE LINE # 639
0000 906009            MOV     DPTR,#06009H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
;---- Variable 'r' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 640
0005 54FB              ANL     A,#0FBH
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 642
0008 EF                MOV     A,R7
0009 5404              ANL     A,#04H
000B FF                MOV     R7,A
000C 13                RRC     A
000D 13                RRC     A
000E 543F              ANL     A,#03FH
0010 FF                MOV     R7,A
                                           ; SOURCE LINE # 643
0011         ?C0014:
0011 22                RET     
             ; FUNCTION USBFS_CheckActivity (END)

             ; FUNCTION USBFS_GetConfiguration (BEGIN)
                                           ; SOURCE LINE # 660
                                           ; SOURCE LINE # 661
                                           ; SOURCE LINE # 662
0000 900000      E     MOV     DPTR,#USBFS_configuration
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 663
0005         ?C0015:
0005 22                RET     
             ; FUNCTION USBFS_GetConfiguration (END)

             ; FUNCTION USBFS_IsConfigurationChanged (BEGIN)
                                           ; SOURCE LINE # 686
                                           ; SOURCE LINE # 687
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 34  

                                           ; SOURCE LINE # 688
;---- Variable 'res' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
                                           ; SOURCE LINE # 690
0002 900000      E     MOV     DPTR,#USBFS_configurationChanged
0005 E0                MOVX    A,@DPTR
0006 6004              JZ      ?C0016
                                           ; SOURCE LINE # 691
                                           ; SOURCE LINE # 692
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
                                           ; SOURCE LINE # 693
000A E4                CLR     A
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 694
000C         ?C0016:
                                           ; SOURCE LINE # 696
                                           ; SOURCE LINE # 697
000C         ?C0017:
000C 22                RET     
             ; FUNCTION USBFS_IsConfigurationChanged (END)

             ; FUNCTION _USBFS_GetInterfaceSetting (BEGIN)
                                           ; SOURCE LINE # 714
;---- Variable 'interfaceNumber' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 716
                                           ; SOURCE LINE # 717
0000 7400        E     MOV     A,#LOW USBFS_interfaceSetting
0002 2F                ADD     A,R7
0003 F582              MOV     DPL,A
0005 E4                CLR     A
0006 3400        E     ADDC    A,#HIGH USBFS_interfaceSetting
0008 F583              MOV     DPH,A
000A E0                MOVX    A,@DPTR
000B FF                MOV     R7,A
                                           ; SOURCE LINE # 718
000C         ?C0018:
000C 22                RET     
             ; FUNCTION _USBFS_GetInterfaceSetting (END)

             ; FUNCTION _USBFS_GetEPState (BEGIN)
                                           ; SOURCE LINE # 735
;---- Variable 'epNumber' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 736
                                           ; SOURCE LINE # 737
0000 EF                MOV     A,R7
0001 75F00B            MOV     B,#0BH
0004 A4                MUL     AB
0005 2400        E     ADD     A,#LOW USBFS_EP+01H
0007 F582              MOV     DPL,A
0009 E4                CLR     A
000A 3400        E     ADDC    A,#HIGH USBFS_EP+01H
000C F583              MOV     DPH,A
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
                                           ; SOURCE LINE # 738
0010         ?C0019:
0010 22                RET     
             ; FUNCTION _USBFS_GetEPState (END)

             ; FUNCTION _USBFS_GetEPCount (BEGIN)
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 35  

                                           ; SOURCE LINE # 760
;---- Variable 'epNumber' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 761
                                           ; SOURCE LINE # 763
;---- Variable 'result' assigned to Register 'R4/R5' ----
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 FC                MOV     R4,A
                                           ; SOURCE LINE # 765
0003 EF                MOV     A,R7
0004 D3                SETB    C
0005 9400              SUBB    A,#00H
0007 4041              JC      ?C0020
0009 EF                MOV     A,R7
000A 9409              SUBB    A,#09H
000C 503C              JNC     ?C0020
                                           ; SOURCE LINE # 766
                                           ; SOURCE LINE # 767
000E EF                MOV     A,R7
000F 24FF              ADD     A,#0FFH
0011 FF                MOV     R7,A
0012 E4                CLR     A
0013 34FF              ADDC    A,#0FFH
0015 FE                MOV     R6,A
0016 EF                MOV     A,R7
0017 C4                SWAP    A
0018 F8                MOV     R0,A
0019 540F              ANL     A,#0FH
001B C8                XCH     A,R0
001C 68                XRL     A,R0
001D FF                MOV     R7,A
001E EE                MOV     A,R6
001F C4                SWAP    A
0020 54F0              ANL     A,#0F0H
0022 48                ORL     A,R0
;---- Variable 'ri' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 769
0023 EF                MOV     A,R7
0024 240C              ADD     A,#0CH
0026 FB                MOV     R3,A
0027 E4                CLR     A
0028 3460              ADDC    A,#060H
002A 8B82              MOV     DPL,R3
002C F583              MOV     DPH,A
002E E0                MOVX    A,@DPTR
002F 540F              ANL     A,#0FH
0031 FD                MOV     R5,A
                                           ; SOURCE LINE # 771
0032 EF                MOV     A,R7
0033 240D              ADD     A,#0DH
0035 FF                MOV     R7,A
0036 E4                CLR     A
0037 3460              ADDC    A,#060H
0039 8F82              MOV     DPL,R7
003B F583              MOV     DPH,A
003D E0                MOVX    A,@DPTR
003E FB                MOV     R3,A
003F ED                MOV     A,R5
0040 FC                MOV     R4,A
0041 EB                MOV     A,R3
0042 FD                MOV     R5,A
                                           ; SOURCE LINE # 772
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 36  

0043 24FE              ADD     A,#0FEH
0045 FD                MOV     R5,A
0046 74FF              MOV     A,#0FFH
0048 3C                ADDC    A,R4
0049 FC                MOV     R4,A
                                           ; SOURCE LINE # 773
004A         ?C0020:
                                           ; SOURCE LINE # 774
004A AE04              MOV     R6,AR4
004C AF05              MOV     R7,AR5
                                           ; SOURCE LINE # 775
004E         ?C0021:
004E 22                RET     
             ; FUNCTION _USBFS_GetEPCount (END)

             ; FUNCTION _USBFS_InitEP_DMA (BEGIN)
                                           ; SOURCE LINE # 802
0000 900000      R     MOV     DPTR,#epNumber
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 804
                                           ; SOURCE LINE # 808
0005 E4                CLR     A
0006 A3                INC     DPTR
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 809
000A A3                INC     DPTR
000B F0                MOVX    @DPTR,A
000C A3                INC     DPTR
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 810
                                           ; SOURCE LINE # 823
000E EF                MOV     A,R7
000F 24FD              ADD     A,#0FDH
0011 6030              JZ      ?C0025
0013 04                INC     A
0014 7058              JNZ     ?C0022
                                           ; SOURCE LINE # 824
                                           ; SOURCE LINE # 825
                                           ; SOURCE LINE # 830
                                           ; SOURCE LINE # 831
0016         ?C0024:
                                           ; SOURCE LINE # 833
0016 900000      R     MOV     DPTR,#src
0019 E0                MOVX    A,@DPTR
001A FA                MOV     R2,A
001B A3                INC     DPTR
001C E0                MOVX    A,@DPTR
001D FB                MOV     R3,A
001E A3                INC     DPTR
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 A3                INC     DPTR
0022 E0                MOVX    A,@DPTR
0023 900000      E     MOV     DPTR,#?_USBFS_ep2_DmaInitialize?BYTE+04H
0026 CF                XCH     A,R7
0027 F0                MOVX    @DPTR,A
0028 A3                INC     DPTR
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 37  

002B 7D01              MOV     R5,#01H
002D 7F20              MOV     R7,#020H
002F 120000      E     LCALL   _USBFS_ep2_DmaInitialize
0032 900000      R     MOV     DPTR,#epNumber
0035 E0                MOVX    A,@DPTR
0036 2400        R     ADD     A,#LOW USBFS_DmaChan
0038 F582              MOV     DPL,A
003A E4                CLR     A
003B 3400        R     ADDC    A,#HIGH USBFS_DmaChan
003D F583              MOV     DPH,A
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 836
0041 802B              SJMP    ?C0022
                                           ; SOURCE LINE # 837
0043         ?C0025:
                                           ; SOURCE LINE # 839
0043 900000      R     MOV     DPTR,#src
0046 E0                MOVX    A,@DPTR
0047 FA                MOV     R2,A
0048 A3                INC     DPTR
0049 E0                MOVX    A,@DPTR
004A FB                MOV     R3,A
004B A3                INC     DPTR
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E A3                INC     DPTR
004F E0                MOVX    A,@DPTR
0050 900000      E     MOV     DPTR,#?_USBFS_ep3_DmaInitialize?BYTE+04H
0053 CF                XCH     A,R7
0054 F0                MOVX    @DPTR,A
0055 A3                INC     DPTR
0056 EF                MOV     A,R7
0057 F0                MOVX    @DPTR,A
0058 7D01              MOV     R5,#01H
005A 7F20              MOV     R7,#020H
005C 120000      E     LCALL   _USBFS_ep3_DmaInitialize
005F 900000      R     MOV     DPTR,#epNumber
0062 E0                MOVX    A,@DPTR
0063 2400        R     ADD     A,#LOW USBFS_DmaChan
0065 F582              MOV     DPL,A
0067 E4                CLR     A
0068 3400        R     ADDC    A,#HIGH USBFS_DmaChan
006A F583              MOV     DPH,A
006C EF                MOV     A,R7
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 842
                                           ; SOURCE LINE # 843
                                           ; SOURCE LINE # 848
                                           ; SOURCE LINE # 849
                                           ; SOURCE LINE # 854
                                           ; SOURCE LINE # 855
                                           ; SOURCE LINE # 860
                                           ; SOURCE LINE # 861
                                           ; SOURCE LINE # 866
                                           ; SOURCE LINE # 867
                                           ; SOURCE LINE # 872
                                           ; SOURCE LINE # 873
                                           ; SOURCE LINE # 875
                                           ; SOURCE LINE # 876
006E         ?C0022:
                                           ; SOURCE LINE # 877
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 38  

006E 900000      R     MOV     DPTR,#epNumber
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
0073 D3                SETB    C
0074 9400              SUBB    A,#00H
0076 4029              JC      ?C0033
0078 EF                MOV     A,R7
0079 9409              SUBB    A,#09H
007B 5024              JNC     ?C0033
                                           ; SOURCE LINE # 878
                                           ; SOURCE LINE # 879
007D 120000      E     LCALL   CyDmaTdAllocate
0080 900000      R     MOV     DPTR,#epNumber
0083 E0                MOVX    A,@DPTR
0084 2400        R     ADD     A,#LOW USBFS_DmaTd
0086 F582              MOV     DPL,A
0088 E4                CLR     A
0089 3400        R     ADDC    A,#HIGH USBFS_DmaTd
008B F583              MOV     DPH,A
008D EF                MOV     A,R7
008E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 881
008F 120000      E     LCALL   CyDmaTdAllocate
0092 900000      R     MOV     DPTR,#epNumber
0095 E0                MOVX    A,@DPTR
0096 2400        R     ADD     A,#LOW USBFS_DmaNextTd
0098 F582              MOV     DPL,A
009A E4                CLR     A
009B 3400        R     ADDC    A,#HIGH USBFS_DmaNextTd
009D F583              MOV     DPH,A
009F EF                MOV     A,R7
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 884
                                           ; SOURCE LINE # 885
00A1         ?C0033:
00A1 22                RET     
             ; FUNCTION _USBFS_InitEP_DMA (END)

             ; FUNCTION _USBFS_Stop_DMA (BEGIN)
                                           ; SOURCE LINE # 905
0000 900000      R     MOV     DPTR,#epNumber
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 906
                                           ; SOURCE LINE # 908
0005 C3                CLR     C
0006 9409              SUBB    A,#09H
0008 5004              JNC     ?C0034
000A E0                MOVX    A,@DPTR
000B FF                MOV     R7,A
000C 8002              SJMP    ?C0035
000E         ?C0034:
000E 7F01              MOV     R7,#01H
0010         ?C0035:
0010 900000      R     MOV     DPTR,#i
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
0015         ?C0038:
                                           ; SOURCE LINE # 910
                                           ; SOURCE LINE # 911
0015 900000      R     MOV     DPTR,#i
0018 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 39  

0019 FF                MOV     R7,A
001A 2400        R     ADD     A,#LOW USBFS_DmaTd
001C F582              MOV     DPL,A
001E E4                CLR     A
001F 3400        R     ADDC    A,#HIGH USBFS_DmaTd
0021 F583              MOV     DPH,A
0023 E0                MOVX    A,@DPTR
0024 F4                CPL     A
0025 6031              JZ      ?C0039
                                           ; SOURCE LINE # 912
                                           ; SOURCE LINE # 913
0027 7400        R     MOV     A,#LOW USBFS_DmaChan
0029 2F                ADD     A,R7
002A F582              MOV     DPL,A
002C E4                CLR     A
002D 3400        R     ADDC    A,#HIGH USBFS_DmaChan
002F F583              MOV     DPH,A
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 120000      E     LCALL   _CyDmaChDisable
                                           ; SOURCE LINE # 914
0036 900000      R     MOV     DPTR,#i
0039 E0                MOVX    A,@DPTR
003A 2400        R     ADD     A,#LOW USBFS_DmaTd
003C F582              MOV     DPL,A
003E E4                CLR     A
003F 3400        R     ADDC    A,#HIGH USBFS_DmaTd
0041 F583              MOV     DPH,A
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 120000      E     LCALL   _CyDmaTdFree
                                           ; SOURCE LINE # 915
0048 900000      R     MOV     DPTR,#i
004B E0                MOVX    A,@DPTR
004C 2400        R     ADD     A,#LOW USBFS_DmaTd
004E F582              MOV     DPL,A
0050 E4                CLR     A
0051 3400        R     ADDC    A,#HIGH USBFS_DmaTd
0053 F583              MOV     DPH,A
0055 74FF              MOV     A,#0FFH
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 916
0058         ?C0039:
                                           ; SOURCE LINE # 918
0058 900000      R     MOV     DPTR,#i
005B E0                MOVX    A,@DPTR
005C 2400        R     ADD     A,#LOW USBFS_DmaNextTd
005E F582              MOV     DPL,A
0060 E4                CLR     A
0061 3400        R     ADDC    A,#HIGH USBFS_DmaNextTd
0063 F583              MOV     DPH,A
0065 E0                MOVX    A,@DPTR
0066 FF                MOV     R7,A
0067 F4                CPL     A
0068 6013              JZ      ?C0040
                                           ; SOURCE LINE # 919
                                           ; SOURCE LINE # 920
006A 120000      E     LCALL   _CyDmaTdFree
                                           ; SOURCE LINE # 921
006D 900000      R     MOV     DPTR,#i
0070 E0                MOVX    A,@DPTR
0071 2400        R     ADD     A,#LOW USBFS_DmaNextTd
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 40  

0073 F582              MOV     DPL,A
0075 E4                CLR     A
0076 3400        R     ADDC    A,#HIGH USBFS_DmaNextTd
0078 F583              MOV     DPH,A
007A 74FF              MOV     A,#0FFH
007C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 922
007D         ?C0040:
                                           ; SOURCE LINE # 924
007D 900000      R     MOV     DPTR,#i
0080 E0                MOVX    A,@DPTR
0081 04                INC     A
0082 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 925
0083 E0                MOVX    A,@DPTR
0084 C3                CLR     C
0085 9409              SUBB    A,#09H
0087 5008              JNC     ?C0042
0089 900000      R     MOV     DPTR,#epNumber
008C E0                MOVX    A,@DPTR
008D 6409              XRL     A,#09H
008F 6084              JZ      ?C0038
                                           ; SOURCE LINE # 926
0091         ?C0042:
0091 22                RET     
             ; FUNCTION _USBFS_Stop_DMA (END)

             ; FUNCTION _USBFS_LoadNextInEP (BEGIN)
                                           ; SOURCE LINE # 951
0000 900000      R     MOV     DPTR,#epNumber
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
;---- Variable 'mode' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 952
                                           ; SOURCE LINE # 955
0005 ED                MOV     A,R5
0006 6003              JZ      $ + 5H
0008 020000      R     LJMP    ?C0043
                                           ; SOURCE LINE # 956
                                           ; SOURCE LINE # 959
000B E0                MOVX    A,@DPTR
000C FD                MOV     R5,A
000D 2400        R     ADD     A,#LOW USBFS_DmaTd
000F F582              MOV     DPL,A
0011 E4                CLR     A
0012 3400        R     ADDC    A,#HIGH USBFS_DmaTd
0014 F583              MOV     DPH,A
0016 E0                MOVX    A,@DPTR
0017 75F008            MOV     B,#08H
001A A4                MUL     AB
001B 2400              ADD     A,#00H
001D FE                MOV     R6,A
001E E5F0              MOV     A,B
0020 3478              ADDC    A,#078H
0022 900000      R     MOV     DPTR,#convert
0025 F0                MOVX    @DPTR,A
0026 A3                INC     DPTR
0027 CE                XCH     A,R6
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 961
0029 ED                MOV     A,R5
002A 25E0              ADD     A,ACC
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 41  

002C 2400        R     ADD     A,#LOW USBFS_inLength
002E F582              MOV     DPL,A
0030 E4                CLR     A
0031 3400        R     ADDC    A,#HIGH USBFS_inLength
0033 F583              MOV     DPH,A
0035 E0                MOVX    A,@DPTR
0036 FE                MOV     R6,A
0037 A3                INC     DPTR
0038 E0                MOVX    A,@DPTR
0039 24E0              ADD     A,#0E0H
003B FD                MOV     R5,A
003C EE                MOV     A,R6
003D 34FF              ADDC    A,#0FFH
003F FC                MOV     R4,A
0040 900000      R     MOV     DPTR,#convert
0043 E0                MOVX    A,@DPTR
0044 FE                MOV     R6,A
0045 A3                INC     DPTR
0046 E0                MOVX    A,@DPTR
0047 AA06              MOV     R2,AR6
0049 F9                MOV     R1,A
004A 7B01              MOV     R3,#01H
004C 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 963
004F 900000      R     MOV     DPTR,#epNumber
0052 E0                MOVX    A,@DPTR
0053 FD                MOV     R5,A
0054 2400        R     ADD     A,#LOW USBFS_DmaTd
0056 F582              MOV     DPL,A
0058 E4                CLR     A
0059 3400        R     ADDC    A,#HIGH USBFS_DmaTd
005B F583              MOV     DPH,A
005D E0                MOVX    A,@DPTR
005E 75F008            MOV     B,#08H
0061 A4                MUL     AB
0062 2404              ADD     A,#04H
0064 FE                MOV     R6,A
0065 E5F0              MOV     A,B
0067 3478              ADDC    A,#078H
0069 900000      R     MOV     DPTR,#convert
006C F0                MOVX    @DPTR,A
006D A3                INC     DPTR
006E CE                XCH     A,R6
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 965
0070 ED                MOV     A,R5
0071 75F003            MOV     B,#03H
0074 A4                MUL     AB
0075 2400        R     ADD     A,#LOW USBFS_inDataPointer
0077 F582              MOV     DPL,A
0079 E4                CLR     A
007A 3400        R     ADDC    A,#HIGH USBFS_inDataPointer
007C F583              MOV     DPH,A
007E 120000      E     LCALL   ?C?PLDXDATA
0081 E9                MOV     A,R1
0082 2420              ADD     A,#020H
0084 FF                MOV     R7,A
0085 E4                CLR     A
0086 3A                ADDC    A,R2
0087 FE                MOV     R6,A
0088 E4                CLR     A
0089 3B                ADDC    A,R3
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 42  

008A FD                MOV     R5,A
008B E4                CLR     A
008C 33                RLC     A
008D FC                MOV     R4,A
008E EF                MOV     A,R7
008F EE                MOV     A,R6
0090 E4                CLR     A
0091 AD07              MOV     R5,AR7
0093 AC06              MOV     R4,AR6
0095 900000      R     MOV     DPTR,#convert
0098 E0                MOVX    A,@DPTR
0099 FE                MOV     R6,A
009A A3                INC     DPTR
009B E0                MOVX    A,@DPTR
009C AA06              MOV     R2,AR6
009E F9                MOV     R1,A
009F 7B01              MOV     R3,#01H
00A1 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 966
00A4 900000      R     MOV     DPTR,#epNumber
00A7 E0                MOVX    A,@DPTR
00A8 2400        R     ADD     A,#LOW USBFS_inBufFull
00AA F582              MOV     DPL,A
00AC E4                CLR     A
00AD 3400        R     ADDC    A,#HIGH USBFS_inBufFull
00AF F583              MOV     DPH,A
00B1 7401              MOV     A,#01H
00B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 967
00B4 020000      R     LJMP    ?C0044
00B7         ?C0043:
                                           ; SOURCE LINE # 969
                                           ; SOURCE LINE # 972
00B7 900000      R     MOV     DPTR,#epNumber
00BA E0                MOVX    A,@DPTR
00BB 2400        R     ADD     A,#LOW USBFS_DmaTd
00BD F582              MOV     DPL,A
00BF E4                CLR     A
00C0 3400        R     ADDC    A,#HIGH USBFS_DmaTd
00C2 F583              MOV     DPH,A
00C4 E0                MOVX    A,@DPTR
00C5 75F008            MOV     B,#08H
00C8 A4                MUL     AB
00C9 2400              ADD     A,#00H
00CB FE                MOV     R6,A
00CC E5F0              MOV     A,B
00CE 3478              ADDC    A,#078H
00D0 900000      R     MOV     DPTR,#convert
00D3 F0                MOVX    @DPTR,A
00D4 A3                INC     DPTR
00D5 CE                XCH     A,R6
00D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 974
00D7 900000      R     MOV     DPTR,#convert
00DA E0                MOVX    A,@DPTR
00DB FE                MOV     R6,A
00DC A3                INC     DPTR
00DD E0                MOVX    A,@DPTR
00DE AA06              MOV     R2,AR6
00E0 F9                MOV     R1,A
00E1 7B01              MOV     R3,#01H
00E3 7D02              MOV     R5,#02H
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 43  

00E5 7C00              MOV     R4,#00H
00E7 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 976
00EA 900000      R     MOV     DPTR,#epNumber
00ED E0                MOVX    A,@DPTR
00EE FD                MOV     R5,A
00EF 2400        R     ADD     A,#LOW USBFS_DmaTd
00F1 F582              MOV     DPL,A
00F3 E4                CLR     A
00F4 3400        R     ADDC    A,#HIGH USBFS_DmaTd
00F6 F583              MOV     DPH,A
00F8 E0                MOVX    A,@DPTR
00F9 75F008            MOV     B,#08H
00FC A4                MUL     AB
00FD 2404              ADD     A,#04H
00FF FE                MOV     R6,A
0100 E5F0              MOV     A,B
0102 3478              ADDC    A,#078H
0104 900000      R     MOV     DPTR,#convert
0107 F0                MOVX    @DPTR,A
0108 A3                INC     DPTR
0109 CE                XCH     A,R6
010A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 978
010B ED                MOV     A,R5
010C 75F003            MOV     B,#03H
010F A4                MUL     AB
0110 2400        R     ADD     A,#LOW USBFS_inDataPointer
0112 F582              MOV     DPL,A
0114 E4                CLR     A
0115 3400        R     ADDC    A,#HIGH USBFS_inDataPointer
0117 F583              MOV     DPH,A
0119 120000      E     LCALL   ?C?PLDXDATA
011C E9                MOV     A,R1
011D 241E              ADD     A,#01EH
011F FF                MOV     R7,A
0120 E4                CLR     A
0121 3A                ADDC    A,R2
0122 FE                MOV     R6,A
0123 E4                CLR     A
0124 3B                ADDC    A,R3
0125 FD                MOV     R5,A
0126 E4                CLR     A
0127 33                RLC     A
0128 FC                MOV     R4,A
0129 EF                MOV     A,R7
012A EE                MOV     A,R6
012B E4                CLR     A
012C AD07              MOV     R5,AR7
012E AC06              MOV     R4,AR6
0130 900000      R     MOV     DPTR,#convert
0133 E0                MOVX    A,@DPTR
0134 FE                MOV     R6,A
0135 A3                INC     DPTR
0136 E0                MOVX    A,@DPTR
0137 AA06              MOV     R2,AR6
0139 F9                MOV     R1,A
013A 7B01              MOV     R3,#01H
013C 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 979
013F         ?C0044:
                                           ; SOURCE LINE # 982
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 44  

013F 900000      R     MOV     DPTR,#epNumber
0142 E0                MOVX    A,@DPTR
0143 FF                MOV     R7,A
0144 2400        R     ADD     A,#LOW USBFS_DmaTd
0146 F582              MOV     DPL,A
0148 E4                CLR     A
0149 3400        R     ADDC    A,#HIGH USBFS_DmaTd
014B F583              MOV     DPH,A
014D E0                MOVX    A,@DPTR
014E FE                MOV     R6,A
014F 7400        R     MOV     A,#LOW USBFS_DmaChan
0151 2F                ADD     A,R7
0152 F582              MOV     DPL,A
0154 E4                CLR     A
0155 3400        R     ADDC    A,#HIGH USBFS_DmaChan
0157 F583              MOV     DPH,A
0159 E0                MOVX    A,@DPTR
015A 75F010            MOV     B,#010H
015D 907019            MOV     DPTR,#07019H
0160 120000      E     LCALL   ?C?OFFXADD
0163 EE                MOV     A,R6
0164 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 983
0165 22                RET     
             ; FUNCTION _USBFS_LoadNextInEP (END)

             ; FUNCTION _USBFS_LoadInEP (BEGIN)
                                           ; SOURCE LINE # 1009
0000 900000      R     MOV     DPTR,#pData
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#epNumber
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1011
                                           ; SOURCE LINE # 1018
000B D3                SETB    C
000C 9400              SUBB    A,#00H
000E 5003              JNC     $ + 5H
0010 020000      R     LJMP    ?C0056
0013 E0                MOVX    A,@DPTR
0014 F9                MOV     R1,A
0015 9409              SUBB    A,#09H
0017 4003              JC      $ + 5H
0019 020000      R     LJMP    ?C0056
                                           ; SOURCE LINE # 1019
                                           ; SOURCE LINE # 1020
001C E0                MOVX    A,@DPTR
001D FD                MOV     R5,A
001E 24FF              ADD     A,#0FFH
0020 FF                MOV     R7,A
0021 E4                CLR     A
0022 34FF              ADDC    A,#0FFH
0024 FE                MOV     R6,A
0025 EF                MOV     A,R7
0026 C4                SWAP    A
0027 F8                MOV     R0,A
0028 540F              ANL     A,#0FH
002A C8                XCH     A,R0
002B 68                XRL     A,R0
002C FF                MOV     R7,A
002D EE                MOV     A,R6
002E C4                SWAP    A
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 45  

002F 54F0              ANL     A,#0F0H
0031 48                ORL     A,R0
0032 900000      R     MOV     DPTR,#ri
0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1021
0037 E0                MOVX    A,@DPTR
0038 FC                MOV     R4,A
0039 FB                MOV     R3,A
003A 7A00              MOV     R2,#00H
003C 2488              ADD     A,#088H
003E FE                MOV     R6,A
003F EA                MOV     A,R2
0040 3460              ADDC    A,#060H
0042 A3                INC     DPTR
0043 F0                MOVX    @DPTR,A
0044 A3                INC     DPTR
0045 CE                XCH     A,R6
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1033
0047 900000      R     MOV     DPTR,#length
004A E0                MOVX    A,@DPTR
004B FF                MOV     R7,A
004C ED                MOV     A,R5
004D 75F00B            MOV     B,#0BH
0050 A4                MUL     AB
0051 2400        E     ADD     A,#LOW USBFS_EP+03H
0053 F582              MOV     DPL,A
0055 E4                CLR     A
0056 3400        E     ADDC    A,#HIGH USBFS_EP+03H
0058 F583              MOV     DPH,A
005A E0                MOVX    A,@DPTR
005B 4F                ORL     A,R7
005C FF                MOV     R7,A
005D EB                MOV     A,R3
005E 240C              ADD     A,#0CH
0060 FB                MOV     R3,A
0061 EA                MOV     A,R2
0062 3460              ADDC    A,#060H
0064 8B82              MOV     DPL,R3
0066 F583              MOV     DPH,A
0068 EF                MOV     A,R7
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1034
006A 900000      R     MOV     DPTR,#length
006D E0                MOVX    A,@DPTR
006E A3                INC     DPTR
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 EC                MOV     A,R4
0072 240D              ADD     A,#0DH
0074 FD                MOV     R5,A
0075 E4                CLR     A
0076 3460              ADDC    A,#060H
0078 8D82              MOV     DPL,R5
007A F583              MOV     DPH,A
007C EF                MOV     A,R7
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1050
007E 7400        R     MOV     A,#LOW USBFS_DmaTd
0080 29                ADD     A,R1
0081 F582              MOV     DPL,A
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 46  

0083 E4                CLR     A
0084 3400        R     ADDC    A,#HIGH USBFS_DmaTd
0086 F583              MOV     DPH,A
0088 E0                MOVX    A,@DPTR
0089 B4FF0C            CJNE    A,#0FFH,?C0047
                                           ; SOURCE LINE # 1051
                                           ; SOURCE LINE # 1052
008C 900000      R     MOV     DPTR,#epNumber
008F E0                MOVX    A,@DPTR
0090 FF                MOV     R7,A
0091 A3                INC     DPTR
0092 120000      E     LCALL   ?C?PLDXDATA
0095 120000      R     LCALL   _USBFS_InitEP_DMA
                                           ; SOURCE LINE # 1053
0098         ?C0047:
                                           ; SOURCE LINE # 1081
0098 900000      R     MOV     DPTR,#pData
009B 120000      E     LCALL   ?C?PLDXDATA
009E E9                MOV     A,R1
009F 4A                ORL     A,R2
00A0 4B                ORL     A,R3
00A1 7003              JNZ     $ + 5H
00A3 020000      R     LJMP    ?C0048
                                           ; SOURCE LINE # 1082
                                           ; SOURCE LINE # 1084
00A6 900000      R     MOV     DPTR,#epNumber
00A9 E0                MOVX    A,@DPTR
00AA 2400        R     ADD     A,#LOW USBFS_DmaChan
00AC F582              MOV     DPL,A
00AE E4                CLR     A
00AF 3400        R     ADDC    A,#HIGH USBFS_DmaChan
00B1 F583              MOV     DPH,A
00B3 E0                MOVX    A,@DPTR
00B4 FF                MOV     R7,A
00B5 120000      E     LCALL   _CyDmaChDisable
                                           ; SOURCE LINE # 1086
00B8 900000      R     MOV     DPTR,#length
00BB E0                MOVX    A,@DPTR
00BC FE                MOV     R6,A
00BD A3                INC     DPTR
00BE E0                MOVX    A,@DPTR
00BF FF                MOV     R7,A
00C0 900000      R     MOV     DPTR,#epNumber
00C3 E0                MOVX    A,@DPTR
00C4 FD                MOV     R5,A
00C5 25E0              ADD     A,ACC
00C7 2400        R     ADD     A,#LOW USBFS_inLength
00C9 F582              MOV     DPL,A
00CB E4                CLR     A
00CC 3400        R     ADDC    A,#HIGH USBFS_inLength
00CE F583              MOV     DPH,A
00D0 EE                MOV     A,R6
00D1 F0                MOVX    @DPTR,A
00D2 A3                INC     DPTR
00D3 EF                MOV     A,R7
00D4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1087
00D5 900000      R     MOV     DPTR,#pData
00D8 120000      E     LCALL   ?C?PLDXDATA
00DB ED                MOV     A,R5
00DC 75F003            MOV     B,#03H
00DF A4                MUL     AB
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 47  

00E0 2400        R     ADD     A,#LOW USBFS_inDataPointer
00E2 F582              MOV     DPL,A
00E4 E4                CLR     A
00E5 3400        R     ADDC    A,#HIGH USBFS_inDataPointer
00E7 F583              MOV     DPH,A
00E9 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 1089
00EC 7400        R     MOV     A,#LOW USBFS_DmaTd
00EE 2D                ADD     A,R5
00EF F582              MOV     DPL,A
00F1 E4                CLR     A
00F2 3400        R     ADDC    A,#HIGH USBFS_DmaTd
00F4 F583              MOV     DPH,A
00F6 E0                MOVX    A,@DPTR
00F7 FF                MOV     R7,A
00F8 900000      R     MOV     DPTR,#length
00FB E0                MOVX    A,@DPTR
00FC FA                MOV     R2,A
00FD A3                INC     DPTR
00FE E0                MOVX    A,@DPTR
00FF FB                MOV     R3,A
0100 D3                SETB    C
0101 9420              SUBB    A,#020H
0103 EA                MOV     A,R2
0104 9400              SUBB    A,#00H
0106 4006              JC      ?C0049
0108 7C00              MOV     R4,#00H
010A 7D20              MOV     R5,#020H
010C 8004              SJMP    ?C0050
010E         ?C0049:
010E AC02              MOV     R4,AR2
0110 AD03              MOV     R5,AR3
0112         ?C0050:
0112 900000      R     MOV     DPTR,#epNumber
0115 E0                MOVX    A,@DPTR
0116 2400        R     ADD     A,#LOW USBFS_DmaNextTd
0118 F582              MOV     DPL,A
011A E4                CLR     A
011B 3400        R     ADDC    A,#HIGH USBFS_DmaNextTd
011D F583              MOV     DPH,A
011F E0                MOVX    A,@DPTR
0120 FB                MOV     R3,A
0121 900000      E     MOV     DPTR,#?_CyDmaTdSetConfiguration?BYTE+04H
0124 7411              MOV     A,#011H
0126 F0                MOVX    @DPTR,A
0127 120000      E     LCALL   _CyDmaTdSetConfiguration
                                           ; SOURCE LINE # 1092
012A 900000      R     MOV     DPTR,#epNumber
012D E0                MOVX    A,@DPTR
012E 2400        R     ADD     A,#LOW USBFS_DmaTd
0130 F582              MOV     DPL,A
0132 E4                CLR     A
0133 3400        R     ADDC    A,#HIGH USBFS_DmaTd
0135 F583              MOV     DPH,A
0137 E0                MOVX    A,@DPTR
0138 FF                MOV     R7,A
0139 C007              PUSH    AR7
013B 900000      R     MOV     DPTR,#pData
013E 120000      E     LCALL   ?C?PLDXDATA
0141 E9                MOV     A,R1
0142 EA                MOV     A,R2
0143 E4                CLR     A
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 48  

0144 AD01              MOV     R5,AR1
0146 AC02              MOV     R4,AR2
0148 900000      R     MOV     DPTR,#p
014B E0                MOVX    A,@DPTR
014C FE                MOV     R6,A
014D A3                INC     DPTR
014E E0                MOVX    A,@DPTR
014F FF                MOV     R7,A
0150 E4                CLR     A
0151 EF                MOV     A,R7
0152 EE                MOV     A,R6
0153 E4                CLR     A
0154 AB07              MOV     R3,AR7
0156 AA06              MOV     R2,AR6
0158 D007              POP     AR7
015A 120000      E     LCALL   _CyDmaTdSetAddress
                                           ; SOURCE LINE # 1097
015D 900000      R     MOV     DPTR,#epNumber
0160 E0                MOVX    A,@DPTR
0161 FE                MOV     R6,A
0162 2400        R     ADD     A,#LOW USBFS_DmaNextTd
0164 F582              MOV     DPL,A
0166 E4                CLR     A
0167 3400        R     ADDC    A,#HIGH USBFS_DmaNextTd
0169 F583              MOV     DPH,A
016B E0                MOVX    A,@DPTR
016C FB                MOV     R3,A
016D FF                MOV     R7,A
016E 7400        R     MOV     A,#LOW USBFS_epX_TD_TERMOUT_EN
0170 2E                ADD     A,R6
0171 F582              MOV     DPL,A
0173 E4                CLR     A
0174 3400        R     ADDC    A,#HIGH USBFS_epX_TD_TERMOUT_EN
0176 F583              MOV     DPH,A
0178 E0                MOVX    A,@DPTR
0179 900000      E     MOV     DPTR,#?_CyDmaTdSetConfiguration?BYTE+04H
017C F0                MOVX    @DPTR,A
017D 7D01              MOV     R5,#01H
017F 7C00              MOV     R4,#00H
0181 120000      E     LCALL   _CyDmaTdSetConfiguration
                                           ; SOURCE LINE # 1102
0184 900000      R     MOV     DPTR,#epNumber
0187 E0                MOVX    A,@DPTR
0188 2400        R     ADD     A,#LOW USBFS_DmaNextTd
018A F582              MOV     DPL,A
018C E4                CLR     A
018D 3400        R     ADDC    A,#HIGH USBFS_DmaNextTd
018F F583              MOV     DPH,A
0191 E0                MOVX    A,@DPTR
0192 FF                MOV     R7,A
0193 C007              PUSH    AR7
0195 7B01              MOV     R3,#01H
0197 7A00        R     MOV     R2,#HIGH clearInDataRdyStatus
0199 7900        R     MOV     R1,#LOW clearInDataRdyStatus
019B E9                MOV     A,R1
019C EA                MOV     A,R2
019D E4                CLR     A
019E AD01              MOV     R5,AR1
01A0 AC02              MOV     R4,AR2
01A2 900000      R     MOV     DPTR,#ri
01A5 E0                MOVX    A,@DPTR
01A6 2480              ADD     A,#080H
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 49  

01A8 FF                MOV     R7,A
01A9 E4                CLR     A
01AA 3460              ADDC    A,#060H
01AC FE                MOV     R6,A
01AD E4                CLR     A
01AE EF                MOV     A,R7
01AF EE                MOV     A,R6
01B0 E4                CLR     A
01B1 AB07              MOV     R3,AR7
01B3 AA06              MOV     R2,AR6
01B5 D007              POP     AR7
01B7 120000      E     LCALL   _CyDmaTdSetAddress
                                           ; SOURCE LINE # 1110
01BA 900000      R     MOV     DPTR,#epNumber
01BD E0                MOVX    A,@DPTR
01BE 2400        R     ADD     A,#LOW USBFS_DmaChan
01C0 F582              MOV     DPL,A
01C2 E4                CLR     A
01C3 3400        R     ADDC    A,#HIGH USBFS_DmaChan
01C5 F583              MOV     DPH,A
01C7 E0                MOVX    A,@DPTR
01C8 FF                MOV     R7,A
01C9 120000      E     LCALL   _CyDmaClearPendingDrq
                                           ; SOURCE LINE # 1112
01CC 900000      R     MOV     DPTR,#epNumber
01CF E0                MOVX    A,@DPTR
01D0 FE                MOV     R6,A
01D1 2400        R     ADD     A,#LOW USBFS_DmaChan
01D3 F582              MOV     DPL,A
01D5 E4                CLR     A
01D6 3400        R     ADDC    A,#HIGH USBFS_DmaChan
01D8 F583              MOV     DPH,A
01DA E0                MOVX    A,@DPTR
01DB FF                MOV     R7,A
01DC 7400        R     MOV     A,#LOW USBFS_DmaTd
01DE 2E                ADD     A,R6
01DF F582              MOV     DPL,A
01E1 E4                CLR     A
01E2 3400        R     ADDC    A,#HIGH USBFS_DmaTd
01E4 F583              MOV     DPH,A
01E6 E0                MOVX    A,@DPTR
01E7 FD                MOV     R5,A
01E8 120000      E     LCALL   _CyDmaChSetInitialTd
                                           ; SOURCE LINE # 1113
01EB 900000      R     MOV     DPTR,#epNumber
01EE E0                MOVX    A,@DPTR
01EF 2400        R     ADD     A,#LOW USBFS_DmaChan
01F1 F582              MOV     DPL,A
01F3 E4                CLR     A
01F4 3400        R     ADDC    A,#HIGH USBFS_DmaChan
01F6 F583              MOV     DPH,A
01F8 E0                MOVX    A,@DPTR
01F9 FF                MOV     R7,A
01FA 7D01              MOV     R5,#01H
01FC 120000      E     LCALL   _CyDmaChEnable
                                           ; SOURCE LINE # 1114
01FF 22                RET     
0200         ?C0048:
                                           ; SOURCE LINE # 1116
                                           ; SOURCE LINE # 1117
0200 900000      R     MOV     DPTR,#epNumber
0203 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 50  

0204 FF                MOV     R7,A
0205 75F00B            MOV     B,#0BH
0208 A4                MUL     AB
0209 2400        E     ADD     A,#LOW USBFS_EP+01H
020B F582              MOV     DPL,A
020D E4                CLR     A
020E 3400        E     ADDC    A,#HIGH USBFS_EP+01H
0210 F583              MOV     DPH,A
0212 E4                CLR     A
0213 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1118
0214 900000      R     MOV     DPTR,#length
0217 E0                MOVX    A,@DPTR
0218 FC                MOV     R4,A
0219 A3                INC     DPTR
021A E0                MOVX    A,@DPTR
021B FD                MOV     R5,A
021C D3                SETB    C
021D 9400              SUBB    A,#00H
021F EC                MOV     A,R4
0220 9400              SUBB    A,#00H
0222 5003              JNC     $ + 5H
0224 020000      R     LJMP    ?C0052
                                           ; SOURCE LINE # 1119
                                           ; SOURCE LINE # 1121
0227 EF                MOV     A,R7
0228 25E0              ADD     A,ACC
022A 2400        R     ADD     A,#LOW USBFS_inLength
022C F582              MOV     DPL,A
022E E4                CLR     A
022F 3400        R     ADDC    A,#HIGH USBFS_inLength
0231 F583              MOV     DPH,A
0233 EC                MOV     A,R4
0234 F0                MOVX    @DPTR,A
0235 A3                INC     DPTR
0236 ED                MOV     A,R5
0237 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1122
0238 7400        R     MOV     A,#LOW USBFS_inBufFull
023A 2F                ADD     A,R7
023B F582              MOV     DPL,A
023D E4                CLR     A
023E 3400        R     ADDC    A,#HIGH USBFS_inBufFull
0240 F583              MOV     DPH,A
0242 E4                CLR     A
0243 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1123
0244 7400        R     MOV     A,#LOW USBFS_DmaChan
0246 2F                ADD     A,R7
0247 F582              MOV     DPL,A
0249 E4                CLR     A
024A 3400        R     ADDC    A,#HIGH USBFS_DmaChan
024C F583              MOV     DPH,A
024E E0                MOVX    A,@DPTR
024F FF                MOV     R7,A
0250 120000      E     LCALL   _CyDmaChDisable
                                           ; SOURCE LINE # 1125
0253 900000      R     MOV     DPTR,#epNumber
0256 E0                MOVX    A,@DPTR
0257 F9                MOV     R1,A
0258 2400        R     ADD     A,#LOW USBFS_DmaTd
025A F582              MOV     DPL,A
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 51  

025C E4                CLR     A
025D 3400        R     ADDC    A,#HIGH USBFS_DmaTd
025F F583              MOV     DPH,A
0261 E0                MOVX    A,@DPTR
0262 FF                MOV     R7,A
0263 900000      R     MOV     DPTR,#length
0266 E0                MOVX    A,@DPTR
0267 FA                MOV     R2,A
0268 A3                INC     DPTR
0269 E0                MOVX    A,@DPTR
026A FB                MOV     R3,A
026B D3                SETB    C
026C 9420              SUBB    A,#020H
026E EA                MOV     A,R2
026F 9400              SUBB    A,#00H
0271 4006              JC      ?C0053
0273 7C00              MOV     R4,#00H
0275 7D20              MOV     R5,#020H
0277 8004              SJMP    ?C0054
0279         ?C0053:
0279 AC02              MOV     R4,AR2
027B AD03              MOV     R5,AR3
027D         ?C0054:
027D 7400        R     MOV     A,#LOW USBFS_DmaNextTd
027F 29                ADD     A,R1
0280 F582              MOV     DPL,A
0282 E4                CLR     A
0283 3400        R     ADDC    A,#HIGH USBFS_DmaNextTd
0285 F583              MOV     DPH,A
0287 E0                MOVX    A,@DPTR
0288 FB                MOV     R3,A
0289 900000      E     MOV     DPTR,#?_CyDmaTdSetConfiguration?BYTE+04H
028C 7411              MOV     A,#011H
028E F0                MOVX    @DPTR,A
028F 120000      E     LCALL   _CyDmaTdSetConfiguration
                                           ; SOURCE LINE # 1130
0292 900000      R     MOV     DPTR,#epNumber
0295 E0                MOVX    A,@DPTR
0296 75F003            MOV     B,#03H
0299 A4                MUL     AB
029A 2400        R     ADD     A,#LOW USBFS_inDataPointer
029C F582              MOV     DPL,A
029E E4                CLR     A
029F 3400        R     ADDC    A,#HIGH USBFS_inDataPointer
02A1 F583              MOV     DPH,A
02A3 120000      E     LCALL   ?C?PLDXDATA
02A6 E9                MOV     A,R1
02A7 EA                MOV     A,R2
02A8 E4                CLR     A
02A9 AD01              MOV     R5,AR1
02AB AC02              MOV     R4,AR2
02AD 900000      R     MOV     DPTR,#epNumber
02B0 E0                MOVX    A,@DPTR
02B1 2400        R     ADD     A,#LOW USBFS_DmaTd
02B3 F582              MOV     DPL,A
02B5 E4                CLR     A
02B6 3400        R     ADDC    A,#HIGH USBFS_DmaTd
02B8 F583              MOV     DPH,A
02BA E0                MOVX    A,@DPTR
02BB FF                MOV     R7,A
02BC C007              PUSH    AR7
02BE 900000      R     MOV     DPTR,#p
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 52  

02C1 E0                MOVX    A,@DPTR
02C2 FE                MOV     R6,A
02C3 A3                INC     DPTR
02C4 E0                MOVX    A,@DPTR
02C5 FF                MOV     R7,A
02C6 E4                CLR     A
02C7 EF                MOV     A,R7
02C8 EE                MOV     A,R6
02C9 E4                CLR     A
02CA AB07              MOV     R3,AR7
02CC AA06              MOV     R2,AR6
02CE D007              POP     AR7
02D0 120000      E     LCALL   _CyDmaTdSetAddress
                                           ; SOURCE LINE # 1132
02D3 900000      R     MOV     DPTR,#epNumber
02D6 E0                MOVX    A,@DPTR
02D7 2400        R     ADD     A,#LOW USBFS_DmaChan
02D9 F582              MOV     DPL,A
02DB E4                CLR     A
02DC 3400        R     ADDC    A,#HIGH USBFS_DmaChan
02DE F583              MOV     DPH,A
02E0 E0                MOVX    A,@DPTR
02E1 FF                MOV     R7,A
02E2 120000      E     LCALL   _CyDmaClearPendingDrq
                                           ; SOURCE LINE # 1134
02E5 900000      R     MOV     DPTR,#epNumber
02E8 E0                MOVX    A,@DPTR
02E9 FE                MOV     R6,A
02EA 2400        R     ADD     A,#LOW USBFS_DmaChan
02EC F582              MOV     DPL,A
02EE E4                CLR     A
02EF 3400        R     ADDC    A,#HIGH USBFS_DmaChan
02F1 F583              MOV     DPH,A
02F3 E0                MOVX    A,@DPTR
02F4 FF                MOV     R7,A
02F5 7400        R     MOV     A,#LOW USBFS_DmaTd
02F7 2E                ADD     A,R6
02F8 F582              MOV     DPL,A
02FA E4                CLR     A
02FB 3400        R     ADDC    A,#HIGH USBFS_DmaTd
02FD F583              MOV     DPH,A
02FF E0                MOVX    A,@DPTR
0300 FD                MOV     R5,A
0301 120000      E     LCALL   _CyDmaChSetInitialTd
                                           ; SOURCE LINE # 1135
0304 900000      R     MOV     DPTR,#epNumber
0307 E0                MOVX    A,@DPTR
0308 2400        R     ADD     A,#LOW USBFS_DmaChan
030A F582              MOV     DPL,A
030C E4                CLR     A
030D 3400        R     ADDC    A,#HIGH USBFS_DmaChan
030F F583              MOV     DPH,A
0311 E0                MOVX    A,@DPTR
0312 FF                MOV     R7,A
0313 7D01              MOV     R5,#01H
0315 120000      E     LCALL   _CyDmaChEnable
                                           ; SOURCE LINE # 1140
0318 900000      R     MOV     DPTR,#ri
031B E0                MOVX    A,@DPTR
031C 2480              ADD     A,#080H
031E FF                MOV     R7,A
031F E4                CLR     A
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 53  

0320 3460              ADDC    A,#060H
0322 8F82              MOV     DPL,R7
0324 F583              MOV     DPH,A
0326 E0                MOVX    A,@DPTR
0327 4401              ORL     A,#01H
0329 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1143
032A 22                RET     
032B         ?C0052:
                                           ; SOURCE LINE # 1145
                                           ; SOURCE LINE # 1147
032B 900000      R     MOV     DPTR,#epNumber
032E E0                MOVX    A,@DPTR
032F 75F00B            MOV     B,#0BH
0332 A4                MUL     AB
0333 2400        E     ADD     A,#LOW USBFS_EP+05H
0335 F582              MOV     DPL,A
0337 E4                CLR     A
0338 3400        E     ADDC    A,#HIGH USBFS_EP+05H
033A F583              MOV     DPH,A
033C E0                MOVX    A,@DPTR
033D FF                MOV     R7,A
033E 900000      R     MOV     DPTR,#ri
0341 E0                MOVX    A,@DPTR
0342 240E              ADD     A,#0EH
0344 FD                MOV     R5,A
0345 E4                CLR     A
0346 3460              ADDC    A,#060H
0348 8D82              MOV     DPL,R5
034A F583              MOV     DPH,A
034C EF                MOV     A,R7
034D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1148
                                           ; SOURCE LINE # 1149
                                           ; SOURCE LINE # 1151
                                           ; SOURCE LINE # 1152
034E         ?C0056:
034E 22                RET     
             ; FUNCTION _USBFS_LoadInEP (END)

             ; FUNCTION _USBFS_ReadOutEP (BEGIN)
                                           ; SOURCE LINE # 1180
0000 900000      R     MOV     DPTR,#pData
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#epNumber
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1182
                                           ; SOURCE LINE # 1192
000B D3                SETB    C
000C 9400              SUBB    A,#00H
000E 5003              JNC     $ + 5H
0010 020000      R     LJMP    ?C0057
0013 E0                MOVX    A,@DPTR
0014 9409              SUBB    A,#09H
0016 4003              JC      $ + 5H
0018 020000      R     LJMP    ?C0057
001B A3                INC     DPTR
001C 120000      E     LCALL   ?C?PLDXDATA
001F E9                MOV     A,R1
0020 4A                ORL     A,R2
0021 4B                ORL     A,R3
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 54  

0022 7003              JNZ     $ + 5H
0024 020000      R     LJMP    ?C0057
                                           ; SOURCE LINE # 1193
                                           ; SOURCE LINE # 1194
0027 900000      R     MOV     DPTR,#epNumber
002A E0                MOVX    A,@DPTR
002B FD                MOV     R5,A
002C 24FF              ADD     A,#0FFH
002E FF                MOV     R7,A
002F E4                CLR     A
0030 34FF              ADDC    A,#0FFH
0032 FE                MOV     R6,A
0033 EF                MOV     A,R7
0034 C4                SWAP    A
0035 F8                MOV     R0,A
0036 540F              ANL     A,#0FH
0038 C8                XCH     A,R0
0039 68                XRL     A,R0
003A FF                MOV     R7,A
003B EE                MOV     A,R6
003C C4                SWAP    A
003D 54F0              ANL     A,#0F0H
003F 48                ORL     A,R0
;---- Variable 'ri' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1195
0040 EF                MOV     A,R7
0041 2488              ADD     A,#088H
0043 FE                MOV     R6,A
0044 E4                CLR     A
0045 3460              ADDC    A,#060H
0047 900000      R     MOV     DPTR,#p
004A F0                MOVX    @DPTR,A
004B A3                INC     DPTR
004C CE                XCH     A,R6
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1217
004E 7400        R     MOV     A,#LOW USBFS_DmaTd
0050 2D                ADD     A,R5
0051 F582              MOV     DPL,A
0053 E4                CLR     A
0054 3400        R     ADDC    A,#HIGH USBFS_DmaTd
0056 F583              MOV     DPH,A
0058 E0                MOVX    A,@DPTR
0059 B4FF0C            CJNE    A,#0FFH,?C0058
                                           ; SOURCE LINE # 1218
                                           ; SOURCE LINE # 1219
005C 900000      R     MOV     DPTR,#epNumber
005F E0                MOVX    A,@DPTR
0060 FF                MOV     R7,A
0061 A3                INC     DPTR
0062 120000      E     LCALL   ?C?PLDXDATA
0065 120000      R     LCALL   _USBFS_InitEP_DMA
                                           ; SOURCE LINE # 1220
0068         ?C0058:
                                           ; SOURCE LINE # 1242
0068 900000      R     MOV     DPTR,#epNumber
006B E0                MOVX    A,@DPTR
006C 2400        R     ADD     A,#LOW USBFS_DmaChan
006E F582              MOV     DPL,A
0070 E4                CLR     A
0071 3400        R     ADDC    A,#HIGH USBFS_DmaChan
0073 F583              MOV     DPH,A
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 55  

0075 E0                MOVX    A,@DPTR
0076 FF                MOV     R7,A
0077 120000      E     LCALL   _CyDmaChDisable
                                           ; SOURCE LINE # 1243
007A 900000      R     MOV     DPTR,#epNumber
007D E0                MOVX    A,@DPTR
007E 2400        R     ADD     A,#LOW USBFS_DmaTd
0080 F582              MOV     DPL,A
0082 E4                CLR     A
0083 3400        R     ADDC    A,#HIGH USBFS_DmaTd
0085 F583              MOV     DPH,A
0087 E0                MOVX    A,@DPTR
0088 FB                MOV     R3,A
0089 FF                MOV     R7,A
008A 900000      R     MOV     DPTR,#length
008D E0                MOVX    A,@DPTR
008E FC                MOV     R4,A
008F A3                INC     DPTR
0090 E0                MOVX    A,@DPTR
0091 FD                MOV     R5,A
0092 900000      E     MOV     DPTR,#?_CyDmaTdSetConfiguration?BYTE+04H
0095 7412              MOV     A,#012H
0097 F0                MOVX    @DPTR,A
0098 120000      E     LCALL   _CyDmaTdSetConfiguration
                                           ; SOURCE LINE # 1245
009B 900000      R     MOV     DPTR,#epNumber
009E E0                MOVX    A,@DPTR
009F 2400        R     ADD     A,#LOW USBFS_DmaTd
00A1 F582              MOV     DPL,A
00A3 E4                CLR     A
00A4 3400        R     ADDC    A,#HIGH USBFS_DmaTd
00A6 F583              MOV     DPH,A
00A8 E0                MOVX    A,@DPTR
00A9 FF                MOV     R7,A
00AA C007              PUSH    AR7
00AC 900000      R     MOV     DPTR,#p
00AF E0                MOVX    A,@DPTR
00B0 FE                MOV     R6,A
00B1 A3                INC     DPTR
00B2 E0                MOVX    A,@DPTR
00B3 FF                MOV     R7,A
00B4 E4                CLR     A
00B5 EF                MOV     A,R7
00B6 EE                MOV     A,R6
00B7 E4                CLR     A
00B8 AD07              MOV     R5,AR7
00BA AC06              MOV     R4,AR6
00BC C005              PUSH    AR5
00BE 900000      R     MOV     DPTR,#pData
00C1 120000      E     LCALL   ?C?PLDXDATA
00C4 E9                MOV     A,R1
00C5 EA                MOV     A,R2
00C6 E4                CLR     A
00C7 AB01              MOV     R3,AR1
00C9 D005              POP     AR5
00CB D007              POP     AR7
00CD 120000      E     LCALL   _CyDmaTdSetAddress
                                           ; SOURCE LINE # 1248
00D0 900000      R     MOV     DPTR,#epNumber
00D3 E0                MOVX    A,@DPTR
00D4 2400        R     ADD     A,#LOW USBFS_DmaChan
00D6 F582              MOV     DPL,A
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 56  

00D8 E4                CLR     A
00D9 3400        R     ADDC    A,#HIGH USBFS_DmaChan
00DB F583              MOV     DPH,A
00DD E0                MOVX    A,@DPTR
00DE FF                MOV     R7,A
00DF 120000      E     LCALL   _CyDmaClearPendingDrq
                                           ; SOURCE LINE # 1250
00E2 900000      R     MOV     DPTR,#epNumber
00E5 E0                MOVX    A,@DPTR
00E6 FE                MOV     R6,A
00E7 2400        R     ADD     A,#LOW USBFS_DmaChan
00E9 F582              MOV     DPL,A
00EB E4                CLR     A
00EC 3400        R     ADDC    A,#HIGH USBFS_DmaChan
00EE F583              MOV     DPH,A
00F0 E0                MOVX    A,@DPTR
00F1 FF                MOV     R7,A
00F2 7400        R     MOV     A,#LOW USBFS_DmaTd
00F4 2E                ADD     A,R6
00F5 F582              MOV     DPL,A
00F7 E4                CLR     A
00F8 3400        R     ADDC    A,#HIGH USBFS_DmaTd
00FA F583              MOV     DPH,A
00FC E0                MOVX    A,@DPTR
00FD FD                MOV     R5,A
00FE 120000      E     LCALL   _CyDmaChSetInitialTd
                                           ; SOURCE LINE # 1251
0101 900000      R     MOV     DPTR,#epNumber
0104 E0                MOVX    A,@DPTR
0105 2400        R     ADD     A,#LOW USBFS_DmaChan
0107 F582              MOV     DPL,A
0109 E4                CLR     A
010A 3400        R     ADDC    A,#HIGH USBFS_DmaChan
010C F583              MOV     DPH,A
010E E0                MOVX    A,@DPTR
010F FF                MOV     R7,A
0110 7D01              MOV     R5,#01H
0112 120000      E     LCALL   _CyDmaChEnable
                                           ; SOURCE LINE # 1255
0115 8007              SJMP    ?C0059
0117         ?C0057:
                                           ; SOURCE LINE # 1257
                                           ; SOURCE LINE # 1258
0117 E4                CLR     A
0118 900000      R     MOV     DPTR,#length
011B F0                MOVX    @DPTR,A
011C A3                INC     DPTR
011D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1259
011E         ?C0059:
                                           ; SOURCE LINE # 1261
011E 900000      R     MOV     DPTR,#length
0121 E0                MOVX    A,@DPTR
0122 FE                MOV     R6,A
0123 A3                INC     DPTR
0124 E0                MOVX    A,@DPTR
0125 FF                MOV     R7,A
                                           ; SOURCE LINE # 1262
0126         ?C0060:
0126 22                RET     
             ; FUNCTION _USBFS_ReadOutEP (END)

C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 57  

             ; FUNCTION _USBFS_EnableOutEP (BEGIN)
                                           ; SOURCE LINE # 1287
;---- Variable 'epNumber' assigned to Register 'R5' ----
0000 AD07              MOV     R5,AR7
                                           ; SOURCE LINE # 1288
                                           ; SOURCE LINE # 1291
0002 ED                MOV     A,R5
0003 D3                SETB    C
0004 9400              SUBB    A,#00H
0006 4047              JC      ?C0062
0008 ED                MOV     A,R5
0009 9409              SUBB    A,#09H
000B 5042              JNC     ?C0062
                                           ; SOURCE LINE # 1292
                                           ; SOURCE LINE # 1293
000D ED                MOV     A,R5
000E 24FF              ADD     A,#0FFH
0010 FF                MOV     R7,A
0011 E4                CLR     A
0012 34FF              ADDC    A,#0FFH
0014 FE                MOV     R6,A
0015 EF                MOV     A,R7
0016 C4                SWAP    A
0017 F8                MOV     R0,A
0018 540F              ANL     A,#0FH
001A C8                XCH     A,R0
001B 68                XRL     A,R0
001C FF                MOV     R7,A
001D EE                MOV     A,R6
001E C4                SWAP    A
001F 54F0              ANL     A,#0F0H
0021 48                ORL     A,R0
;---- Variable 'ri' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1294
0022 ED                MOV     A,R5
0023 75F00B            MOV     B,#0BH
0026 A4                MUL     AB
0027 2400        E     ADD     A,#LOW USBFS_EP+01H
0029 F582              MOV     DPL,A
002B E4                CLR     A
002C 3400        E     ADDC    A,#HIGH USBFS_EP+01H
002E F583              MOV     DPH,A
0030 E4                CLR     A
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1296
0032 ED                MOV     A,R5
0033 75F00B            MOV     B,#0BH
0036 A4                MUL     AB
0037 2400        E     ADD     A,#LOW USBFS_EP+05H
0039 F582              MOV     DPL,A
003B E4                CLR     A
003C 3400        E     ADDC    A,#HIGH USBFS_EP+05H
003E F583              MOV     DPH,A
0040 E0                MOVX    A,@DPTR
0041 FE                MOV     R6,A
0042 EF                MOV     A,R7
0043 240E              ADD     A,#0EH
0045 FD                MOV     R5,A
0046 E4                CLR     A
0047 3460              ADDC    A,#060H
0049 8D82              MOV     DPL,R5
004B F583              MOV     DPH,A
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 58  

004D EE                MOV     A,R6
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1297
                                           ; SOURCE LINE # 1298
004F         ?C0062:
004F 22                RET     
             ; FUNCTION _USBFS_EnableOutEP (END)

             ; FUNCTION _USBFS_DisableOutEP (BEGIN)
                                           ; SOURCE LINE # 1317
;---- Variable 'epNumber' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1318
                                           ; SOURCE LINE # 1321
0000 EF                MOV     A,R7
0001 D3                SETB    C
0002 9400              SUBB    A,#00H
0004 4028              JC      ?C0064
0006 EF                MOV     A,R7
0007 9409              SUBB    A,#09H
0009 5023              JNC     ?C0064
                                           ; SOURCE LINE # 1322
                                           ; SOURCE LINE # 1323
000B EF                MOV     A,R7
000C 24FF              ADD     A,#0FFH
000E FF                MOV     R7,A
000F E4                CLR     A
0010 34FF              ADDC    A,#0FFH
0012 FE                MOV     R6,A
0013 EF                MOV     A,R7
0014 C4                SWAP    A
0015 F8                MOV     R0,A
0016 540F              ANL     A,#0FH
0018 C8                XCH     A,R0
0019 68                XRL     A,R0
001A FF                MOV     R7,A
001B EE                MOV     A,R6
001C C4                SWAP    A
001D 54F0              ANL     A,#0F0H
001F 48                ORL     A,R0
;---- Variable 'ri' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1325
0020 EF                MOV     A,R7
0021 240E              ADD     A,#0EH
0023 FF                MOV     R7,A
0024 E4                CLR     A
0025 3460              ADDC    A,#060H
0027 8F82              MOV     DPL,R7
0029 F583              MOV     DPH,A
002B 7408              MOV     A,#08H
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1326
                                           ; SOURCE LINE # 1327
002E         ?C0064:
002E 22                RET     
             ; FUNCTION _USBFS_DisableOutEP (END)

             ; FUNCTION _USBFS_Force (BEGIN)
                                           ; SOURCE LINE # 1348
;---- Variable 'bState' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1349
                                           ; SOURCE LINE # 1350
0000 906010            MOV     DPTR,#06010H
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 59  

0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1351
0005 22                RET     
             ; FUNCTION _USBFS_Force (END)

             ; FUNCTION _USBFS_GetEPAckState (BEGIN)
                                           ; SOURCE LINE # 1369
;---- Variable 'epNumber' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1370
                                           ; SOURCE LINE # 1372
;---- Variable 'cr' assigned to Register 'R5' ----
0000 E4                CLR     A
0001 FD                MOV     R5,A
                                           ; SOURCE LINE # 1374
0002 EF                MOV     A,R7
0003 D3                SETB    C
0004 9400              SUBB    A,#00H
0006 4029              JC      ?C0066
0008 EF                MOV     A,R7
0009 9409              SUBB    A,#09H
000B 5024              JNC     ?C0066
                                           ; SOURCE LINE # 1375
                                           ; SOURCE LINE # 1376
000D EF                MOV     A,R7
000E 24FF              ADD     A,#0FFH
0010 FF                MOV     R7,A
0011 E4                CLR     A
0012 34FF              ADDC    A,#0FFH
0014 FE                MOV     R6,A
0015 EF                MOV     A,R7
0016 C4                SWAP    A
0017 F8                MOV     R0,A
0018 540F              ANL     A,#0FH
001A C8                XCH     A,R0
001B 68                XRL     A,R0
001C FF                MOV     R7,A
001D EE                MOV     A,R6
001E C4                SWAP    A
001F 54F0              ANL     A,#0F0H
0021 48                ORL     A,R0
;---- Variable 'ri' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1377
0022 EF                MOV     A,R7
0023 240E              ADD     A,#0EH
0025 FF                MOV     R7,A
0026 E4                CLR     A
0027 3460              ADDC    A,#060H
0029 8F82              MOV     DPL,R7
002B F583              MOV     DPH,A
002D E0                MOVX    A,@DPTR
002E 5410              ANL     A,#010H
0030 FD                MOV     R5,A
                                           ; SOURCE LINE # 1378
0031         ?C0066:
                                           ; SOURCE LINE # 1380
0031 AF05              MOV     R7,AR5
                                           ; SOURCE LINE # 1381
0033         ?C0067:
0033 22                RET     
             ; FUNCTION _USBFS_GetEPAckState (END)

C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 60  

             ; FUNCTION _USBFS_SetPowerStatus (BEGIN)
                                           ; SOURCE LINE # 1406
;---- Variable 'powerStatus' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1407
                                           ; SOURCE LINE # 1408
0000 EF                MOV     A,R7
0001 6008              JZ      ?C0068
                                           ; SOURCE LINE # 1409
                                           ; SOURCE LINE # 1410
0003 900000      E     MOV     DPTR,#USBFS_deviceStatus
0006 E0                MOVX    A,@DPTR
0007 4401              ORL     A,#01H
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1411
000A 22                RET     
000B         ?C0068:
                                           ; SOURCE LINE # 1413
                                           ; SOURCE LINE # 1414
000B 900000      E     MOV     DPTR,#USBFS_deviceStatus
000E E0                MOVX    A,@DPTR
000F 54FE              ANL     A,#0FEH
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1415
                                           ; SOURCE LINE # 1416
0012         ?C0070:
0012 22                RET     
             ; FUNCTION _USBFS_SetPowerStatus (END)

             ; FUNCTION USBFS_VBusPresent (BEGIN)
                                           ; SOURCE LINE # 1435
                                           ; SOURCE LINE # 1436
                                           ; SOURCE LINE # 1437
0000 905111            MOV     DPTR,#05111H
0003 E0                MOVX    A,@DPTR
0004 5480              ANL     A,#080H
0006 6004              JZ      ?C0071
0008 7F01              MOV     R7,#01H
000A 8002              SJMP    ?C0072
000C         ?C0071:
000C 7F00              MOV     R7,#00H
000E         ?C0072:
                                           ; SOURCE LINE # 1438
000E         ?C0073:
000E 22                RET     
             ; FUNCTION USBFS_VBusPresent (END)

             ; FUNCTION USBFS_RWUEnabled (BEGIN)
                                           ; SOURCE LINE # 1461
                                           ; SOURCE LINE # 1462
                                           ; SOURCE LINE # 1463
;---- Variable 'result' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
                                           ; SOURCE LINE # 1464
0002 900000      E     MOV     DPTR,#USBFS_deviceStatus
0005 E0                MOVX    A,@DPTR
0006 5402              ANL     A,#02H
0008 6001              JZ      ?C0074
                                           ; SOURCE LINE # 1465
                                           ; SOURCE LINE # 1466
000A 0F                INC     R7
                                           ; SOURCE LINE # 1467
C51 COMPILER V9.51   USBFS                                                                 10/22/2015 22:07:37 PAGE 61  

000B         ?C0074:
                                           ; SOURCE LINE # 1469
                                           ; SOURCE LINE # 1470
000B         ?C0075:
000B 22                RET     
             ; FUNCTION USBFS_RWUEnabled (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2763    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     92      32
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
