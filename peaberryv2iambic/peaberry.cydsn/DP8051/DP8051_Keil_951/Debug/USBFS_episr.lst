C51 COMPILER V9.51   USBFS_EPISR                                                           10/22/2015 22:07:38 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USBFS_EPISR
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\USBFS_episr.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\USBFS_episr.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2)
                    - PR(.\DP8051\DP8051_Keil_951\Debug/USBFS_episr.lst) CD OT(5,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\USBFS_episr.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: USBFS_episr.c
   3          * Version 2.80
   4          *
   5          * Description:
   6          *  Data endpoint Interrupt Service Routines
   7          *
   8          * Note:
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "USBFS.h"
  18          #include "USBFS_pvt.h"
  19          
  20          #if (defined(USBFS_ENABLE_MIDI_STREAMING) && (USBFS_ENABLE_MIDI_API != 0u))
                  #include "USBFS_midi.h"
              #endif /* (defined(USBFS_ENABLE_MIDI_STREAMING) && (USBFS_ENABLE_MIDI_API != 0u)) */
  23          #if ((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u))
  24              #include "USBFS_EP8_DMA_Done_SR.h"
  25              #include "USBFS_EP17_DMA_Done_SR.h"
  26          #endif /* (USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u) */
  27          
  28          
  29          /***************************************
  30          * Custom Declarations
  31          ***************************************/
  32          /* `#START CUSTOM_DECLARATIONS` Place your declaration here */
  33          
  34          /* `#END` */
  35          
  36          
  37          #if(USBFS_EP1_ISR_REMOVE == 0u)
              
              
                  /******************************************************************************
                  * Function Name: USBFS_EP_1_ISR
                  *******************************************************************************
                  *
                  * Summary:
                  *  Endpoint 1 Interrupt Service Routine
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  ******************************************************************************/
C51 COMPILER V9.51   USBFS_EPISR                                                           10/22/2015 22:07:38 PAGE 2   

                  CY_ISR(USBFS_EP_1_ISR)
                  {
                      #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT)  && \
                                   USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          uint8 int_en;
                      #endif /* USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3 */
              
                      #ifdef USBFS_EP_1_ISR_ENTRY_CALLBACK
                          USBFS_EP_1_ISR_EntryCallback();
                      #endif /* USBFS_EP_1_ISR_ENTRY_CALLBACK */
              
                      /* `#START EP1_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          int_en = EA;
                          CyGlobalIntEnable;  /* Make sure nested interrupt is enabled */
                      #endif /* USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3 */
              
                      CY_GET_REG8(USBFS_SIE_EP1_CR0_PTR); /* Must read the mode reg */
                      /* Do not toggle ISOC endpoint */
                      if((USBFS_EP[USBFS_EP1].attrib & USBFS_EP_TYPE_MASK) !=
                                                                                                  USBFS_EP_TYPE_ISOC)
                      {
                          USBFS_EP[USBFS_EP1].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
                      }
                      USBFS_EP[USBFS_EP1].apiEpState = USBFS_EVENT_PENDING;
                      CY_SET_REG8(USBFS_SIE_EP_INT_SR_PTR, CY_GET_REG8(USBFS_SIE_EP_INT_SR_PTR) &
                                                                                  (uint8)~USBFS_SIE_EP_INT_EP1_MASK);
              
                      #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_ISR_SERVICE_MIDI_OUT)
                          if(USBFS_midi_out_ep == USBFS_EP1)
                          {
                              USBFS_MIDI_OUT_EP_Service();
                          }
                      #endif /*  USBFS_ISR_SERVICE_MIDI_OUT */
              
                      /* `#START EP1_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #ifdef USBFS_EP_1_ISR_EXIT_CALLBACK
                          USBFS_EP_1_ISR_ExitCallback();
                      #endif /* USBFS_EP_1_ISR_EXIT_CALLBACK */
              
                      #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          EA = int_en;
                      #endif /* USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3 */
                  }
              
              #endif   /*  USBFS_EP1_ISR_REMOVE */
 109          
 110          
 111          #if(USBFS_EP2_ISR_REMOVE == 0u)
 112          
 113              /*******************************************************************************
 114              * Function Name: USBFS_EP_2_ISR
 115              ********************************************************************************
C51 COMPILER V9.51   USBFS_EPISR                                                           10/22/2015 22:07:38 PAGE 3   

 116              *
 117              * Summary:
 118              *  Endpoint 2 Interrupt Service Routine
 119              *
 120              * Parameters:
 121              *  None.
 122              *
 123              * Return:
 124              *  None.
 125              *
 126              *******************************************************************************/
 127              CY_ISR(USBFS_EP_2_ISR)
 128              {
 129   1              #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
 130   1                           USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          uint8 int_en;
                      #endif /* USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3 */
 133   1      
 134   1              #ifdef USBFS_EP_2_ISR_ENTRY_CALLBACK
                          USBFS_EP_2_ISR_EntryCallback();
                      #endif /* USBFS_EP_2_ISR_ENTRY_CALLBACK */
 137   1      
 138   1              /* `#START EP2_USER_CODE` Place your code here */
 139   1      
 140   1              /* `#END` */
 141   1      
 142   1              #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
 143   1                           USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          int_en = EA;
                          CyGlobalIntEnable;  /* Make sure nested interrupt is enabled */
                      #endif /* USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3 */
 147   1      
 148   1              CY_GET_REG8(USBFS_SIE_EP2_CR0_PTR); /* Must read the mode reg */
 149   1              /* Do not toggle ISOC endpoint */
 150   1              if((USBFS_EP[USBFS_EP2].attrib & USBFS_EP_TYPE_MASK) !=
 151   1                                                                                          USBFS_EP_TYPE_ISOC)
 152   1              {
 153   2                  USBFS_EP[USBFS_EP2].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
 154   2              }
 155   1              USBFS_EP[USBFS_EP2].apiEpState = USBFS_EVENT_PENDING;
 156   1              CY_SET_REG8(USBFS_SIE_EP_INT_SR_PTR, CY_GET_REG8(USBFS_SIE_EP_INT_SR_PTR)
 157   1                                                                              & (uint8)~USBFS_SIE_EP_INT_EP2_MAS
             -K);
 158   1      
 159   1              #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
 160   1                           USBFS_ISR_SERVICE_MIDI_OUT)
                          if(USBFS_midi_out_ep == USBFS_EP2)
                          {
                              USBFS_MIDI_OUT_EP_Service();
                          }
                      #endif /*  USBFS_ISR_SERVICE_MIDI_OUT */
 166   1      
 167   1              /* `#START EP2_END_USER_CODE` Place your code here */
 168   1      
 169   1              /* `#END` */
 170   1      
 171   1              #ifdef USBFS_EP_2_ISR_EXIT_CALLBACK
                          USBFS_EP_2_ISR_ExitCallback();
                      #endif /* USBFS_EP_2_ISR_EXIT_CALLBACK */
 174   1              
 175   1              #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
 176   1                           USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
C51 COMPILER V9.51   USBFS_EPISR                                                           10/22/2015 22:07:38 PAGE 4   

                          EA = int_en;
                      #endif /* USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3 */
 179   1          }
 180          
 181          #endif   /*  USBFS_EP2_ISR_REMOVE */
 182          
 183          
 184          #if(USBFS_EP3_ISR_REMOVE == 0u)
 185          
 186              /*******************************************************************************
 187              * Function Name: USBFS_EP_3_ISR
 188              ********************************************************************************
 189              *
 190              * Summary:
 191              *  Endpoint 3 Interrupt Service Routine
 192              *
 193              * Parameters:
 194              *  None.
 195              *
 196              * Return:
 197              *  None.
 198              *
 199              *******************************************************************************/
 200              CY_ISR(USBFS_EP_3_ISR)
 201              {
 202   1              #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
 203   1                           USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          uint8 int_en;
                      #endif /* USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3 */
 206   1      
 207   1              #ifdef USBFS_EP_3_ISR_ENTRY_CALLBACK
                          USBFS_EP_3_ISR_EntryCallback();
                      #endif /* USBFS_EP_3_ISR_ENTRY_CALLBACK */
 210   1      
 211   1              /* `#START EP3_USER_CODE` Place your code here */
 212   1      
 213   1              /* `#END` */
 214   1      
 215   1              #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
 216   1                           USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          int_en = EA;
                          CyGlobalIntEnable;  /* Make sure nested interrupt is enabled */
                      #endif /* CY_PSOC3 & USBFS_ISR_SERVICE_MIDI_OUT  */
 220   1      
 221   1              CY_GET_REG8(USBFS_SIE_EP3_CR0_PTR); /* Must read the mode reg */
 222   1              /* Do not toggle ISOC endpoint */
 223   1              if((USBFS_EP[USBFS_EP3].attrib & USBFS_EP_TYPE_MASK) !=
 224   1                                                                                          USBFS_EP_TYPE_ISOC)
 225   1              {
 226   2                  USBFS_EP[USBFS_EP3].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
 227   2              }
 228   1              USBFS_EP[USBFS_EP3].apiEpState = USBFS_EVENT_PENDING;
 229   1              CY_SET_REG8(USBFS_SIE_EP_INT_SR_PTR, CY_GET_REG8(USBFS_SIE_EP_INT_SR_PTR)
 230   1                                                                              & (uint8)~USBFS_SIE_EP_INT_EP3_MAS
             -K);
 231   1      
 232   1              #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
 233   1                           USBFS_ISR_SERVICE_MIDI_OUT)
                          if(USBFS_midi_out_ep == USBFS_EP3)
                          {
                              USBFS_MIDI_OUT_EP_Service();
                          }
C51 COMPILER V9.51   USBFS_EPISR                                                           10/22/2015 22:07:38 PAGE 5   

                      #endif /*  USBFS_ISR_SERVICE_MIDI_OUT */
 239   1      
 240   1              /* `#START EP3_END_USER_CODE` Place your code here */
 241   1      
 242   1              /* `#END` */
 243   1      
 244   1              #ifdef USBFS_EP_3_ISR_EXIT_CALLBACK
                          USBFS_EP_3_ISR_ExitCallback();
                      #endif /* USBFS_EP_3_ISR_EXIT_CALLBACK */
 247   1      
 248   1              #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
 249   1                           USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          EA = int_en;
                      #endif /* CY_PSOC3 & USBFS_ISR_SERVICE_MIDI_OUT  */
 252   1          }
 253          
 254          #endif   /*  USBFS_EP3_ISR_REMOVE */
 255          
 256          
 257          #if(USBFS_EP4_ISR_REMOVE == 0u)
              
                  /*******************************************************************************
                  * Function Name: USBFS_EP_4_ISR
                  ********************************************************************************
                  *
                  * Summary:
                  *  Endpoint 4 Interrupt Service Routine
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  *******************************************************************************/
                  CY_ISR(USBFS_EP_4_ISR)
                  {
                      #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          uint8 int_en;
                      #endif /* CY_PSOC3 & USBFS_ISR_SERVICE_MIDI_OUT  */
              
                      #ifdef USBFS_EP_4_ISR_ENTRY_CALLBACK
                          USBFS_EP_4_ISR_EntryCallback();
                      #endif /* USBFS_EP_4_ISR_ENTRY_CALLBACK */
              
                      /* `#START EP4_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          int_en = EA;
                          CyGlobalIntEnable;  /* Make sure nested interrupt is enabled */
                      #endif /* CY_PSOC3 & USBFS_ISR_SERVICE_MIDI_OUT  */
              
                      CY_GET_REG8(USBFS_SIE_EP4_CR0_PTR); /* Must read the mode reg */
                      /* Do not toggle ISOC endpoint */
                      if((USBFS_EP[USBFS_EP4].attrib & USBFS_EP_TYPE_MASK) !=
                                                                                                  USBFS_EP_TYPE_ISOC)
                      {
                          USBFS_EP[USBFS_EP4].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
C51 COMPILER V9.51   USBFS_EPISR                                                           10/22/2015 22:07:38 PAGE 6   

                      }
                      USBFS_EP[USBFS_EP4].apiEpState = USBFS_EVENT_PENDING;
                      CY_SET_REG8(USBFS_SIE_EP_INT_SR_PTR, CY_GET_REG8(USBFS_SIE_EP_INT_SR_PTR)
                                                                                      & (uint8)~USBFS_SIE_EP_INT_EP4_MAS
             -K);
              
                      #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_ISR_SERVICE_MIDI_OUT)
                          if(USBFS_midi_out_ep == USBFS_EP4)
                          {
                              USBFS_MIDI_OUT_EP_Service();
                          }
                      #endif /*  USBFS_ISR_SERVICE_MIDI_OUT */
              
                      /* `#START EP4_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #ifdef USBFS_EP_4_ISR_EXIT_CALLBACK
                          USBFS_EP_4_ISR_ExitCallback();
                      #endif /* USBFS_EP_4_ISR_EXIT_CALLBACK */
              
                      #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          EA = int_en;
                      #endif /* CY_PSOC3 & USBFS_ISR_SERVICE_MIDI_OUT  */
                  }
              
              #endif   /*  USBFS_EP4_ISR_REMOVE */
 328          
 329          
 330          #if(USBFS_EP5_ISR_REMOVE == 0u)
              
                  /*******************************************************************************
                  * Function Name: USBFS_EP_5_ISR
                  ********************************************************************************
                  *
                  * Summary:
                  *  Endpoint 5 Interrupt Service Routine
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  *******************************************************************************/
                  CY_ISR(USBFS_EP_5_ISR)
                  {
                      #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          uint8 int_en;
                      #endif /* CY_PSOC3 & USBFS_ISR_SERVICE_MIDI_OUT  */
              
                      #ifdef USBFS_EP_5_ISR_ENTRY_CALLBACK
                          USBFS_EP_5_ISR_EntryCallback();
                      #endif /* USBFS_EP_5_ISR_ENTRY_CALLBACK */
              
                      /* `#START EP5_USER_CODE` Place your code here */
              
                      /* `#END` */
              
C51 COMPILER V9.51   USBFS_EPISR                                                           10/22/2015 22:07:38 PAGE 7   

                      #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          int_en = EA;
                          CyGlobalIntEnable;  /* Make sure nested interrupt is enabled */
                      #endif /* CY_PSOC3 & USBFS_ISR_SERVICE_MIDI_OUT  */
              
                      CY_GET_REG8(USBFS_SIE_EP5_CR0_PTR); /* Must read the mode reg */
                      /* Do not toggle ISOC endpoint */
                      if((USBFS_EP[USBFS_EP5].attrib & USBFS_EP_TYPE_MASK) !=
                                                                                                  USBFS_EP_TYPE_ISOC)
                      {
                          USBFS_EP[USBFS_EP5].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
                      }
                      USBFS_EP[USBFS_EP5].apiEpState = USBFS_EVENT_PENDING;
                      CY_SET_REG8(USBFS_SIE_EP_INT_SR_PTR, CY_GET_REG8(USBFS_SIE_EP_INT_SR_PTR)
                                                                                      & (uint8)~USBFS_SIE_EP_INT_EP5_MAS
             -K);
              
                      #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_ISR_SERVICE_MIDI_OUT)
                          if(USBFS_midi_out_ep == USBFS_EP5)
                          {
                              USBFS_MIDI_OUT_EP_Service();
                          }
                      #endif /*  USBFS_ISR_SERVICE_MIDI_OUT */
              
                      /* `#START EP5_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #ifdef USBFS_EP_5_ISR_EXIT_CALLBACK
                          USBFS_EP_5_ISR_ExitCallback();
                      #endif /* USBFS_EP_5_ISR_EXIT_CALLBACK */
              
                      #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          EA = int_en;
                      #endif /* CY_PSOC3 & USBFS_ISR_SERVICE_MIDI_OUT  */
                  }
              #endif   /*  USBFS_EP5_ISR_REMOVE */
 400          
 401          
 402          #if(USBFS_EP6_ISR_REMOVE == 0u)
              
                  /*******************************************************************************
                  * Function Name: USBFS_EP_6_ISR
                  ********************************************************************************
                  *
                  * Summary:
                  *  Endpoint 6 Interrupt Service Routine
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  *******************************************************************************/
                  CY_ISR(USBFS_EP_6_ISR)
                  {
                      #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
C51 COMPILER V9.51   USBFS_EPISR                                                           10/22/2015 22:07:38 PAGE 8   

                          uint8 int_en;
                      #endif /* CY_PSOC3 & USBFS_ISR_SERVICE_MIDI_OUT  */
              
                      #ifdef USBFS_EP_6_ISR_ENTRY_CALLBACK
                          USBFS_EP_6_ISR_EntryCallback();
                      #endif /* USBFS_EP_6_ISR_ENTRY_CALLBACK */
              
                      /* `#START EP6_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          int_en = EA;
                          CyGlobalIntEnable;  /* Make sure nested interrupt is enabled */
                      #endif /* CY_PSOC3 & USBFS_ISR_SERVICE_MIDI_OUT  */
              
                      CY_GET_REG8(USBFS_SIE_EP6_CR0_PTR); /* Must read the mode reg */
                      /* Do not toggle ISOC endpoint */
                      if((USBFS_EP[USBFS_EP6].attrib & USBFS_EP_TYPE_MASK) !=
                                                                                                  USBFS_EP_TYPE_ISOC)
                      {
                          USBFS_EP[USBFS_EP6].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
                      }
                      USBFS_EP[USBFS_EP6].apiEpState = USBFS_EVENT_PENDING;
                      CY_SET_REG8(USBFS_SIE_EP_INT_SR_PTR, CY_GET_REG8(USBFS_SIE_EP_INT_SR_PTR)
                                                                                      & (uint8)~USBFS_SIE_EP_INT_EP6_MAS
             -K);
              
                      #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_ISR_SERVICE_MIDI_OUT)
                          if(USBFS_midi_out_ep == USBFS_EP6)
                          {
                              USBFS_MIDI_OUT_EP_Service();
                          }
                      #endif /*  USBFS_ISR_SERVICE_MIDI_OUT  */
              
                      /* `#START EP6_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #ifdef USBFS_EP_6_ISR_EXIT_CALLBACK
                          USBFS_EP_6_ISR_ExitCallback();
                      #endif /* USBFS_EP_6_ISR_EXIT_CALLBACK */
              
                      #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          EA = int_en;
                      #endif /* CY_PSOC3 & USBFS_ISR_SERVICE_MIDI_OUT  */
                  }
              
              #endif   /*  USBFS_EP6_ISR_REMOVE */
 473          
 474          
 475          #if(USBFS_EP7_ISR_REMOVE == 0u)
              
                  /*******************************************************************************
                  * Function Name: USBFS_EP_7_ISR
                  ********************************************************************************
                  *
                  * Summary:
                  *  Endpoint 7 Interrupt Service Routine
C51 COMPILER V9.51   USBFS_EPISR                                                           10/22/2015 22:07:38 PAGE 9   

                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  *******************************************************************************/
                  CY_ISR(USBFS_EP_7_ISR)
                  {
                      #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          uint8 int_en;
                      #endif /* CY_PSOC3 & USBFS_ISR_SERVICE_MIDI_OUT  */
              
                      #ifdef USBFS_EP_7_ISR_ENTRY_CALLBACK
                          USBFS_EP_7_ISR_EntryCallback();
                      #endif /* USBFS_EP_7_ISR_ENTRY_CALLBACK */
              
                      /* `#START EP7_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          int_en = EA;
                          CyGlobalIntEnable;  /* Make sure nested interrupt is enabled */
                      #endif /* CY_PSOC3 & USBFS_ISR_SERVICE_MIDI_OUT  */
              
                      CY_GET_REG8(USBFS_SIE_EP7_CR0_PTR); /* Must read the mode reg */
                      /* Do not toggle ISOC endpoint */
                      if((USBFS_EP[USBFS_EP7].attrib & USBFS_EP_TYPE_MASK) !=
                                                                                                  USBFS_EP_TYPE_ISOC)
                      {
                          USBFS_EP[USBFS_EP7].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
                      }
                      USBFS_EP[USBFS_EP7].apiEpState = USBFS_EVENT_PENDING;
                      CY_SET_REG8(USBFS_SIE_EP_INT_SR_PTR, CY_GET_REG8(USBFS_SIE_EP_INT_SR_PTR)
                                                                                      & (uint8)~USBFS_SIE_EP_INT_EP7_MAS
             -K);
              
                      #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_ISR_SERVICE_MIDI_OUT)
                          if(USBFS_midi_out_ep == USBFS_EP7)
                          {
                              USBFS_MIDI_OUT_EP_Service();
                          }
                      #endif /*  USBFS_ISR_SERVICE_MIDI_OUT  */
              
                      /* `#START EP7_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #ifdef USBFS_EP_7_ISR_EXIT_CALLBACK
                          USBFS_EP_7_ISR_ExitCallback();
                      #endif /* USBFS_EP_7_ISR_EXIT_CALLBACK */
              
                      #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          EA = int_en;
                      #endif /* CY_PSOC3 & USBFS_ISR_SERVICE_MIDI_OUT  */
                  }
C51 COMPILER V9.51   USBFS_EPISR                                                           10/22/2015 22:07:38 PAGE 10  

              
              #endif   /*  USBFS_EP7_ISR_REMOVE */
 546          
 547          
 548          #if(USBFS_EP8_ISR_REMOVE == 0u)
              
                  /*******************************************************************************
                  * Function Name: USBFS_EP_8_ISR
                  ********************************************************************************
                  *
                  * Summary:
                  *  Endpoint 8 Interrupt Service Routine
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  *******************************************************************************/
                  CY_ISR(USBFS_EP_8_ISR)
                  {
                      #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          uint8 int_en;
                      #endif /* CY_PSOC3 & USBFS_ISR_SERVICE_MIDI_OUT  */
              
                      #ifdef USBFS_EP_8_ISR_ENTRY_CALLBACK
                          USBFS_EP_8_ISR_EntryCallback();
                      #endif /* USBFS_EP_8_ISR_ENTRY_CALLBACK */
              
                      /* `#START EP8_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                      #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          int_en = EA;
                          CyGlobalIntEnable;  /* Make sure nested interrupt is enabled */
                      #endif /* CY_PSOC3 & USBFS_ISR_SERVICE_MIDI_OUT  */
              
                      CY_GET_REG8(USBFS_SIE_EP8_CR0_PTR); /* Must read the mode reg */
                      /* Do not toggle ISOC endpoint */
                      if((USBFS_EP[USBFS_EP8].attrib & USBFS_EP_TYPE_MASK) !=
                                                                                                  USBFS_EP_TYPE_ISOC)
                      {
                          USBFS_EP[USBFS_EP8].epToggle ^= USBFS_EPX_CNT_DATA_TOGGLE;
                      }
                      USBFS_EP[USBFS_EP8].apiEpState = USBFS_EVENT_PENDING;
                      CY_SET_REG8(USBFS_SIE_EP_INT_SR_PTR, CY_GET_REG8(USBFS_SIE_EP_INT_SR_PTR)
                                                                                      & (uint8)~USBFS_SIE_EP_INT_EP8_MAS
             -K);
              
                      #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_ISR_SERVICE_MIDI_OUT)
                          if(USBFS_midi_out_ep == USBFS_EP8)
                          {
                              USBFS_MIDI_OUT_EP_Service();
                          }
                      #endif /*  USBFS_ISR_SERVICE_MIDI_OUT */
              
                      /* `#START EP8_END_USER_CODE` Place your code here */
C51 COMPILER V9.51   USBFS_EPISR                                                           10/22/2015 22:07:38 PAGE 11  

              
                      /* `#END` */
              
                      #ifdef USBFS_EP_8_ISR_EXIT_CALLBACK
                          USBFS_EP_8_ISR_ExitCallback();
                      #endif /* USBFS_EP_8_ISR_EXIT_CALLBACK */
              
                      #if (defined(USBFS_ENABLE_MIDI_STREAMING) && !defined(USBFS_MAIN_SERVICE_MIDI_OUT) && \
                                   USBFS_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                          EA = int_en;
                      #endif /* CY_PSOC3 & USBFS_ISR_SERVICE_MIDI_OUT  */
                  }
              
              #endif   /*  USBFS_EP8_ISR_REMOVE */
 619          
 620          
 621          /*******************************************************************************
 622          * Function Name: USBFS_SOF_ISR
 623          ********************************************************************************
 624          *
 625          * Summary:
 626          *  Start of Frame Interrupt Service Routine
 627          *
 628          * Parameters:
 629          *  None.
 630          *
 631          * Return:
 632          *  None.
 633          *
 634          *******************************************************************************/
 635          CY_ISR(USBFS_SOF_ISR)
 636          {
 637   1          #ifdef USBFS_SOF_ISR_INTERRUPT_CALLBACK
                      USBFS_SOF_ISR_InterruptCallback();
                  #endif /* USBFS_SOF_ISR_INTERRUPT_CALLBACK */
 640   1      
 641   1          /* `#START SOF_USER_CODE` Place your code here */
 642   1      
 643   1          /* `#END` */
 644   1      }
 645          
 646          
 647          /*******************************************************************************
 648          * Function Name: USBFS_BUS_RESET_ISR
 649          ********************************************************************************
 650          *
 651          * Summary:
 652          *  USB Bus Reset Interrupt Service Routine.  Calls _Start with the same
 653          *  parameters as the last USER call to _Start
 654          *
 655          * Parameters:
 656          *  None.
 657          *
 658          * Return:
 659          *  None.
 660          *
 661          *******************************************************************************/
 662          CY_ISR(USBFS_BUS_RESET_ISR)
 663          {
 664   1          #ifdef USBFS_BUS_RESET_ISR_ENTRY_CALLBACK
                      USBFS_BUS_RESET_ISR_EntryCallback();
                  #endif /* USBFS_BUS_RESET_ISR_ENTRY_CALLBACK */
C51 COMPILER V9.51   USBFS_EPISR                                                           10/22/2015 22:07:38 PAGE 12  

 667   1      
 668   1          /* `#START BUS_RESET_USER_CODE` Place your code here */
 669   1      
 670   1          /* `#END` */
 671   1      
 672   1          USBFS_ReInitComponent();
 673   1      
 674   1          #ifdef USBFS_BUS_RESET_ISR_EXIT_CALLBACK
                      USBFS_BUS_RESET_ISR_ExitCallback();
                  #endif /* USBFS_BUS_RESET_ISR_EXIT_CALLBACK */    
 677   1      }
 678          
 679          
 680          #if((USBFS_EP_MM != USBFS__EP_MANUAL) && (USBFS_ARB_ISR_REMOVE == 0u))
 681          
 682          
 683              /*******************************************************************************
 684              * Function Name: USBFS_ARB_ISR
 685              ********************************************************************************
 686              *
 687              * Summary:
 688              *  Arbiter Interrupt Service Routine
 689              *
 690              * Parameters:
 691              *  None.
 692              *
 693              * Return:
 694              *  None.
 695              *
 696              * Side effect:
 697              *  Search for EP8 int_status will be much slower than search for EP1 int_status.
 698              *
 699              *******************************************************************************/
 700              CY_ISR(USBFS_ARB_ISR)
 701              {
 702   1              uint8 int_status;
 703   1              uint8 ep_status;
 704   1              uint8 ep = USBFS_EP1;
 705   1              uint8 ptr = 0u;
 706   1      
 707   1              #ifdef USBFS_ARB_ISR_ENTRY_CALLBACK
                          USBFS_ARB_ISR_EntryCallback();
                      #endif /* USBFS_ARB_ISR_ENTRY_CALLBACK */
 710   1      
 711   1              /* `#START ARB_BEGIN_USER_CODE` Place your code here */
 712   1      
 713   1              /* `#END` */
 714   1      
 715   1              int_status = USBFS_ARB_INT_SR_REG;                   /* read Arbiter Status Register */
 716   1              USBFS_ARB_INT_SR_REG = int_status;                   /* Clear Serviced Interrupts */
 717   1      
 718   1              while(int_status != 0u)
 719   1              {
 720   2                  if((int_status & 1u) != 0u)  /* If EpX interrupt present */
 721   2                  {   /* read Endpoint Status Register */
 722   3                      ep_status  = CY_GET_REG8((reg8 *)(USBFS_ARB_EP1_SR_IND + ptr));
 723   3                      /* If In Buffer Full */
 724   3                      if((ep_status & USBFS_ARB_EPX_SR_IN_BUF_FULL) != 0u)
 725   3                      {
 726   4                          if((USBFS_EP[ep].addr & USBFS_DIR_IN) != 0u)
 727   4                          {
 728   5                              /* Clear Data ready status */
C51 COMPILER V9.51   USBFS_EPISR                                                           10/22/2015 22:07:38 PAGE 13  

 729   5                              *(reg8 *)(USBFS_ARB_EP1_CFG_IND + ptr) &=
 730   5                                                                          (uint8)~USBFS_ARB_EPX_CFG_IN_DATA_RDY;
 731   5                              #if((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u))
 732   5                                  /* Setup common area DMA with rest of the data */
 733   5                                  if(USBFS_inLength[ep] > USBFS_DMA_BYTES_PER_BURST)
 734   5                                  {
 735   6                                      USBFS_LoadNextInEP(ep, 0u);
 736   6                                  }
 737   5                                  else
 738   5                                  {
 739   6                                      USBFS_inBufFull[ep] = 1u;
 740   6                                  }
 741   5                              #endif /* ((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u)) */
 742   5                              /* Write the Mode register */
 743   5                              CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + ptr), USBFS_EP[ep].epMode);
 744   5                              #if (defined(USBFS_ENABLE_MIDI_STREAMING) && USBFS_ISR_SERVICE_MIDI_IN)
                                          if(ep == USBFS_midi_in_ep)
                                          {   /* Clear MIDI input pointer */
                                              USBFS_midiInPointer = 0u;
                                          }
                                      #endif /*  USBFS_ENABLE_MIDI_STREAMING*/
 750   5                          }
 751   4                      }
 752   3                      /* (re)arm Out EP only for mode2 */
 753   3                      #if(USBFS_EP_MM != USBFS__EP_DMAAUTO)
                                  /* If DMA Grant */
                                  if((ep_status & USBFS_ARB_EPX_SR_DMA_GNT) != 0u)
                                  {
                                      if((USBFS_EP[ep].addr & USBFS_DIR_IN) == 0u)
                                      {
                                              USBFS_EP[ep].apiEpState = USBFS_NO_EVENT_PENDING;
                                              /* Write the Mode register */
                                              CY_SET_REG8((reg8 *)(USBFS_SIE_EP1_CR0_IND + ptr),
                                                                                                  USBFS_EP[ep].epMode);
                                      }
                                  }
                              #endif /*  USBFS_EP_MM */
 766   3      
 767   3                      /* `#START ARB_USER_CODE` Place your code here for handle Buffer Underflow/Overflow */
 768   3      
 769   3                      /* `#END` */
 770   3      
 771   3                      #ifdef USBFS_ARB_ISR_CALLBACK
                                  USBFS_ARB_ISR_Callback();
                              #endif /* USBFS_ARB_ISR_CALLBACK */
 774   3      
 775   3                      CY_SET_REG8((reg8 *)(USBFS_ARB_EP1_SR_IND + ptr), ep_status);   /* Clear Serviced events *
             -/
 776   3                  }
 777   2                  ptr += USBFS_EPX_CNTX_ADDR_OFFSET;               /* prepare pointer for next EP */
 778   2                  ep++;
 779   2                  int_status >>= 1u;
 780   2              }
 781   1      
 782   1              /* `#START ARB_END_USER_CODE` Place your code here */
 783   1      
 784   1              /* `#END` */
 785   1      
 786   1              #ifdef USBFS_ARB_ISR_EXIT_CALLBACK
                          USBFS_ARB_ISR_ExitCallback();
                      #endif /* USBFS_ARB_ISR_EXIT_CALLBACK */
 789   1          }
C51 COMPILER V9.51   USBFS_EPISR                                                           10/22/2015 22:07:38 PAGE 14  

 790          
 791          #endif /*  USBFS_EP_MM */
 792          
 793          #if ((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u))
 794              /******************************************************************************
 795              * Function Name: USBFS_EP_DMA_DONE_ISR
 796              *******************************************************************************
 797              *
 798              * Summary:
 799              *  Endpoint 1 DMA Done Interrupt Service Routine
 800              *
 801              * Parameters:
 802              *  None.
 803              *
 804              * Return:
 805              *  None.
 806              *
 807              ******************************************************************************/
 808              CY_ISR(USBFS_EP_DMA_DONE_ISR)
 809              {
 810   1              uint8 int8Status;
 811   1              uint8 int17Status;
 812   1              uint8 ep_status;
 813   1              uint8 ep = USBFS_EP1;
 814   1              uint8 ptr = 0u;
 815   1      
 816   1              #ifdef USBFS_EP_DMA_DONE_ISR_ENTRY_CALLBACK
                          USBFS_EP_DMA_DONE_ISR_EntryCallback();
                      #endif /* USBFS_EP_DMA_DONE_ISR_ENTRY_CALLBACK */
 819   1      
 820   1              /* `#START EP_DMA_DONE_BEGIN_USER_CODE` Place your code here */
 821   1      
 822   1              /* `#END` */
 823   1      
 824   1              /* Read clear on read status register with the EP source of interrupt */
 825   1              int17Status = USBFS_EP17_DMA_Done_SR_Read() & USBFS_EP17_SR_MASK;
 826   1              int8Status = USBFS_EP8_DMA_Done_SR_Read() & USBFS_EP8_SR_MASK;
 827   1      
 828   1              while(int8Status != 0u)
 829   1              {
 830   2                  while(int17Status != 0u)
 831   2                  {
 832   3                      if((int17Status & 1u) != 0u)  /* If EpX interrupt present */
 833   3                      {
 834   4                          /* Read Endpoint Status Register */
 835   4                          ep_status = CY_GET_REG8((reg8 *)(USBFS_ARB_EP1_SR_IND + ptr));
 836   4                          if( ((ep_status & USBFS_ARB_EPX_SR_IN_BUF_FULL) == 0u) &&
 837   4                              (USBFS_inBufFull[ep] == 0u))
 838   4                          {
 839   5                              /* `#START EP_DMA_DONE_USER_CODE` Place your code here */
 840   5      
 841   5                              /* `#END` */
 842   5      
 843   5                              #ifdef USBFS_EP_DMA_DONE_ISR_CALLBACK
                                          USBFS_EP_DMA_DONE_ISR_Callback();
                                      #endif /* USBFS_EP_DMA_DONE_ISR_CALLBACK */
 846   5      
 847   5                              CY_SET_REG8((reg8 *)(USBFS_ARB_RW1_WA_MSB_IND + ptr), 0x00u);
 848   5                              /* repeat 2 last bytes to prefetch endpoint area */
 849   5                              CY_SET_REG8((reg8 *)(USBFS_ARB_RW1_WA_IND + ptr),
 850   5                                          USBFS_DMA_BYTES_PER_BURST * ep - USBFS_DMA_BYTES_REPEAT);
 851   5                              USBFS_LoadNextInEP(ep, 1);
C51 COMPILER V9.51   USBFS_EPISR                                                           10/22/2015 22:07:38 PAGE 15  

 852   5                              /* Set Data ready status, This will generate DMA request */
 853   5                              * (reg8 *)(USBFS_ARB_EP1_CFG_IND + ptr) |= USBFS_ARB_EPX_CFG_IN_DATA_RDY;
 854   5                          }
 855   4                      }
 856   3                      ptr += USBFS_EPX_CNTX_ADDR_OFFSET;               /* prepare pointer for next EP */
 857   3                      ep++;
 858   3                      int17Status >>= 1u;
 859   3                  }
 860   2                  int8Status >>= 1u;
 861   2                  if(int8Status != 0u)
 862   2                  {
 863   3                      /* Prepare pointer for EP8 */
 864   3                      ptr = ((USBFS_EP8 - USBFS_EP1) << USBFS_EPX_CNTX_ADDR_SHIFT);
 865   3                      ep = USBFS_EP8;
 866   3                      int17Status = int8Status & 0x01u;
 867   3                  }
 868   2              }
 869   1      
 870   1              /* `#START EP_DMA_DONE_END_USER_CODE` Place your code here */
 871   1      
 872   1              /* `#END` */
 873   1      
 874   1              #ifdef USBFS_EP_DMA_DONE_ISR_EXIT_CALLBACK
                          USBFS_EP_DMA_DONE_ISR_ExitCallback();
                      #endif /* USBFS_EP_DMA_DONE_ISR_EXIT_CALLBACK */
 877   1          }
 878          #endif /* ((USBFS_EP_MM == USBFS__EP_DMAAUTO) && (USBFS_EP_DMA_AUTO_OPT == 0u)) */
 879          
 880          
 881          /* [] END OF FILE */
C51 COMPILER V9.51   USBFS_EPISR                                                           10/22/2015 22:07:38 PAGE 16  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION USBFS_EP_2_ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
0006 C085              PUSH    DPH1
0008 C084              PUSH    DPL1
000A C086              PUSH    DPS
000C 758600            MOV     DPS,#00H
000F C000        E     PUSH    ?C?XPAGE1SFR
0011 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0014 C0D0              PUSH    PSW
0016 75D000            MOV     PSW,#00H
0019 C007              PUSH    AR7
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 148
001B 90601E            MOV     DPTR,#0601EH
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
                                           ; SOURCE LINE # 150
0020 900000      E     MOV     DPTR,#USBFS_EP+016H
0023 E0                MOVX    A,@DPTR
0024 5403              ANL     A,#03H
0026 6401              XRL     A,#01H
0028 6007              JZ      ?C0001
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 153
002A 900000      E     MOV     DPTR,#USBFS_EP+019H
002D E0                MOVX    A,@DPTR
002E 6480              XRL     A,#080H
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
0031         ?C0001:
                                           ; SOURCE LINE # 155
0031 900000      E     MOV     DPTR,#USBFS_EP+017H
0034 7401              MOV     A,#01H
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 157
0037 90600B            MOV     DPTR,#0600BH
003A E0                MOVX    A,@DPTR
003B 54FD              ANL     A,#0FDH
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 179
003E D007              POP     AR7
0040 D0D0              POP     PSW
0042 D000        E     POP     ?C?XPAGE1SFR
0044 D086              POP     DPS
0046 D084              POP     DPL1
0048 D085              POP     DPH1
004A D082              POP     DPL
004C D083              POP     DPH
004E D0E0              POP     ACC
0050 32                RETI    
             ; FUNCTION USBFS_EP_2_ISR (END)

             ; FUNCTION USBFS_EP_3_ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
0006 C085              PUSH    DPH1
C51 COMPILER V9.51   USBFS_EPISR                                                           10/22/2015 22:07:38 PAGE 17  

0008 C084              PUSH    DPL1
000A C086              PUSH    DPS
000C 758600            MOV     DPS,#00H
000F C000        E     PUSH    ?C?XPAGE1SFR
0011 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0014 C0D0              PUSH    PSW
0016 75D000            MOV     PSW,#00H
0019 C007              PUSH    AR7
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 221
001B 90602E            MOV     DPTR,#0602EH
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
                                           ; SOURCE LINE # 223
0020 900000      E     MOV     DPTR,#USBFS_EP+021H
0023 E0                MOVX    A,@DPTR
0024 5403              ANL     A,#03H
0026 6401              XRL     A,#01H
0028 6007              JZ      ?C0003
                                           ; SOURCE LINE # 225
                                           ; SOURCE LINE # 226
002A 900000      E     MOV     DPTR,#USBFS_EP+024H
002D E0                MOVX    A,@DPTR
002E 6480              XRL     A,#080H
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 227
0031         ?C0003:
                                           ; SOURCE LINE # 228
0031 900000      E     MOV     DPTR,#USBFS_EP+022H
0034 7401              MOV     A,#01H
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 230
0037 90600B            MOV     DPTR,#0600BH
003A E0                MOVX    A,@DPTR
003B 54FB              ANL     A,#0FBH
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 252
003E D007              POP     AR7
0040 D0D0              POP     PSW
0042 D000        E     POP     ?C?XPAGE1SFR
0044 D086              POP     DPS
0046 D084              POP     DPL1
0048 D085              POP     DPH1
004A D082              POP     DPL
004C D083              POP     DPH
004E D0E0              POP     ACC
0050 32                RETI    
             ; FUNCTION USBFS_EP_3_ISR (END)

             ; FUNCTION USBFS_SOF_ISR (BEGIN)
                                           ; SOURCE LINE # 635
                                           ; SOURCE LINE # 644
0000 32                RETI    
             ; FUNCTION USBFS_SOF_ISR (END)

             ; FUNCTION USBFS_BUS_RESET_ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
C51 COMPILER V9.51   USBFS_EPISR                                                           10/22/2015 22:07:38 PAGE 18  

000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 662
                                           ; SOURCE LINE # 672
002B 120000      E     LCALL   USBFS_ReInitComponent
                                           ; SOURCE LINE # 677
002E D007              POP     AR7
0030 D006              POP     AR6
0032 D005              POP     AR5
0034 D004              POP     AR4
0036 D003              POP     AR3
0038 D002              POP     AR2
003A D001              POP     AR1
003C D000              POP     AR0
003E D0D0              POP     PSW
0040 D000        E     POP     ?C?XPAGE1SFR
0042 D086              POP     DPS
0044 D084              POP     DPL1
0046 D085              POP     DPH1
0048 D082              POP     DPL
004A D083              POP     DPH
004C D0F0              POP     B
004E D0E0              POP     ACC
0050 32                RETI    
             ; FUNCTION USBFS_BUS_RESET_ISR (END)

             ; FUNCTION USBFS_ARB_ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 700
                                           ; SOURCE LINE # 704
002B 900000      R     MOV     DPTR,#ep
C51 COMPILER V9.51   USBFS_EPISR                                                           10/22/2015 22:07:38 PAGE 19  

002E 7401              MOV     A,#01H
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 705
0031 A3                INC     DPTR
0032 E4                CLR     A
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 715
0034 90609F            MOV     DPTR,#0609FH
0037 E0                MOVX    A,@DPTR
0038 900000      R     MOV     DPTR,#int_status
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 716
003C E0                MOVX    A,@DPTR
003D 90609F            MOV     DPTR,#0609FH
0040 F0                MOVX    @DPTR,A
0041         ?C0007:
                                           ; SOURCE LINE # 718
0041 900000      R     MOV     DPTR,#int_status
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 7003              JNZ     $ + 5H
0048 020000      R     LJMP    ?C0014
                                           ; SOURCE LINE # 719
                                           ; SOURCE LINE # 720
004B 5401              ANL     A,#01H
004D 7003              JNZ     $ + 5H
004F 020000      R     LJMP    ?C0009
                                           ; SOURCE LINE # 721
                                           ; SOURCE LINE # 722
0052 900000      R     MOV     DPTR,#ptr
0055 E0                MOVX    A,@DPTR
0056 FF                MOV     R7,A
0057 7E00              MOV     R6,#00H
0059 2482              ADD     A,#082H
005B FD                MOV     R5,A
005C EE                MOV     A,R6
005D 3460              ADDC    A,#060H
005F 8D82              MOV     DPL,R5
0061 F583              MOV     DPH,A
0063 E0                MOVX    A,@DPTR
0064 900000      R     MOV     DPTR,#ep_status
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 724
0068 E0                MOVX    A,@DPTR
0069 5401              ANL     A,#01H
006B 607B              JZ      ?C0010
                                           ; SOURCE LINE # 725
                                           ; SOURCE LINE # 726
006D A3                INC     DPTR
006E E0                MOVX    A,@DPTR
006F FD                MOV     R5,A
0070 75F00B            MOV     B,#0BH
0073 A4                MUL     AB
0074 2400        E     ADD     A,#LOW USBFS_EP+04H
0076 F582              MOV     DPL,A
0078 E4                CLR     A
0079 3400        E     ADDC    A,#HIGH USBFS_EP+04H
007B F583              MOV     DPH,A
007D E0                MOVX    A,@DPTR
007E 5480              ANL     A,#080H
0080 6066              JZ      ?C0010
                                           ; SOURCE LINE # 727
C51 COMPILER V9.51   USBFS_EPISR                                                           10/22/2015 22:07:38 PAGE 20  

                                           ; SOURCE LINE # 730
0082 EF                MOV     A,R7
0083 2480              ADD     A,#080H
0085 FF                MOV     R7,A
0086 EE                MOV     A,R6
0087 3460              ADDC    A,#060H
0089 8F82              MOV     DPL,R7
008B F583              MOV     DPH,A
008D E0                MOVX    A,@DPTR
008E 54FE              ANL     A,#0FEH
0090 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 733
0091 ED                MOV     A,R5
0092 25E0              ADD     A,ACC
0094 2400        E     ADD     A,#LOW USBFS_inLength
0096 F582              MOV     DPL,A
0098 E4                CLR     A
0099 3400        E     ADDC    A,#HIGH USBFS_inLength
009B F583              MOV     DPH,A
009D E0                MOVX    A,@DPTR
009E FE                MOV     R6,A
009F A3                INC     DPTR
00A0 E0                MOVX    A,@DPTR
00A1 D3                SETB    C
00A2 9420              SUBB    A,#020H
00A4 EE                MOV     A,R6
00A5 9400              SUBB    A,#00H
00A7 400C              JC      ?C0012
                                           ; SOURCE LINE # 734
                                           ; SOURCE LINE # 735
00A9 900000      R     MOV     DPTR,#ep
00AC E0                MOVX    A,@DPTR
00AD FF                MOV     R7,A
00AE E4                CLR     A
00AF FD                MOV     R5,A
00B0 120000      E     LCALL   _USBFS_LoadNextInEP
                                           ; SOURCE LINE # 736
00B3 8010              SJMP    ?C0013
00B5         ?C0012:
                                           ; SOURCE LINE # 738
                                           ; SOURCE LINE # 739
00B5 900000      R     MOV     DPTR,#ep
00B8 E0                MOVX    A,@DPTR
00B9 2400        E     ADD     A,#LOW USBFS_inBufFull
00BB F582              MOV     DPL,A
00BD E4                CLR     A
00BE 3400        E     ADDC    A,#HIGH USBFS_inBufFull
00C0 F583              MOV     DPH,A
00C2 7401              MOV     A,#01H
00C4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 740
00C5         ?C0013:
                                           ; SOURCE LINE # 743
00C5 900000      R     MOV     DPTR,#ep
00C8 E0                MOVX    A,@DPTR
00C9 75F00B            MOV     B,#0BH
00CC A4                MUL     AB
00CD 2400        E     ADD     A,#LOW USBFS_EP+05H
00CF F582              MOV     DPL,A
00D1 E4                CLR     A
00D2 3400        E     ADDC    A,#HIGH USBFS_EP+05H
00D4 F583              MOV     DPH,A
C51 COMPILER V9.51   USBFS_EPISR                                                           10/22/2015 22:07:38 PAGE 21  

00D6 E0                MOVX    A,@DPTR
00D7 FF                MOV     R7,A
00D8 900000      R     MOV     DPTR,#ptr
00DB E0                MOVX    A,@DPTR
00DC 240E              ADD     A,#0EH
00DE FD                MOV     R5,A
00DF E4                CLR     A
00E0 3460              ADDC    A,#060H
00E2 8D82              MOV     DPL,R5
00E4 F583              MOV     DPH,A
00E6 EF                MOV     A,R7
00E7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 750
                                           ; SOURCE LINE # 751
00E8         ?C0010:
                                           ; SOURCE LINE # 775
00E8 900000      R     MOV     DPTR,#ep_status
00EB E0                MOVX    A,@DPTR
00EC FF                MOV     R7,A
00ED 900000      R     MOV     DPTR,#ptr
00F0 E0                MOVX    A,@DPTR
00F1 2482              ADD     A,#082H
00F3 FD                MOV     R5,A
00F4 E4                CLR     A
00F5 3460              ADDC    A,#060H
00F7 8D82              MOV     DPL,R5
00F9 F583              MOV     DPH,A
00FB EF                MOV     A,R7
00FC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 776
00FD         ?C0009:
                                           ; SOURCE LINE # 777
00FD 900000      R     MOV     DPTR,#ptr
0100 E0                MOVX    A,@DPTR
0101 2410              ADD     A,#010H
0103 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 778
0104 900000      R     MOV     DPTR,#ep
0107 E0                MOVX    A,@DPTR
0108 04                INC     A
0109 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 779
010A 900000      R     MOV     DPTR,#int_status
010D E0                MOVX    A,@DPTR
010E FF                MOV     R7,A
010F C3                CLR     C
0110 13                RRC     A
0111 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 780
0112 020000      R     LJMP    ?C0007
                                           ; SOURCE LINE # 789
0115         ?C0014:
0115 D007              POP     AR7
0117 D006              POP     AR6
0119 D005              POP     AR5
011B D004              POP     AR4
011D D003              POP     AR3
011F D002              POP     AR2
0121 D001              POP     AR1
0123 D000              POP     AR0
0125 D0D0              POP     PSW
0127 D000        E     POP     ?C?XPAGE1SFR
C51 COMPILER V9.51   USBFS_EPISR                                                           10/22/2015 22:07:38 PAGE 22  

0129 D086              POP     DPS
012B D084              POP     DPL1
012D D085              POP     DPH1
012F D082              POP     DPL
0131 D083              POP     DPH
0133 D0F0              POP     B
0135 D0E0              POP     ACC
0137 32                RETI    
             ; FUNCTION USBFS_ARB_ISR (END)

             ; FUNCTION USBFS_EP_DMA_DONE_ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 808
                                           ; SOURCE LINE # 813
002B 900000      R     MOV     DPTR,#ep
002E 7401              MOV     A,#01H
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 814
0031 A3                INC     DPTR
0032 E4                CLR     A
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 825
0034 120000      E     LCALL   USBFS_EP17_DMA_Done_SR_Read
0037 EF                MOV     A,R7
0038 547F              ANL     A,#07FH
003A 900000      R     MOV     DPTR,#int17Status
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 826
003E 120000      E     LCALL   USBFS_EP8_DMA_Done_SR_Read
0041 EF                MOV     A,R7
0042 5403              ANL     A,#03H
0044 900000      R     MOV     DPTR,#int8Status
0047 F0                MOVX    @DPTR,A
0048         ?C0015:
                                           ; SOURCE LINE # 828
0048 900000      R     MOV     DPTR,#int8Status
004B E0                MOVX    A,@DPTR
004C 7003              JNZ     $ + 5H
004E 020000      R     LJMP    ?C0022
                                           ; SOURCE LINE # 829
0051         ?C0017:
                                           ; SOURCE LINE # 830
0051 900000      R     MOV     DPTR,#int17Status
C51 COMPILER V9.51   USBFS_EPISR                                                           10/22/2015 22:07:38 PAGE 23  

0054 E0                MOVX    A,@DPTR
0055 FF                MOV     R7,A
0056 607D              JZ      ?C0018
                                           ; SOURCE LINE # 831
                                           ; SOURCE LINE # 832
0058 5401              ANL     A,#01H
005A 6061              JZ      ?C0019
                                           ; SOURCE LINE # 833
                                           ; SOURCE LINE # 835
005C 900000      R     MOV     DPTR,#ptr
005F E0                MOVX    A,@DPTR
0060 FD                MOV     R5,A
0061 7C00              MOV     R4,#00H
0063 2482              ADD     A,#082H
0065 FF                MOV     R7,A
0066 EC                MOV     A,R4
0067 3460              ADDC    A,#060H
0069 8F82              MOV     DPL,R7
006B F583              MOV     DPH,A
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
;---- Variable 'ep_status' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 836
006F 5401              ANL     A,#01H
0071 704A              JNZ     ?C0019
0073 900000      R     MOV     DPTR,#ep
0076 E0                MOVX    A,@DPTR
0077 FF                MOV     R7,A
0078 2400        E     ADD     A,#LOW USBFS_inBufFull
007A F582              MOV     DPL,A
007C E4                CLR     A
007D 3400        E     ADDC    A,#HIGH USBFS_inBufFull
007F F583              MOV     DPH,A
0081 E0                MOVX    A,@DPTR
0082 7039              JNZ     ?C0019
                                           ; SOURCE LINE # 838
                                           ; SOURCE LINE # 847
0084 ED                MOV     A,R5
0085 2485              ADD     A,#085H
0087 FB                MOV     R3,A
0088 EC                MOV     A,R4
0089 3460              ADDC    A,#060H
008B 8B82              MOV     DPL,R3
008D F583              MOV     DPH,A
008F E4                CLR     A
0090 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 850
0091 EF                MOV     A,R7
0092 C4                SWAP    A
0093 33                RLC     A
0094 54E0              ANL     A,#0E0H
0096 24FE              ADD     A,#0FEH
0098 FE                MOV     R6,A
0099 ED                MOV     A,R5
009A 2484              ADD     A,#084H
009C FD                MOV     R5,A
009D EC                MOV     A,R4
009E 3460              ADDC    A,#060H
00A0 8D82              MOV     DPL,R5
00A2 F583              MOV     DPH,A
00A4 EE                MOV     A,R6
00A5 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   USBFS_EPISR                                                           10/22/2015 22:07:38 PAGE 24  

                                           ; SOURCE LINE # 851
00A6 7D01              MOV     R5,#01H
00A8 120000      E     LCALL   _USBFS_LoadNextInEP
                                           ; SOURCE LINE # 853
00AB 900000      R     MOV     DPTR,#ptr
00AE E0                MOVX    A,@DPTR
00AF 2480              ADD     A,#080H
00B1 FF                MOV     R7,A
00B2 E4                CLR     A
00B3 3460              ADDC    A,#060H
00B5 8F82              MOV     DPL,R7
00B7 F583              MOV     DPH,A
00B9 E0                MOVX    A,@DPTR
00BA 4401              ORL     A,#01H
00BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 854
                                           ; SOURCE LINE # 855
00BD         ?C0019:
                                           ; SOURCE LINE # 856
00BD 900000      R     MOV     DPTR,#ptr
00C0 E0                MOVX    A,@DPTR
00C1 2410              ADD     A,#010H
00C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 857
00C4 900000      R     MOV     DPTR,#ep
00C7 E0                MOVX    A,@DPTR
00C8 04                INC     A
00C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 858
00CA 900000      R     MOV     DPTR,#int17Status
00CD E0                MOVX    A,@DPTR
00CE FF                MOV     R7,A
00CF C3                CLR     C
00D0 13                RRC     A
00D1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 859
00D2 020000      R     LJMP    ?C0017
00D5         ?C0018:
                                           ; SOURCE LINE # 860
00D5 900000      R     MOV     DPTR,#int8Status
00D8 E0                MOVX    A,@DPTR
00D9 FF                MOV     R7,A
00DA C3                CLR     C
00DB 13                RRC     A
00DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 861
00DD 7003              JNZ     $ + 5H
00DF 020000      R     LJMP    ?C0015
                                           ; SOURCE LINE # 862
                                           ; SOURCE LINE # 864
00E2 900000      R     MOV     DPTR,#ptr
00E5 7470              MOV     A,#070H
00E7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 865
00E8 900000      R     MOV     DPTR,#ep
00EB 7408              MOV     A,#08H
00ED F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 866
00EE 900000      R     MOV     DPTR,#int8Status
00F1 E0                MOVX    A,@DPTR
00F2 5401              ANL     A,#01H
00F4 A3                INC     DPTR
C51 COMPILER V9.51   USBFS_EPISR                                                           10/22/2015 22:07:38 PAGE 25  

00F5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 867
                                           ; SOURCE LINE # 868
00F6 020000      R     LJMP    ?C0015
                                           ; SOURCE LINE # 877
00F9         ?C0022:
00F9 D007              POP     AR7
00FB D006              POP     AR6
00FD D005              POP     AR5
00FF D004              POP     AR4
0101 D003              POP     AR3
0103 D002              POP     AR2
0105 D001              POP     AR1
0107 D000              POP     AR0
0109 D0D0              POP     PSW
010B D000        E     POP     ?C?XPAGE1SFR
010D D086              POP     DPS
010F D084              POP     DPL1
0111 D085              POP     DPH1
0113 D082              POP     DPL
0115 D083              POP     DPH
0117 D0F0              POP     B
0119 D0E0              POP     ACC
011B 32                RETI    
             ; FUNCTION USBFS_EP_DMA_DONE_ISR (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    840    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
